/*
	 *  Q data type usage
	 *
	 *  1) Get some integer data values from the sensor/ADC, for example
	 *
	 *  2) Convert the integers to floats, and scale data to be between -1 and +1
	 *
	 *  3) Convert the data to desired Q data type and do your DSP stuff with it
	 *
	 *	4) Convert the post-processed Q data back to floating point
	 *
	 *	5) Convert the floating point data back to integers
	 *
	 *	6) Compare the original data from Step 1) with the data in Step 5)
	 *
	 *
 */

#include "stm32f4xx.h"
#include <stdio.h>
#include "signals.h"
#include "uart.h"
#include "FreeRTOS.h"
#include "task.h"

extern float _5hz_signal[HZ_5_SIG_LEN];
extern float32_t input_signal_f32_1kHz_15kHz[KHZ1_15_SIG_LEN] ;
float g_in_sig_sample;


static void fpu_enable(void);

#define BLOCK_SIZE		5


//  Here is some initial, fictitious sensor/ADC data - integers
uint32_t src_sensor_data[BLOCK_SIZE] = {2043, 1023, 990, 67, 3013};

//  Here is the scaled sensor/ADC data in floating point
float32_t f32_sensor_data[BLOCK_SIZE];

//  Here is the initial sensor/ADC data in Q format
q31_t q31_sensor_data[BLOCK_SIZE];

//  Here is the final sensor/ADC data converted back to floating point
float32_t f32_final_sensor_data[BLOCK_SIZE];

//  Here is the final sensor/ADC data converted back to integers
uint32_t u32_final_sensor_data[BLOCK_SIZE];

int main(void)
{
	// Enable FPU
	fpu_enable();

	// Initialize the UART
	uart2_tx_init();

	/*  Scale ADC values from -1 to +1 */
	/*  Convert float 32 to q  */
	/*  Do some DSP in fixed point */
	/*  Convert q to float point  */
	/*  COnvert float to integer  */


	while(1)
	{
			// swv_plot_signal();
			// serial_plot_signal();
	}


} // End of main


/*

// Function to plot using the SWV
static void swv_plot_signal(void)
{
	for(int i = 0; i < KHZ1_15_SIG_LEN; i++)
	{
		g_in_sig_sample = input_signal_f32_1kHz_15kHz[i];
		pseudo_dly(9000);
	}
}

// Function to plot using the serial port
static void serial_plot_signal(void)
{
	for(int i = 0; i < KHZ1_15_SIG_LEN; i++)
	{
		printf("%f\r\n", input_signal_f32_1kHz_15kHz[i]);
		pseudo_dly(9000);
	}
}


static void pseudo_dly(int dly)
{
	for(int i = 0; i < dly; i++){}
}

*/

static void fpu_enable(void)
{
	// Enable FPU - Set bits 20, 21, 22, 23 to "1" - See page 264 of Cortex-M4 Devices Users Guide
	SCB->CPACR |= ((3UL << 20) | (3UL << 22));
}









