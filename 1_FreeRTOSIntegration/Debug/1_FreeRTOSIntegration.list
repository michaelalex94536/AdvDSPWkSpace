
1_FreeRTOSIntegration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006754  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  080068f8  080068f8  000078f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d3c  08006d3c  000081d8  2**0
                  CONTENTS
  4 .ARM          00000008  08006d3c  08006d3c  00007d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d44  08006d44  000081d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d44  08006d44  00007d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d48  08006d48  00007d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08006d4c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ec8  200001d8  08006f24  000081d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040a0  08006f24  000090a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003f82  00000000  00000000  00008208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f47  00000000  00000000  0000c18a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000490  00000000  00000000  0000d0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000360  00000000  00000000  0000d568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ed7c  00000000  00000000  0000d8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000057e3  00000000  00000000  0001c644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ccb4  00000000  00000000  00021e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0007eadb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025f4  00000000  00000000  0007eb20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00081114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080068dc 	.word	0x080068dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	080068dc 	.word	0x080068dc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f103 0208 	add.w	r2, r3, #8
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f103 0208 	add.w	r2, r3, #8
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f103 0208 	add.w	r2, r3, #8
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b085      	sub	sp, #20
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
 8000d66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	68fa      	ldr	r2, [r7, #12]
 8000d72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	683a      	ldr	r2, [r7, #0]
 8000d82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	1c5a      	adds	r2, r3, #1
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	601a      	str	r2, [r3, #0]
}
 8000d9a:	bf00      	nop
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000da6:	b480      	push	{r7}
 8000da8:	b085      	sub	sp, #20
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	691b      	ldr	r3, [r3, #16]
 8000db2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	6892      	ldr	r2, [r2, #8]
 8000dbc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	6852      	ldr	r2, [r2, #4]
 8000dc6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d103      	bne.n	8000dda <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689a      	ldr	r2, [r3, #8]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	1e5a      	subs	r2, r3, #1
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681b      	ldr	r3, [r3, #0]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b08c      	sub	sp, #48	@ 0x30
 8000dfe:	af04      	add	r7, sp, #16
 8000e00:	60f8      	str	r0, [r7, #12]
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	603b      	str	r3, [r7, #0]
 8000e06:	4613      	mov	r3, r2
 8000e08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000e0a:	88fb      	ldrh	r3, [r7, #6]
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 fe02 	bl	8001a18 <pvPortMalloc>
 8000e14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d00e      	beq.n	8000e3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000e1c:	205c      	movs	r0, #92	@ 0x5c
 8000e1e:	f000 fdfb 	bl	8001a18 <pvPortMalloc>
 8000e22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e30:	e005      	b.n	8000e3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000e32:	6978      	ldr	r0, [r7, #20]
 8000e34:	f000 febe 	bl	8001bb4 <vPortFree>
 8000e38:	e001      	b.n	8000e3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d013      	beq.n	8000e6c <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000e44:	88fa      	ldrh	r2, [r7, #6]
 8000e46:	2300      	movs	r3, #0
 8000e48:	9303      	str	r3, [sp, #12]
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	9302      	str	r3, [sp, #8]
 8000e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e50:	9301      	str	r3, [sp, #4]
 8000e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f000 f80e 	bl	8000e7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000e60:	69f8      	ldr	r0, [r7, #28]
 8000e62:	f000 f89b 	bl	8000f9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000e66:	2301      	movs	r3, #1
 8000e68:	61bb      	str	r3, [r7, #24]
 8000e6a:	e002      	b.n	8000e72 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000e6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e70:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000e72:	69bb      	ldr	r3, [r7, #24]
	}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3720      	adds	r7, #32
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e8c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	461a      	mov	r2, r3
 8000e94:	21a5      	movs	r1, #165	@ 0xa5
 8000e96:	f002 ff9d 	bl	8003dd4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4413      	add	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	f023 0307 	bic.w	r3, r3, #7
 8000eb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d00b      	beq.n	8000ed6 <prvInitialiseNewTask+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ec2:	f383 8811 	msr	BASEPRI, r3
 8000ec6:	f3bf 8f6f 	isb	sy
 8000eca:	f3bf 8f4f 	dsb	sy
 8000ece:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	e7fd      	b.n	8000ed2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d01f      	beq.n	8000f1c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
 8000ee0:	e012      	b.n	8000f08 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	7819      	ldrb	r1, [r3, #0]
 8000eea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	4413      	add	r3, r2
 8000ef0:	3334      	adds	r3, #52	@ 0x34
 8000ef2:	460a      	mov	r2, r1
 8000ef4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	4413      	add	r3, r2
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d006      	beq.n	8000f10 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3301      	adds	r3, #1
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	2b0f      	cmp	r3, #15
 8000f0c:	d9e9      	bls.n	8000ee2 <prvInitialiseNewTask+0x66>
 8000f0e:	e000      	b.n	8000f12 <prvInitialiseNewTask+0x96>
			{
				break;
 8000f10:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8000f1a:	e003      	b.n	8000f24 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d901      	bls.n	8000f2e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000f2a:	2306      	movs	r3, #6
 8000f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f32:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f38:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8000f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f42:	3304      	adds	r3, #4
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fefd 	bl	8000d44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f4c:	3318      	adds	r3, #24
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fef8 	bl	8000d44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f58:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f5c:	f1c3 0207 	rsb	r2, r3, #7
 8000f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f62:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f68:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	68f9      	ldr	r1, [r7, #12]
 8000f7c:	69b8      	ldr	r0, [r7, #24]
 8000f7e:	f000 fb3b 	bl	80015f8 <pxPortInitialiseStack>
 8000f82:	4602      	mov	r2, r0
 8000f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f86:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8000f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d002      	beq.n	8000f94 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000f94:	bf00      	nop
 8000f96:	3720      	adds	r7, #32
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000fa4:	f000 fc58 	bl	8001858 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000fa8:	4b2c      	ldr	r3, [pc, #176]	@ (800105c <prvAddNewTaskToReadyList+0xc0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	4a2b      	ldr	r2, [pc, #172]	@ (800105c <prvAddNewTaskToReadyList+0xc0>)
 8000fb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000fb2:	4b2b      	ldr	r3, [pc, #172]	@ (8001060 <prvAddNewTaskToReadyList+0xc4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d109      	bne.n	8000fce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000fba:	4a29      	ldr	r2, [pc, #164]	@ (8001060 <prvAddNewTaskToReadyList+0xc4>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000fc0:	4b26      	ldr	r3, [pc, #152]	@ (800105c <prvAddNewTaskToReadyList+0xc0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d110      	bne.n	8000fea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000fc8:	f000 fa78 	bl	80014bc <prvInitialiseTaskLists>
 8000fcc:	e00d      	b.n	8000fea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000fce:	4b25      	ldr	r3, [pc, #148]	@ (8001064 <prvAddNewTaskToReadyList+0xc8>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d109      	bne.n	8000fea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000fd6:	4b22      	ldr	r3, [pc, #136]	@ (8001060 <prvAddNewTaskToReadyList+0xc4>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d802      	bhi.n	8000fea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000fe4:	4a1e      	ldr	r2, [pc, #120]	@ (8001060 <prvAddNewTaskToReadyList+0xc4>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000fea:	4b1f      	ldr	r3, [pc, #124]	@ (8001068 <prvAddNewTaskToReadyList+0xcc>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8001068 <prvAddNewTaskToReadyList+0xcc>)
 8000ff2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8001068 <prvAddNewTaskToReadyList+0xcc>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001000:	2201      	movs	r2, #1
 8001002:	409a      	lsls	r2, r3
 8001004:	4b19      	ldr	r3, [pc, #100]	@ (800106c <prvAddNewTaskToReadyList+0xd0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4313      	orrs	r3, r2
 800100a:	4a18      	ldr	r2, [pc, #96]	@ (800106c <prvAddNewTaskToReadyList+0xd0>)
 800100c:	6013      	str	r3, [r2, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001012:	4613      	mov	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4a15      	ldr	r2, [pc, #84]	@ (8001070 <prvAddNewTaskToReadyList+0xd4>)
 800101c:	441a      	add	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3304      	adds	r3, #4
 8001022:	4619      	mov	r1, r3
 8001024:	4610      	mov	r0, r2
 8001026:	f7ff fe9a 	bl	8000d5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800102a:	f000 fc47 	bl	80018bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800102e:	4b0d      	ldr	r3, [pc, #52]	@ (8001064 <prvAddNewTaskToReadyList+0xc8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00e      	beq.n	8001054 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001036:	4b0a      	ldr	r3, [pc, #40]	@ (8001060 <prvAddNewTaskToReadyList+0xc4>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001040:	429a      	cmp	r2, r3
 8001042:	d207      	bcs.n	8001054 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001044:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <prvAddNewTaskToReadyList+0xd8>)
 8001046:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	f3bf 8f4f 	dsb	sy
 8001050:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200002f4 	.word	0x200002f4
 8001060:	200001f4 	.word	0x200001f4
 8001064:	20000300 	.word	0x20000300
 8001068:	20000310 	.word	0x20000310
 800106c:	200002fc 	.word	0x200002fc
 8001070:	200001f8 	.word	0x200001f8
 8001074:	e000ed04 	.word	0xe000ed04

08001078 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800107e:	4b1c      	ldr	r3, [pc, #112]	@ (80010f0 <vTaskStartScheduler+0x78>)
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	2300      	movs	r3, #0
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2300      	movs	r3, #0
 8001088:	2280      	movs	r2, #128	@ 0x80
 800108a:	491a      	ldr	r1, [pc, #104]	@ (80010f4 <vTaskStartScheduler+0x7c>)
 800108c:	481a      	ldr	r0, [pc, #104]	@ (80010f8 <vTaskStartScheduler+0x80>)
 800108e:	f7ff feb4 	bl	8000dfa <xTaskCreate>
 8001092:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d116      	bne.n	80010c8 <vTaskStartScheduler+0x50>
	__asm volatile
 800109a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800109e:	f383 8811 	msr	BASEPRI, r3
 80010a2:	f3bf 8f6f 	isb	sy
 80010a6:	f3bf 8f4f 	dsb	sy
 80010aa:	60bb      	str	r3, [r7, #8]
}
 80010ac:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80010ae:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <vTaskStartScheduler+0x84>)
 80010b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80010b6:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <vTaskStartScheduler+0x88>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80010bc:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <vTaskStartScheduler+0x8c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80010c2:	f000 fb25 	bl	8001710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80010c6:	e00f      	b.n	80010e8 <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010ce:	d10b      	bne.n	80010e8 <vTaskStartScheduler+0x70>
	__asm volatile
 80010d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010d4:	f383 8811 	msr	BASEPRI, r3
 80010d8:	f3bf 8f6f 	isb	sy
 80010dc:	f3bf 8f4f 	dsb	sy
 80010e0:	607b      	str	r3, [r7, #4]
}
 80010e2:	bf00      	nop
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <vTaskStartScheduler+0x6c>
}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000318 	.word	0x20000318
 80010f4:	080068f8 	.word	0x080068f8
 80010f8:	0800148d 	.word	0x0800148d
 80010fc:	20000314 	.word	0x20000314
 8001100:	20000300 	.word	0x20000300
 8001104:	200002f8 	.word	0x200002f8

08001108 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800110c:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <vTaskSuspendAll+0x18>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	3301      	adds	r3, #1
 8001112:	4a03      	ldr	r2, [pc, #12]	@ (8001120 <vTaskSuspendAll+0x18>)
 8001114:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	2000031c 	.word	0x2000031c

08001124 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001132:	4b42      	ldr	r3, [pc, #264]	@ (800123c <xTaskResumeAll+0x118>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10b      	bne.n	8001152 <xTaskResumeAll+0x2e>
	__asm volatile
 800113a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800113e:	f383 8811 	msr	BASEPRI, r3
 8001142:	f3bf 8f6f 	isb	sy
 8001146:	f3bf 8f4f 	dsb	sy
 800114a:	603b      	str	r3, [r7, #0]
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	e7fd      	b.n	800114e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001152:	f000 fb81 	bl	8001858 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001156:	4b39      	ldr	r3, [pc, #228]	@ (800123c <xTaskResumeAll+0x118>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	3b01      	subs	r3, #1
 800115c:	4a37      	ldr	r2, [pc, #220]	@ (800123c <xTaskResumeAll+0x118>)
 800115e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001160:	4b36      	ldr	r3, [pc, #216]	@ (800123c <xTaskResumeAll+0x118>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d161      	bne.n	800122c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001168:	4b35      	ldr	r3, [pc, #212]	@ (8001240 <xTaskResumeAll+0x11c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d05d      	beq.n	800122c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001170:	e02e      	b.n	80011d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001172:	4b34      	ldr	r3, [pc, #208]	@ (8001244 <xTaskResumeAll+0x120>)
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	3318      	adds	r3, #24
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fe11 	bl	8000da6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	3304      	adds	r3, #4
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fe0c 	bl	8000da6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001192:	2201      	movs	r2, #1
 8001194:	409a      	lsls	r2, r3
 8001196:	4b2c      	ldr	r3, [pc, #176]	@ (8001248 <xTaskResumeAll+0x124>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4313      	orrs	r3, r2
 800119c:	4a2a      	ldr	r2, [pc, #168]	@ (8001248 <xTaskResumeAll+0x124>)
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4a27      	ldr	r2, [pc, #156]	@ (800124c <xTaskResumeAll+0x128>)
 80011ae:	441a      	add	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	3304      	adds	r3, #4
 80011b4:	4619      	mov	r1, r3
 80011b6:	4610      	mov	r0, r2
 80011b8:	f7ff fdd1 	bl	8000d5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011c0:	4b23      	ldr	r3, [pc, #140]	@ (8001250 <xTaskResumeAll+0x12c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d302      	bcc.n	80011d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80011ca:	4b22      	ldr	r3, [pc, #136]	@ (8001254 <xTaskResumeAll+0x130>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80011d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001244 <xTaskResumeAll+0x120>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1cc      	bne.n	8001172 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80011de:	f000 f9eb 	bl	80015b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80011e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001258 <xTaskResumeAll+0x134>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d010      	beq.n	8001210 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80011ee:	f000 f837 	bl	8001260 <xTaskIncrementTick>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80011f8:	4b16      	ldr	r3, [pc, #88]	@ (8001254 <xTaskResumeAll+0x130>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3b01      	subs	r3, #1
 8001202:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f1      	bne.n	80011ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800120a:	4b13      	ldr	r3, [pc, #76]	@ (8001258 <xTaskResumeAll+0x134>)
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001210:	4b10      	ldr	r3, [pc, #64]	@ (8001254 <xTaskResumeAll+0x130>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d009      	beq.n	800122c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001218:	2301      	movs	r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800121c:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <xTaskResumeAll+0x138>)
 800121e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	f3bf 8f4f 	dsb	sy
 8001228:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800122c:	f000 fb46 	bl	80018bc <vPortExitCritical>

	return xAlreadyYielded;
 8001230:	68bb      	ldr	r3, [r7, #8]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000031c 	.word	0x2000031c
 8001240:	200002f4 	.word	0x200002f4
 8001244:	200002b4 	.word	0x200002b4
 8001248:	200002fc 	.word	0x200002fc
 800124c:	200001f8 	.word	0x200001f8
 8001250:	200001f4 	.word	0x200001f4
 8001254:	20000308 	.word	0x20000308
 8001258:	20000304 	.word	0x20000304
 800125c:	e000ed04 	.word	0xe000ed04

08001260 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800126a:	4b4f      	ldr	r3, [pc, #316]	@ (80013a8 <xTaskIncrementTick+0x148>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	f040 808f 	bne.w	8001392 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001274:	4b4d      	ldr	r3, [pc, #308]	@ (80013ac <xTaskIncrementTick+0x14c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	3301      	adds	r3, #1
 800127a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800127c:	4a4b      	ldr	r2, [pc, #300]	@ (80013ac <xTaskIncrementTick+0x14c>)
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d121      	bne.n	80012cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8001288:	4b49      	ldr	r3, [pc, #292]	@ (80013b0 <xTaskIncrementTick+0x150>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00b      	beq.n	80012aa <xTaskIncrementTick+0x4a>
	__asm volatile
 8001292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001296:	f383 8811 	msr	BASEPRI, r3
 800129a:	f3bf 8f6f 	isb	sy
 800129e:	f3bf 8f4f 	dsb	sy
 80012a2:	603b      	str	r3, [r7, #0]
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	e7fd      	b.n	80012a6 <xTaskIncrementTick+0x46>
 80012aa:	4b41      	ldr	r3, [pc, #260]	@ (80013b0 <xTaskIncrementTick+0x150>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	4b40      	ldr	r3, [pc, #256]	@ (80013b4 <xTaskIncrementTick+0x154>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a3e      	ldr	r2, [pc, #248]	@ (80013b0 <xTaskIncrementTick+0x150>)
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	4a3e      	ldr	r2, [pc, #248]	@ (80013b4 <xTaskIncrementTick+0x154>)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	4b3e      	ldr	r3, [pc, #248]	@ (80013b8 <xTaskIncrementTick+0x158>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	3301      	adds	r3, #1
 80012c4:	4a3c      	ldr	r2, [pc, #240]	@ (80013b8 <xTaskIncrementTick+0x158>)
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	f000 f976 	bl	80015b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80012cc:	4b3b      	ldr	r3, [pc, #236]	@ (80013bc <xTaskIncrementTick+0x15c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d348      	bcc.n	8001368 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80012d6:	4b36      	ldr	r3, [pc, #216]	@ (80013b0 <xTaskIncrementTick+0x150>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d104      	bne.n	80012ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80012e0:	4b36      	ldr	r3, [pc, #216]	@ (80013bc <xTaskIncrementTick+0x15c>)
 80012e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012e6:	601a      	str	r2, [r3, #0]
					break;
 80012e8:	e03e      	b.n	8001368 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80012ea:	4b31      	ldr	r3, [pc, #196]	@ (80013b0 <xTaskIncrementTick+0x150>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d203      	bcs.n	800130a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001302:	4a2e      	ldr	r2, [pc, #184]	@ (80013bc <xTaskIncrementTick+0x15c>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001308:	e02e      	b.n	8001368 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	3304      	adds	r3, #4
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fd49 	bl	8000da6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001318:	2b00      	cmp	r3, #0
 800131a:	d004      	beq.n	8001326 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	3318      	adds	r3, #24
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fd40 	bl	8000da6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800132a:	2201      	movs	r2, #1
 800132c:	409a      	lsls	r2, r3
 800132e:	4b24      	ldr	r3, [pc, #144]	@ (80013c0 <xTaskIncrementTick+0x160>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4313      	orrs	r3, r2
 8001334:	4a22      	ldr	r2, [pc, #136]	@ (80013c0 <xTaskIncrementTick+0x160>)
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800133c:	4613      	mov	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4a1f      	ldr	r2, [pc, #124]	@ (80013c4 <xTaskIncrementTick+0x164>)
 8001346:	441a      	add	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	3304      	adds	r3, #4
 800134c:	4619      	mov	r1, r3
 800134e:	4610      	mov	r0, r2
 8001350:	f7ff fd05 	bl	8000d5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001358:	4b1b      	ldr	r3, [pc, #108]	@ (80013c8 <xTaskIncrementTick+0x168>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800135e:	429a      	cmp	r2, r3
 8001360:	d3b9      	bcc.n	80012d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8001362:	2301      	movs	r3, #1
 8001364:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001366:	e7b6      	b.n	80012d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001368:	4b17      	ldr	r3, [pc, #92]	@ (80013c8 <xTaskIncrementTick+0x168>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800136e:	4915      	ldr	r1, [pc, #84]	@ (80013c4 <xTaskIncrementTick+0x164>)
 8001370:	4613      	mov	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d901      	bls.n	8001384 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8001380:	2301      	movs	r3, #1
 8001382:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001384:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <xTaskIncrementTick+0x16c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d007      	beq.n	800139c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800138c:	2301      	movs	r3, #1
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	e004      	b.n	800139c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001392:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <xTaskIncrementTick+0x170>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	3301      	adds	r3, #1
 8001398:	4a0d      	ldr	r2, [pc, #52]	@ (80013d0 <xTaskIncrementTick+0x170>)
 800139a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800139c:	697b      	ldr	r3, [r7, #20]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	2000031c 	.word	0x2000031c
 80013ac:	200002f8 	.word	0x200002f8
 80013b0:	200002ac 	.word	0x200002ac
 80013b4:	200002b0 	.word	0x200002b0
 80013b8:	2000030c 	.word	0x2000030c
 80013bc:	20000314 	.word	0x20000314
 80013c0:	200002fc 	.word	0x200002fc
 80013c4:	200001f8 	.word	0x200001f8
 80013c8:	200001f4 	.word	0x200001f4
 80013cc:	20000308 	.word	0x20000308
 80013d0:	20000304 	.word	0x20000304

080013d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80013d4:	b480      	push	{r7}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80013da:	4b27      	ldr	r3, [pc, #156]	@ (8001478 <vTaskSwitchContext+0xa4>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80013e2:	4b26      	ldr	r3, [pc, #152]	@ (800147c <vTaskSwitchContext+0xa8>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80013e8:	e040      	b.n	800146c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80013ea:	4b24      	ldr	r3, [pc, #144]	@ (800147c <vTaskSwitchContext+0xa8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013f0:	4b23      	ldr	r3, [pc, #140]	@ (8001480 <vTaskSwitchContext+0xac>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	fab3 f383 	clz	r3, r3
 80013fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80013fe:	7afb      	ldrb	r3, [r7, #11]
 8001400:	f1c3 031f 	rsb	r3, r3, #31
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	491f      	ldr	r1, [pc, #124]	@ (8001484 <vTaskSwitchContext+0xb0>)
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	4613      	mov	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	440b      	add	r3, r1
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10b      	bne.n	8001432 <vTaskSwitchContext+0x5e>
	__asm volatile
 800141a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800141e:	f383 8811 	msr	BASEPRI, r3
 8001422:	f3bf 8f6f 	isb	sy
 8001426:	f3bf 8f4f 	dsb	sy
 800142a:	607b      	str	r3, [r7, #4]
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	e7fd      	b.n	800142e <vTaskSwitchContext+0x5a>
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4a11      	ldr	r2, [pc, #68]	@ (8001484 <vTaskSwitchContext+0xb0>)
 800143e:	4413      	add	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	3308      	adds	r3, #8
 8001454:	429a      	cmp	r2, r3
 8001456:	d104      	bne.n	8001462 <vTaskSwitchContext+0x8e>
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	4a07      	ldr	r2, [pc, #28]	@ (8001488 <vTaskSwitchContext+0xb4>)
 800146a:	6013      	str	r3, [r2, #0]
}
 800146c:	bf00      	nop
 800146e:	371c      	adds	r7, #28
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	2000031c 	.word	0x2000031c
 800147c:	20000308 	.word	0x20000308
 8001480:	200002fc 	.word	0x200002fc
 8001484:	200001f8 	.word	0x200001f8
 8001488:	200001f4 	.word	0x200001f4

0800148c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001494:	f000 f852 	bl	800153c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001498:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <prvIdleTask+0x28>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d9f9      	bls.n	8001494 <prvIdleTask+0x8>
			{
				taskYIELD();
 80014a0:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <prvIdleTask+0x2c>)
 80014a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	f3bf 8f4f 	dsb	sy
 80014ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80014b0:	e7f0      	b.n	8001494 <prvIdleTask+0x8>
 80014b2:	bf00      	nop
 80014b4:	200001f8 	.word	0x200001f8
 80014b8:	e000ed04 	.word	0xe000ed04

080014bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	e00c      	b.n	80014e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4a12      	ldr	r2, [pc, #72]	@ (800151c <prvInitialiseTaskLists+0x60>)
 80014d4:	4413      	add	r3, r2
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fc14 	bl	8000d04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3301      	adds	r3, #1
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b06      	cmp	r3, #6
 80014e6:	d9ef      	bls.n	80014c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80014e8:	480d      	ldr	r0, [pc, #52]	@ (8001520 <prvInitialiseTaskLists+0x64>)
 80014ea:	f7ff fc0b 	bl	8000d04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80014ee:	480d      	ldr	r0, [pc, #52]	@ (8001524 <prvInitialiseTaskLists+0x68>)
 80014f0:	f7ff fc08 	bl	8000d04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80014f4:	480c      	ldr	r0, [pc, #48]	@ (8001528 <prvInitialiseTaskLists+0x6c>)
 80014f6:	f7ff fc05 	bl	8000d04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80014fa:	480c      	ldr	r0, [pc, #48]	@ (800152c <prvInitialiseTaskLists+0x70>)
 80014fc:	f7ff fc02 	bl	8000d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001500:	480b      	ldr	r0, [pc, #44]	@ (8001530 <prvInitialiseTaskLists+0x74>)
 8001502:	f7ff fbff 	bl	8000d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001506:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <prvInitialiseTaskLists+0x78>)
 8001508:	4a05      	ldr	r2, [pc, #20]	@ (8001520 <prvInitialiseTaskLists+0x64>)
 800150a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800150c:	4b0a      	ldr	r3, [pc, #40]	@ (8001538 <prvInitialiseTaskLists+0x7c>)
 800150e:	4a05      	ldr	r2, [pc, #20]	@ (8001524 <prvInitialiseTaskLists+0x68>)
 8001510:	601a      	str	r2, [r3, #0]
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200001f8 	.word	0x200001f8
 8001520:	20000284 	.word	0x20000284
 8001524:	20000298 	.word	0x20000298
 8001528:	200002b4 	.word	0x200002b4
 800152c:	200002c8 	.word	0x200002c8
 8001530:	200002e0 	.word	0x200002e0
 8001534:	200002ac 	.word	0x200002ac
 8001538:	200002b0 	.word	0x200002b0

0800153c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001542:	e019      	b.n	8001578 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001544:	f000 f988 	bl	8001858 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001548:	4b10      	ldr	r3, [pc, #64]	@ (800158c <prvCheckTasksWaitingTermination+0x50>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3304      	adds	r3, #4
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fc26 	bl	8000da6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800155a:	4b0d      	ldr	r3, [pc, #52]	@ (8001590 <prvCheckTasksWaitingTermination+0x54>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	3b01      	subs	r3, #1
 8001560:	4a0b      	ldr	r2, [pc, #44]	@ (8001590 <prvCheckTasksWaitingTermination+0x54>)
 8001562:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001564:	4b0b      	ldr	r3, [pc, #44]	@ (8001594 <prvCheckTasksWaitingTermination+0x58>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	3b01      	subs	r3, #1
 800156a:	4a0a      	ldr	r2, [pc, #40]	@ (8001594 <prvCheckTasksWaitingTermination+0x58>)
 800156c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800156e:	f000 f9a5 	bl	80018bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 f810 	bl	8001598 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001578:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <prvCheckTasksWaitingTermination+0x58>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1e1      	bne.n	8001544 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200002c8 	.word	0x200002c8
 8001590:	200002f4 	.word	0x200002f4
 8001594:	200002dc 	.word	0x200002dc

08001598 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 fb05 	bl	8001bb4 <vPortFree>
			vPortFree( pxTCB );
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 fb02 	bl	8001bb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80015be:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <prvResetNextTaskUnblockTime+0x38>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d104      	bne.n	80015d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80015c8:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <prvResetNextTaskUnblockTime+0x3c>)
 80015ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80015d0:	e008      	b.n	80015e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015d2:	4b07      	ldr	r3, [pc, #28]	@ (80015f0 <prvResetNextTaskUnblockTime+0x38>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	4a04      	ldr	r2, [pc, #16]	@ (80015f4 <prvResetNextTaskUnblockTime+0x3c>)
 80015e2:	6013      	str	r3, [r2, #0]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	200002ac 	.word	0x200002ac
 80015f4:	20000314 	.word	0x20000314

080015f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	3b04      	subs	r3, #4
 8001608:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001610:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3b04      	subs	r3, #4
 8001616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	f023 0201 	bic.w	r2, r3, #1
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	3b04      	subs	r3, #4
 8001626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001628:	4a0c      	ldr	r2, [pc, #48]	@ (800165c <pxPortInitialiseStack+0x64>)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	3b14      	subs	r3, #20
 8001632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	3b04      	subs	r3, #4
 800163e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f06f 0202 	mvn.w	r2, #2
 8001646:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	3b20      	subs	r3, #32
 800164c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800164e:	68fb      	ldr	r3, [r7, #12]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	08001661 	.word	0x08001661

08001660 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800166a:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <prvTaskExitError+0x58>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001672:	d00b      	beq.n	800168c <prvTaskExitError+0x2c>
	__asm volatile
 8001674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001678:	f383 8811 	msr	BASEPRI, r3
 800167c:	f3bf 8f6f 	isb	sy
 8001680:	f3bf 8f4f 	dsb	sy
 8001684:	60fb      	str	r3, [r7, #12]
}
 8001686:	bf00      	nop
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <prvTaskExitError+0x28>
	__asm volatile
 800168c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001690:	f383 8811 	msr	BASEPRI, r3
 8001694:	f3bf 8f6f 	isb	sy
 8001698:	f3bf 8f4f 	dsb	sy
 800169c:	60bb      	str	r3, [r7, #8]
}
 800169e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80016a0:	bf00      	nop
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0fc      	beq.n	80016a2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	20000000 	.word	0x20000000
 80016bc:	00000000 	.word	0x00000000

080016c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80016c0:	4b07      	ldr	r3, [pc, #28]	@ (80016e0 <pxCurrentTCBConst2>)
 80016c2:	6819      	ldr	r1, [r3, #0]
 80016c4:	6808      	ldr	r0, [r1, #0]
 80016c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016ca:	f380 8809 	msr	PSP, r0
 80016ce:	f3bf 8f6f 	isb	sy
 80016d2:	f04f 0000 	mov.w	r0, #0
 80016d6:	f380 8811 	msr	BASEPRI, r0
 80016da:	4770      	bx	lr
 80016dc:	f3af 8000 	nop.w

080016e0 <pxCurrentTCBConst2>:
 80016e0:	200001f4 	.word	0x200001f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80016e4:	bf00      	nop
 80016e6:	bf00      	nop

080016e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80016e8:	4808      	ldr	r0, [pc, #32]	@ (800170c <prvPortStartFirstTask+0x24>)
 80016ea:	6800      	ldr	r0, [r0, #0]
 80016ec:	6800      	ldr	r0, [r0, #0]
 80016ee:	f380 8808 	msr	MSP, r0
 80016f2:	f04f 0000 	mov.w	r0, #0
 80016f6:	f380 8814 	msr	CONTROL, r0
 80016fa:	b662      	cpsie	i
 80016fc:	b661      	cpsie	f
 80016fe:	f3bf 8f4f 	dsb	sy
 8001702:	f3bf 8f6f 	isb	sy
 8001706:	df00      	svc	0
 8001708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800170a:	bf00      	nop
 800170c:	e000ed08 	.word	0xe000ed08

08001710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001716:	4b47      	ldr	r3, [pc, #284]	@ (8001834 <xPortStartScheduler+0x124>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a47      	ldr	r2, [pc, #284]	@ (8001838 <xPortStartScheduler+0x128>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d10b      	bne.n	8001738 <xPortStartScheduler+0x28>
	__asm volatile
 8001720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001724:	f383 8811 	msr	BASEPRI, r3
 8001728:	f3bf 8f6f 	isb	sy
 800172c:	f3bf 8f4f 	dsb	sy
 8001730:	613b      	str	r3, [r7, #16]
}
 8001732:	bf00      	nop
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001738:	4b3e      	ldr	r3, [pc, #248]	@ (8001834 <xPortStartScheduler+0x124>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a3f      	ldr	r2, [pc, #252]	@ (800183c <xPortStartScheduler+0x12c>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d10b      	bne.n	800175a <xPortStartScheduler+0x4a>
	__asm volatile
 8001742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001746:	f383 8811 	msr	BASEPRI, r3
 800174a:	f3bf 8f6f 	isb	sy
 800174e:	f3bf 8f4f 	dsb	sy
 8001752:	60fb      	str	r3, [r7, #12]
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	e7fd      	b.n	8001756 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800175a:	4b39      	ldr	r3, [pc, #228]	@ (8001840 <xPortStartScheduler+0x130>)
 800175c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	22ff      	movs	r2, #255	@ 0xff
 800176a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001774:	78fb      	ldrb	r3, [r7, #3]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800177c:	b2da      	uxtb	r2, r3
 800177e:	4b31      	ldr	r3, [pc, #196]	@ (8001844 <xPortStartScheduler+0x134>)
 8001780:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001782:	4b31      	ldr	r3, [pc, #196]	@ (8001848 <xPortStartScheduler+0x138>)
 8001784:	2207      	movs	r2, #7
 8001786:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001788:	e009      	b.n	800179e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800178a:	4b2f      	ldr	r3, [pc, #188]	@ (8001848 <xPortStartScheduler+0x138>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	3b01      	subs	r3, #1
 8001790:	4a2d      	ldr	r2, [pc, #180]	@ (8001848 <xPortStartScheduler+0x138>)
 8001792:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001794:	78fb      	ldrb	r3, [r7, #3]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	b2db      	uxtb	r3, r3
 800179c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800179e:	78fb      	ldrb	r3, [r7, #3]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017a6:	2b80      	cmp	r3, #128	@ 0x80
 80017a8:	d0ef      	beq.n	800178a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80017aa:	4b27      	ldr	r3, [pc, #156]	@ (8001848 <xPortStartScheduler+0x138>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f1c3 0307 	rsb	r3, r3, #7
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	d00b      	beq.n	80017ce <xPortStartScheduler+0xbe>
	__asm volatile
 80017b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017ba:	f383 8811 	msr	BASEPRI, r3
 80017be:	f3bf 8f6f 	isb	sy
 80017c2:	f3bf 8f4f 	dsb	sy
 80017c6:	60bb      	str	r3, [r7, #8]
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	e7fd      	b.n	80017ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80017ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001848 <xPortStartScheduler+0x138>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	021b      	lsls	r3, r3, #8
 80017d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001848 <xPortStartScheduler+0x138>)
 80017d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80017d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001848 <xPortStartScheduler+0x138>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80017e0:	4a19      	ldr	r2, [pc, #100]	@ (8001848 <xPortStartScheduler+0x138>)
 80017e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80017ec:	4b17      	ldr	r3, [pc, #92]	@ (800184c <xPortStartScheduler+0x13c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a16      	ldr	r2, [pc, #88]	@ (800184c <xPortStartScheduler+0x13c>)
 80017f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80017f8:	4b14      	ldr	r3, [pc, #80]	@ (800184c <xPortStartScheduler+0x13c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a13      	ldr	r2, [pc, #76]	@ (800184c <xPortStartScheduler+0x13c>)
 80017fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8001802:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001804:	f000 f8da 	bl	80019bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001808:	4b11      	ldr	r3, [pc, #68]	@ (8001850 <xPortStartScheduler+0x140>)
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800180e:	f000 f8f9 	bl	8001a04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001812:	4b10      	ldr	r3, [pc, #64]	@ (8001854 <xPortStartScheduler+0x144>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a0f      	ldr	r2, [pc, #60]	@ (8001854 <xPortStartScheduler+0x144>)
 8001818:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800181c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800181e:	f7ff ff63 	bl	80016e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8001822:	f7ff fdd7 	bl	80013d4 <vTaskSwitchContext>
	prvTaskExitError();
 8001826:	f7ff ff1b 	bl	8001660 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	e000ed00 	.word	0xe000ed00
 8001838:	410fc271 	.word	0x410fc271
 800183c:	410fc270 	.word	0x410fc270
 8001840:	e000e400 	.word	0xe000e400
 8001844:	20000320 	.word	0x20000320
 8001848:	20000324 	.word	0x20000324
 800184c:	e000ed20 	.word	0xe000ed20
 8001850:	20000000 	.word	0x20000000
 8001854:	e000ef34 	.word	0xe000ef34

08001858 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
	__asm volatile
 800185e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001862:	f383 8811 	msr	BASEPRI, r3
 8001866:	f3bf 8f6f 	isb	sy
 800186a:	f3bf 8f4f 	dsb	sy
 800186e:	607b      	str	r3, [r7, #4]
}
 8001870:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001872:	4b10      	ldr	r3, [pc, #64]	@ (80018b4 <vPortEnterCritical+0x5c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	3301      	adds	r3, #1
 8001878:	4a0e      	ldr	r2, [pc, #56]	@ (80018b4 <vPortEnterCritical+0x5c>)
 800187a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800187c:	4b0d      	ldr	r3, [pc, #52]	@ (80018b4 <vPortEnterCritical+0x5c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d110      	bne.n	80018a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001884:	4b0c      	ldr	r3, [pc, #48]	@ (80018b8 <vPortEnterCritical+0x60>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00b      	beq.n	80018a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800188e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001892:	f383 8811 	msr	BASEPRI, r3
 8001896:	f3bf 8f6f 	isb	sy
 800189a:	f3bf 8f4f 	dsb	sy
 800189e:	603b      	str	r3, [r7, #0]
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	e7fd      	b.n	80018a2 <vPortEnterCritical+0x4a>
	}
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000000 	.word	0x20000000
 80018b8:	e000ed04 	.word	0xe000ed04

080018bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80018c2:	4b12      	ldr	r3, [pc, #72]	@ (800190c <vPortExitCritical+0x50>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10b      	bne.n	80018e2 <vPortExitCritical+0x26>
	__asm volatile
 80018ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018ce:	f383 8811 	msr	BASEPRI, r3
 80018d2:	f3bf 8f6f 	isb	sy
 80018d6:	f3bf 8f4f 	dsb	sy
 80018da:	607b      	str	r3, [r7, #4]
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	e7fd      	b.n	80018de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80018e2:	4b0a      	ldr	r3, [pc, #40]	@ (800190c <vPortExitCritical+0x50>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	4a08      	ldr	r2, [pc, #32]	@ (800190c <vPortExitCritical+0x50>)
 80018ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80018ec:	4b07      	ldr	r3, [pc, #28]	@ (800190c <vPortExitCritical+0x50>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d105      	bne.n	8001900 <vPortExitCritical+0x44>
 80018f4:	2300      	movs	r3, #0
 80018f6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80018fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	20000000 	.word	0x20000000

08001910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001910:	f3ef 8009 	mrs	r0, PSP
 8001914:	f3bf 8f6f 	isb	sy
 8001918:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <pxCurrentTCBConst>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	f01e 0f10 	tst.w	lr, #16
 8001920:	bf08      	it	eq
 8001922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800192a:	6010      	str	r0, [r2, #0]
 800192c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001930:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8001934:	f380 8811 	msr	BASEPRI, r0
 8001938:	f3bf 8f4f 	dsb	sy
 800193c:	f3bf 8f6f 	isb	sy
 8001940:	f7ff fd48 	bl	80013d4 <vTaskSwitchContext>
 8001944:	f04f 0000 	mov.w	r0, #0
 8001948:	f380 8811 	msr	BASEPRI, r0
 800194c:	bc09      	pop	{r0, r3}
 800194e:	6819      	ldr	r1, [r3, #0]
 8001950:	6808      	ldr	r0, [r1, #0]
 8001952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001956:	f01e 0f10 	tst.w	lr, #16
 800195a:	bf08      	it	eq
 800195c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001960:	f380 8809 	msr	PSP, r0
 8001964:	f3bf 8f6f 	isb	sy
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	f3af 8000 	nop.w

08001970 <pxCurrentTCBConst>:
 8001970:	200001f4 	.word	0x200001f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop

08001978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
	__asm volatile
 800197e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001982:	f383 8811 	msr	BASEPRI, r3
 8001986:	f3bf 8f6f 	isb	sy
 800198a:	f3bf 8f4f 	dsb	sy
 800198e:	607b      	str	r3, [r7, #4]
}
 8001990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001992:	f7ff fc65 	bl	8001260 <xTaskIncrementTick>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <SysTick_Handler+0x40>)
 800199e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	2300      	movs	r3, #0
 80019a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	f383 8811 	msr	BASEPRI, r3
}
 80019ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	e000ed04 	.word	0xe000ed04

080019bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80019c0:	4b0b      	ldr	r3, [pc, #44]	@ (80019f0 <vPortSetupTimerInterrupt+0x34>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80019c6:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <vPortSetupTimerInterrupt+0x38>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80019cc:	4b0a      	ldr	r3, [pc, #40]	@ (80019f8 <vPortSetupTimerInterrupt+0x3c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0a      	ldr	r2, [pc, #40]	@ (80019fc <vPortSetupTimerInterrupt+0x40>)
 80019d2:	fba2 2303 	umull	r2, r3, r2, r3
 80019d6:	099b      	lsrs	r3, r3, #6
 80019d8:	4a09      	ldr	r2, [pc, #36]	@ (8001a00 <vPortSetupTimerInterrupt+0x44>)
 80019da:	3b01      	subs	r3, #1
 80019dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80019de:	4b04      	ldr	r3, [pc, #16]	@ (80019f0 <vPortSetupTimerInterrupt+0x34>)
 80019e0:	2207      	movs	r2, #7
 80019e2:	601a      	str	r2, [r3, #0]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000e010 	.word	0xe000e010
 80019f4:	e000e018 	.word	0xe000e018
 80019f8:	2000000c 	.word	0x2000000c
 80019fc:	10624dd3 	.word	0x10624dd3
 8001a00:	e000e014 	.word	0xe000e014

08001a04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001a04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8001a14 <vPortEnableVFP+0x10>
 8001a08:	6801      	ldr	r1, [r0, #0]
 8001a0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8001a0e:	6001      	str	r1, [r0, #0]
 8001a10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8001a12:	bf00      	nop
 8001a14:	e000ed88 	.word	0xe000ed88

08001a18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	@ 0x28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001a24:	f7ff fb70 	bl	8001108 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001a28:	4b5c      	ldr	r3, [pc, #368]	@ (8001b9c <pvPortMalloc+0x184>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001a30:	f000 f924 	bl	8001c7c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001a34:	4b5a      	ldr	r3, [pc, #360]	@ (8001ba0 <pvPortMalloc+0x188>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f040 8095 	bne.w	8001b6c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d01e      	beq.n	8001a86 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001a48:	2208      	movs	r2, #8
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d015      	beq.n	8001a86 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f023 0307 	bic.w	r3, r3, #7
 8001a60:	3308      	adds	r3, #8
 8001a62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00b      	beq.n	8001a86 <pvPortMalloc+0x6e>
	__asm volatile
 8001a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a72:	f383 8811 	msr	BASEPRI, r3
 8001a76:	f3bf 8f6f 	isb	sy
 8001a7a:	f3bf 8f4f 	dsb	sy
 8001a7e:	617b      	str	r3, [r7, #20]
}
 8001a80:	bf00      	nop
 8001a82:	bf00      	nop
 8001a84:	e7fd      	b.n	8001a82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d06f      	beq.n	8001b6c <pvPortMalloc+0x154>
 8001a8c:	4b45      	ldr	r3, [pc, #276]	@ (8001ba4 <pvPortMalloc+0x18c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d86a      	bhi.n	8001b6c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001a96:	4b44      	ldr	r3, [pc, #272]	@ (8001ba8 <pvPortMalloc+0x190>)
 8001a98:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001a9a:	4b43      	ldr	r3, [pc, #268]	@ (8001ba8 <pvPortMalloc+0x190>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001aa0:	e004      	b.n	8001aac <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d903      	bls.n	8001abe <pvPortMalloc+0xa6>
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f1      	bne.n	8001aa2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001abe:	4b37      	ldr	r3, [pc, #220]	@ (8001b9c <pvPortMalloc+0x184>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d051      	beq.n	8001b6c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2208      	movs	r2, #8
 8001ace:	4413      	add	r3, r2
 8001ad0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
 8001ad8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	1ad2      	subs	r2, r2, r3
 8001ae2:	2308      	movs	r3, #8
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d920      	bls.n	8001b2c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4413      	add	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00b      	beq.n	8001b14 <pvPortMalloc+0xfc>
	__asm volatile
 8001afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b00:	f383 8811 	msr	BASEPRI, r3
 8001b04:	f3bf 8f6f 	isb	sy
 8001b08:	f3bf 8f4f 	dsb	sy
 8001b0c:	613b      	str	r3, [r7, #16]
}
 8001b0e:	bf00      	nop
 8001b10:	bf00      	nop
 8001b12:	e7fd      	b.n	8001b10 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	1ad2      	subs	r2, r2, r3
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001b26:	69b8      	ldr	r0, [r7, #24]
 8001b28:	f000 f90a 	bl	8001d40 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba4 <pvPortMalloc+0x18c>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	4a1b      	ldr	r2, [pc, #108]	@ (8001ba4 <pvPortMalloc+0x18c>)
 8001b38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba4 <pvPortMalloc+0x18c>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bac <pvPortMalloc+0x194>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d203      	bcs.n	8001b4e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001b46:	4b17      	ldr	r3, [pc, #92]	@ (8001ba4 <pvPortMalloc+0x18c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a18      	ldr	r2, [pc, #96]	@ (8001bac <pvPortMalloc+0x194>)
 8001b4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	4b13      	ldr	r3, [pc, #76]	@ (8001ba0 <pvPortMalloc+0x188>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	431a      	orrs	r2, r3
 8001b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8001b62:	4b13      	ldr	r3, [pc, #76]	@ (8001bb0 <pvPortMalloc+0x198>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	3301      	adds	r3, #1
 8001b68:	4a11      	ldr	r2, [pc, #68]	@ (8001bb0 <pvPortMalloc+0x198>)
 8001b6a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001b6c:	f7ff fada 	bl	8001124 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00b      	beq.n	8001b92 <pvPortMalloc+0x17a>
	__asm volatile
 8001b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b7e:	f383 8811 	msr	BASEPRI, r3
 8001b82:	f3bf 8f6f 	isb	sy
 8001b86:	f3bf 8f4f 	dsb	sy
 8001b8a:	60fb      	str	r3, [r7, #12]
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	e7fd      	b.n	8001b8e <pvPortMalloc+0x176>
	return pvReturn;
 8001b92:	69fb      	ldr	r3, [r7, #28]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3728      	adds	r7, #40	@ 0x28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20003f30 	.word	0x20003f30
 8001ba0:	20003f44 	.word	0x20003f44
 8001ba4:	20003f34 	.word	0x20003f34
 8001ba8:	20003f28 	.word	0x20003f28
 8001bac:	20003f38 	.word	0x20003f38
 8001bb0:	20003f3c 	.word	0x20003f3c

08001bb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d04f      	beq.n	8001c66 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001bc6:	2308      	movs	r3, #8
 8001bc8:	425b      	negs	r3, r3
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	4413      	add	r3, r2
 8001bce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	4b25      	ldr	r3, [pc, #148]	@ (8001c70 <vPortFree+0xbc>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10b      	bne.n	8001bfa <vPortFree+0x46>
	__asm volatile
 8001be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001be6:	f383 8811 	msr	BASEPRI, r3
 8001bea:	f3bf 8f6f 	isb	sy
 8001bee:	f3bf 8f4f 	dsb	sy
 8001bf2:	60fb      	str	r3, [r7, #12]
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	e7fd      	b.n	8001bf6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00b      	beq.n	8001c1a <vPortFree+0x66>
	__asm volatile
 8001c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c06:	f383 8811 	msr	BASEPRI, r3
 8001c0a:	f3bf 8f6f 	isb	sy
 8001c0e:	f3bf 8f4f 	dsb	sy
 8001c12:	60bb      	str	r3, [r7, #8]
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	e7fd      	b.n	8001c16 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	4b14      	ldr	r3, [pc, #80]	@ (8001c70 <vPortFree+0xbc>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4013      	ands	r3, r2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d01e      	beq.n	8001c66 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d11a      	bne.n	8001c66 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <vPortFree+0xbc>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001c40:	f7ff fa62 	bl	8001108 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <vPortFree+0xc0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	4a09      	ldr	r2, [pc, #36]	@ (8001c74 <vPortFree+0xc0>)
 8001c50:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001c52:	6938      	ldr	r0, [r7, #16]
 8001c54:	f000 f874 	bl	8001d40 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8001c58:	4b07      	ldr	r3, [pc, #28]	@ (8001c78 <vPortFree+0xc4>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	4a06      	ldr	r2, [pc, #24]	@ (8001c78 <vPortFree+0xc4>)
 8001c60:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8001c62:	f7ff fa5f 	bl	8001124 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001c66:	bf00      	nop
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20003f44 	.word	0x20003f44
 8001c74:	20003f34 	.word	0x20003f34
 8001c78:	20003f40 	.word	0x20003f40

08001c7c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001c82:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8001c86:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001c88:	4b27      	ldr	r3, [pc, #156]	@ (8001d28 <prvHeapInit+0xac>)
 8001c8a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00c      	beq.n	8001cb0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	3307      	adds	r3, #7
 8001c9a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f023 0307 	bic.w	r3, r3, #7
 8001ca2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001ca4:	68ba      	ldr	r2, [r7, #8]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	4a1f      	ldr	r2, [pc, #124]	@ (8001d28 <prvHeapInit+0xac>)
 8001cac:	4413      	add	r3, r2
 8001cae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8001d2c <prvHeapInit+0xb0>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001cba:	4b1c      	ldr	r3, [pc, #112]	@ (8001d2c <prvHeapInit+0xb0>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001cc8:	2208      	movs	r2, #8
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	1a9b      	subs	r3, r3, r2
 8001cce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f023 0307 	bic.w	r3, r3, #7
 8001cd6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4a15      	ldr	r2, [pc, #84]	@ (8001d30 <prvHeapInit+0xb4>)
 8001cdc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001cde:	4b14      	ldr	r3, [pc, #80]	@ (8001d30 <prvHeapInit+0xb4>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001ce6:	4b12      	ldr	r3, [pc, #72]	@ (8001d30 <prvHeapInit+0xb4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	1ad2      	subs	r2, r2, r3
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d30 <prvHeapInit+0xb4>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	4a0a      	ldr	r2, [pc, #40]	@ (8001d34 <prvHeapInit+0xb8>)
 8001d0a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	4a09      	ldr	r2, [pc, #36]	@ (8001d38 <prvHeapInit+0xbc>)
 8001d12:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001d14:	4b09      	ldr	r3, [pc, #36]	@ (8001d3c <prvHeapInit+0xc0>)
 8001d16:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001d1a:	601a      	str	r2, [r3, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	20000328 	.word	0x20000328
 8001d2c:	20003f28 	.word	0x20003f28
 8001d30:	20003f30 	.word	0x20003f30
 8001d34:	20003f38 	.word	0x20003f38
 8001d38:	20003f34 	.word	0x20003f34
 8001d3c:	20003f44 	.word	0x20003f44

08001d40 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001d48:	4b28      	ldr	r3, [pc, #160]	@ (8001dec <prvInsertBlockIntoFreeList+0xac>)
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	e002      	b.n	8001d54 <prvInsertBlockIntoFreeList+0x14>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d8f7      	bhi.n	8001d4e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	4413      	add	r3, r2
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d108      	bne.n	8001d82 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	441a      	add	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	441a      	add	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d118      	bne.n	8001dc8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <prvInsertBlockIntoFreeList+0xb0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d00d      	beq.n	8001dbe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	441a      	add	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	e008      	b.n	8001dd0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001df0 <prvInsertBlockIntoFreeList+0xb0>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	e003      	b.n	8001dd0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d002      	beq.n	8001dde <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001dde:	bf00      	nop
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20003f28 	.word	0x20003f28
 8001df0:	20003f30 	.word	0x20003f30

08001df4 <main>:
// Here are the task names
void Task1(void *pvParameters);
void Task2(void *pvParameters);

int main(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af02      	add	r7, sp, #8
	// Enable FPU
	fpu_enable();
 8001dfa:	f000 f85b 	bl	8001eb4 <fpu_enable>

	// Initialize the UART
	uart2_tx_init();
 8001dfe:	f000 f94f 	bl	80020a0 <uart2_tx_init>

	// Create the two tasks
	xTaskCreate(Task1, "Task1", 100, NULL, Task1_priority, NULL);
 8001e02:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <main+0x48>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	2300      	movs	r3, #0
 8001e0a:	9301      	str	r3, [sp, #4]
 8001e0c:	9200      	str	r2, [sp, #0]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	2264      	movs	r2, #100	@ 0x64
 8001e12:	490b      	ldr	r1, [pc, #44]	@ (8001e40 <main+0x4c>)
 8001e14:	480b      	ldr	r0, [pc, #44]	@ (8001e44 <main+0x50>)
 8001e16:	f7fe fff0 	bl	8000dfa <xTaskCreate>
	xTaskCreate(Task2, "Task2", 100, NULL, Task2_priority, NULL);
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e48 <main+0x54>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	2300      	movs	r3, #0
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	9200      	str	r2, [sp, #0]
 8001e26:	2300      	movs	r3, #0
 8001e28:	2264      	movs	r2, #100	@ 0x64
 8001e2a:	4908      	ldr	r1, [pc, #32]	@ (8001e4c <main+0x58>)
 8001e2c:	4808      	ldr	r0, [pc, #32]	@ (8001e50 <main+0x5c>)
 8001e2e:	f7fe ffe4 	bl	8000dfa <xTaskCreate>

	// Must start the scheduler or nothing happens!
	vTaskStartScheduler();
 8001e32:	f7ff f921 	bl	8001078 <vTaskStartScheduler>

	while(1)
 8001e36:	bf00      	nop
 8001e38:	e7fd      	b.n	8001e36 <main+0x42>
 8001e3a:	bf00      	nop
 8001e3c:	20000004 	.word	0x20000004
 8001e40:	08006900 	.word	0x08006900
 8001e44:	08001e55 	.word	0x08001e55
 8001e48:	20000008 	.word	0x20000008
 8001e4c:	08006908 	.word	0x08006908
 8001e50:	08001e85 	.word	0x08001e85

08001e54 <Task1>:

} // End of main

// Definition of the first task
void Task1(void *pvParameters)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Task1_profiler++;
 8001e5c:	4b07      	ldr	r3, [pc, #28]	@ (8001e7c <Task1+0x28>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	3301      	adds	r3, #1
 8001e62:	4a06      	ldr	r2, [pc, #24]	@ (8001e7c <Task1+0x28>)
 8001e64:	6013      	str	r3, [r2, #0]

		taskYIELD();
 8001e66:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <Task1+0x2c>)
 8001e68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	f3bf 8f4f 	dsb	sy
 8001e72:	f3bf 8f6f 	isb	sy
		Task1_profiler++;
 8001e76:	bf00      	nop
 8001e78:	e7f0      	b.n	8001e5c <Task1+0x8>
 8001e7a:	bf00      	nop
 8001e7c:	20003f48 	.word	0x20003f48
 8001e80:	e000ed04 	.word	0xe000ed04

08001e84 <Task2>:

}

// Definition of the second task
void Task2(void *pvParameters)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Task2_profiler++;
 8001e8c:	4b07      	ldr	r3, [pc, #28]	@ (8001eac <Task2+0x28>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	3301      	adds	r3, #1
 8001e92:	4a06      	ldr	r2, [pc, #24]	@ (8001eac <Task2+0x28>)
 8001e94:	6013      	str	r3, [r2, #0]

		taskYIELD();
 8001e96:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <Task2+0x2c>)
 8001e98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	f3bf 8f4f 	dsb	sy
 8001ea2:	f3bf 8f6f 	isb	sy
		Task2_profiler++;
 8001ea6:	bf00      	nop
 8001ea8:	e7f0      	b.n	8001e8c <Task2+0x8>
 8001eaa:	bf00      	nop
 8001eac:	20003f4c 	.word	0x20003f4c
 8001eb0:	e000ed04 	.word	0xe000ed04

08001eb4 <fpu_enable>:
}

*/

static void fpu_enable(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
	// Enable FPU - Set bits 20, 21, 22, 23 to "1" - See page 264 of Cortex-M4 Devices Users Guide
	SCB->CPACR |= ((3UL << 20) | (3UL << 22));
 8001eb8:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <fpu_enable+0x20>)
 8001eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ebe:	4a05      	ldr	r2, [pc, #20]	@ (8001ed4 <fpu_enable+0x20>)
 8001ec0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ec4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return 1;
 8001edc:	2301      	movs	r3, #1
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <_kill>:

int _kill(int pid, int sig)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ef2:	f001 ff7b 	bl	8003dec <__errno>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2216      	movs	r2, #22
 8001efa:	601a      	str	r2, [r3, #0]
  return -1;
 8001efc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <_exit>:

void _exit (int status)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f10:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ffe7 	bl	8001ee8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f1a:	bf00      	nop
 8001f1c:	e7fd      	b.n	8001f1a <_exit+0x12>

08001f1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b086      	sub	sp, #24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	e00a      	b.n	8001f46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f30:	f3af 8000 	nop.w
 8001f34:	4601      	mov	r1, r0
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	1c5a      	adds	r2, r3, #1
 8001f3a:	60ba      	str	r2, [r7, #8]
 8001f3c:	b2ca      	uxtb	r2, r1
 8001f3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	3301      	adds	r3, #1
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	dbf0      	blt.n	8001f30 <_read+0x12>
  }

  return len;
 8001f4e:	687b      	ldr	r3, [r7, #4]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	e009      	b.n	8001f7e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	60ba      	str	r2, [r7, #8]
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 f888 	bl	8002088 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	dbf1      	blt.n	8001f6a <_write+0x12>
  }
  return len;
 8001f86:	687b      	ldr	r3, [r7, #4]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <_close>:

int _close(int file)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fb8:	605a      	str	r2, [r3, #4]
  return 0;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <_isatty>:

int _isatty(int file)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fd0:	2301      	movs	r3, #1
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b085      	sub	sp, #20
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002000:	4a14      	ldr	r2, [pc, #80]	@ (8002054 <_sbrk+0x5c>)
 8002002:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <_sbrk+0x60>)
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800200c:	4b13      	ldr	r3, [pc, #76]	@ (800205c <_sbrk+0x64>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d102      	bne.n	800201a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002014:	4b11      	ldr	r3, [pc, #68]	@ (800205c <_sbrk+0x64>)
 8002016:	4a12      	ldr	r2, [pc, #72]	@ (8002060 <_sbrk+0x68>)
 8002018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800201a:	4b10      	ldr	r3, [pc, #64]	@ (800205c <_sbrk+0x64>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	429a      	cmp	r2, r3
 8002026:	d207      	bcs.n	8002038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002028:	f001 fee0 	bl	8003dec <__errno>
 800202c:	4603      	mov	r3, r0
 800202e:	220c      	movs	r2, #12
 8002030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002032:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002036:	e009      	b.n	800204c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002038:	4b08      	ldr	r3, [pc, #32]	@ (800205c <_sbrk+0x64>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800203e:	4b07      	ldr	r3, [pc, #28]	@ (800205c <_sbrk+0x64>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	4a05      	ldr	r2, [pc, #20]	@ (800205c <_sbrk+0x64>)
 8002048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800204a:	68fb      	ldr	r3, [r7, #12]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20020000 	.word	0x20020000
 8002058:	00000400 	.word	0x00000400
 800205c:	20003f50 	.word	0x20003f50
 8002060:	200040a0 	.word	0x200040a0

08002064 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002068:	4b06      	ldr	r3, [pc, #24]	@ (8002084 <SystemInit+0x20>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800206e:	4a05      	ldr	r2, [pc, #20]	@ (8002084 <SystemInit+0x20>)
 8002070:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002074:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate);

void uart2_write(int ch);

int __io_putchar(int ch)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f87b 	bl	800218c <uart2_write>

	return ch;
 8002096:	687b      	ldr	r3, [r7, #4]

}
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <uart2_tx_init>:

// Function to initialize UART2
void uart2_tx_init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
	/****** [1] Configure UART2 Pins on Port A, PA2 (Tx) and PA3 (Rx) ******/
	/*  Enable clock access to GPIOA on AHB1 bus  */
	RCC->AHB1ENR |= GPIOAEN;
 80020a4:	4b21      	ldr	r3, [pc, #132]	@ (800212c <uart2_tx_init+0x8c>)
 80020a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a8:	4a20      	ldr	r2, [pc, #128]	@ (800212c <uart2_tx_init+0x8c>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	6313      	str	r3, [r2, #48]	@ 0x30

	/*  Set PA2 mode to alternate function mode. (Set bits 5 and 4 to 0b10) */
	GPIOA->MODER |= (1U << 5);
 80020b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002130 <uart2_tx_init+0x90>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002130 <uart2_tx_init+0x90>)
 80020b6:	f043 0320 	orr.w	r3, r3, #32
 80020ba:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U << 4);
 80020bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002130 <uart2_tx_init+0x90>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002130 <uart2_tx_init+0x90>)
 80020c2:	f023 0310 	bic.w	r3, r3, #16
 80020c6:	6013      	str	r3, [r2, #0]

	/*  Set PA2 alternate function mode to UART_TX (AF07) . (Set bits 11, 10, 9, 8 to 0b0111, respectively.) */
	/*  Note this is in the alternate function low register, since we are working with PA2  */
	/*  Also note that the AF low register is AFR[0] and the AF high register is AFR[1]  */
	GPIOA->AFR[0] |= (1U << 8);
 80020c8:	4b19      	ldr	r3, [pc, #100]	@ (8002130 <uart2_tx_init+0x90>)
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	4a18      	ldr	r2, [pc, #96]	@ (8002130 <uart2_tx_init+0x90>)
 80020ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 9);
 80020d4:	4b16      	ldr	r3, [pc, #88]	@ (8002130 <uart2_tx_init+0x90>)
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4a15      	ldr	r2, [pc, #84]	@ (8002130 <uart2_tx_init+0x90>)
 80020da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020de:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 10);
 80020e0:	4b13      	ldr	r3, [pc, #76]	@ (8002130 <uart2_tx_init+0x90>)
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	4a12      	ldr	r2, [pc, #72]	@ (8002130 <uart2_tx_init+0x90>)
 80020e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ea:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U << 11);
 80020ec:	4b10      	ldr	r3, [pc, #64]	@ (8002130 <uart2_tx_init+0x90>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	4a0f      	ldr	r2, [pc, #60]	@ (8002130 <uart2_tx_init+0x90>)
 80020f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80020f6:	6213      	str	r3, [r2, #32]


	/****** [2] Configure UART  ******/
	/*  Enable clock access to UART2 on APB1*/
	RCC->APB1ENR |= UART2EN;
 80020f8:	4b0c      	ldr	r3, [pc, #48]	@ (800212c <uart2_tx_init+0x8c>)
 80020fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fc:	4a0b      	ldr	r2, [pc, #44]	@ (800212c <uart2_tx_init+0x8c>)
 80020fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002102:	6413      	str	r3, [r2, #64]	@ 0x40

	/*  Configure baud rate  */
	uart2_set_baudrate(APB1_CLK, UART_BAUDRATE);
 8002104:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8002108:	480a      	ldr	r0, [pc, #40]	@ (8002134 <uart2_tx_init+0x94>)
 800210a:	f000 f817 	bl	800213c <uart2_set_baudrate>

	/*  Configure data transfer direction for Tx  */
	USART2->CR1 |= CR1_TE;
 800210e:	4b0a      	ldr	r3, [pc, #40]	@ (8002138 <uart2_tx_init+0x98>)
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	4a09      	ldr	r2, [pc, #36]	@ (8002138 <uart2_tx_init+0x98>)
 8002114:	f043 0308 	orr.w	r3, r3, #8
 8002118:	60d3      	str	r3, [r2, #12]

	/*  Enable UART module */
	USART2->CR1 |= CR1_UE;
 800211a:	4b07      	ldr	r3, [pc, #28]	@ (8002138 <uart2_tx_init+0x98>)
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	4a06      	ldr	r2, [pc, #24]	@ (8002138 <uart2_tx_init+0x98>)
 8002120:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002124:	60d3      	str	r3, [r2, #12]

}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40023800 	.word	0x40023800
 8002130:	40020000 	.word	0x40020000
 8002134:	00f42400 	.word	0x00f42400
 8002138:	40004400 	.word	0x40004400

0800213c <uart2_set_baudrate>:

static void uart2_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk, baudrate);
 8002146:	6839      	ldr	r1, [r7, #0]
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f80b 	bl	8002164 <compute_uart_bd>
 800214e:	4603      	mov	r3, r0
 8002150:	461a      	mov	r2, r3
 8002152:	4b03      	ldr	r3, [pc, #12]	@ (8002160 <uart2_set_baudrate+0x24>)
 8002154:	609a      	str	r2, [r3, #8]
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40004400 	.word	0x40004400

08002164 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
	return ((baudrate/2U) + periph_clk)/baudrate;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	085a      	lsrs	r2, r3, #1
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	441a      	add	r2, r3
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	fbb2 f3f3 	udiv	r3, r2, r3
 800217c:	b29b      	uxth	r3, r3
}
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <uart2_write>:

void uart2_write(int ch)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	/*  First, make sure data transmit register is empty - need to read the USART status register, SR */
	/*  Read the status register  */
	while(!(USART2->SR & SR_TXE) ) {}// Sit here until SR bit is a "1" (Data has been transferred)
 8002194:	bf00      	nop
 8002196:	4b08      	ldr	r3, [pc, #32]	@ (80021b8 <uart2_write+0x2c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f9      	beq.n	8002196 <uart2_write+0xa>

	/*  Write to the transmit data register.  */
	USART2->DR = (ch & 0xFF);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a04      	ldr	r2, [pc, #16]	@ (80021b8 <uart2_write+0x2c>)
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	6053      	str	r3, [r2, #4]
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40004400 	.word	0x40004400

080021bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021bc:	480d      	ldr	r0, [pc, #52]	@ (80021f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80021c0:	f7ff ff50 	bl	8002064 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021c4:	480c      	ldr	r0, [pc, #48]	@ (80021f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80021c6:	490d      	ldr	r1, [pc, #52]	@ (80021fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80021c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002200 <LoopForever+0xe>)
  movs r3, #0
 80021ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021cc:	e002      	b.n	80021d4 <LoopCopyDataInit>

080021ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021d2:	3304      	adds	r3, #4

080021d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021d8:	d3f9      	bcc.n	80021ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021da:	4a0a      	ldr	r2, [pc, #40]	@ (8002204 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021dc:	4c0a      	ldr	r4, [pc, #40]	@ (8002208 <LoopForever+0x16>)
  movs r3, #0
 80021de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e0:	e001      	b.n	80021e6 <LoopFillZerobss>

080021e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e4:	3204      	adds	r2, #4

080021e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021e8:	d3fb      	bcc.n	80021e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021ea:	f001 fe05 	bl	8003df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021ee:	f7ff fe01 	bl	8001df4 <main>

080021f2 <LoopForever>:

LoopForever:
  b LoopForever
 80021f2:	e7fe      	b.n	80021f2 <LoopForever>
  ldr   r0, =_estack
 80021f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021fc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002200:	08006d4c 	.word	0x08006d4c
  ldr r2, =_sbss
 8002204:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002208:	200040a0 	.word	0x200040a0

0800220c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800220c:	e7fe      	b.n	800220c <ADC_IRQHandler>

0800220e <__cvt>:
 800220e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002212:	ec57 6b10 	vmov	r6, r7, d0
 8002216:	2f00      	cmp	r7, #0
 8002218:	460c      	mov	r4, r1
 800221a:	4619      	mov	r1, r3
 800221c:	463b      	mov	r3, r7
 800221e:	bfbb      	ittet	lt
 8002220:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8002224:	461f      	movlt	r7, r3
 8002226:	2300      	movge	r3, #0
 8002228:	232d      	movlt	r3, #45	@ 0x2d
 800222a:	700b      	strb	r3, [r1, #0]
 800222c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800222e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8002232:	4691      	mov	r9, r2
 8002234:	f023 0820 	bic.w	r8, r3, #32
 8002238:	bfbc      	itt	lt
 800223a:	4632      	movlt	r2, r6
 800223c:	4616      	movlt	r6, r2
 800223e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002242:	d005      	beq.n	8002250 <__cvt+0x42>
 8002244:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002248:	d100      	bne.n	800224c <__cvt+0x3e>
 800224a:	3401      	adds	r4, #1
 800224c:	2102      	movs	r1, #2
 800224e:	e000      	b.n	8002252 <__cvt+0x44>
 8002250:	2103      	movs	r1, #3
 8002252:	ab03      	add	r3, sp, #12
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	ab02      	add	r3, sp, #8
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	ec47 6b10 	vmov	d0, r6, r7
 800225e:	4653      	mov	r3, sl
 8002260:	4622      	mov	r2, r4
 8002262:	f001 fe99 	bl	8003f98 <_dtoa_r>
 8002266:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800226a:	4605      	mov	r5, r0
 800226c:	d119      	bne.n	80022a2 <__cvt+0x94>
 800226e:	f019 0f01 	tst.w	r9, #1
 8002272:	d00e      	beq.n	8002292 <__cvt+0x84>
 8002274:	eb00 0904 	add.w	r9, r0, r4
 8002278:	2200      	movs	r2, #0
 800227a:	2300      	movs	r3, #0
 800227c:	4630      	mov	r0, r6
 800227e:	4639      	mov	r1, r7
 8002280:	f7fe fc2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8002284:	b108      	cbz	r0, 800228a <__cvt+0x7c>
 8002286:	f8cd 900c 	str.w	r9, [sp, #12]
 800228a:	2230      	movs	r2, #48	@ 0x30
 800228c:	9b03      	ldr	r3, [sp, #12]
 800228e:	454b      	cmp	r3, r9
 8002290:	d31e      	bcc.n	80022d0 <__cvt+0xc2>
 8002292:	9b03      	ldr	r3, [sp, #12]
 8002294:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002296:	1b5b      	subs	r3, r3, r5
 8002298:	4628      	mov	r0, r5
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	b004      	add	sp, #16
 800229e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022a2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80022a6:	eb00 0904 	add.w	r9, r0, r4
 80022aa:	d1e5      	bne.n	8002278 <__cvt+0x6a>
 80022ac:	7803      	ldrb	r3, [r0, #0]
 80022ae:	2b30      	cmp	r3, #48	@ 0x30
 80022b0:	d10a      	bne.n	80022c8 <__cvt+0xba>
 80022b2:	2200      	movs	r2, #0
 80022b4:	2300      	movs	r3, #0
 80022b6:	4630      	mov	r0, r6
 80022b8:	4639      	mov	r1, r7
 80022ba:	f7fe fc0d 	bl	8000ad8 <__aeabi_dcmpeq>
 80022be:	b918      	cbnz	r0, 80022c8 <__cvt+0xba>
 80022c0:	f1c4 0401 	rsb	r4, r4, #1
 80022c4:	f8ca 4000 	str.w	r4, [sl]
 80022c8:	f8da 3000 	ldr.w	r3, [sl]
 80022cc:	4499      	add	r9, r3
 80022ce:	e7d3      	b.n	8002278 <__cvt+0x6a>
 80022d0:	1c59      	adds	r1, r3, #1
 80022d2:	9103      	str	r1, [sp, #12]
 80022d4:	701a      	strb	r2, [r3, #0]
 80022d6:	e7d9      	b.n	800228c <__cvt+0x7e>

080022d8 <__exponent>:
 80022d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022da:	2900      	cmp	r1, #0
 80022dc:	bfba      	itte	lt
 80022de:	4249      	neglt	r1, r1
 80022e0:	232d      	movlt	r3, #45	@ 0x2d
 80022e2:	232b      	movge	r3, #43	@ 0x2b
 80022e4:	2909      	cmp	r1, #9
 80022e6:	7002      	strb	r2, [r0, #0]
 80022e8:	7043      	strb	r3, [r0, #1]
 80022ea:	dd29      	ble.n	8002340 <__exponent+0x68>
 80022ec:	f10d 0307 	add.w	r3, sp, #7
 80022f0:	461d      	mov	r5, r3
 80022f2:	270a      	movs	r7, #10
 80022f4:	461a      	mov	r2, r3
 80022f6:	fbb1 f6f7 	udiv	r6, r1, r7
 80022fa:	fb07 1416 	mls	r4, r7, r6, r1
 80022fe:	3430      	adds	r4, #48	@ 0x30
 8002300:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002304:	460c      	mov	r4, r1
 8002306:	2c63      	cmp	r4, #99	@ 0x63
 8002308:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800230c:	4631      	mov	r1, r6
 800230e:	dcf1      	bgt.n	80022f4 <__exponent+0x1c>
 8002310:	3130      	adds	r1, #48	@ 0x30
 8002312:	1e94      	subs	r4, r2, #2
 8002314:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002318:	1c41      	adds	r1, r0, #1
 800231a:	4623      	mov	r3, r4
 800231c:	42ab      	cmp	r3, r5
 800231e:	d30a      	bcc.n	8002336 <__exponent+0x5e>
 8002320:	f10d 0309 	add.w	r3, sp, #9
 8002324:	1a9b      	subs	r3, r3, r2
 8002326:	42ac      	cmp	r4, r5
 8002328:	bf88      	it	hi
 800232a:	2300      	movhi	r3, #0
 800232c:	3302      	adds	r3, #2
 800232e:	4403      	add	r3, r0
 8002330:	1a18      	subs	r0, r3, r0
 8002332:	b003      	add	sp, #12
 8002334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002336:	f813 6b01 	ldrb.w	r6, [r3], #1
 800233a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800233e:	e7ed      	b.n	800231c <__exponent+0x44>
 8002340:	2330      	movs	r3, #48	@ 0x30
 8002342:	3130      	adds	r1, #48	@ 0x30
 8002344:	7083      	strb	r3, [r0, #2]
 8002346:	70c1      	strb	r1, [r0, #3]
 8002348:	1d03      	adds	r3, r0, #4
 800234a:	e7f1      	b.n	8002330 <__exponent+0x58>

0800234c <_printf_float>:
 800234c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002350:	b08d      	sub	sp, #52	@ 0x34
 8002352:	460c      	mov	r4, r1
 8002354:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8002358:	4616      	mov	r6, r2
 800235a:	461f      	mov	r7, r3
 800235c:	4605      	mov	r5, r0
 800235e:	f001 fd41 	bl	8003de4 <_localeconv_r>
 8002362:	6803      	ldr	r3, [r0, #0]
 8002364:	9304      	str	r3, [sp, #16]
 8002366:	4618      	mov	r0, r3
 8002368:	f7fd ff8a 	bl	8000280 <strlen>
 800236c:	2300      	movs	r3, #0
 800236e:	930a      	str	r3, [sp, #40]	@ 0x28
 8002370:	f8d8 3000 	ldr.w	r3, [r8]
 8002374:	9005      	str	r0, [sp, #20]
 8002376:	3307      	adds	r3, #7
 8002378:	f023 0307 	bic.w	r3, r3, #7
 800237c:	f103 0208 	add.w	r2, r3, #8
 8002380:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002384:	f8d4 b000 	ldr.w	fp, [r4]
 8002388:	f8c8 2000 	str.w	r2, [r8]
 800238c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002390:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002394:	9307      	str	r3, [sp, #28]
 8002396:	f8cd 8018 	str.w	r8, [sp, #24]
 800239a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800239e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80023a2:	4b9c      	ldr	r3, [pc, #624]	@ (8002614 <_printf_float+0x2c8>)
 80023a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023a8:	f7fe fbc8 	bl	8000b3c <__aeabi_dcmpun>
 80023ac:	bb70      	cbnz	r0, 800240c <_printf_float+0xc0>
 80023ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80023b2:	4b98      	ldr	r3, [pc, #608]	@ (8002614 <_printf_float+0x2c8>)
 80023b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023b8:	f7fe fba2 	bl	8000b00 <__aeabi_dcmple>
 80023bc:	bb30      	cbnz	r0, 800240c <_printf_float+0xc0>
 80023be:	2200      	movs	r2, #0
 80023c0:	2300      	movs	r3, #0
 80023c2:	4640      	mov	r0, r8
 80023c4:	4649      	mov	r1, r9
 80023c6:	f7fe fb91 	bl	8000aec <__aeabi_dcmplt>
 80023ca:	b110      	cbz	r0, 80023d2 <_printf_float+0x86>
 80023cc:	232d      	movs	r3, #45	@ 0x2d
 80023ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80023d2:	4a91      	ldr	r2, [pc, #580]	@ (8002618 <_printf_float+0x2cc>)
 80023d4:	4b91      	ldr	r3, [pc, #580]	@ (800261c <_printf_float+0x2d0>)
 80023d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80023da:	bf94      	ite	ls
 80023dc:	4690      	movls	r8, r2
 80023de:	4698      	movhi	r8, r3
 80023e0:	2303      	movs	r3, #3
 80023e2:	6123      	str	r3, [r4, #16]
 80023e4:	f02b 0304 	bic.w	r3, fp, #4
 80023e8:	6023      	str	r3, [r4, #0]
 80023ea:	f04f 0900 	mov.w	r9, #0
 80023ee:	9700      	str	r7, [sp, #0]
 80023f0:	4633      	mov	r3, r6
 80023f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80023f4:	4621      	mov	r1, r4
 80023f6:	4628      	mov	r0, r5
 80023f8:	f000 f9d2 	bl	80027a0 <_printf_common>
 80023fc:	3001      	adds	r0, #1
 80023fe:	f040 808d 	bne.w	800251c <_printf_float+0x1d0>
 8002402:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002406:	b00d      	add	sp, #52	@ 0x34
 8002408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800240c:	4642      	mov	r2, r8
 800240e:	464b      	mov	r3, r9
 8002410:	4640      	mov	r0, r8
 8002412:	4649      	mov	r1, r9
 8002414:	f7fe fb92 	bl	8000b3c <__aeabi_dcmpun>
 8002418:	b140      	cbz	r0, 800242c <_printf_float+0xe0>
 800241a:	464b      	mov	r3, r9
 800241c:	2b00      	cmp	r3, #0
 800241e:	bfbc      	itt	lt
 8002420:	232d      	movlt	r3, #45	@ 0x2d
 8002422:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002426:	4a7e      	ldr	r2, [pc, #504]	@ (8002620 <_printf_float+0x2d4>)
 8002428:	4b7e      	ldr	r3, [pc, #504]	@ (8002624 <_printf_float+0x2d8>)
 800242a:	e7d4      	b.n	80023d6 <_printf_float+0x8a>
 800242c:	6863      	ldr	r3, [r4, #4]
 800242e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8002432:	9206      	str	r2, [sp, #24]
 8002434:	1c5a      	adds	r2, r3, #1
 8002436:	d13b      	bne.n	80024b0 <_printf_float+0x164>
 8002438:	2306      	movs	r3, #6
 800243a:	6063      	str	r3, [r4, #4]
 800243c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8002440:	2300      	movs	r3, #0
 8002442:	6022      	str	r2, [r4, #0]
 8002444:	9303      	str	r3, [sp, #12]
 8002446:	ab0a      	add	r3, sp, #40	@ 0x28
 8002448:	e9cd a301 	strd	sl, r3, [sp, #4]
 800244c:	ab09      	add	r3, sp, #36	@ 0x24
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	6861      	ldr	r1, [r4, #4]
 8002452:	ec49 8b10 	vmov	d0, r8, r9
 8002456:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800245a:	4628      	mov	r0, r5
 800245c:	f7ff fed7 	bl	800220e <__cvt>
 8002460:	9b06      	ldr	r3, [sp, #24]
 8002462:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002464:	2b47      	cmp	r3, #71	@ 0x47
 8002466:	4680      	mov	r8, r0
 8002468:	d129      	bne.n	80024be <_printf_float+0x172>
 800246a:	1cc8      	adds	r0, r1, #3
 800246c:	db02      	blt.n	8002474 <_printf_float+0x128>
 800246e:	6863      	ldr	r3, [r4, #4]
 8002470:	4299      	cmp	r1, r3
 8002472:	dd41      	ble.n	80024f8 <_printf_float+0x1ac>
 8002474:	f1aa 0a02 	sub.w	sl, sl, #2
 8002478:	fa5f fa8a 	uxtb.w	sl, sl
 800247c:	3901      	subs	r1, #1
 800247e:	4652      	mov	r2, sl
 8002480:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002484:	9109      	str	r1, [sp, #36]	@ 0x24
 8002486:	f7ff ff27 	bl	80022d8 <__exponent>
 800248a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800248c:	1813      	adds	r3, r2, r0
 800248e:	2a01      	cmp	r2, #1
 8002490:	4681      	mov	r9, r0
 8002492:	6123      	str	r3, [r4, #16]
 8002494:	dc02      	bgt.n	800249c <_printf_float+0x150>
 8002496:	6822      	ldr	r2, [r4, #0]
 8002498:	07d2      	lsls	r2, r2, #31
 800249a:	d501      	bpl.n	80024a0 <_printf_float+0x154>
 800249c:	3301      	adds	r3, #1
 800249e:	6123      	str	r3, [r4, #16]
 80024a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0a2      	beq.n	80023ee <_printf_float+0xa2>
 80024a8:	232d      	movs	r3, #45	@ 0x2d
 80024aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80024ae:	e79e      	b.n	80023ee <_printf_float+0xa2>
 80024b0:	9a06      	ldr	r2, [sp, #24]
 80024b2:	2a47      	cmp	r2, #71	@ 0x47
 80024b4:	d1c2      	bne.n	800243c <_printf_float+0xf0>
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1c0      	bne.n	800243c <_printf_float+0xf0>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e7bd      	b.n	800243a <_printf_float+0xee>
 80024be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80024c2:	d9db      	bls.n	800247c <_printf_float+0x130>
 80024c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80024c8:	d118      	bne.n	80024fc <_printf_float+0x1b0>
 80024ca:	2900      	cmp	r1, #0
 80024cc:	6863      	ldr	r3, [r4, #4]
 80024ce:	dd0b      	ble.n	80024e8 <_printf_float+0x19c>
 80024d0:	6121      	str	r1, [r4, #16]
 80024d2:	b913      	cbnz	r3, 80024da <_printf_float+0x18e>
 80024d4:	6822      	ldr	r2, [r4, #0]
 80024d6:	07d0      	lsls	r0, r2, #31
 80024d8:	d502      	bpl.n	80024e0 <_printf_float+0x194>
 80024da:	3301      	adds	r3, #1
 80024dc:	440b      	add	r3, r1
 80024de:	6123      	str	r3, [r4, #16]
 80024e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80024e2:	f04f 0900 	mov.w	r9, #0
 80024e6:	e7db      	b.n	80024a0 <_printf_float+0x154>
 80024e8:	b913      	cbnz	r3, 80024f0 <_printf_float+0x1a4>
 80024ea:	6822      	ldr	r2, [r4, #0]
 80024ec:	07d2      	lsls	r2, r2, #31
 80024ee:	d501      	bpl.n	80024f4 <_printf_float+0x1a8>
 80024f0:	3302      	adds	r3, #2
 80024f2:	e7f4      	b.n	80024de <_printf_float+0x192>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e7f2      	b.n	80024de <_printf_float+0x192>
 80024f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80024fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80024fe:	4299      	cmp	r1, r3
 8002500:	db05      	blt.n	800250e <_printf_float+0x1c2>
 8002502:	6823      	ldr	r3, [r4, #0]
 8002504:	6121      	str	r1, [r4, #16]
 8002506:	07d8      	lsls	r0, r3, #31
 8002508:	d5ea      	bpl.n	80024e0 <_printf_float+0x194>
 800250a:	1c4b      	adds	r3, r1, #1
 800250c:	e7e7      	b.n	80024de <_printf_float+0x192>
 800250e:	2900      	cmp	r1, #0
 8002510:	bfd4      	ite	le
 8002512:	f1c1 0202 	rsble	r2, r1, #2
 8002516:	2201      	movgt	r2, #1
 8002518:	4413      	add	r3, r2
 800251a:	e7e0      	b.n	80024de <_printf_float+0x192>
 800251c:	6823      	ldr	r3, [r4, #0]
 800251e:	055a      	lsls	r2, r3, #21
 8002520:	d407      	bmi.n	8002532 <_printf_float+0x1e6>
 8002522:	6923      	ldr	r3, [r4, #16]
 8002524:	4642      	mov	r2, r8
 8002526:	4631      	mov	r1, r6
 8002528:	4628      	mov	r0, r5
 800252a:	47b8      	blx	r7
 800252c:	3001      	adds	r0, #1
 800252e:	d12b      	bne.n	8002588 <_printf_float+0x23c>
 8002530:	e767      	b.n	8002402 <_printf_float+0xb6>
 8002532:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002536:	f240 80dd 	bls.w	80026f4 <_printf_float+0x3a8>
 800253a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800253e:	2200      	movs	r2, #0
 8002540:	2300      	movs	r3, #0
 8002542:	f7fe fac9 	bl	8000ad8 <__aeabi_dcmpeq>
 8002546:	2800      	cmp	r0, #0
 8002548:	d033      	beq.n	80025b2 <_printf_float+0x266>
 800254a:	4a37      	ldr	r2, [pc, #220]	@ (8002628 <_printf_float+0x2dc>)
 800254c:	2301      	movs	r3, #1
 800254e:	4631      	mov	r1, r6
 8002550:	4628      	mov	r0, r5
 8002552:	47b8      	blx	r7
 8002554:	3001      	adds	r0, #1
 8002556:	f43f af54 	beq.w	8002402 <_printf_float+0xb6>
 800255a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800255e:	4543      	cmp	r3, r8
 8002560:	db02      	blt.n	8002568 <_printf_float+0x21c>
 8002562:	6823      	ldr	r3, [r4, #0]
 8002564:	07d8      	lsls	r0, r3, #31
 8002566:	d50f      	bpl.n	8002588 <_printf_float+0x23c>
 8002568:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800256c:	4631      	mov	r1, r6
 800256e:	4628      	mov	r0, r5
 8002570:	47b8      	blx	r7
 8002572:	3001      	adds	r0, #1
 8002574:	f43f af45 	beq.w	8002402 <_printf_float+0xb6>
 8002578:	f04f 0900 	mov.w	r9, #0
 800257c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8002580:	f104 0a1a 	add.w	sl, r4, #26
 8002584:	45c8      	cmp	r8, r9
 8002586:	dc09      	bgt.n	800259c <_printf_float+0x250>
 8002588:	6823      	ldr	r3, [r4, #0]
 800258a:	079b      	lsls	r3, r3, #30
 800258c:	f100 8103 	bmi.w	8002796 <_printf_float+0x44a>
 8002590:	68e0      	ldr	r0, [r4, #12]
 8002592:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002594:	4298      	cmp	r0, r3
 8002596:	bfb8      	it	lt
 8002598:	4618      	movlt	r0, r3
 800259a:	e734      	b.n	8002406 <_printf_float+0xba>
 800259c:	2301      	movs	r3, #1
 800259e:	4652      	mov	r2, sl
 80025a0:	4631      	mov	r1, r6
 80025a2:	4628      	mov	r0, r5
 80025a4:	47b8      	blx	r7
 80025a6:	3001      	adds	r0, #1
 80025a8:	f43f af2b 	beq.w	8002402 <_printf_float+0xb6>
 80025ac:	f109 0901 	add.w	r9, r9, #1
 80025b0:	e7e8      	b.n	8002584 <_printf_float+0x238>
 80025b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	dc39      	bgt.n	800262c <_printf_float+0x2e0>
 80025b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002628 <_printf_float+0x2dc>)
 80025ba:	2301      	movs	r3, #1
 80025bc:	4631      	mov	r1, r6
 80025be:	4628      	mov	r0, r5
 80025c0:	47b8      	blx	r7
 80025c2:	3001      	adds	r0, #1
 80025c4:	f43f af1d 	beq.w	8002402 <_printf_float+0xb6>
 80025c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80025cc:	ea59 0303 	orrs.w	r3, r9, r3
 80025d0:	d102      	bne.n	80025d8 <_printf_float+0x28c>
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	07d9      	lsls	r1, r3, #31
 80025d6:	d5d7      	bpl.n	8002588 <_printf_float+0x23c>
 80025d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80025dc:	4631      	mov	r1, r6
 80025de:	4628      	mov	r0, r5
 80025e0:	47b8      	blx	r7
 80025e2:	3001      	adds	r0, #1
 80025e4:	f43f af0d 	beq.w	8002402 <_printf_float+0xb6>
 80025e8:	f04f 0a00 	mov.w	sl, #0
 80025ec:	f104 0b1a 	add.w	fp, r4, #26
 80025f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80025f2:	425b      	negs	r3, r3
 80025f4:	4553      	cmp	r3, sl
 80025f6:	dc01      	bgt.n	80025fc <_printf_float+0x2b0>
 80025f8:	464b      	mov	r3, r9
 80025fa:	e793      	b.n	8002524 <_printf_float+0x1d8>
 80025fc:	2301      	movs	r3, #1
 80025fe:	465a      	mov	r2, fp
 8002600:	4631      	mov	r1, r6
 8002602:	4628      	mov	r0, r5
 8002604:	47b8      	blx	r7
 8002606:	3001      	adds	r0, #1
 8002608:	f43f aefb 	beq.w	8002402 <_printf_float+0xb6>
 800260c:	f10a 0a01 	add.w	sl, sl, #1
 8002610:	e7ee      	b.n	80025f0 <_printf_float+0x2a4>
 8002612:	bf00      	nop
 8002614:	7fefffff 	.word	0x7fefffff
 8002618:	0800690e 	.word	0x0800690e
 800261c:	08006912 	.word	0x08006912
 8002620:	08006916 	.word	0x08006916
 8002624:	0800691a 	.word	0x0800691a
 8002628:	0800691e 	.word	0x0800691e
 800262c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800262e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002632:	4553      	cmp	r3, sl
 8002634:	bfa8      	it	ge
 8002636:	4653      	movge	r3, sl
 8002638:	2b00      	cmp	r3, #0
 800263a:	4699      	mov	r9, r3
 800263c:	dc36      	bgt.n	80026ac <_printf_float+0x360>
 800263e:	f04f 0b00 	mov.w	fp, #0
 8002642:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002646:	f104 021a 	add.w	r2, r4, #26
 800264a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800264c:	9306      	str	r3, [sp, #24]
 800264e:	eba3 0309 	sub.w	r3, r3, r9
 8002652:	455b      	cmp	r3, fp
 8002654:	dc31      	bgt.n	80026ba <_printf_float+0x36e>
 8002656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002658:	459a      	cmp	sl, r3
 800265a:	dc3a      	bgt.n	80026d2 <_printf_float+0x386>
 800265c:	6823      	ldr	r3, [r4, #0]
 800265e:	07da      	lsls	r2, r3, #31
 8002660:	d437      	bmi.n	80026d2 <_printf_float+0x386>
 8002662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002664:	ebaa 0903 	sub.w	r9, sl, r3
 8002668:	9b06      	ldr	r3, [sp, #24]
 800266a:	ebaa 0303 	sub.w	r3, sl, r3
 800266e:	4599      	cmp	r9, r3
 8002670:	bfa8      	it	ge
 8002672:	4699      	movge	r9, r3
 8002674:	f1b9 0f00 	cmp.w	r9, #0
 8002678:	dc33      	bgt.n	80026e2 <_printf_float+0x396>
 800267a:	f04f 0800 	mov.w	r8, #0
 800267e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002682:	f104 0b1a 	add.w	fp, r4, #26
 8002686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002688:	ebaa 0303 	sub.w	r3, sl, r3
 800268c:	eba3 0309 	sub.w	r3, r3, r9
 8002690:	4543      	cmp	r3, r8
 8002692:	f77f af79 	ble.w	8002588 <_printf_float+0x23c>
 8002696:	2301      	movs	r3, #1
 8002698:	465a      	mov	r2, fp
 800269a:	4631      	mov	r1, r6
 800269c:	4628      	mov	r0, r5
 800269e:	47b8      	blx	r7
 80026a0:	3001      	adds	r0, #1
 80026a2:	f43f aeae 	beq.w	8002402 <_printf_float+0xb6>
 80026a6:	f108 0801 	add.w	r8, r8, #1
 80026aa:	e7ec      	b.n	8002686 <_printf_float+0x33a>
 80026ac:	4642      	mov	r2, r8
 80026ae:	4631      	mov	r1, r6
 80026b0:	4628      	mov	r0, r5
 80026b2:	47b8      	blx	r7
 80026b4:	3001      	adds	r0, #1
 80026b6:	d1c2      	bne.n	800263e <_printf_float+0x2f2>
 80026b8:	e6a3      	b.n	8002402 <_printf_float+0xb6>
 80026ba:	2301      	movs	r3, #1
 80026bc:	4631      	mov	r1, r6
 80026be:	4628      	mov	r0, r5
 80026c0:	9206      	str	r2, [sp, #24]
 80026c2:	47b8      	blx	r7
 80026c4:	3001      	adds	r0, #1
 80026c6:	f43f ae9c 	beq.w	8002402 <_printf_float+0xb6>
 80026ca:	9a06      	ldr	r2, [sp, #24]
 80026cc:	f10b 0b01 	add.w	fp, fp, #1
 80026d0:	e7bb      	b.n	800264a <_printf_float+0x2fe>
 80026d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80026d6:	4631      	mov	r1, r6
 80026d8:	4628      	mov	r0, r5
 80026da:	47b8      	blx	r7
 80026dc:	3001      	adds	r0, #1
 80026de:	d1c0      	bne.n	8002662 <_printf_float+0x316>
 80026e0:	e68f      	b.n	8002402 <_printf_float+0xb6>
 80026e2:	9a06      	ldr	r2, [sp, #24]
 80026e4:	464b      	mov	r3, r9
 80026e6:	4442      	add	r2, r8
 80026e8:	4631      	mov	r1, r6
 80026ea:	4628      	mov	r0, r5
 80026ec:	47b8      	blx	r7
 80026ee:	3001      	adds	r0, #1
 80026f0:	d1c3      	bne.n	800267a <_printf_float+0x32e>
 80026f2:	e686      	b.n	8002402 <_printf_float+0xb6>
 80026f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80026f8:	f1ba 0f01 	cmp.w	sl, #1
 80026fc:	dc01      	bgt.n	8002702 <_printf_float+0x3b6>
 80026fe:	07db      	lsls	r3, r3, #31
 8002700:	d536      	bpl.n	8002770 <_printf_float+0x424>
 8002702:	2301      	movs	r3, #1
 8002704:	4642      	mov	r2, r8
 8002706:	4631      	mov	r1, r6
 8002708:	4628      	mov	r0, r5
 800270a:	47b8      	blx	r7
 800270c:	3001      	adds	r0, #1
 800270e:	f43f ae78 	beq.w	8002402 <_printf_float+0xb6>
 8002712:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002716:	4631      	mov	r1, r6
 8002718:	4628      	mov	r0, r5
 800271a:	47b8      	blx	r7
 800271c:	3001      	adds	r0, #1
 800271e:	f43f ae70 	beq.w	8002402 <_printf_float+0xb6>
 8002722:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002726:	2200      	movs	r2, #0
 8002728:	2300      	movs	r3, #0
 800272a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800272e:	f7fe f9d3 	bl	8000ad8 <__aeabi_dcmpeq>
 8002732:	b9c0      	cbnz	r0, 8002766 <_printf_float+0x41a>
 8002734:	4653      	mov	r3, sl
 8002736:	f108 0201 	add.w	r2, r8, #1
 800273a:	4631      	mov	r1, r6
 800273c:	4628      	mov	r0, r5
 800273e:	47b8      	blx	r7
 8002740:	3001      	adds	r0, #1
 8002742:	d10c      	bne.n	800275e <_printf_float+0x412>
 8002744:	e65d      	b.n	8002402 <_printf_float+0xb6>
 8002746:	2301      	movs	r3, #1
 8002748:	465a      	mov	r2, fp
 800274a:	4631      	mov	r1, r6
 800274c:	4628      	mov	r0, r5
 800274e:	47b8      	blx	r7
 8002750:	3001      	adds	r0, #1
 8002752:	f43f ae56 	beq.w	8002402 <_printf_float+0xb6>
 8002756:	f108 0801 	add.w	r8, r8, #1
 800275a:	45d0      	cmp	r8, sl
 800275c:	dbf3      	blt.n	8002746 <_printf_float+0x3fa>
 800275e:	464b      	mov	r3, r9
 8002760:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002764:	e6df      	b.n	8002526 <_printf_float+0x1da>
 8002766:	f04f 0800 	mov.w	r8, #0
 800276a:	f104 0b1a 	add.w	fp, r4, #26
 800276e:	e7f4      	b.n	800275a <_printf_float+0x40e>
 8002770:	2301      	movs	r3, #1
 8002772:	4642      	mov	r2, r8
 8002774:	e7e1      	b.n	800273a <_printf_float+0x3ee>
 8002776:	2301      	movs	r3, #1
 8002778:	464a      	mov	r2, r9
 800277a:	4631      	mov	r1, r6
 800277c:	4628      	mov	r0, r5
 800277e:	47b8      	blx	r7
 8002780:	3001      	adds	r0, #1
 8002782:	f43f ae3e 	beq.w	8002402 <_printf_float+0xb6>
 8002786:	f108 0801 	add.w	r8, r8, #1
 800278a:	68e3      	ldr	r3, [r4, #12]
 800278c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800278e:	1a5b      	subs	r3, r3, r1
 8002790:	4543      	cmp	r3, r8
 8002792:	dcf0      	bgt.n	8002776 <_printf_float+0x42a>
 8002794:	e6fc      	b.n	8002590 <_printf_float+0x244>
 8002796:	f04f 0800 	mov.w	r8, #0
 800279a:	f104 0919 	add.w	r9, r4, #25
 800279e:	e7f4      	b.n	800278a <_printf_float+0x43e>

080027a0 <_printf_common>:
 80027a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027a4:	4616      	mov	r6, r2
 80027a6:	4698      	mov	r8, r3
 80027a8:	688a      	ldr	r2, [r1, #8]
 80027aa:	690b      	ldr	r3, [r1, #16]
 80027ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80027b0:	4293      	cmp	r3, r2
 80027b2:	bfb8      	it	lt
 80027b4:	4613      	movlt	r3, r2
 80027b6:	6033      	str	r3, [r6, #0]
 80027b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80027bc:	4607      	mov	r7, r0
 80027be:	460c      	mov	r4, r1
 80027c0:	b10a      	cbz	r2, 80027c6 <_printf_common+0x26>
 80027c2:	3301      	adds	r3, #1
 80027c4:	6033      	str	r3, [r6, #0]
 80027c6:	6823      	ldr	r3, [r4, #0]
 80027c8:	0699      	lsls	r1, r3, #26
 80027ca:	bf42      	ittt	mi
 80027cc:	6833      	ldrmi	r3, [r6, #0]
 80027ce:	3302      	addmi	r3, #2
 80027d0:	6033      	strmi	r3, [r6, #0]
 80027d2:	6825      	ldr	r5, [r4, #0]
 80027d4:	f015 0506 	ands.w	r5, r5, #6
 80027d8:	d106      	bne.n	80027e8 <_printf_common+0x48>
 80027da:	f104 0a19 	add.w	sl, r4, #25
 80027de:	68e3      	ldr	r3, [r4, #12]
 80027e0:	6832      	ldr	r2, [r6, #0]
 80027e2:	1a9b      	subs	r3, r3, r2
 80027e4:	42ab      	cmp	r3, r5
 80027e6:	dc26      	bgt.n	8002836 <_printf_common+0x96>
 80027e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80027ec:	6822      	ldr	r2, [r4, #0]
 80027ee:	3b00      	subs	r3, #0
 80027f0:	bf18      	it	ne
 80027f2:	2301      	movne	r3, #1
 80027f4:	0692      	lsls	r2, r2, #26
 80027f6:	d42b      	bmi.n	8002850 <_printf_common+0xb0>
 80027f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80027fc:	4641      	mov	r1, r8
 80027fe:	4638      	mov	r0, r7
 8002800:	47c8      	blx	r9
 8002802:	3001      	adds	r0, #1
 8002804:	d01e      	beq.n	8002844 <_printf_common+0xa4>
 8002806:	6823      	ldr	r3, [r4, #0]
 8002808:	6922      	ldr	r2, [r4, #16]
 800280a:	f003 0306 	and.w	r3, r3, #6
 800280e:	2b04      	cmp	r3, #4
 8002810:	bf02      	ittt	eq
 8002812:	68e5      	ldreq	r5, [r4, #12]
 8002814:	6833      	ldreq	r3, [r6, #0]
 8002816:	1aed      	subeq	r5, r5, r3
 8002818:	68a3      	ldr	r3, [r4, #8]
 800281a:	bf0c      	ite	eq
 800281c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002820:	2500      	movne	r5, #0
 8002822:	4293      	cmp	r3, r2
 8002824:	bfc4      	itt	gt
 8002826:	1a9b      	subgt	r3, r3, r2
 8002828:	18ed      	addgt	r5, r5, r3
 800282a:	2600      	movs	r6, #0
 800282c:	341a      	adds	r4, #26
 800282e:	42b5      	cmp	r5, r6
 8002830:	d11a      	bne.n	8002868 <_printf_common+0xc8>
 8002832:	2000      	movs	r0, #0
 8002834:	e008      	b.n	8002848 <_printf_common+0xa8>
 8002836:	2301      	movs	r3, #1
 8002838:	4652      	mov	r2, sl
 800283a:	4641      	mov	r1, r8
 800283c:	4638      	mov	r0, r7
 800283e:	47c8      	blx	r9
 8002840:	3001      	adds	r0, #1
 8002842:	d103      	bne.n	800284c <_printf_common+0xac>
 8002844:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800284c:	3501      	adds	r5, #1
 800284e:	e7c6      	b.n	80027de <_printf_common+0x3e>
 8002850:	18e1      	adds	r1, r4, r3
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	2030      	movs	r0, #48	@ 0x30
 8002856:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800285a:	4422      	add	r2, r4
 800285c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002860:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002864:	3302      	adds	r3, #2
 8002866:	e7c7      	b.n	80027f8 <_printf_common+0x58>
 8002868:	2301      	movs	r3, #1
 800286a:	4622      	mov	r2, r4
 800286c:	4641      	mov	r1, r8
 800286e:	4638      	mov	r0, r7
 8002870:	47c8      	blx	r9
 8002872:	3001      	adds	r0, #1
 8002874:	d0e6      	beq.n	8002844 <_printf_common+0xa4>
 8002876:	3601      	adds	r6, #1
 8002878:	e7d9      	b.n	800282e <_printf_common+0x8e>
	...

0800287c <_printf_i>:
 800287c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002880:	7e0f      	ldrb	r7, [r1, #24]
 8002882:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002884:	2f78      	cmp	r7, #120	@ 0x78
 8002886:	4691      	mov	r9, r2
 8002888:	4680      	mov	r8, r0
 800288a:	460c      	mov	r4, r1
 800288c:	469a      	mov	sl, r3
 800288e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002892:	d807      	bhi.n	80028a4 <_printf_i+0x28>
 8002894:	2f62      	cmp	r7, #98	@ 0x62
 8002896:	d80a      	bhi.n	80028ae <_printf_i+0x32>
 8002898:	2f00      	cmp	r7, #0
 800289a:	f000 80d2 	beq.w	8002a42 <_printf_i+0x1c6>
 800289e:	2f58      	cmp	r7, #88	@ 0x58
 80028a0:	f000 80b9 	beq.w	8002a16 <_printf_i+0x19a>
 80028a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80028a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80028ac:	e03a      	b.n	8002924 <_printf_i+0xa8>
 80028ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80028b2:	2b15      	cmp	r3, #21
 80028b4:	d8f6      	bhi.n	80028a4 <_printf_i+0x28>
 80028b6:	a101      	add	r1, pc, #4	@ (adr r1, 80028bc <_printf_i+0x40>)
 80028b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80028bc:	08002915 	.word	0x08002915
 80028c0:	08002929 	.word	0x08002929
 80028c4:	080028a5 	.word	0x080028a5
 80028c8:	080028a5 	.word	0x080028a5
 80028cc:	080028a5 	.word	0x080028a5
 80028d0:	080028a5 	.word	0x080028a5
 80028d4:	08002929 	.word	0x08002929
 80028d8:	080028a5 	.word	0x080028a5
 80028dc:	080028a5 	.word	0x080028a5
 80028e0:	080028a5 	.word	0x080028a5
 80028e4:	080028a5 	.word	0x080028a5
 80028e8:	08002a29 	.word	0x08002a29
 80028ec:	08002953 	.word	0x08002953
 80028f0:	080029e3 	.word	0x080029e3
 80028f4:	080028a5 	.word	0x080028a5
 80028f8:	080028a5 	.word	0x080028a5
 80028fc:	08002a4b 	.word	0x08002a4b
 8002900:	080028a5 	.word	0x080028a5
 8002904:	08002953 	.word	0x08002953
 8002908:	080028a5 	.word	0x080028a5
 800290c:	080028a5 	.word	0x080028a5
 8002910:	080029eb 	.word	0x080029eb
 8002914:	6833      	ldr	r3, [r6, #0]
 8002916:	1d1a      	adds	r2, r3, #4
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6032      	str	r2, [r6, #0]
 800291c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002920:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002924:	2301      	movs	r3, #1
 8002926:	e09d      	b.n	8002a64 <_printf_i+0x1e8>
 8002928:	6833      	ldr	r3, [r6, #0]
 800292a:	6820      	ldr	r0, [r4, #0]
 800292c:	1d19      	adds	r1, r3, #4
 800292e:	6031      	str	r1, [r6, #0]
 8002930:	0606      	lsls	r6, r0, #24
 8002932:	d501      	bpl.n	8002938 <_printf_i+0xbc>
 8002934:	681d      	ldr	r5, [r3, #0]
 8002936:	e003      	b.n	8002940 <_printf_i+0xc4>
 8002938:	0645      	lsls	r5, r0, #25
 800293a:	d5fb      	bpl.n	8002934 <_printf_i+0xb8>
 800293c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002940:	2d00      	cmp	r5, #0
 8002942:	da03      	bge.n	800294c <_printf_i+0xd0>
 8002944:	232d      	movs	r3, #45	@ 0x2d
 8002946:	426d      	negs	r5, r5
 8002948:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800294c:	4859      	ldr	r0, [pc, #356]	@ (8002ab4 <_printf_i+0x238>)
 800294e:	230a      	movs	r3, #10
 8002950:	e011      	b.n	8002976 <_printf_i+0xfa>
 8002952:	6821      	ldr	r1, [r4, #0]
 8002954:	6833      	ldr	r3, [r6, #0]
 8002956:	0608      	lsls	r0, r1, #24
 8002958:	f853 5b04 	ldr.w	r5, [r3], #4
 800295c:	d402      	bmi.n	8002964 <_printf_i+0xe8>
 800295e:	0649      	lsls	r1, r1, #25
 8002960:	bf48      	it	mi
 8002962:	b2ad      	uxthmi	r5, r5
 8002964:	2f6f      	cmp	r7, #111	@ 0x6f
 8002966:	4853      	ldr	r0, [pc, #332]	@ (8002ab4 <_printf_i+0x238>)
 8002968:	6033      	str	r3, [r6, #0]
 800296a:	bf14      	ite	ne
 800296c:	230a      	movne	r3, #10
 800296e:	2308      	moveq	r3, #8
 8002970:	2100      	movs	r1, #0
 8002972:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002976:	6866      	ldr	r6, [r4, #4]
 8002978:	60a6      	str	r6, [r4, #8]
 800297a:	2e00      	cmp	r6, #0
 800297c:	bfa2      	ittt	ge
 800297e:	6821      	ldrge	r1, [r4, #0]
 8002980:	f021 0104 	bicge.w	r1, r1, #4
 8002984:	6021      	strge	r1, [r4, #0]
 8002986:	b90d      	cbnz	r5, 800298c <_printf_i+0x110>
 8002988:	2e00      	cmp	r6, #0
 800298a:	d04b      	beq.n	8002a24 <_printf_i+0x1a8>
 800298c:	4616      	mov	r6, r2
 800298e:	fbb5 f1f3 	udiv	r1, r5, r3
 8002992:	fb03 5711 	mls	r7, r3, r1, r5
 8002996:	5dc7      	ldrb	r7, [r0, r7]
 8002998:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800299c:	462f      	mov	r7, r5
 800299e:	42bb      	cmp	r3, r7
 80029a0:	460d      	mov	r5, r1
 80029a2:	d9f4      	bls.n	800298e <_printf_i+0x112>
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d10b      	bne.n	80029c0 <_printf_i+0x144>
 80029a8:	6823      	ldr	r3, [r4, #0]
 80029aa:	07df      	lsls	r7, r3, #31
 80029ac:	d508      	bpl.n	80029c0 <_printf_i+0x144>
 80029ae:	6923      	ldr	r3, [r4, #16]
 80029b0:	6861      	ldr	r1, [r4, #4]
 80029b2:	4299      	cmp	r1, r3
 80029b4:	bfde      	ittt	le
 80029b6:	2330      	movle	r3, #48	@ 0x30
 80029b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80029bc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80029c0:	1b92      	subs	r2, r2, r6
 80029c2:	6122      	str	r2, [r4, #16]
 80029c4:	f8cd a000 	str.w	sl, [sp]
 80029c8:	464b      	mov	r3, r9
 80029ca:	aa03      	add	r2, sp, #12
 80029cc:	4621      	mov	r1, r4
 80029ce:	4640      	mov	r0, r8
 80029d0:	f7ff fee6 	bl	80027a0 <_printf_common>
 80029d4:	3001      	adds	r0, #1
 80029d6:	d14a      	bne.n	8002a6e <_printf_i+0x1f2>
 80029d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80029dc:	b004      	add	sp, #16
 80029de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029e2:	6823      	ldr	r3, [r4, #0]
 80029e4:	f043 0320 	orr.w	r3, r3, #32
 80029e8:	6023      	str	r3, [r4, #0]
 80029ea:	4833      	ldr	r0, [pc, #204]	@ (8002ab8 <_printf_i+0x23c>)
 80029ec:	2778      	movs	r7, #120	@ 0x78
 80029ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80029f2:	6823      	ldr	r3, [r4, #0]
 80029f4:	6831      	ldr	r1, [r6, #0]
 80029f6:	061f      	lsls	r7, r3, #24
 80029f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80029fc:	d402      	bmi.n	8002a04 <_printf_i+0x188>
 80029fe:	065f      	lsls	r7, r3, #25
 8002a00:	bf48      	it	mi
 8002a02:	b2ad      	uxthmi	r5, r5
 8002a04:	6031      	str	r1, [r6, #0]
 8002a06:	07d9      	lsls	r1, r3, #31
 8002a08:	bf44      	itt	mi
 8002a0a:	f043 0320 	orrmi.w	r3, r3, #32
 8002a0e:	6023      	strmi	r3, [r4, #0]
 8002a10:	b11d      	cbz	r5, 8002a1a <_printf_i+0x19e>
 8002a12:	2310      	movs	r3, #16
 8002a14:	e7ac      	b.n	8002970 <_printf_i+0xf4>
 8002a16:	4827      	ldr	r0, [pc, #156]	@ (8002ab4 <_printf_i+0x238>)
 8002a18:	e7e9      	b.n	80029ee <_printf_i+0x172>
 8002a1a:	6823      	ldr	r3, [r4, #0]
 8002a1c:	f023 0320 	bic.w	r3, r3, #32
 8002a20:	6023      	str	r3, [r4, #0]
 8002a22:	e7f6      	b.n	8002a12 <_printf_i+0x196>
 8002a24:	4616      	mov	r6, r2
 8002a26:	e7bd      	b.n	80029a4 <_printf_i+0x128>
 8002a28:	6833      	ldr	r3, [r6, #0]
 8002a2a:	6825      	ldr	r5, [r4, #0]
 8002a2c:	6961      	ldr	r1, [r4, #20]
 8002a2e:	1d18      	adds	r0, r3, #4
 8002a30:	6030      	str	r0, [r6, #0]
 8002a32:	062e      	lsls	r6, r5, #24
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	d501      	bpl.n	8002a3c <_printf_i+0x1c0>
 8002a38:	6019      	str	r1, [r3, #0]
 8002a3a:	e002      	b.n	8002a42 <_printf_i+0x1c6>
 8002a3c:	0668      	lsls	r0, r5, #25
 8002a3e:	d5fb      	bpl.n	8002a38 <_printf_i+0x1bc>
 8002a40:	8019      	strh	r1, [r3, #0]
 8002a42:	2300      	movs	r3, #0
 8002a44:	6123      	str	r3, [r4, #16]
 8002a46:	4616      	mov	r6, r2
 8002a48:	e7bc      	b.n	80029c4 <_printf_i+0x148>
 8002a4a:	6833      	ldr	r3, [r6, #0]
 8002a4c:	1d1a      	adds	r2, r3, #4
 8002a4e:	6032      	str	r2, [r6, #0]
 8002a50:	681e      	ldr	r6, [r3, #0]
 8002a52:	6862      	ldr	r2, [r4, #4]
 8002a54:	2100      	movs	r1, #0
 8002a56:	4630      	mov	r0, r6
 8002a58:	f7fd fbc2 	bl	80001e0 <memchr>
 8002a5c:	b108      	cbz	r0, 8002a62 <_printf_i+0x1e6>
 8002a5e:	1b80      	subs	r0, r0, r6
 8002a60:	6060      	str	r0, [r4, #4]
 8002a62:	6863      	ldr	r3, [r4, #4]
 8002a64:	6123      	str	r3, [r4, #16]
 8002a66:	2300      	movs	r3, #0
 8002a68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002a6c:	e7aa      	b.n	80029c4 <_printf_i+0x148>
 8002a6e:	6923      	ldr	r3, [r4, #16]
 8002a70:	4632      	mov	r2, r6
 8002a72:	4649      	mov	r1, r9
 8002a74:	4640      	mov	r0, r8
 8002a76:	47d0      	blx	sl
 8002a78:	3001      	adds	r0, #1
 8002a7a:	d0ad      	beq.n	80029d8 <_printf_i+0x15c>
 8002a7c:	6823      	ldr	r3, [r4, #0]
 8002a7e:	079b      	lsls	r3, r3, #30
 8002a80:	d413      	bmi.n	8002aaa <_printf_i+0x22e>
 8002a82:	68e0      	ldr	r0, [r4, #12]
 8002a84:	9b03      	ldr	r3, [sp, #12]
 8002a86:	4298      	cmp	r0, r3
 8002a88:	bfb8      	it	lt
 8002a8a:	4618      	movlt	r0, r3
 8002a8c:	e7a6      	b.n	80029dc <_printf_i+0x160>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	4632      	mov	r2, r6
 8002a92:	4649      	mov	r1, r9
 8002a94:	4640      	mov	r0, r8
 8002a96:	47d0      	blx	sl
 8002a98:	3001      	adds	r0, #1
 8002a9a:	d09d      	beq.n	80029d8 <_printf_i+0x15c>
 8002a9c:	3501      	adds	r5, #1
 8002a9e:	68e3      	ldr	r3, [r4, #12]
 8002aa0:	9903      	ldr	r1, [sp, #12]
 8002aa2:	1a5b      	subs	r3, r3, r1
 8002aa4:	42ab      	cmp	r3, r5
 8002aa6:	dcf2      	bgt.n	8002a8e <_printf_i+0x212>
 8002aa8:	e7eb      	b.n	8002a82 <_printf_i+0x206>
 8002aaa:	2500      	movs	r5, #0
 8002aac:	f104 0619 	add.w	r6, r4, #25
 8002ab0:	e7f5      	b.n	8002a9e <_printf_i+0x222>
 8002ab2:	bf00      	nop
 8002ab4:	08006920 	.word	0x08006920
 8002ab8:	08006931 	.word	0x08006931

08002abc <_scanf_float>:
 8002abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ac0:	b087      	sub	sp, #28
 8002ac2:	4617      	mov	r7, r2
 8002ac4:	9303      	str	r3, [sp, #12]
 8002ac6:	688b      	ldr	r3, [r1, #8]
 8002ac8:	1e5a      	subs	r2, r3, #1
 8002aca:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8002ace:	bf81      	itttt	hi
 8002ad0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8002ad4:	eb03 0b05 	addhi.w	fp, r3, r5
 8002ad8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8002adc:	608b      	strhi	r3, [r1, #8]
 8002ade:	680b      	ldr	r3, [r1, #0]
 8002ae0:	460a      	mov	r2, r1
 8002ae2:	f04f 0500 	mov.w	r5, #0
 8002ae6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8002aea:	f842 3b1c 	str.w	r3, [r2], #28
 8002aee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8002af2:	4680      	mov	r8, r0
 8002af4:	460c      	mov	r4, r1
 8002af6:	bf98      	it	ls
 8002af8:	f04f 0b00 	movls.w	fp, #0
 8002afc:	9201      	str	r2, [sp, #4]
 8002afe:	4616      	mov	r6, r2
 8002b00:	46aa      	mov	sl, r5
 8002b02:	46a9      	mov	r9, r5
 8002b04:	9502      	str	r5, [sp, #8]
 8002b06:	68a2      	ldr	r2, [r4, #8]
 8002b08:	b152      	cbz	r2, 8002b20 <_scanf_float+0x64>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b4e      	cmp	r3, #78	@ 0x4e
 8002b10:	d864      	bhi.n	8002bdc <_scanf_float+0x120>
 8002b12:	2b40      	cmp	r3, #64	@ 0x40
 8002b14:	d83c      	bhi.n	8002b90 <_scanf_float+0xd4>
 8002b16:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8002b1a:	b2c8      	uxtb	r0, r1
 8002b1c:	280e      	cmp	r0, #14
 8002b1e:	d93a      	bls.n	8002b96 <_scanf_float+0xda>
 8002b20:	f1b9 0f00 	cmp.w	r9, #0
 8002b24:	d003      	beq.n	8002b2e <_scanf_float+0x72>
 8002b26:	6823      	ldr	r3, [r4, #0]
 8002b28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b2c:	6023      	str	r3, [r4, #0]
 8002b2e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8002b32:	f1ba 0f01 	cmp.w	sl, #1
 8002b36:	f200 8117 	bhi.w	8002d68 <_scanf_float+0x2ac>
 8002b3a:	9b01      	ldr	r3, [sp, #4]
 8002b3c:	429e      	cmp	r6, r3
 8002b3e:	f200 8108 	bhi.w	8002d52 <_scanf_float+0x296>
 8002b42:	2001      	movs	r0, #1
 8002b44:	b007      	add	sp, #28
 8002b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b4a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8002b4e:	2a0d      	cmp	r2, #13
 8002b50:	d8e6      	bhi.n	8002b20 <_scanf_float+0x64>
 8002b52:	a101      	add	r1, pc, #4	@ (adr r1, 8002b58 <_scanf_float+0x9c>)
 8002b54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002b58:	08002c9f 	.word	0x08002c9f
 8002b5c:	08002b21 	.word	0x08002b21
 8002b60:	08002b21 	.word	0x08002b21
 8002b64:	08002b21 	.word	0x08002b21
 8002b68:	08002cff 	.word	0x08002cff
 8002b6c:	08002cd7 	.word	0x08002cd7
 8002b70:	08002b21 	.word	0x08002b21
 8002b74:	08002b21 	.word	0x08002b21
 8002b78:	08002cad 	.word	0x08002cad
 8002b7c:	08002b21 	.word	0x08002b21
 8002b80:	08002b21 	.word	0x08002b21
 8002b84:	08002b21 	.word	0x08002b21
 8002b88:	08002b21 	.word	0x08002b21
 8002b8c:	08002c65 	.word	0x08002c65
 8002b90:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8002b94:	e7db      	b.n	8002b4e <_scanf_float+0x92>
 8002b96:	290e      	cmp	r1, #14
 8002b98:	d8c2      	bhi.n	8002b20 <_scanf_float+0x64>
 8002b9a:	a001      	add	r0, pc, #4	@ (adr r0, 8002ba0 <_scanf_float+0xe4>)
 8002b9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8002ba0:	08002c55 	.word	0x08002c55
 8002ba4:	08002b21 	.word	0x08002b21
 8002ba8:	08002c55 	.word	0x08002c55
 8002bac:	08002ceb 	.word	0x08002ceb
 8002bb0:	08002b21 	.word	0x08002b21
 8002bb4:	08002bfd 	.word	0x08002bfd
 8002bb8:	08002c3b 	.word	0x08002c3b
 8002bbc:	08002c3b 	.word	0x08002c3b
 8002bc0:	08002c3b 	.word	0x08002c3b
 8002bc4:	08002c3b 	.word	0x08002c3b
 8002bc8:	08002c3b 	.word	0x08002c3b
 8002bcc:	08002c3b 	.word	0x08002c3b
 8002bd0:	08002c3b 	.word	0x08002c3b
 8002bd4:	08002c3b 	.word	0x08002c3b
 8002bd8:	08002c3b 	.word	0x08002c3b
 8002bdc:	2b6e      	cmp	r3, #110	@ 0x6e
 8002bde:	d809      	bhi.n	8002bf4 <_scanf_float+0x138>
 8002be0:	2b60      	cmp	r3, #96	@ 0x60
 8002be2:	d8b2      	bhi.n	8002b4a <_scanf_float+0x8e>
 8002be4:	2b54      	cmp	r3, #84	@ 0x54
 8002be6:	d07b      	beq.n	8002ce0 <_scanf_float+0x224>
 8002be8:	2b59      	cmp	r3, #89	@ 0x59
 8002bea:	d199      	bne.n	8002b20 <_scanf_float+0x64>
 8002bec:	2d07      	cmp	r5, #7
 8002bee:	d197      	bne.n	8002b20 <_scanf_float+0x64>
 8002bf0:	2508      	movs	r5, #8
 8002bf2:	e02c      	b.n	8002c4e <_scanf_float+0x192>
 8002bf4:	2b74      	cmp	r3, #116	@ 0x74
 8002bf6:	d073      	beq.n	8002ce0 <_scanf_float+0x224>
 8002bf8:	2b79      	cmp	r3, #121	@ 0x79
 8002bfa:	e7f6      	b.n	8002bea <_scanf_float+0x12e>
 8002bfc:	6821      	ldr	r1, [r4, #0]
 8002bfe:	05c8      	lsls	r0, r1, #23
 8002c00:	d51b      	bpl.n	8002c3a <_scanf_float+0x17e>
 8002c02:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8002c06:	6021      	str	r1, [r4, #0]
 8002c08:	f109 0901 	add.w	r9, r9, #1
 8002c0c:	f1bb 0f00 	cmp.w	fp, #0
 8002c10:	d003      	beq.n	8002c1a <_scanf_float+0x15e>
 8002c12:	3201      	adds	r2, #1
 8002c14:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8002c18:	60a2      	str	r2, [r4, #8]
 8002c1a:	68a3      	ldr	r3, [r4, #8]
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	60a3      	str	r3, [r4, #8]
 8002c20:	6923      	ldr	r3, [r4, #16]
 8002c22:	3301      	adds	r3, #1
 8002c24:	6123      	str	r3, [r4, #16]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	607b      	str	r3, [r7, #4]
 8002c2e:	f340 8087 	ble.w	8002d40 <_scanf_float+0x284>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	3301      	adds	r3, #1
 8002c36:	603b      	str	r3, [r7, #0]
 8002c38:	e765      	b.n	8002b06 <_scanf_float+0x4a>
 8002c3a:	eb1a 0105 	adds.w	r1, sl, r5
 8002c3e:	f47f af6f 	bne.w	8002b20 <_scanf_float+0x64>
 8002c42:	6822      	ldr	r2, [r4, #0]
 8002c44:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8002c48:	6022      	str	r2, [r4, #0]
 8002c4a:	460d      	mov	r5, r1
 8002c4c:	468a      	mov	sl, r1
 8002c4e:	f806 3b01 	strb.w	r3, [r6], #1
 8002c52:	e7e2      	b.n	8002c1a <_scanf_float+0x15e>
 8002c54:	6822      	ldr	r2, [r4, #0]
 8002c56:	0610      	lsls	r0, r2, #24
 8002c58:	f57f af62 	bpl.w	8002b20 <_scanf_float+0x64>
 8002c5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c60:	6022      	str	r2, [r4, #0]
 8002c62:	e7f4      	b.n	8002c4e <_scanf_float+0x192>
 8002c64:	f1ba 0f00 	cmp.w	sl, #0
 8002c68:	d10e      	bne.n	8002c88 <_scanf_float+0x1cc>
 8002c6a:	f1b9 0f00 	cmp.w	r9, #0
 8002c6e:	d10e      	bne.n	8002c8e <_scanf_float+0x1d2>
 8002c70:	6822      	ldr	r2, [r4, #0]
 8002c72:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8002c76:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8002c7a:	d108      	bne.n	8002c8e <_scanf_float+0x1d2>
 8002c7c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8002c80:	6022      	str	r2, [r4, #0]
 8002c82:	f04f 0a01 	mov.w	sl, #1
 8002c86:	e7e2      	b.n	8002c4e <_scanf_float+0x192>
 8002c88:	f1ba 0f02 	cmp.w	sl, #2
 8002c8c:	d055      	beq.n	8002d3a <_scanf_float+0x27e>
 8002c8e:	2d01      	cmp	r5, #1
 8002c90:	d002      	beq.n	8002c98 <_scanf_float+0x1dc>
 8002c92:	2d04      	cmp	r5, #4
 8002c94:	f47f af44 	bne.w	8002b20 <_scanf_float+0x64>
 8002c98:	3501      	adds	r5, #1
 8002c9a:	b2ed      	uxtb	r5, r5
 8002c9c:	e7d7      	b.n	8002c4e <_scanf_float+0x192>
 8002c9e:	f1ba 0f01 	cmp.w	sl, #1
 8002ca2:	f47f af3d 	bne.w	8002b20 <_scanf_float+0x64>
 8002ca6:	f04f 0a02 	mov.w	sl, #2
 8002caa:	e7d0      	b.n	8002c4e <_scanf_float+0x192>
 8002cac:	b97d      	cbnz	r5, 8002cce <_scanf_float+0x212>
 8002cae:	f1b9 0f00 	cmp.w	r9, #0
 8002cb2:	f47f af38 	bne.w	8002b26 <_scanf_float+0x6a>
 8002cb6:	6822      	ldr	r2, [r4, #0]
 8002cb8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8002cbc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8002cc0:	f040 8108 	bne.w	8002ed4 <_scanf_float+0x418>
 8002cc4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8002cc8:	6022      	str	r2, [r4, #0]
 8002cca:	2501      	movs	r5, #1
 8002ccc:	e7bf      	b.n	8002c4e <_scanf_float+0x192>
 8002cce:	2d03      	cmp	r5, #3
 8002cd0:	d0e2      	beq.n	8002c98 <_scanf_float+0x1dc>
 8002cd2:	2d05      	cmp	r5, #5
 8002cd4:	e7de      	b.n	8002c94 <_scanf_float+0x1d8>
 8002cd6:	2d02      	cmp	r5, #2
 8002cd8:	f47f af22 	bne.w	8002b20 <_scanf_float+0x64>
 8002cdc:	2503      	movs	r5, #3
 8002cde:	e7b6      	b.n	8002c4e <_scanf_float+0x192>
 8002ce0:	2d06      	cmp	r5, #6
 8002ce2:	f47f af1d 	bne.w	8002b20 <_scanf_float+0x64>
 8002ce6:	2507      	movs	r5, #7
 8002ce8:	e7b1      	b.n	8002c4e <_scanf_float+0x192>
 8002cea:	6822      	ldr	r2, [r4, #0]
 8002cec:	0591      	lsls	r1, r2, #22
 8002cee:	f57f af17 	bpl.w	8002b20 <_scanf_float+0x64>
 8002cf2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8002cf6:	6022      	str	r2, [r4, #0]
 8002cf8:	f8cd 9008 	str.w	r9, [sp, #8]
 8002cfc:	e7a7      	b.n	8002c4e <_scanf_float+0x192>
 8002cfe:	6822      	ldr	r2, [r4, #0]
 8002d00:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8002d04:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8002d08:	d006      	beq.n	8002d18 <_scanf_float+0x25c>
 8002d0a:	0550      	lsls	r0, r2, #21
 8002d0c:	f57f af08 	bpl.w	8002b20 <_scanf_float+0x64>
 8002d10:	f1b9 0f00 	cmp.w	r9, #0
 8002d14:	f000 80de 	beq.w	8002ed4 <_scanf_float+0x418>
 8002d18:	0591      	lsls	r1, r2, #22
 8002d1a:	bf58      	it	pl
 8002d1c:	9902      	ldrpl	r1, [sp, #8]
 8002d1e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8002d22:	bf58      	it	pl
 8002d24:	eba9 0101 	subpl.w	r1, r9, r1
 8002d28:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8002d2c:	bf58      	it	pl
 8002d2e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8002d32:	6022      	str	r2, [r4, #0]
 8002d34:	f04f 0900 	mov.w	r9, #0
 8002d38:	e789      	b.n	8002c4e <_scanf_float+0x192>
 8002d3a:	f04f 0a03 	mov.w	sl, #3
 8002d3e:	e786      	b.n	8002c4e <_scanf_float+0x192>
 8002d40:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8002d44:	4639      	mov	r1, r7
 8002d46:	4640      	mov	r0, r8
 8002d48:	4798      	blx	r3
 8002d4a:	2800      	cmp	r0, #0
 8002d4c:	f43f aedb 	beq.w	8002b06 <_scanf_float+0x4a>
 8002d50:	e6e6      	b.n	8002b20 <_scanf_float+0x64>
 8002d52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8002d56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002d5a:	463a      	mov	r2, r7
 8002d5c:	4640      	mov	r0, r8
 8002d5e:	4798      	blx	r3
 8002d60:	6923      	ldr	r3, [r4, #16]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	6123      	str	r3, [r4, #16]
 8002d66:	e6e8      	b.n	8002b3a <_scanf_float+0x7e>
 8002d68:	1e6b      	subs	r3, r5, #1
 8002d6a:	2b06      	cmp	r3, #6
 8002d6c:	d824      	bhi.n	8002db8 <_scanf_float+0x2fc>
 8002d6e:	2d02      	cmp	r5, #2
 8002d70:	d836      	bhi.n	8002de0 <_scanf_float+0x324>
 8002d72:	9b01      	ldr	r3, [sp, #4]
 8002d74:	429e      	cmp	r6, r3
 8002d76:	f67f aee4 	bls.w	8002b42 <_scanf_float+0x86>
 8002d7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8002d7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002d82:	463a      	mov	r2, r7
 8002d84:	4640      	mov	r0, r8
 8002d86:	4798      	blx	r3
 8002d88:	6923      	ldr	r3, [r4, #16]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	6123      	str	r3, [r4, #16]
 8002d8e:	e7f0      	b.n	8002d72 <_scanf_float+0x2b6>
 8002d90:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8002d94:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8002d98:	463a      	mov	r2, r7
 8002d9a:	4640      	mov	r0, r8
 8002d9c:	4798      	blx	r3
 8002d9e:	6923      	ldr	r3, [r4, #16]
 8002da0:	3b01      	subs	r3, #1
 8002da2:	6123      	str	r3, [r4, #16]
 8002da4:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8002da8:	fa5f fa8a 	uxtb.w	sl, sl
 8002dac:	f1ba 0f02 	cmp.w	sl, #2
 8002db0:	d1ee      	bne.n	8002d90 <_scanf_float+0x2d4>
 8002db2:	3d03      	subs	r5, #3
 8002db4:	b2ed      	uxtb	r5, r5
 8002db6:	1b76      	subs	r6, r6, r5
 8002db8:	6823      	ldr	r3, [r4, #0]
 8002dba:	05da      	lsls	r2, r3, #23
 8002dbc:	d530      	bpl.n	8002e20 <_scanf_float+0x364>
 8002dbe:	055b      	lsls	r3, r3, #21
 8002dc0:	d511      	bpl.n	8002de6 <_scanf_float+0x32a>
 8002dc2:	9b01      	ldr	r3, [sp, #4]
 8002dc4:	429e      	cmp	r6, r3
 8002dc6:	f67f aebc 	bls.w	8002b42 <_scanf_float+0x86>
 8002dca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8002dce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002dd2:	463a      	mov	r2, r7
 8002dd4:	4640      	mov	r0, r8
 8002dd6:	4798      	blx	r3
 8002dd8:	6923      	ldr	r3, [r4, #16]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	6123      	str	r3, [r4, #16]
 8002dde:	e7f0      	b.n	8002dc2 <_scanf_float+0x306>
 8002de0:	46aa      	mov	sl, r5
 8002de2:	46b3      	mov	fp, r6
 8002de4:	e7de      	b.n	8002da4 <_scanf_float+0x2e8>
 8002de6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8002dea:	6923      	ldr	r3, [r4, #16]
 8002dec:	2965      	cmp	r1, #101	@ 0x65
 8002dee:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8002df2:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8002df6:	6123      	str	r3, [r4, #16]
 8002df8:	d00c      	beq.n	8002e14 <_scanf_float+0x358>
 8002dfa:	2945      	cmp	r1, #69	@ 0x45
 8002dfc:	d00a      	beq.n	8002e14 <_scanf_float+0x358>
 8002dfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8002e02:	463a      	mov	r2, r7
 8002e04:	4640      	mov	r0, r8
 8002e06:	4798      	blx	r3
 8002e08:	6923      	ldr	r3, [r4, #16]
 8002e0a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	1eb5      	subs	r5, r6, #2
 8002e12:	6123      	str	r3, [r4, #16]
 8002e14:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8002e18:	463a      	mov	r2, r7
 8002e1a:	4640      	mov	r0, r8
 8002e1c:	4798      	blx	r3
 8002e1e:	462e      	mov	r6, r5
 8002e20:	6822      	ldr	r2, [r4, #0]
 8002e22:	f012 0210 	ands.w	r2, r2, #16
 8002e26:	d001      	beq.n	8002e2c <_scanf_float+0x370>
 8002e28:	2000      	movs	r0, #0
 8002e2a:	e68b      	b.n	8002b44 <_scanf_float+0x88>
 8002e2c:	7032      	strb	r2, [r6, #0]
 8002e2e:	6823      	ldr	r3, [r4, #0]
 8002e30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e38:	d11c      	bne.n	8002e74 <_scanf_float+0x3b8>
 8002e3a:	9b02      	ldr	r3, [sp, #8]
 8002e3c:	454b      	cmp	r3, r9
 8002e3e:	eba3 0209 	sub.w	r2, r3, r9
 8002e42:	d123      	bne.n	8002e8c <_scanf_float+0x3d0>
 8002e44:	9901      	ldr	r1, [sp, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	4640      	mov	r0, r8
 8002e4a:	f000 ff11 	bl	8003c70 <_strtod_r>
 8002e4e:	9b03      	ldr	r3, [sp, #12]
 8002e50:	6821      	ldr	r1, [r4, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f011 0f02 	tst.w	r1, #2
 8002e58:	ec57 6b10 	vmov	r6, r7, d0
 8002e5c:	f103 0204 	add.w	r2, r3, #4
 8002e60:	d01f      	beq.n	8002ea2 <_scanf_float+0x3e6>
 8002e62:	9903      	ldr	r1, [sp, #12]
 8002e64:	600a      	str	r2, [r1, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	e9c3 6700 	strd	r6, r7, [r3]
 8002e6c:	68e3      	ldr	r3, [r4, #12]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	60e3      	str	r3, [r4, #12]
 8002e72:	e7d9      	b.n	8002e28 <_scanf_float+0x36c>
 8002e74:	9b04      	ldr	r3, [sp, #16]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0e4      	beq.n	8002e44 <_scanf_float+0x388>
 8002e7a:	9905      	ldr	r1, [sp, #20]
 8002e7c:	230a      	movs	r3, #10
 8002e7e:	3101      	adds	r1, #1
 8002e80:	4640      	mov	r0, r8
 8002e82:	f000 ff75 	bl	8003d70 <_strtol_r>
 8002e86:	9b04      	ldr	r3, [sp, #16]
 8002e88:	9e05      	ldr	r6, [sp, #20]
 8002e8a:	1ac2      	subs	r2, r0, r3
 8002e8c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8002e90:	429e      	cmp	r6, r3
 8002e92:	bf28      	it	cs
 8002e94:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8002e98:	4910      	ldr	r1, [pc, #64]	@ (8002edc <_scanf_float+0x420>)
 8002e9a:	4630      	mov	r0, r6
 8002e9c:	f000 f822 	bl	8002ee4 <siprintf>
 8002ea0:	e7d0      	b.n	8002e44 <_scanf_float+0x388>
 8002ea2:	f011 0f04 	tst.w	r1, #4
 8002ea6:	9903      	ldr	r1, [sp, #12]
 8002ea8:	600a      	str	r2, [r1, #0]
 8002eaa:	d1dc      	bne.n	8002e66 <_scanf_float+0x3aa>
 8002eac:	681d      	ldr	r5, [r3, #0]
 8002eae:	4632      	mov	r2, r6
 8002eb0:	463b      	mov	r3, r7
 8002eb2:	4630      	mov	r0, r6
 8002eb4:	4639      	mov	r1, r7
 8002eb6:	f7fd fe41 	bl	8000b3c <__aeabi_dcmpun>
 8002eba:	b128      	cbz	r0, 8002ec8 <_scanf_float+0x40c>
 8002ebc:	4808      	ldr	r0, [pc, #32]	@ (8002ee0 <_scanf_float+0x424>)
 8002ebe:	f000 ffdb 	bl	8003e78 <nanf>
 8002ec2:	ed85 0a00 	vstr	s0, [r5]
 8002ec6:	e7d1      	b.n	8002e6c <_scanf_float+0x3b0>
 8002ec8:	4630      	mov	r0, r6
 8002eca:	4639      	mov	r1, r7
 8002ecc:	f7fd fe94 	bl	8000bf8 <__aeabi_d2f>
 8002ed0:	6028      	str	r0, [r5, #0]
 8002ed2:	e7cb      	b.n	8002e6c <_scanf_float+0x3b0>
 8002ed4:	f04f 0900 	mov.w	r9, #0
 8002ed8:	e629      	b.n	8002b2e <_scanf_float+0x72>
 8002eda:	bf00      	nop
 8002edc:	08006942 	.word	0x08006942
 8002ee0:	08006d3b 	.word	0x08006d3b

08002ee4 <siprintf>:
 8002ee4:	b40e      	push	{r1, r2, r3}
 8002ee6:	b500      	push	{lr}
 8002ee8:	b09c      	sub	sp, #112	@ 0x70
 8002eea:	ab1d      	add	r3, sp, #116	@ 0x74
 8002eec:	9002      	str	r0, [sp, #8]
 8002eee:	9006      	str	r0, [sp, #24]
 8002ef0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002ef4:	4809      	ldr	r0, [pc, #36]	@ (8002f1c <siprintf+0x38>)
 8002ef6:	9107      	str	r1, [sp, #28]
 8002ef8:	9104      	str	r1, [sp, #16]
 8002efa:	4909      	ldr	r1, [pc, #36]	@ (8002f20 <siprintf+0x3c>)
 8002efc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f00:	9105      	str	r1, [sp, #20]
 8002f02:	6800      	ldr	r0, [r0, #0]
 8002f04:	9301      	str	r3, [sp, #4]
 8002f06:	a902      	add	r1, sp, #8
 8002f08:	f002 f99e 	bl	8005248 <_svfiprintf_r>
 8002f0c:	9b02      	ldr	r3, [sp, #8]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	701a      	strb	r2, [r3, #0]
 8002f12:	b01c      	add	sp, #112	@ 0x70
 8002f14:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f18:	b003      	add	sp, #12
 8002f1a:	4770      	bx	lr
 8002f1c:	20000188 	.word	0x20000188
 8002f20:	ffff0208 	.word	0xffff0208

08002f24 <std>:
 8002f24:	2300      	movs	r3, #0
 8002f26:	b510      	push	{r4, lr}
 8002f28:	4604      	mov	r4, r0
 8002f2a:	e9c0 3300 	strd	r3, r3, [r0]
 8002f2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f32:	6083      	str	r3, [r0, #8]
 8002f34:	8181      	strh	r1, [r0, #12]
 8002f36:	6643      	str	r3, [r0, #100]	@ 0x64
 8002f38:	81c2      	strh	r2, [r0, #14]
 8002f3a:	6183      	str	r3, [r0, #24]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	2208      	movs	r2, #8
 8002f40:	305c      	adds	r0, #92	@ 0x5c
 8002f42:	f000 ff47 	bl	8003dd4 <memset>
 8002f46:	4b0d      	ldr	r3, [pc, #52]	@ (8002f7c <std+0x58>)
 8002f48:	6263      	str	r3, [r4, #36]	@ 0x24
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f80 <std+0x5c>)
 8002f4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f84 <std+0x60>)
 8002f50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002f52:	4b0d      	ldr	r3, [pc, #52]	@ (8002f88 <std+0x64>)
 8002f54:	6323      	str	r3, [r4, #48]	@ 0x30
 8002f56:	4b0d      	ldr	r3, [pc, #52]	@ (8002f8c <std+0x68>)
 8002f58:	6224      	str	r4, [r4, #32]
 8002f5a:	429c      	cmp	r4, r3
 8002f5c:	d006      	beq.n	8002f6c <std+0x48>
 8002f5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002f62:	4294      	cmp	r4, r2
 8002f64:	d002      	beq.n	8002f6c <std+0x48>
 8002f66:	33d0      	adds	r3, #208	@ 0xd0
 8002f68:	429c      	cmp	r4, r3
 8002f6a:	d105      	bne.n	8002f78 <std+0x54>
 8002f6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f74:	f000 bf64 	b.w	8003e40 <__retarget_lock_init_recursive>
 8002f78:	bd10      	pop	{r4, pc}
 8002f7a:	bf00      	nop
 8002f7c:	0800608d 	.word	0x0800608d
 8002f80:	080060af 	.word	0x080060af
 8002f84:	080060e7 	.word	0x080060e7
 8002f88:	0800610b 	.word	0x0800610b
 8002f8c:	20003f54 	.word	0x20003f54

08002f90 <stdio_exit_handler>:
 8002f90:	4a02      	ldr	r2, [pc, #8]	@ (8002f9c <stdio_exit_handler+0xc>)
 8002f92:	4903      	ldr	r1, [pc, #12]	@ (8002fa0 <stdio_exit_handler+0x10>)
 8002f94:	4803      	ldr	r0, [pc, #12]	@ (8002fa4 <stdio_exit_handler+0x14>)
 8002f96:	f000 beed 	b.w	8003d74 <_fwalk_sglue>
 8002f9a:	bf00      	nop
 8002f9c:	20000010 	.word	0x20000010
 8002fa0:	080056c1 	.word	0x080056c1
 8002fa4:	2000018c 	.word	0x2000018c

08002fa8 <cleanup_stdio>:
 8002fa8:	6841      	ldr	r1, [r0, #4]
 8002faa:	4b0c      	ldr	r3, [pc, #48]	@ (8002fdc <cleanup_stdio+0x34>)
 8002fac:	4299      	cmp	r1, r3
 8002fae:	b510      	push	{r4, lr}
 8002fb0:	4604      	mov	r4, r0
 8002fb2:	d001      	beq.n	8002fb8 <cleanup_stdio+0x10>
 8002fb4:	f002 fb84 	bl	80056c0 <_fflush_r>
 8002fb8:	68a1      	ldr	r1, [r4, #8]
 8002fba:	4b09      	ldr	r3, [pc, #36]	@ (8002fe0 <cleanup_stdio+0x38>)
 8002fbc:	4299      	cmp	r1, r3
 8002fbe:	d002      	beq.n	8002fc6 <cleanup_stdio+0x1e>
 8002fc0:	4620      	mov	r0, r4
 8002fc2:	f002 fb7d 	bl	80056c0 <_fflush_r>
 8002fc6:	68e1      	ldr	r1, [r4, #12]
 8002fc8:	4b06      	ldr	r3, [pc, #24]	@ (8002fe4 <cleanup_stdio+0x3c>)
 8002fca:	4299      	cmp	r1, r3
 8002fcc:	d004      	beq.n	8002fd8 <cleanup_stdio+0x30>
 8002fce:	4620      	mov	r0, r4
 8002fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fd4:	f002 bb74 	b.w	80056c0 <_fflush_r>
 8002fd8:	bd10      	pop	{r4, pc}
 8002fda:	bf00      	nop
 8002fdc:	20003f54 	.word	0x20003f54
 8002fe0:	20003fbc 	.word	0x20003fbc
 8002fe4:	20004024 	.word	0x20004024

08002fe8 <global_stdio_init.part.0>:
 8002fe8:	b510      	push	{r4, lr}
 8002fea:	4b0b      	ldr	r3, [pc, #44]	@ (8003018 <global_stdio_init.part.0+0x30>)
 8002fec:	4c0b      	ldr	r4, [pc, #44]	@ (800301c <global_stdio_init.part.0+0x34>)
 8002fee:	4a0c      	ldr	r2, [pc, #48]	@ (8003020 <global_stdio_init.part.0+0x38>)
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2104      	movs	r1, #4
 8002ff8:	f7ff ff94 	bl	8002f24 <std>
 8002ffc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003000:	2201      	movs	r2, #1
 8003002:	2109      	movs	r1, #9
 8003004:	f7ff ff8e 	bl	8002f24 <std>
 8003008:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800300c:	2202      	movs	r2, #2
 800300e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003012:	2112      	movs	r1, #18
 8003014:	f7ff bf86 	b.w	8002f24 <std>
 8003018:	2000408c 	.word	0x2000408c
 800301c:	20003f54 	.word	0x20003f54
 8003020:	08002f91 	.word	0x08002f91

08003024 <__sfp_lock_acquire>:
 8003024:	4801      	ldr	r0, [pc, #4]	@ (800302c <__sfp_lock_acquire+0x8>)
 8003026:	f000 bf0c 	b.w	8003e42 <__retarget_lock_acquire_recursive>
 800302a:	bf00      	nop
 800302c:	20004091 	.word	0x20004091

08003030 <__sfp_lock_release>:
 8003030:	4801      	ldr	r0, [pc, #4]	@ (8003038 <__sfp_lock_release+0x8>)
 8003032:	f000 bf07 	b.w	8003e44 <__retarget_lock_release_recursive>
 8003036:	bf00      	nop
 8003038:	20004091 	.word	0x20004091

0800303c <__sinit>:
 800303c:	b510      	push	{r4, lr}
 800303e:	4604      	mov	r4, r0
 8003040:	f7ff fff0 	bl	8003024 <__sfp_lock_acquire>
 8003044:	6a23      	ldr	r3, [r4, #32]
 8003046:	b11b      	cbz	r3, 8003050 <__sinit+0x14>
 8003048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800304c:	f7ff bff0 	b.w	8003030 <__sfp_lock_release>
 8003050:	4b04      	ldr	r3, [pc, #16]	@ (8003064 <__sinit+0x28>)
 8003052:	6223      	str	r3, [r4, #32]
 8003054:	4b04      	ldr	r3, [pc, #16]	@ (8003068 <__sinit+0x2c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f5      	bne.n	8003048 <__sinit+0xc>
 800305c:	f7ff ffc4 	bl	8002fe8 <global_stdio_init.part.0>
 8003060:	e7f2      	b.n	8003048 <__sinit+0xc>
 8003062:	bf00      	nop
 8003064:	08002fa9 	.word	0x08002fa9
 8003068:	2000408c 	.word	0x2000408c

0800306c <sulp>:
 800306c:	b570      	push	{r4, r5, r6, lr}
 800306e:	4604      	mov	r4, r0
 8003070:	460d      	mov	r5, r1
 8003072:	ec45 4b10 	vmov	d0, r4, r5
 8003076:	4616      	mov	r6, r2
 8003078:	f002 feca 	bl	8005e10 <__ulp>
 800307c:	ec51 0b10 	vmov	r0, r1, d0
 8003080:	b17e      	cbz	r6, 80030a2 <sulp+0x36>
 8003082:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8003086:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800308a:	2b00      	cmp	r3, #0
 800308c:	dd09      	ble.n	80030a2 <sulp+0x36>
 800308e:	051b      	lsls	r3, r3, #20
 8003090:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8003094:	2400      	movs	r4, #0
 8003096:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800309a:	4622      	mov	r2, r4
 800309c:	462b      	mov	r3, r5
 800309e:	f7fd fab3 	bl	8000608 <__aeabi_dmul>
 80030a2:	ec41 0b10 	vmov	d0, r0, r1
 80030a6:	bd70      	pop	{r4, r5, r6, pc}

080030a8 <_strtod_l>:
 80030a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030ac:	b09f      	sub	sp, #124	@ 0x7c
 80030ae:	460c      	mov	r4, r1
 80030b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80030b2:	2200      	movs	r2, #0
 80030b4:	921a      	str	r2, [sp, #104]	@ 0x68
 80030b6:	9005      	str	r0, [sp, #20]
 80030b8:	f04f 0a00 	mov.w	sl, #0
 80030bc:	f04f 0b00 	mov.w	fp, #0
 80030c0:	460a      	mov	r2, r1
 80030c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80030c4:	7811      	ldrb	r1, [r2, #0]
 80030c6:	292b      	cmp	r1, #43	@ 0x2b
 80030c8:	d04a      	beq.n	8003160 <_strtod_l+0xb8>
 80030ca:	d838      	bhi.n	800313e <_strtod_l+0x96>
 80030cc:	290d      	cmp	r1, #13
 80030ce:	d832      	bhi.n	8003136 <_strtod_l+0x8e>
 80030d0:	2908      	cmp	r1, #8
 80030d2:	d832      	bhi.n	800313a <_strtod_l+0x92>
 80030d4:	2900      	cmp	r1, #0
 80030d6:	d03b      	beq.n	8003150 <_strtod_l+0xa8>
 80030d8:	2200      	movs	r2, #0
 80030da:	920b      	str	r2, [sp, #44]	@ 0x2c
 80030dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80030de:	782a      	ldrb	r2, [r5, #0]
 80030e0:	2a30      	cmp	r2, #48	@ 0x30
 80030e2:	f040 80b3 	bne.w	800324c <_strtod_l+0x1a4>
 80030e6:	786a      	ldrb	r2, [r5, #1]
 80030e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80030ec:	2a58      	cmp	r2, #88	@ 0x58
 80030ee:	d16e      	bne.n	80031ce <_strtod_l+0x126>
 80030f0:	9302      	str	r3, [sp, #8]
 80030f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80030f4:	9301      	str	r3, [sp, #4]
 80030f6:	ab1a      	add	r3, sp, #104	@ 0x68
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	4a8e      	ldr	r2, [pc, #568]	@ (8003334 <_strtod_l+0x28c>)
 80030fc:	9805      	ldr	r0, [sp, #20]
 80030fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8003100:	a919      	add	r1, sp, #100	@ 0x64
 8003102:	f001 fd75 	bl	8004bf0 <__gethex>
 8003106:	f010 060f 	ands.w	r6, r0, #15
 800310a:	4604      	mov	r4, r0
 800310c:	d005      	beq.n	800311a <_strtod_l+0x72>
 800310e:	2e06      	cmp	r6, #6
 8003110:	d128      	bne.n	8003164 <_strtod_l+0xbc>
 8003112:	3501      	adds	r5, #1
 8003114:	2300      	movs	r3, #0
 8003116:	9519      	str	r5, [sp, #100]	@ 0x64
 8003118:	930b      	str	r3, [sp, #44]	@ 0x2c
 800311a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800311c:	2b00      	cmp	r3, #0
 800311e:	f040 858e 	bne.w	8003c3e <_strtod_l+0xb96>
 8003122:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003124:	b1cb      	cbz	r3, 800315a <_strtod_l+0xb2>
 8003126:	4652      	mov	r2, sl
 8003128:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800312c:	ec43 2b10 	vmov	d0, r2, r3
 8003130:	b01f      	add	sp, #124	@ 0x7c
 8003132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003136:	2920      	cmp	r1, #32
 8003138:	d1ce      	bne.n	80030d8 <_strtod_l+0x30>
 800313a:	3201      	adds	r2, #1
 800313c:	e7c1      	b.n	80030c2 <_strtod_l+0x1a>
 800313e:	292d      	cmp	r1, #45	@ 0x2d
 8003140:	d1ca      	bne.n	80030d8 <_strtod_l+0x30>
 8003142:	2101      	movs	r1, #1
 8003144:	910b      	str	r1, [sp, #44]	@ 0x2c
 8003146:	1c51      	adds	r1, r2, #1
 8003148:	9119      	str	r1, [sp, #100]	@ 0x64
 800314a:	7852      	ldrb	r2, [r2, #1]
 800314c:	2a00      	cmp	r2, #0
 800314e:	d1c5      	bne.n	80030dc <_strtod_l+0x34>
 8003150:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8003152:	9419      	str	r4, [sp, #100]	@ 0x64
 8003154:	2b00      	cmp	r3, #0
 8003156:	f040 8570 	bne.w	8003c3a <_strtod_l+0xb92>
 800315a:	4652      	mov	r2, sl
 800315c:	465b      	mov	r3, fp
 800315e:	e7e5      	b.n	800312c <_strtod_l+0x84>
 8003160:	2100      	movs	r1, #0
 8003162:	e7ef      	b.n	8003144 <_strtod_l+0x9c>
 8003164:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8003166:	b13a      	cbz	r2, 8003178 <_strtod_l+0xd0>
 8003168:	2135      	movs	r1, #53	@ 0x35
 800316a:	a81c      	add	r0, sp, #112	@ 0x70
 800316c:	f002 ff4a 	bl	8006004 <__copybits>
 8003170:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003172:	9805      	ldr	r0, [sp, #20]
 8003174:	f002 fb18 	bl	80057a8 <_Bfree>
 8003178:	3e01      	subs	r6, #1
 800317a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800317c:	2e04      	cmp	r6, #4
 800317e:	d806      	bhi.n	800318e <_strtod_l+0xe6>
 8003180:	e8df f006 	tbb	[pc, r6]
 8003184:	201d0314 	.word	0x201d0314
 8003188:	14          	.byte	0x14
 8003189:	00          	.byte	0x00
 800318a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800318e:	05e1      	lsls	r1, r4, #23
 8003190:	bf48      	it	mi
 8003192:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8003196:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800319a:	0d1b      	lsrs	r3, r3, #20
 800319c:	051b      	lsls	r3, r3, #20
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1bb      	bne.n	800311a <_strtod_l+0x72>
 80031a2:	f000 fe23 	bl	8003dec <__errno>
 80031a6:	2322      	movs	r3, #34	@ 0x22
 80031a8:	6003      	str	r3, [r0, #0]
 80031aa:	e7b6      	b.n	800311a <_strtod_l+0x72>
 80031ac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80031b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80031b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80031b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80031bc:	e7e7      	b.n	800318e <_strtod_l+0xe6>
 80031be:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800333c <_strtod_l+0x294>
 80031c2:	e7e4      	b.n	800318e <_strtod_l+0xe6>
 80031c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80031c8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80031cc:	e7df      	b.n	800318e <_strtod_l+0xe6>
 80031ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80031d4:	785b      	ldrb	r3, [r3, #1]
 80031d6:	2b30      	cmp	r3, #48	@ 0x30
 80031d8:	d0f9      	beq.n	80031ce <_strtod_l+0x126>
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d09d      	beq.n	800311a <_strtod_l+0x72>
 80031de:	2301      	movs	r3, #1
 80031e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80031e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80031e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80031e6:	2300      	movs	r3, #0
 80031e8:	9308      	str	r3, [sp, #32]
 80031ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80031ec:	461f      	mov	r7, r3
 80031ee:	220a      	movs	r2, #10
 80031f0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80031f2:	7805      	ldrb	r5, [r0, #0]
 80031f4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80031f8:	b2d9      	uxtb	r1, r3
 80031fa:	2909      	cmp	r1, #9
 80031fc:	d928      	bls.n	8003250 <_strtod_l+0x1a8>
 80031fe:	494e      	ldr	r1, [pc, #312]	@ (8003338 <_strtod_l+0x290>)
 8003200:	2201      	movs	r2, #1
 8003202:	f000 fdd5 	bl	8003db0 <strncmp>
 8003206:	2800      	cmp	r0, #0
 8003208:	d032      	beq.n	8003270 <_strtod_l+0x1c8>
 800320a:	2000      	movs	r0, #0
 800320c:	462a      	mov	r2, r5
 800320e:	4681      	mov	r9, r0
 8003210:	463d      	mov	r5, r7
 8003212:	4603      	mov	r3, r0
 8003214:	2a65      	cmp	r2, #101	@ 0x65
 8003216:	d001      	beq.n	800321c <_strtod_l+0x174>
 8003218:	2a45      	cmp	r2, #69	@ 0x45
 800321a:	d114      	bne.n	8003246 <_strtod_l+0x19e>
 800321c:	b91d      	cbnz	r5, 8003226 <_strtod_l+0x17e>
 800321e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003220:	4302      	orrs	r2, r0
 8003222:	d095      	beq.n	8003150 <_strtod_l+0xa8>
 8003224:	2500      	movs	r5, #0
 8003226:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8003228:	1c62      	adds	r2, r4, #1
 800322a:	9219      	str	r2, [sp, #100]	@ 0x64
 800322c:	7862      	ldrb	r2, [r4, #1]
 800322e:	2a2b      	cmp	r2, #43	@ 0x2b
 8003230:	d077      	beq.n	8003322 <_strtod_l+0x27a>
 8003232:	2a2d      	cmp	r2, #45	@ 0x2d
 8003234:	d07b      	beq.n	800332e <_strtod_l+0x286>
 8003236:	f04f 0c00 	mov.w	ip, #0
 800323a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800323e:	2909      	cmp	r1, #9
 8003240:	f240 8082 	bls.w	8003348 <_strtod_l+0x2a0>
 8003244:	9419      	str	r4, [sp, #100]	@ 0x64
 8003246:	f04f 0800 	mov.w	r8, #0
 800324a:	e0a2      	b.n	8003392 <_strtod_l+0x2ea>
 800324c:	2300      	movs	r3, #0
 800324e:	e7c7      	b.n	80031e0 <_strtod_l+0x138>
 8003250:	2f08      	cmp	r7, #8
 8003252:	bfd5      	itete	le
 8003254:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8003256:	9908      	ldrgt	r1, [sp, #32]
 8003258:	fb02 3301 	mlale	r3, r2, r1, r3
 800325c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8003260:	f100 0001 	add.w	r0, r0, #1
 8003264:	bfd4      	ite	le
 8003266:	930a      	strle	r3, [sp, #40]	@ 0x28
 8003268:	9308      	strgt	r3, [sp, #32]
 800326a:	3701      	adds	r7, #1
 800326c:	9019      	str	r0, [sp, #100]	@ 0x64
 800326e:	e7bf      	b.n	80031f0 <_strtod_l+0x148>
 8003270:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	9219      	str	r2, [sp, #100]	@ 0x64
 8003276:	785a      	ldrb	r2, [r3, #1]
 8003278:	b37f      	cbz	r7, 80032da <_strtod_l+0x232>
 800327a:	4681      	mov	r9, r0
 800327c:	463d      	mov	r5, r7
 800327e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8003282:	2b09      	cmp	r3, #9
 8003284:	d912      	bls.n	80032ac <_strtod_l+0x204>
 8003286:	2301      	movs	r3, #1
 8003288:	e7c4      	b.n	8003214 <_strtod_l+0x16c>
 800328a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	9219      	str	r2, [sp, #100]	@ 0x64
 8003290:	785a      	ldrb	r2, [r3, #1]
 8003292:	3001      	adds	r0, #1
 8003294:	2a30      	cmp	r2, #48	@ 0x30
 8003296:	d0f8      	beq.n	800328a <_strtod_l+0x1e2>
 8003298:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800329c:	2b08      	cmp	r3, #8
 800329e:	f200 84d3 	bhi.w	8003c48 <_strtod_l+0xba0>
 80032a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80032a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80032a6:	4681      	mov	r9, r0
 80032a8:	2000      	movs	r0, #0
 80032aa:	4605      	mov	r5, r0
 80032ac:	3a30      	subs	r2, #48	@ 0x30
 80032ae:	f100 0301 	add.w	r3, r0, #1
 80032b2:	d02a      	beq.n	800330a <_strtod_l+0x262>
 80032b4:	4499      	add	r9, r3
 80032b6:	eb00 0c05 	add.w	ip, r0, r5
 80032ba:	462b      	mov	r3, r5
 80032bc:	210a      	movs	r1, #10
 80032be:	4563      	cmp	r3, ip
 80032c0:	d10d      	bne.n	80032de <_strtod_l+0x236>
 80032c2:	1c69      	adds	r1, r5, #1
 80032c4:	4401      	add	r1, r0
 80032c6:	4428      	add	r0, r5
 80032c8:	2808      	cmp	r0, #8
 80032ca:	dc16      	bgt.n	80032fa <_strtod_l+0x252>
 80032cc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80032ce:	230a      	movs	r3, #10
 80032d0:	fb03 2300 	mla	r3, r3, r0, r2
 80032d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80032d6:	2300      	movs	r3, #0
 80032d8:	e018      	b.n	800330c <_strtod_l+0x264>
 80032da:	4638      	mov	r0, r7
 80032dc:	e7da      	b.n	8003294 <_strtod_l+0x1ec>
 80032de:	2b08      	cmp	r3, #8
 80032e0:	f103 0301 	add.w	r3, r3, #1
 80032e4:	dc03      	bgt.n	80032ee <_strtod_l+0x246>
 80032e6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80032e8:	434e      	muls	r6, r1
 80032ea:	960a      	str	r6, [sp, #40]	@ 0x28
 80032ec:	e7e7      	b.n	80032be <_strtod_l+0x216>
 80032ee:	2b10      	cmp	r3, #16
 80032f0:	bfde      	ittt	le
 80032f2:	9e08      	ldrle	r6, [sp, #32]
 80032f4:	434e      	mulle	r6, r1
 80032f6:	9608      	strle	r6, [sp, #32]
 80032f8:	e7e1      	b.n	80032be <_strtod_l+0x216>
 80032fa:	280f      	cmp	r0, #15
 80032fc:	dceb      	bgt.n	80032d6 <_strtod_l+0x22e>
 80032fe:	9808      	ldr	r0, [sp, #32]
 8003300:	230a      	movs	r3, #10
 8003302:	fb03 2300 	mla	r3, r3, r0, r2
 8003306:	9308      	str	r3, [sp, #32]
 8003308:	e7e5      	b.n	80032d6 <_strtod_l+0x22e>
 800330a:	4629      	mov	r1, r5
 800330c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800330e:	1c50      	adds	r0, r2, #1
 8003310:	9019      	str	r0, [sp, #100]	@ 0x64
 8003312:	7852      	ldrb	r2, [r2, #1]
 8003314:	4618      	mov	r0, r3
 8003316:	460d      	mov	r5, r1
 8003318:	e7b1      	b.n	800327e <_strtod_l+0x1d6>
 800331a:	f04f 0900 	mov.w	r9, #0
 800331e:	2301      	movs	r3, #1
 8003320:	e77d      	b.n	800321e <_strtod_l+0x176>
 8003322:	f04f 0c00 	mov.w	ip, #0
 8003326:	1ca2      	adds	r2, r4, #2
 8003328:	9219      	str	r2, [sp, #100]	@ 0x64
 800332a:	78a2      	ldrb	r2, [r4, #2]
 800332c:	e785      	b.n	800323a <_strtod_l+0x192>
 800332e:	f04f 0c01 	mov.w	ip, #1
 8003332:	e7f8      	b.n	8003326 <_strtod_l+0x27e>
 8003334:	08006960 	.word	0x08006960
 8003338:	08006947 	.word	0x08006947
 800333c:	7ff00000 	.word	0x7ff00000
 8003340:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8003342:	1c51      	adds	r1, r2, #1
 8003344:	9119      	str	r1, [sp, #100]	@ 0x64
 8003346:	7852      	ldrb	r2, [r2, #1]
 8003348:	2a30      	cmp	r2, #48	@ 0x30
 800334a:	d0f9      	beq.n	8003340 <_strtod_l+0x298>
 800334c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8003350:	2908      	cmp	r1, #8
 8003352:	f63f af78 	bhi.w	8003246 <_strtod_l+0x19e>
 8003356:	3a30      	subs	r2, #48	@ 0x30
 8003358:	920e      	str	r2, [sp, #56]	@ 0x38
 800335a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800335c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800335e:	f04f 080a 	mov.w	r8, #10
 8003362:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8003364:	1c56      	adds	r6, r2, #1
 8003366:	9619      	str	r6, [sp, #100]	@ 0x64
 8003368:	7852      	ldrb	r2, [r2, #1]
 800336a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800336e:	f1be 0f09 	cmp.w	lr, #9
 8003372:	d939      	bls.n	80033e8 <_strtod_l+0x340>
 8003374:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003376:	1a76      	subs	r6, r6, r1
 8003378:	2e08      	cmp	r6, #8
 800337a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800337e:	dc03      	bgt.n	8003388 <_strtod_l+0x2e0>
 8003380:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003382:	4588      	cmp	r8, r1
 8003384:	bfa8      	it	ge
 8003386:	4688      	movge	r8, r1
 8003388:	f1bc 0f00 	cmp.w	ip, #0
 800338c:	d001      	beq.n	8003392 <_strtod_l+0x2ea>
 800338e:	f1c8 0800 	rsb	r8, r8, #0
 8003392:	2d00      	cmp	r5, #0
 8003394:	d14e      	bne.n	8003434 <_strtod_l+0x38c>
 8003396:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003398:	4308      	orrs	r0, r1
 800339a:	f47f aebe 	bne.w	800311a <_strtod_l+0x72>
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f47f aed6 	bne.w	8003150 <_strtod_l+0xa8>
 80033a4:	2a69      	cmp	r2, #105	@ 0x69
 80033a6:	d028      	beq.n	80033fa <_strtod_l+0x352>
 80033a8:	dc25      	bgt.n	80033f6 <_strtod_l+0x34e>
 80033aa:	2a49      	cmp	r2, #73	@ 0x49
 80033ac:	d025      	beq.n	80033fa <_strtod_l+0x352>
 80033ae:	2a4e      	cmp	r2, #78	@ 0x4e
 80033b0:	f47f aece 	bne.w	8003150 <_strtod_l+0xa8>
 80033b4:	499b      	ldr	r1, [pc, #620]	@ (8003624 <_strtod_l+0x57c>)
 80033b6:	a819      	add	r0, sp, #100	@ 0x64
 80033b8:	f001 fe3c 	bl	8005034 <__match>
 80033bc:	2800      	cmp	r0, #0
 80033be:	f43f aec7 	beq.w	8003150 <_strtod_l+0xa8>
 80033c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b28      	cmp	r3, #40	@ 0x28
 80033c8:	d12e      	bne.n	8003428 <_strtod_l+0x380>
 80033ca:	4997      	ldr	r1, [pc, #604]	@ (8003628 <_strtod_l+0x580>)
 80033cc:	aa1c      	add	r2, sp, #112	@ 0x70
 80033ce:	a819      	add	r0, sp, #100	@ 0x64
 80033d0:	f001 fe44 	bl	800505c <__hexnan>
 80033d4:	2805      	cmp	r0, #5
 80033d6:	d127      	bne.n	8003428 <_strtod_l+0x380>
 80033d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80033da:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80033de:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80033e2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80033e6:	e698      	b.n	800311a <_strtod_l+0x72>
 80033e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80033ea:	fb08 2101 	mla	r1, r8, r1, r2
 80033ee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80033f2:	920e      	str	r2, [sp, #56]	@ 0x38
 80033f4:	e7b5      	b.n	8003362 <_strtod_l+0x2ba>
 80033f6:	2a6e      	cmp	r2, #110	@ 0x6e
 80033f8:	e7da      	b.n	80033b0 <_strtod_l+0x308>
 80033fa:	498c      	ldr	r1, [pc, #560]	@ (800362c <_strtod_l+0x584>)
 80033fc:	a819      	add	r0, sp, #100	@ 0x64
 80033fe:	f001 fe19 	bl	8005034 <__match>
 8003402:	2800      	cmp	r0, #0
 8003404:	f43f aea4 	beq.w	8003150 <_strtod_l+0xa8>
 8003408:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800340a:	4989      	ldr	r1, [pc, #548]	@ (8003630 <_strtod_l+0x588>)
 800340c:	3b01      	subs	r3, #1
 800340e:	a819      	add	r0, sp, #100	@ 0x64
 8003410:	9319      	str	r3, [sp, #100]	@ 0x64
 8003412:	f001 fe0f 	bl	8005034 <__match>
 8003416:	b910      	cbnz	r0, 800341e <_strtod_l+0x376>
 8003418:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800341a:	3301      	adds	r3, #1
 800341c:	9319      	str	r3, [sp, #100]	@ 0x64
 800341e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8003640 <_strtod_l+0x598>
 8003422:	f04f 0a00 	mov.w	sl, #0
 8003426:	e678      	b.n	800311a <_strtod_l+0x72>
 8003428:	4882      	ldr	r0, [pc, #520]	@ (8003634 <_strtod_l+0x58c>)
 800342a:	f000 fd1d 	bl	8003e68 <nan>
 800342e:	ec5b ab10 	vmov	sl, fp, d0
 8003432:	e672      	b.n	800311a <_strtod_l+0x72>
 8003434:	eba8 0309 	sub.w	r3, r8, r9
 8003438:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800343a:	9309      	str	r3, [sp, #36]	@ 0x24
 800343c:	2f00      	cmp	r7, #0
 800343e:	bf08      	it	eq
 8003440:	462f      	moveq	r7, r5
 8003442:	2d10      	cmp	r5, #16
 8003444:	462c      	mov	r4, r5
 8003446:	bfa8      	it	ge
 8003448:	2410      	movge	r4, #16
 800344a:	f7fd f863 	bl	8000514 <__aeabi_ui2d>
 800344e:	2d09      	cmp	r5, #9
 8003450:	4682      	mov	sl, r0
 8003452:	468b      	mov	fp, r1
 8003454:	dc13      	bgt.n	800347e <_strtod_l+0x3d6>
 8003456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003458:	2b00      	cmp	r3, #0
 800345a:	f43f ae5e 	beq.w	800311a <_strtod_l+0x72>
 800345e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003460:	dd78      	ble.n	8003554 <_strtod_l+0x4ac>
 8003462:	2b16      	cmp	r3, #22
 8003464:	dc5f      	bgt.n	8003526 <_strtod_l+0x47e>
 8003466:	4974      	ldr	r1, [pc, #464]	@ (8003638 <_strtod_l+0x590>)
 8003468:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800346c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003470:	4652      	mov	r2, sl
 8003472:	465b      	mov	r3, fp
 8003474:	f7fd f8c8 	bl	8000608 <__aeabi_dmul>
 8003478:	4682      	mov	sl, r0
 800347a:	468b      	mov	fp, r1
 800347c:	e64d      	b.n	800311a <_strtod_l+0x72>
 800347e:	4b6e      	ldr	r3, [pc, #440]	@ (8003638 <_strtod_l+0x590>)
 8003480:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003484:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8003488:	f7fd f8be 	bl	8000608 <__aeabi_dmul>
 800348c:	4682      	mov	sl, r0
 800348e:	9808      	ldr	r0, [sp, #32]
 8003490:	468b      	mov	fp, r1
 8003492:	f7fd f83f 	bl	8000514 <__aeabi_ui2d>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4650      	mov	r0, sl
 800349c:	4659      	mov	r1, fp
 800349e:	f7fc fefd 	bl	800029c <__adddf3>
 80034a2:	2d0f      	cmp	r5, #15
 80034a4:	4682      	mov	sl, r0
 80034a6:	468b      	mov	fp, r1
 80034a8:	ddd5      	ble.n	8003456 <_strtod_l+0x3ae>
 80034aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034ac:	1b2c      	subs	r4, r5, r4
 80034ae:	441c      	add	r4, r3
 80034b0:	2c00      	cmp	r4, #0
 80034b2:	f340 8096 	ble.w	80035e2 <_strtod_l+0x53a>
 80034b6:	f014 030f 	ands.w	r3, r4, #15
 80034ba:	d00a      	beq.n	80034d2 <_strtod_l+0x42a>
 80034bc:	495e      	ldr	r1, [pc, #376]	@ (8003638 <_strtod_l+0x590>)
 80034be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80034c2:	4652      	mov	r2, sl
 80034c4:	465b      	mov	r3, fp
 80034c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034ca:	f7fd f89d 	bl	8000608 <__aeabi_dmul>
 80034ce:	4682      	mov	sl, r0
 80034d0:	468b      	mov	fp, r1
 80034d2:	f034 040f 	bics.w	r4, r4, #15
 80034d6:	d073      	beq.n	80035c0 <_strtod_l+0x518>
 80034d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80034dc:	dd48      	ble.n	8003570 <_strtod_l+0x4c8>
 80034de:	2400      	movs	r4, #0
 80034e0:	46a0      	mov	r8, r4
 80034e2:	940a      	str	r4, [sp, #40]	@ 0x28
 80034e4:	46a1      	mov	r9, r4
 80034e6:	9a05      	ldr	r2, [sp, #20]
 80034e8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8003640 <_strtod_l+0x598>
 80034ec:	2322      	movs	r3, #34	@ 0x22
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	f04f 0a00 	mov.w	sl, #0
 80034f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f43f ae0f 	beq.w	800311a <_strtod_l+0x72>
 80034fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80034fe:	9805      	ldr	r0, [sp, #20]
 8003500:	f002 f952 	bl	80057a8 <_Bfree>
 8003504:	9805      	ldr	r0, [sp, #20]
 8003506:	4649      	mov	r1, r9
 8003508:	f002 f94e 	bl	80057a8 <_Bfree>
 800350c:	9805      	ldr	r0, [sp, #20]
 800350e:	4641      	mov	r1, r8
 8003510:	f002 f94a 	bl	80057a8 <_Bfree>
 8003514:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003516:	9805      	ldr	r0, [sp, #20]
 8003518:	f002 f946 	bl	80057a8 <_Bfree>
 800351c:	9805      	ldr	r0, [sp, #20]
 800351e:	4621      	mov	r1, r4
 8003520:	f002 f942 	bl	80057a8 <_Bfree>
 8003524:	e5f9      	b.n	800311a <_strtod_l+0x72>
 8003526:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003528:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800352c:	4293      	cmp	r3, r2
 800352e:	dbbc      	blt.n	80034aa <_strtod_l+0x402>
 8003530:	4c41      	ldr	r4, [pc, #260]	@ (8003638 <_strtod_l+0x590>)
 8003532:	f1c5 050f 	rsb	r5, r5, #15
 8003536:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800353a:	4652      	mov	r2, sl
 800353c:	465b      	mov	r3, fp
 800353e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003542:	f7fd f861 	bl	8000608 <__aeabi_dmul>
 8003546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003548:	1b5d      	subs	r5, r3, r5
 800354a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800354e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003552:	e78f      	b.n	8003474 <_strtod_l+0x3cc>
 8003554:	3316      	adds	r3, #22
 8003556:	dba8      	blt.n	80034aa <_strtod_l+0x402>
 8003558:	4b37      	ldr	r3, [pc, #220]	@ (8003638 <_strtod_l+0x590>)
 800355a:	eba9 0808 	sub.w	r8, r9, r8
 800355e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8003562:	e9d8 2300 	ldrd	r2, r3, [r8]
 8003566:	4650      	mov	r0, sl
 8003568:	4659      	mov	r1, fp
 800356a:	f7fd f977 	bl	800085c <__aeabi_ddiv>
 800356e:	e783      	b.n	8003478 <_strtod_l+0x3d0>
 8003570:	4b32      	ldr	r3, [pc, #200]	@ (800363c <_strtod_l+0x594>)
 8003572:	9308      	str	r3, [sp, #32]
 8003574:	2300      	movs	r3, #0
 8003576:	1124      	asrs	r4, r4, #4
 8003578:	4650      	mov	r0, sl
 800357a:	4659      	mov	r1, fp
 800357c:	461e      	mov	r6, r3
 800357e:	2c01      	cmp	r4, #1
 8003580:	dc21      	bgt.n	80035c6 <_strtod_l+0x51e>
 8003582:	b10b      	cbz	r3, 8003588 <_strtod_l+0x4e0>
 8003584:	4682      	mov	sl, r0
 8003586:	468b      	mov	fp, r1
 8003588:	492c      	ldr	r1, [pc, #176]	@ (800363c <_strtod_l+0x594>)
 800358a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800358e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8003592:	4652      	mov	r2, sl
 8003594:	465b      	mov	r3, fp
 8003596:	e9d1 0100 	ldrd	r0, r1, [r1]
 800359a:	f7fd f835 	bl	8000608 <__aeabi_dmul>
 800359e:	4b28      	ldr	r3, [pc, #160]	@ (8003640 <_strtod_l+0x598>)
 80035a0:	460a      	mov	r2, r1
 80035a2:	400b      	ands	r3, r1
 80035a4:	4927      	ldr	r1, [pc, #156]	@ (8003644 <_strtod_l+0x59c>)
 80035a6:	428b      	cmp	r3, r1
 80035a8:	4682      	mov	sl, r0
 80035aa:	d898      	bhi.n	80034de <_strtod_l+0x436>
 80035ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80035b0:	428b      	cmp	r3, r1
 80035b2:	bf86      	itte	hi
 80035b4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8003648 <_strtod_l+0x5a0>
 80035b8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 80035bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80035c0:	2300      	movs	r3, #0
 80035c2:	9308      	str	r3, [sp, #32]
 80035c4:	e07a      	b.n	80036bc <_strtod_l+0x614>
 80035c6:	07e2      	lsls	r2, r4, #31
 80035c8:	d505      	bpl.n	80035d6 <_strtod_l+0x52e>
 80035ca:	9b08      	ldr	r3, [sp, #32]
 80035cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d0:	f7fd f81a 	bl	8000608 <__aeabi_dmul>
 80035d4:	2301      	movs	r3, #1
 80035d6:	9a08      	ldr	r2, [sp, #32]
 80035d8:	3208      	adds	r2, #8
 80035da:	3601      	adds	r6, #1
 80035dc:	1064      	asrs	r4, r4, #1
 80035de:	9208      	str	r2, [sp, #32]
 80035e0:	e7cd      	b.n	800357e <_strtod_l+0x4d6>
 80035e2:	d0ed      	beq.n	80035c0 <_strtod_l+0x518>
 80035e4:	4264      	negs	r4, r4
 80035e6:	f014 020f 	ands.w	r2, r4, #15
 80035ea:	d00a      	beq.n	8003602 <_strtod_l+0x55a>
 80035ec:	4b12      	ldr	r3, [pc, #72]	@ (8003638 <_strtod_l+0x590>)
 80035ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80035f2:	4650      	mov	r0, sl
 80035f4:	4659      	mov	r1, fp
 80035f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fa:	f7fd f92f 	bl	800085c <__aeabi_ddiv>
 80035fe:	4682      	mov	sl, r0
 8003600:	468b      	mov	fp, r1
 8003602:	1124      	asrs	r4, r4, #4
 8003604:	d0dc      	beq.n	80035c0 <_strtod_l+0x518>
 8003606:	2c1f      	cmp	r4, #31
 8003608:	dd20      	ble.n	800364c <_strtod_l+0x5a4>
 800360a:	2400      	movs	r4, #0
 800360c:	46a0      	mov	r8, r4
 800360e:	940a      	str	r4, [sp, #40]	@ 0x28
 8003610:	46a1      	mov	r9, r4
 8003612:	9a05      	ldr	r2, [sp, #20]
 8003614:	2322      	movs	r3, #34	@ 0x22
 8003616:	f04f 0a00 	mov.w	sl, #0
 800361a:	f04f 0b00 	mov.w	fp, #0
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	e768      	b.n	80034f4 <_strtod_l+0x44c>
 8003622:	bf00      	nop
 8003624:	0800691b 	.word	0x0800691b
 8003628:	0800694c 	.word	0x0800694c
 800362c:	08006913 	.word	0x08006913
 8003630:	08006aac 	.word	0x08006aac
 8003634:	08006d3b 	.word	0x08006d3b
 8003638:	08006c38 	.word	0x08006c38
 800363c:	08006c10 	.word	0x08006c10
 8003640:	7ff00000 	.word	0x7ff00000
 8003644:	7ca00000 	.word	0x7ca00000
 8003648:	7fefffff 	.word	0x7fefffff
 800364c:	f014 0310 	ands.w	r3, r4, #16
 8003650:	bf18      	it	ne
 8003652:	236a      	movne	r3, #106	@ 0x6a
 8003654:	4ea9      	ldr	r6, [pc, #676]	@ (80038fc <_strtod_l+0x854>)
 8003656:	9308      	str	r3, [sp, #32]
 8003658:	4650      	mov	r0, sl
 800365a:	4659      	mov	r1, fp
 800365c:	2300      	movs	r3, #0
 800365e:	07e2      	lsls	r2, r4, #31
 8003660:	d504      	bpl.n	800366c <_strtod_l+0x5c4>
 8003662:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003666:	f7fc ffcf 	bl	8000608 <__aeabi_dmul>
 800366a:	2301      	movs	r3, #1
 800366c:	1064      	asrs	r4, r4, #1
 800366e:	f106 0608 	add.w	r6, r6, #8
 8003672:	d1f4      	bne.n	800365e <_strtod_l+0x5b6>
 8003674:	b10b      	cbz	r3, 800367a <_strtod_l+0x5d2>
 8003676:	4682      	mov	sl, r0
 8003678:	468b      	mov	fp, r1
 800367a:	9b08      	ldr	r3, [sp, #32]
 800367c:	b1b3      	cbz	r3, 80036ac <_strtod_l+0x604>
 800367e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8003682:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8003686:	2b00      	cmp	r3, #0
 8003688:	4659      	mov	r1, fp
 800368a:	dd0f      	ble.n	80036ac <_strtod_l+0x604>
 800368c:	2b1f      	cmp	r3, #31
 800368e:	dd55      	ble.n	800373c <_strtod_l+0x694>
 8003690:	2b34      	cmp	r3, #52	@ 0x34
 8003692:	bfde      	ittt	le
 8003694:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8003698:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800369c:	4093      	lslle	r3, r2
 800369e:	f04f 0a00 	mov.w	sl, #0
 80036a2:	bfcc      	ite	gt
 80036a4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80036a8:	ea03 0b01 	andle.w	fp, r3, r1
 80036ac:	2200      	movs	r2, #0
 80036ae:	2300      	movs	r3, #0
 80036b0:	4650      	mov	r0, sl
 80036b2:	4659      	mov	r1, fp
 80036b4:	f7fd fa10 	bl	8000ad8 <__aeabi_dcmpeq>
 80036b8:	2800      	cmp	r0, #0
 80036ba:	d1a6      	bne.n	800360a <_strtod_l+0x562>
 80036bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80036c2:	9805      	ldr	r0, [sp, #20]
 80036c4:	462b      	mov	r3, r5
 80036c6:	463a      	mov	r2, r7
 80036c8:	f002 f8d6 	bl	8005878 <__s2b>
 80036cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80036ce:	2800      	cmp	r0, #0
 80036d0:	f43f af05 	beq.w	80034de <_strtod_l+0x436>
 80036d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80036d6:	2a00      	cmp	r2, #0
 80036d8:	eba9 0308 	sub.w	r3, r9, r8
 80036dc:	bfa8      	it	ge
 80036de:	2300      	movge	r3, #0
 80036e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80036e2:	2400      	movs	r4, #0
 80036e4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80036e8:	9316      	str	r3, [sp, #88]	@ 0x58
 80036ea:	46a0      	mov	r8, r4
 80036ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80036ee:	9805      	ldr	r0, [sp, #20]
 80036f0:	6859      	ldr	r1, [r3, #4]
 80036f2:	f002 f819 	bl	8005728 <_Balloc>
 80036f6:	4681      	mov	r9, r0
 80036f8:	2800      	cmp	r0, #0
 80036fa:	f43f aef4 	beq.w	80034e6 <_strtod_l+0x43e>
 80036fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003700:	691a      	ldr	r2, [r3, #16]
 8003702:	3202      	adds	r2, #2
 8003704:	f103 010c 	add.w	r1, r3, #12
 8003708:	0092      	lsls	r2, r2, #2
 800370a:	300c      	adds	r0, #12
 800370c:	f000 fb9b 	bl	8003e46 <memcpy>
 8003710:	ec4b ab10 	vmov	d0, sl, fp
 8003714:	9805      	ldr	r0, [sp, #20]
 8003716:	aa1c      	add	r2, sp, #112	@ 0x70
 8003718:	a91b      	add	r1, sp, #108	@ 0x6c
 800371a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800371e:	f002 fbe7 	bl	8005ef0 <__d2b>
 8003722:	901a      	str	r0, [sp, #104]	@ 0x68
 8003724:	2800      	cmp	r0, #0
 8003726:	f43f aede 	beq.w	80034e6 <_strtod_l+0x43e>
 800372a:	9805      	ldr	r0, [sp, #20]
 800372c:	2101      	movs	r1, #1
 800372e:	f002 f939 	bl	80059a4 <__i2b>
 8003732:	4680      	mov	r8, r0
 8003734:	b948      	cbnz	r0, 800374a <_strtod_l+0x6a2>
 8003736:	f04f 0800 	mov.w	r8, #0
 800373a:	e6d4      	b.n	80034e6 <_strtod_l+0x43e>
 800373c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	ea03 0a0a 	and.w	sl, r3, sl
 8003748:	e7b0      	b.n	80036ac <_strtod_l+0x604>
 800374a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800374c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800374e:	2d00      	cmp	r5, #0
 8003750:	bfab      	itete	ge
 8003752:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8003754:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8003756:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8003758:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800375a:	bfac      	ite	ge
 800375c:	18ef      	addge	r7, r5, r3
 800375e:	1b5e      	sublt	r6, r3, r5
 8003760:	9b08      	ldr	r3, [sp, #32]
 8003762:	1aed      	subs	r5, r5, r3
 8003764:	4415      	add	r5, r2
 8003766:	4b66      	ldr	r3, [pc, #408]	@ (8003900 <_strtod_l+0x858>)
 8003768:	3d01      	subs	r5, #1
 800376a:	429d      	cmp	r5, r3
 800376c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8003770:	da50      	bge.n	8003814 <_strtod_l+0x76c>
 8003772:	1b5b      	subs	r3, r3, r5
 8003774:	2b1f      	cmp	r3, #31
 8003776:	eba2 0203 	sub.w	r2, r2, r3
 800377a:	f04f 0101 	mov.w	r1, #1
 800377e:	dc3d      	bgt.n	80037fc <_strtod_l+0x754>
 8003780:	fa01 f303 	lsl.w	r3, r1, r3
 8003784:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003786:	2300      	movs	r3, #0
 8003788:	9310      	str	r3, [sp, #64]	@ 0x40
 800378a:	18bd      	adds	r5, r7, r2
 800378c:	9b08      	ldr	r3, [sp, #32]
 800378e:	42af      	cmp	r7, r5
 8003790:	4416      	add	r6, r2
 8003792:	441e      	add	r6, r3
 8003794:	463b      	mov	r3, r7
 8003796:	bfa8      	it	ge
 8003798:	462b      	movge	r3, r5
 800379a:	42b3      	cmp	r3, r6
 800379c:	bfa8      	it	ge
 800379e:	4633      	movge	r3, r6
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	bfc2      	ittt	gt
 80037a4:	1aed      	subgt	r5, r5, r3
 80037a6:	1af6      	subgt	r6, r6, r3
 80037a8:	1aff      	subgt	r7, r7, r3
 80037aa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	dd16      	ble.n	80037de <_strtod_l+0x736>
 80037b0:	4641      	mov	r1, r8
 80037b2:	9805      	ldr	r0, [sp, #20]
 80037b4:	461a      	mov	r2, r3
 80037b6:	f002 f9b5 	bl	8005b24 <__pow5mult>
 80037ba:	4680      	mov	r8, r0
 80037bc:	2800      	cmp	r0, #0
 80037be:	d0ba      	beq.n	8003736 <_strtod_l+0x68e>
 80037c0:	4601      	mov	r1, r0
 80037c2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80037c4:	9805      	ldr	r0, [sp, #20]
 80037c6:	f002 f903 	bl	80059d0 <__multiply>
 80037ca:	900e      	str	r0, [sp, #56]	@ 0x38
 80037cc:	2800      	cmp	r0, #0
 80037ce:	f43f ae8a 	beq.w	80034e6 <_strtod_l+0x43e>
 80037d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80037d4:	9805      	ldr	r0, [sp, #20]
 80037d6:	f001 ffe7 	bl	80057a8 <_Bfree>
 80037da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80037dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80037de:	2d00      	cmp	r5, #0
 80037e0:	dc1d      	bgt.n	800381e <_strtod_l+0x776>
 80037e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	dd23      	ble.n	8003830 <_strtod_l+0x788>
 80037e8:	4649      	mov	r1, r9
 80037ea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80037ec:	9805      	ldr	r0, [sp, #20]
 80037ee:	f002 f999 	bl	8005b24 <__pow5mult>
 80037f2:	4681      	mov	r9, r0
 80037f4:	b9e0      	cbnz	r0, 8003830 <_strtod_l+0x788>
 80037f6:	f04f 0900 	mov.w	r9, #0
 80037fa:	e674      	b.n	80034e6 <_strtod_l+0x43e>
 80037fc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8003800:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8003804:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8003808:	35e2      	adds	r5, #226	@ 0xe2
 800380a:	fa01 f305 	lsl.w	r3, r1, r5
 800380e:	9310      	str	r3, [sp, #64]	@ 0x40
 8003810:	9113      	str	r1, [sp, #76]	@ 0x4c
 8003812:	e7ba      	b.n	800378a <_strtod_l+0x6e2>
 8003814:	2300      	movs	r3, #0
 8003816:	9310      	str	r3, [sp, #64]	@ 0x40
 8003818:	2301      	movs	r3, #1
 800381a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800381c:	e7b5      	b.n	800378a <_strtod_l+0x6e2>
 800381e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003820:	9805      	ldr	r0, [sp, #20]
 8003822:	462a      	mov	r2, r5
 8003824:	f002 f9d8 	bl	8005bd8 <__lshift>
 8003828:	901a      	str	r0, [sp, #104]	@ 0x68
 800382a:	2800      	cmp	r0, #0
 800382c:	d1d9      	bne.n	80037e2 <_strtod_l+0x73a>
 800382e:	e65a      	b.n	80034e6 <_strtod_l+0x43e>
 8003830:	2e00      	cmp	r6, #0
 8003832:	dd07      	ble.n	8003844 <_strtod_l+0x79c>
 8003834:	4649      	mov	r1, r9
 8003836:	9805      	ldr	r0, [sp, #20]
 8003838:	4632      	mov	r2, r6
 800383a:	f002 f9cd 	bl	8005bd8 <__lshift>
 800383e:	4681      	mov	r9, r0
 8003840:	2800      	cmp	r0, #0
 8003842:	d0d8      	beq.n	80037f6 <_strtod_l+0x74e>
 8003844:	2f00      	cmp	r7, #0
 8003846:	dd08      	ble.n	800385a <_strtod_l+0x7b2>
 8003848:	4641      	mov	r1, r8
 800384a:	9805      	ldr	r0, [sp, #20]
 800384c:	463a      	mov	r2, r7
 800384e:	f002 f9c3 	bl	8005bd8 <__lshift>
 8003852:	4680      	mov	r8, r0
 8003854:	2800      	cmp	r0, #0
 8003856:	f43f ae46 	beq.w	80034e6 <_strtod_l+0x43e>
 800385a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800385c:	9805      	ldr	r0, [sp, #20]
 800385e:	464a      	mov	r2, r9
 8003860:	f002 fa42 	bl	8005ce8 <__mdiff>
 8003864:	4604      	mov	r4, r0
 8003866:	2800      	cmp	r0, #0
 8003868:	f43f ae3d 	beq.w	80034e6 <_strtod_l+0x43e>
 800386c:	68c3      	ldr	r3, [r0, #12]
 800386e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003870:	2300      	movs	r3, #0
 8003872:	60c3      	str	r3, [r0, #12]
 8003874:	4641      	mov	r1, r8
 8003876:	f002 fa1b 	bl	8005cb0 <__mcmp>
 800387a:	2800      	cmp	r0, #0
 800387c:	da46      	bge.n	800390c <_strtod_l+0x864>
 800387e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003880:	ea53 030a 	orrs.w	r3, r3, sl
 8003884:	d16c      	bne.n	8003960 <_strtod_l+0x8b8>
 8003886:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800388a:	2b00      	cmp	r3, #0
 800388c:	d168      	bne.n	8003960 <_strtod_l+0x8b8>
 800388e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8003892:	0d1b      	lsrs	r3, r3, #20
 8003894:	051b      	lsls	r3, r3, #20
 8003896:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800389a:	d961      	bls.n	8003960 <_strtod_l+0x8b8>
 800389c:	6963      	ldr	r3, [r4, #20]
 800389e:	b913      	cbnz	r3, 80038a6 <_strtod_l+0x7fe>
 80038a0:	6923      	ldr	r3, [r4, #16]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	dd5c      	ble.n	8003960 <_strtod_l+0x8b8>
 80038a6:	4621      	mov	r1, r4
 80038a8:	2201      	movs	r2, #1
 80038aa:	9805      	ldr	r0, [sp, #20]
 80038ac:	f002 f994 	bl	8005bd8 <__lshift>
 80038b0:	4641      	mov	r1, r8
 80038b2:	4604      	mov	r4, r0
 80038b4:	f002 f9fc 	bl	8005cb0 <__mcmp>
 80038b8:	2800      	cmp	r0, #0
 80038ba:	dd51      	ble.n	8003960 <_strtod_l+0x8b8>
 80038bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80038c0:	9a08      	ldr	r2, [sp, #32]
 80038c2:	0d1b      	lsrs	r3, r3, #20
 80038c4:	051b      	lsls	r3, r3, #20
 80038c6:	2a00      	cmp	r2, #0
 80038c8:	d06b      	beq.n	80039a2 <_strtod_l+0x8fa>
 80038ca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80038ce:	d868      	bhi.n	80039a2 <_strtod_l+0x8fa>
 80038d0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80038d4:	f67f ae9d 	bls.w	8003612 <_strtod_l+0x56a>
 80038d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003904 <_strtod_l+0x85c>)
 80038da:	4650      	mov	r0, sl
 80038dc:	4659      	mov	r1, fp
 80038de:	2200      	movs	r2, #0
 80038e0:	f7fc fe92 	bl	8000608 <__aeabi_dmul>
 80038e4:	4b08      	ldr	r3, [pc, #32]	@ (8003908 <_strtod_l+0x860>)
 80038e6:	400b      	ands	r3, r1
 80038e8:	4682      	mov	sl, r0
 80038ea:	468b      	mov	fp, r1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f47f ae05 	bne.w	80034fc <_strtod_l+0x454>
 80038f2:	9a05      	ldr	r2, [sp, #20]
 80038f4:	2322      	movs	r3, #34	@ 0x22
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	e600      	b.n	80034fc <_strtod_l+0x454>
 80038fa:	bf00      	nop
 80038fc:	08006978 	.word	0x08006978
 8003900:	fffffc02 	.word	0xfffffc02
 8003904:	39500000 	.word	0x39500000
 8003908:	7ff00000 	.word	0x7ff00000
 800390c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8003910:	d165      	bne.n	80039de <_strtod_l+0x936>
 8003912:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8003914:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003918:	b35a      	cbz	r2, 8003972 <_strtod_l+0x8ca>
 800391a:	4a9f      	ldr	r2, [pc, #636]	@ (8003b98 <_strtod_l+0xaf0>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d12b      	bne.n	8003978 <_strtod_l+0x8d0>
 8003920:	9b08      	ldr	r3, [sp, #32]
 8003922:	4651      	mov	r1, sl
 8003924:	b303      	cbz	r3, 8003968 <_strtod_l+0x8c0>
 8003926:	4b9d      	ldr	r3, [pc, #628]	@ (8003b9c <_strtod_l+0xaf4>)
 8003928:	465a      	mov	r2, fp
 800392a:	4013      	ands	r3, r2
 800392c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8003930:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003934:	d81b      	bhi.n	800396e <_strtod_l+0x8c6>
 8003936:	0d1b      	lsrs	r3, r3, #20
 8003938:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	4299      	cmp	r1, r3
 8003942:	d119      	bne.n	8003978 <_strtod_l+0x8d0>
 8003944:	4b96      	ldr	r3, [pc, #600]	@ (8003ba0 <_strtod_l+0xaf8>)
 8003946:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003948:	429a      	cmp	r2, r3
 800394a:	d102      	bne.n	8003952 <_strtod_l+0x8aa>
 800394c:	3101      	adds	r1, #1
 800394e:	f43f adca 	beq.w	80034e6 <_strtod_l+0x43e>
 8003952:	4b92      	ldr	r3, [pc, #584]	@ (8003b9c <_strtod_l+0xaf4>)
 8003954:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003956:	401a      	ands	r2, r3
 8003958:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800395c:	f04f 0a00 	mov.w	sl, #0
 8003960:	9b08      	ldr	r3, [sp, #32]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1b8      	bne.n	80038d8 <_strtod_l+0x830>
 8003966:	e5c9      	b.n	80034fc <_strtod_l+0x454>
 8003968:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800396c:	e7e8      	b.n	8003940 <_strtod_l+0x898>
 800396e:	4613      	mov	r3, r2
 8003970:	e7e6      	b.n	8003940 <_strtod_l+0x898>
 8003972:	ea53 030a 	orrs.w	r3, r3, sl
 8003976:	d0a1      	beq.n	80038bc <_strtod_l+0x814>
 8003978:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800397a:	b1db      	cbz	r3, 80039b4 <_strtod_l+0x90c>
 800397c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800397e:	4213      	tst	r3, r2
 8003980:	d0ee      	beq.n	8003960 <_strtod_l+0x8b8>
 8003982:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003984:	9a08      	ldr	r2, [sp, #32]
 8003986:	4650      	mov	r0, sl
 8003988:	4659      	mov	r1, fp
 800398a:	b1bb      	cbz	r3, 80039bc <_strtod_l+0x914>
 800398c:	f7ff fb6e 	bl	800306c <sulp>
 8003990:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003994:	ec53 2b10 	vmov	r2, r3, d0
 8003998:	f7fc fc80 	bl	800029c <__adddf3>
 800399c:	4682      	mov	sl, r0
 800399e:	468b      	mov	fp, r1
 80039a0:	e7de      	b.n	8003960 <_strtod_l+0x8b8>
 80039a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80039a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80039aa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80039ae:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80039b2:	e7d5      	b.n	8003960 <_strtod_l+0x8b8>
 80039b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80039b6:	ea13 0f0a 	tst.w	r3, sl
 80039ba:	e7e1      	b.n	8003980 <_strtod_l+0x8d8>
 80039bc:	f7ff fb56 	bl	800306c <sulp>
 80039c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80039c4:	ec53 2b10 	vmov	r2, r3, d0
 80039c8:	f7fc fc66 	bl	8000298 <__aeabi_dsub>
 80039cc:	2200      	movs	r2, #0
 80039ce:	2300      	movs	r3, #0
 80039d0:	4682      	mov	sl, r0
 80039d2:	468b      	mov	fp, r1
 80039d4:	f7fd f880 	bl	8000ad8 <__aeabi_dcmpeq>
 80039d8:	2800      	cmp	r0, #0
 80039da:	d0c1      	beq.n	8003960 <_strtod_l+0x8b8>
 80039dc:	e619      	b.n	8003612 <_strtod_l+0x56a>
 80039de:	4641      	mov	r1, r8
 80039e0:	4620      	mov	r0, r4
 80039e2:	f002 fadd 	bl	8005fa0 <__ratio>
 80039e6:	ec57 6b10 	vmov	r6, r7, d0
 80039ea:	2200      	movs	r2, #0
 80039ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80039f0:	4630      	mov	r0, r6
 80039f2:	4639      	mov	r1, r7
 80039f4:	f7fd f884 	bl	8000b00 <__aeabi_dcmple>
 80039f8:	2800      	cmp	r0, #0
 80039fa:	d06f      	beq.n	8003adc <_strtod_l+0xa34>
 80039fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d17a      	bne.n	8003af8 <_strtod_l+0xa50>
 8003a02:	f1ba 0f00 	cmp.w	sl, #0
 8003a06:	d158      	bne.n	8003aba <_strtod_l+0xa12>
 8003a08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003a0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d15a      	bne.n	8003ac8 <_strtod_l+0xa20>
 8003a12:	4b64      	ldr	r3, [pc, #400]	@ (8003ba4 <_strtod_l+0xafc>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	4630      	mov	r0, r6
 8003a18:	4639      	mov	r1, r7
 8003a1a:	f7fd f867 	bl	8000aec <__aeabi_dcmplt>
 8003a1e:	2800      	cmp	r0, #0
 8003a20:	d159      	bne.n	8003ad6 <_strtod_l+0xa2e>
 8003a22:	4630      	mov	r0, r6
 8003a24:	4639      	mov	r1, r7
 8003a26:	4b60      	ldr	r3, [pc, #384]	@ (8003ba8 <_strtod_l+0xb00>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f7fc fded 	bl	8000608 <__aeabi_dmul>
 8003a2e:	4606      	mov	r6, r0
 8003a30:	460f      	mov	r7, r1
 8003a32:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8003a36:	9606      	str	r6, [sp, #24]
 8003a38:	9307      	str	r3, [sp, #28]
 8003a3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003a3e:	4d57      	ldr	r5, [pc, #348]	@ (8003b9c <_strtod_l+0xaf4>)
 8003a40:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8003a44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003a46:	401d      	ands	r5, r3
 8003a48:	4b58      	ldr	r3, [pc, #352]	@ (8003bac <_strtod_l+0xb04>)
 8003a4a:	429d      	cmp	r5, r3
 8003a4c:	f040 80b2 	bne.w	8003bb4 <_strtod_l+0xb0c>
 8003a50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003a52:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8003a56:	ec4b ab10 	vmov	d0, sl, fp
 8003a5a:	f002 f9d9 	bl	8005e10 <__ulp>
 8003a5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003a62:	ec51 0b10 	vmov	r0, r1, d0
 8003a66:	f7fc fdcf 	bl	8000608 <__aeabi_dmul>
 8003a6a:	4652      	mov	r2, sl
 8003a6c:	465b      	mov	r3, fp
 8003a6e:	f7fc fc15 	bl	800029c <__adddf3>
 8003a72:	460b      	mov	r3, r1
 8003a74:	4949      	ldr	r1, [pc, #292]	@ (8003b9c <_strtod_l+0xaf4>)
 8003a76:	4a4e      	ldr	r2, [pc, #312]	@ (8003bb0 <_strtod_l+0xb08>)
 8003a78:	4019      	ands	r1, r3
 8003a7a:	4291      	cmp	r1, r2
 8003a7c:	4682      	mov	sl, r0
 8003a7e:	d942      	bls.n	8003b06 <_strtod_l+0xa5e>
 8003a80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8003a82:	4b47      	ldr	r3, [pc, #284]	@ (8003ba0 <_strtod_l+0xaf8>)
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d103      	bne.n	8003a90 <_strtod_l+0x9e8>
 8003a88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	f43f ad2b 	beq.w	80034e6 <_strtod_l+0x43e>
 8003a90:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8003ba0 <_strtod_l+0xaf8>
 8003a94:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8003a98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003a9a:	9805      	ldr	r0, [sp, #20]
 8003a9c:	f001 fe84 	bl	80057a8 <_Bfree>
 8003aa0:	9805      	ldr	r0, [sp, #20]
 8003aa2:	4649      	mov	r1, r9
 8003aa4:	f001 fe80 	bl	80057a8 <_Bfree>
 8003aa8:	9805      	ldr	r0, [sp, #20]
 8003aaa:	4641      	mov	r1, r8
 8003aac:	f001 fe7c 	bl	80057a8 <_Bfree>
 8003ab0:	9805      	ldr	r0, [sp, #20]
 8003ab2:	4621      	mov	r1, r4
 8003ab4:	f001 fe78 	bl	80057a8 <_Bfree>
 8003ab8:	e618      	b.n	80036ec <_strtod_l+0x644>
 8003aba:	f1ba 0f01 	cmp.w	sl, #1
 8003abe:	d103      	bne.n	8003ac8 <_strtod_l+0xa20>
 8003ac0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f43f ada5 	beq.w	8003612 <_strtod_l+0x56a>
 8003ac8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8003b78 <_strtod_l+0xad0>
 8003acc:	4f35      	ldr	r7, [pc, #212]	@ (8003ba4 <_strtod_l+0xafc>)
 8003ace:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003ad2:	2600      	movs	r6, #0
 8003ad4:	e7b1      	b.n	8003a3a <_strtod_l+0x992>
 8003ad6:	4f34      	ldr	r7, [pc, #208]	@ (8003ba8 <_strtod_l+0xb00>)
 8003ad8:	2600      	movs	r6, #0
 8003ada:	e7aa      	b.n	8003a32 <_strtod_l+0x98a>
 8003adc:	4b32      	ldr	r3, [pc, #200]	@ (8003ba8 <_strtod_l+0xb00>)
 8003ade:	4630      	mov	r0, r6
 8003ae0:	4639      	mov	r1, r7
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f7fc fd90 	bl	8000608 <__aeabi_dmul>
 8003ae8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003aea:	4606      	mov	r6, r0
 8003aec:	460f      	mov	r7, r1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d09f      	beq.n	8003a32 <_strtod_l+0x98a>
 8003af2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8003af6:	e7a0      	b.n	8003a3a <_strtod_l+0x992>
 8003af8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8003b80 <_strtod_l+0xad8>
 8003afc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003b00:	ec57 6b17 	vmov	r6, r7, d7
 8003b04:	e799      	b.n	8003a3a <_strtod_l+0x992>
 8003b06:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8003b0a:	9b08      	ldr	r3, [sp, #32]
 8003b0c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1c1      	bne.n	8003a98 <_strtod_l+0x9f0>
 8003b14:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8003b18:	0d1b      	lsrs	r3, r3, #20
 8003b1a:	051b      	lsls	r3, r3, #20
 8003b1c:	429d      	cmp	r5, r3
 8003b1e:	d1bb      	bne.n	8003a98 <_strtod_l+0x9f0>
 8003b20:	4630      	mov	r0, r6
 8003b22:	4639      	mov	r1, r7
 8003b24:	f7fd f8b8 	bl	8000c98 <__aeabi_d2lz>
 8003b28:	f7fc fd40 	bl	80005ac <__aeabi_l2d>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4630      	mov	r0, r6
 8003b32:	4639      	mov	r1, r7
 8003b34:	f7fc fbb0 	bl	8000298 <__aeabi_dsub>
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003b40:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8003b44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003b46:	ea46 060a 	orr.w	r6, r6, sl
 8003b4a:	431e      	orrs	r6, r3
 8003b4c:	d06f      	beq.n	8003c2e <_strtod_l+0xb86>
 8003b4e:	a30e      	add	r3, pc, #56	@ (adr r3, 8003b88 <_strtod_l+0xae0>)
 8003b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b54:	f7fc ffca 	bl	8000aec <__aeabi_dcmplt>
 8003b58:	2800      	cmp	r0, #0
 8003b5a:	f47f accf 	bne.w	80034fc <_strtod_l+0x454>
 8003b5e:	a30c      	add	r3, pc, #48	@ (adr r3, 8003b90 <_strtod_l+0xae8>)
 8003b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003b68:	f7fc ffde 	bl	8000b28 <__aeabi_dcmpgt>
 8003b6c:	2800      	cmp	r0, #0
 8003b6e:	d093      	beq.n	8003a98 <_strtod_l+0x9f0>
 8003b70:	e4c4      	b.n	80034fc <_strtod_l+0x454>
 8003b72:	bf00      	nop
 8003b74:	f3af 8000 	nop.w
 8003b78:	00000000 	.word	0x00000000
 8003b7c:	bff00000 	.word	0xbff00000
 8003b80:	00000000 	.word	0x00000000
 8003b84:	3ff00000 	.word	0x3ff00000
 8003b88:	94a03595 	.word	0x94a03595
 8003b8c:	3fdfffff 	.word	0x3fdfffff
 8003b90:	35afe535 	.word	0x35afe535
 8003b94:	3fe00000 	.word	0x3fe00000
 8003b98:	000fffff 	.word	0x000fffff
 8003b9c:	7ff00000 	.word	0x7ff00000
 8003ba0:	7fefffff 	.word	0x7fefffff
 8003ba4:	3ff00000 	.word	0x3ff00000
 8003ba8:	3fe00000 	.word	0x3fe00000
 8003bac:	7fe00000 	.word	0x7fe00000
 8003bb0:	7c9fffff 	.word	0x7c9fffff
 8003bb4:	9b08      	ldr	r3, [sp, #32]
 8003bb6:	b323      	cbz	r3, 8003c02 <_strtod_l+0xb5a>
 8003bb8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8003bbc:	d821      	bhi.n	8003c02 <_strtod_l+0xb5a>
 8003bbe:	a328      	add	r3, pc, #160	@ (adr r3, 8003c60 <_strtod_l+0xbb8>)
 8003bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc4:	4630      	mov	r0, r6
 8003bc6:	4639      	mov	r1, r7
 8003bc8:	f7fc ff9a 	bl	8000b00 <__aeabi_dcmple>
 8003bcc:	b1a0      	cbz	r0, 8003bf8 <_strtod_l+0xb50>
 8003bce:	4639      	mov	r1, r7
 8003bd0:	4630      	mov	r0, r6
 8003bd2:	f7fc fff1 	bl	8000bb8 <__aeabi_d2uiz>
 8003bd6:	2801      	cmp	r0, #1
 8003bd8:	bf38      	it	cc
 8003bda:	2001      	movcc	r0, #1
 8003bdc:	f7fc fc9a 	bl	8000514 <__aeabi_ui2d>
 8003be0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003be2:	4606      	mov	r6, r0
 8003be4:	460f      	mov	r7, r1
 8003be6:	b9fb      	cbnz	r3, 8003c28 <_strtod_l+0xb80>
 8003be8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003bec:	9014      	str	r0, [sp, #80]	@ 0x50
 8003bee:	9315      	str	r3, [sp, #84]	@ 0x54
 8003bf0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8003bf4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8003bf8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003bfa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8003bfe:	1b5b      	subs	r3, r3, r5
 8003c00:	9311      	str	r3, [sp, #68]	@ 0x44
 8003c02:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8003c06:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8003c0a:	f002 f901 	bl	8005e10 <__ulp>
 8003c0e:	4650      	mov	r0, sl
 8003c10:	ec53 2b10 	vmov	r2, r3, d0
 8003c14:	4659      	mov	r1, fp
 8003c16:	f7fc fcf7 	bl	8000608 <__aeabi_dmul>
 8003c1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003c1e:	f7fc fb3d 	bl	800029c <__adddf3>
 8003c22:	4682      	mov	sl, r0
 8003c24:	468b      	mov	fp, r1
 8003c26:	e770      	b.n	8003b0a <_strtod_l+0xa62>
 8003c28:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8003c2c:	e7e0      	b.n	8003bf0 <_strtod_l+0xb48>
 8003c2e:	a30e      	add	r3, pc, #56	@ (adr r3, 8003c68 <_strtod_l+0xbc0>)
 8003c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c34:	f7fc ff5a 	bl	8000aec <__aeabi_dcmplt>
 8003c38:	e798      	b.n	8003b6c <_strtod_l+0xac4>
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003c3e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8003c40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	f7ff ba6d 	b.w	8003122 <_strtod_l+0x7a>
 8003c48:	2a65      	cmp	r2, #101	@ 0x65
 8003c4a:	f43f ab66 	beq.w	800331a <_strtod_l+0x272>
 8003c4e:	2a45      	cmp	r2, #69	@ 0x45
 8003c50:	f43f ab63 	beq.w	800331a <_strtod_l+0x272>
 8003c54:	2301      	movs	r3, #1
 8003c56:	f7ff bb9e 	b.w	8003396 <_strtod_l+0x2ee>
 8003c5a:	bf00      	nop
 8003c5c:	f3af 8000 	nop.w
 8003c60:	ffc00000 	.word	0xffc00000
 8003c64:	41dfffff 	.word	0x41dfffff
 8003c68:	94a03595 	.word	0x94a03595
 8003c6c:	3fcfffff 	.word	0x3fcfffff

08003c70 <_strtod_r>:
 8003c70:	4b01      	ldr	r3, [pc, #4]	@ (8003c78 <_strtod_r+0x8>)
 8003c72:	f7ff ba19 	b.w	80030a8 <_strtod_l>
 8003c76:	bf00      	nop
 8003c78:	2000001c 	.word	0x2000001c

08003c7c <_strtol_l.constprop.0>:
 8003c7c:	2b24      	cmp	r3, #36	@ 0x24
 8003c7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c82:	4686      	mov	lr, r0
 8003c84:	4690      	mov	r8, r2
 8003c86:	d801      	bhi.n	8003c8c <_strtol_l.constprop.0+0x10>
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d106      	bne.n	8003c9a <_strtol_l.constprop.0+0x1e>
 8003c8c:	f000 f8ae 	bl	8003dec <__errno>
 8003c90:	2316      	movs	r3, #22
 8003c92:	6003      	str	r3, [r0, #0]
 8003c94:	2000      	movs	r0, #0
 8003c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c9a:	4834      	ldr	r0, [pc, #208]	@ (8003d6c <_strtol_l.constprop.0+0xf0>)
 8003c9c:	460d      	mov	r5, r1
 8003c9e:	462a      	mov	r2, r5
 8003ca0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ca4:	5d06      	ldrb	r6, [r0, r4]
 8003ca6:	f016 0608 	ands.w	r6, r6, #8
 8003caa:	d1f8      	bne.n	8003c9e <_strtol_l.constprop.0+0x22>
 8003cac:	2c2d      	cmp	r4, #45	@ 0x2d
 8003cae:	d12d      	bne.n	8003d0c <_strtol_l.constprop.0+0x90>
 8003cb0:	782c      	ldrb	r4, [r5, #0]
 8003cb2:	2601      	movs	r6, #1
 8003cb4:	1c95      	adds	r5, r2, #2
 8003cb6:	f033 0210 	bics.w	r2, r3, #16
 8003cba:	d109      	bne.n	8003cd0 <_strtol_l.constprop.0+0x54>
 8003cbc:	2c30      	cmp	r4, #48	@ 0x30
 8003cbe:	d12a      	bne.n	8003d16 <_strtol_l.constprop.0+0x9a>
 8003cc0:	782a      	ldrb	r2, [r5, #0]
 8003cc2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003cc6:	2a58      	cmp	r2, #88	@ 0x58
 8003cc8:	d125      	bne.n	8003d16 <_strtol_l.constprop.0+0x9a>
 8003cca:	786c      	ldrb	r4, [r5, #1]
 8003ccc:	2310      	movs	r3, #16
 8003cce:	3502      	adds	r5, #2
 8003cd0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003cd4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8003cd8:	2200      	movs	r2, #0
 8003cda:	fbbc f9f3 	udiv	r9, ip, r3
 8003cde:	4610      	mov	r0, r2
 8003ce0:	fb03 ca19 	mls	sl, r3, r9, ip
 8003ce4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003ce8:	2f09      	cmp	r7, #9
 8003cea:	d81b      	bhi.n	8003d24 <_strtol_l.constprop.0+0xa8>
 8003cec:	463c      	mov	r4, r7
 8003cee:	42a3      	cmp	r3, r4
 8003cf0:	dd27      	ble.n	8003d42 <_strtol_l.constprop.0+0xc6>
 8003cf2:	1c57      	adds	r7, r2, #1
 8003cf4:	d007      	beq.n	8003d06 <_strtol_l.constprop.0+0x8a>
 8003cf6:	4581      	cmp	r9, r0
 8003cf8:	d320      	bcc.n	8003d3c <_strtol_l.constprop.0+0xc0>
 8003cfa:	d101      	bne.n	8003d00 <_strtol_l.constprop.0+0x84>
 8003cfc:	45a2      	cmp	sl, r4
 8003cfe:	db1d      	blt.n	8003d3c <_strtol_l.constprop.0+0xc0>
 8003d00:	fb00 4003 	mla	r0, r0, r3, r4
 8003d04:	2201      	movs	r2, #1
 8003d06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003d0a:	e7eb      	b.n	8003ce4 <_strtol_l.constprop.0+0x68>
 8003d0c:	2c2b      	cmp	r4, #43	@ 0x2b
 8003d0e:	bf04      	itt	eq
 8003d10:	782c      	ldrbeq	r4, [r5, #0]
 8003d12:	1c95      	addeq	r5, r2, #2
 8003d14:	e7cf      	b.n	8003cb6 <_strtol_l.constprop.0+0x3a>
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1da      	bne.n	8003cd0 <_strtol_l.constprop.0+0x54>
 8003d1a:	2c30      	cmp	r4, #48	@ 0x30
 8003d1c:	bf0c      	ite	eq
 8003d1e:	2308      	moveq	r3, #8
 8003d20:	230a      	movne	r3, #10
 8003d22:	e7d5      	b.n	8003cd0 <_strtol_l.constprop.0+0x54>
 8003d24:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003d28:	2f19      	cmp	r7, #25
 8003d2a:	d801      	bhi.n	8003d30 <_strtol_l.constprop.0+0xb4>
 8003d2c:	3c37      	subs	r4, #55	@ 0x37
 8003d2e:	e7de      	b.n	8003cee <_strtol_l.constprop.0+0x72>
 8003d30:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003d34:	2f19      	cmp	r7, #25
 8003d36:	d804      	bhi.n	8003d42 <_strtol_l.constprop.0+0xc6>
 8003d38:	3c57      	subs	r4, #87	@ 0x57
 8003d3a:	e7d8      	b.n	8003cee <_strtol_l.constprop.0+0x72>
 8003d3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d40:	e7e1      	b.n	8003d06 <_strtol_l.constprop.0+0x8a>
 8003d42:	1c53      	adds	r3, r2, #1
 8003d44:	d108      	bne.n	8003d58 <_strtol_l.constprop.0+0xdc>
 8003d46:	2322      	movs	r3, #34	@ 0x22
 8003d48:	f8ce 3000 	str.w	r3, [lr]
 8003d4c:	4660      	mov	r0, ip
 8003d4e:	f1b8 0f00 	cmp.w	r8, #0
 8003d52:	d0a0      	beq.n	8003c96 <_strtol_l.constprop.0+0x1a>
 8003d54:	1e69      	subs	r1, r5, #1
 8003d56:	e006      	b.n	8003d66 <_strtol_l.constprop.0+0xea>
 8003d58:	b106      	cbz	r6, 8003d5c <_strtol_l.constprop.0+0xe0>
 8003d5a:	4240      	negs	r0, r0
 8003d5c:	f1b8 0f00 	cmp.w	r8, #0
 8003d60:	d099      	beq.n	8003c96 <_strtol_l.constprop.0+0x1a>
 8003d62:	2a00      	cmp	r2, #0
 8003d64:	d1f6      	bne.n	8003d54 <_strtol_l.constprop.0+0xd8>
 8003d66:	f8c8 1000 	str.w	r1, [r8]
 8003d6a:	e794      	b.n	8003c96 <_strtol_l.constprop.0+0x1a>
 8003d6c:	080069a9 	.word	0x080069a9

08003d70 <_strtol_r>:
 8003d70:	f7ff bf84 	b.w	8003c7c <_strtol_l.constprop.0>

08003d74 <_fwalk_sglue>:
 8003d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d78:	4607      	mov	r7, r0
 8003d7a:	4688      	mov	r8, r1
 8003d7c:	4614      	mov	r4, r2
 8003d7e:	2600      	movs	r6, #0
 8003d80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d84:	f1b9 0901 	subs.w	r9, r9, #1
 8003d88:	d505      	bpl.n	8003d96 <_fwalk_sglue+0x22>
 8003d8a:	6824      	ldr	r4, [r4, #0]
 8003d8c:	2c00      	cmp	r4, #0
 8003d8e:	d1f7      	bne.n	8003d80 <_fwalk_sglue+0xc>
 8003d90:	4630      	mov	r0, r6
 8003d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d96:	89ab      	ldrh	r3, [r5, #12]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d907      	bls.n	8003dac <_fwalk_sglue+0x38>
 8003d9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003da0:	3301      	adds	r3, #1
 8003da2:	d003      	beq.n	8003dac <_fwalk_sglue+0x38>
 8003da4:	4629      	mov	r1, r5
 8003da6:	4638      	mov	r0, r7
 8003da8:	47c0      	blx	r8
 8003daa:	4306      	orrs	r6, r0
 8003dac:	3568      	adds	r5, #104	@ 0x68
 8003dae:	e7e9      	b.n	8003d84 <_fwalk_sglue+0x10>

08003db0 <strncmp>:
 8003db0:	b510      	push	{r4, lr}
 8003db2:	b16a      	cbz	r2, 8003dd0 <strncmp+0x20>
 8003db4:	3901      	subs	r1, #1
 8003db6:	1884      	adds	r4, r0, r2
 8003db8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dbc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d103      	bne.n	8003dcc <strncmp+0x1c>
 8003dc4:	42a0      	cmp	r0, r4
 8003dc6:	d001      	beq.n	8003dcc <strncmp+0x1c>
 8003dc8:	2a00      	cmp	r2, #0
 8003dca:	d1f5      	bne.n	8003db8 <strncmp+0x8>
 8003dcc:	1ad0      	subs	r0, r2, r3
 8003dce:	bd10      	pop	{r4, pc}
 8003dd0:	4610      	mov	r0, r2
 8003dd2:	e7fc      	b.n	8003dce <strncmp+0x1e>

08003dd4 <memset>:
 8003dd4:	4402      	add	r2, r0
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d100      	bne.n	8003dde <memset+0xa>
 8003ddc:	4770      	bx	lr
 8003dde:	f803 1b01 	strb.w	r1, [r3], #1
 8003de2:	e7f9      	b.n	8003dd8 <memset+0x4>

08003de4 <_localeconv_r>:
 8003de4:	4800      	ldr	r0, [pc, #0]	@ (8003de8 <_localeconv_r+0x4>)
 8003de6:	4770      	bx	lr
 8003de8:	2000010c 	.word	0x2000010c

08003dec <__errno>:
 8003dec:	4b01      	ldr	r3, [pc, #4]	@ (8003df4 <__errno+0x8>)
 8003dee:	6818      	ldr	r0, [r3, #0]
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	20000188 	.word	0x20000188

08003df8 <__libc_init_array>:
 8003df8:	b570      	push	{r4, r5, r6, lr}
 8003dfa:	4d0d      	ldr	r5, [pc, #52]	@ (8003e30 <__libc_init_array+0x38>)
 8003dfc:	4c0d      	ldr	r4, [pc, #52]	@ (8003e34 <__libc_init_array+0x3c>)
 8003dfe:	1b64      	subs	r4, r4, r5
 8003e00:	10a4      	asrs	r4, r4, #2
 8003e02:	2600      	movs	r6, #0
 8003e04:	42a6      	cmp	r6, r4
 8003e06:	d109      	bne.n	8003e1c <__libc_init_array+0x24>
 8003e08:	4d0b      	ldr	r5, [pc, #44]	@ (8003e38 <__libc_init_array+0x40>)
 8003e0a:	4c0c      	ldr	r4, [pc, #48]	@ (8003e3c <__libc_init_array+0x44>)
 8003e0c:	f002 fd66 	bl	80068dc <_init>
 8003e10:	1b64      	subs	r4, r4, r5
 8003e12:	10a4      	asrs	r4, r4, #2
 8003e14:	2600      	movs	r6, #0
 8003e16:	42a6      	cmp	r6, r4
 8003e18:	d105      	bne.n	8003e26 <__libc_init_array+0x2e>
 8003e1a:	bd70      	pop	{r4, r5, r6, pc}
 8003e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e20:	4798      	blx	r3
 8003e22:	3601      	adds	r6, #1
 8003e24:	e7ee      	b.n	8003e04 <__libc_init_array+0xc>
 8003e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e2a:	4798      	blx	r3
 8003e2c:	3601      	adds	r6, #1
 8003e2e:	e7f2      	b.n	8003e16 <__libc_init_array+0x1e>
 8003e30:	08006d44 	.word	0x08006d44
 8003e34:	08006d44 	.word	0x08006d44
 8003e38:	08006d44 	.word	0x08006d44
 8003e3c:	08006d48 	.word	0x08006d48

08003e40 <__retarget_lock_init_recursive>:
 8003e40:	4770      	bx	lr

08003e42 <__retarget_lock_acquire_recursive>:
 8003e42:	4770      	bx	lr

08003e44 <__retarget_lock_release_recursive>:
 8003e44:	4770      	bx	lr

08003e46 <memcpy>:
 8003e46:	440a      	add	r2, r1
 8003e48:	4291      	cmp	r1, r2
 8003e4a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003e4e:	d100      	bne.n	8003e52 <memcpy+0xc>
 8003e50:	4770      	bx	lr
 8003e52:	b510      	push	{r4, lr}
 8003e54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e5c:	4291      	cmp	r1, r2
 8003e5e:	d1f9      	bne.n	8003e54 <memcpy+0xe>
 8003e60:	bd10      	pop	{r4, pc}
 8003e62:	0000      	movs	r0, r0
 8003e64:	0000      	movs	r0, r0
	...

08003e68 <nan>:
 8003e68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8003e70 <nan+0x8>
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	00000000 	.word	0x00000000
 8003e74:	7ff80000 	.word	0x7ff80000

08003e78 <nanf>:
 8003e78:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8003e80 <nanf+0x8>
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	7fc00000 	.word	0x7fc00000

08003e84 <quorem>:
 8003e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e88:	6903      	ldr	r3, [r0, #16]
 8003e8a:	690c      	ldr	r4, [r1, #16]
 8003e8c:	42a3      	cmp	r3, r4
 8003e8e:	4607      	mov	r7, r0
 8003e90:	db7e      	blt.n	8003f90 <quorem+0x10c>
 8003e92:	3c01      	subs	r4, #1
 8003e94:	f101 0814 	add.w	r8, r1, #20
 8003e98:	00a3      	lsls	r3, r4, #2
 8003e9a:	f100 0514 	add.w	r5, r0, #20
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003ea4:	9301      	str	r3, [sp, #4]
 8003ea6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003eaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003eb6:	fbb2 f6f3 	udiv	r6, r2, r3
 8003eba:	d32e      	bcc.n	8003f1a <quorem+0x96>
 8003ebc:	f04f 0a00 	mov.w	sl, #0
 8003ec0:	46c4      	mov	ip, r8
 8003ec2:	46ae      	mov	lr, r5
 8003ec4:	46d3      	mov	fp, sl
 8003ec6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003eca:	b298      	uxth	r0, r3
 8003ecc:	fb06 a000 	mla	r0, r6, r0, sl
 8003ed0:	0c02      	lsrs	r2, r0, #16
 8003ed2:	0c1b      	lsrs	r3, r3, #16
 8003ed4:	fb06 2303 	mla	r3, r6, r3, r2
 8003ed8:	f8de 2000 	ldr.w	r2, [lr]
 8003edc:	b280      	uxth	r0, r0
 8003ede:	b292      	uxth	r2, r2
 8003ee0:	1a12      	subs	r2, r2, r0
 8003ee2:	445a      	add	r2, fp
 8003ee4:	f8de 0000 	ldr.w	r0, [lr]
 8003ee8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003ef2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003ef6:	b292      	uxth	r2, r2
 8003ef8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003efc:	45e1      	cmp	r9, ip
 8003efe:	f84e 2b04 	str.w	r2, [lr], #4
 8003f02:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003f06:	d2de      	bcs.n	8003ec6 <quorem+0x42>
 8003f08:	9b00      	ldr	r3, [sp, #0]
 8003f0a:	58eb      	ldr	r3, [r5, r3]
 8003f0c:	b92b      	cbnz	r3, 8003f1a <quorem+0x96>
 8003f0e:	9b01      	ldr	r3, [sp, #4]
 8003f10:	3b04      	subs	r3, #4
 8003f12:	429d      	cmp	r5, r3
 8003f14:	461a      	mov	r2, r3
 8003f16:	d32f      	bcc.n	8003f78 <quorem+0xf4>
 8003f18:	613c      	str	r4, [r7, #16]
 8003f1a:	4638      	mov	r0, r7
 8003f1c:	f001 fec8 	bl	8005cb0 <__mcmp>
 8003f20:	2800      	cmp	r0, #0
 8003f22:	db25      	blt.n	8003f70 <quorem+0xec>
 8003f24:	4629      	mov	r1, r5
 8003f26:	2000      	movs	r0, #0
 8003f28:	f858 2b04 	ldr.w	r2, [r8], #4
 8003f2c:	f8d1 c000 	ldr.w	ip, [r1]
 8003f30:	fa1f fe82 	uxth.w	lr, r2
 8003f34:	fa1f f38c 	uxth.w	r3, ip
 8003f38:	eba3 030e 	sub.w	r3, r3, lr
 8003f3c:	4403      	add	r3, r0
 8003f3e:	0c12      	lsrs	r2, r2, #16
 8003f40:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003f44:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f4e:	45c1      	cmp	r9, r8
 8003f50:	f841 3b04 	str.w	r3, [r1], #4
 8003f54:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003f58:	d2e6      	bcs.n	8003f28 <quorem+0xa4>
 8003f5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f62:	b922      	cbnz	r2, 8003f6e <quorem+0xea>
 8003f64:	3b04      	subs	r3, #4
 8003f66:	429d      	cmp	r5, r3
 8003f68:	461a      	mov	r2, r3
 8003f6a:	d30b      	bcc.n	8003f84 <quorem+0x100>
 8003f6c:	613c      	str	r4, [r7, #16]
 8003f6e:	3601      	adds	r6, #1
 8003f70:	4630      	mov	r0, r6
 8003f72:	b003      	add	sp, #12
 8003f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f78:	6812      	ldr	r2, [r2, #0]
 8003f7a:	3b04      	subs	r3, #4
 8003f7c:	2a00      	cmp	r2, #0
 8003f7e:	d1cb      	bne.n	8003f18 <quorem+0x94>
 8003f80:	3c01      	subs	r4, #1
 8003f82:	e7c6      	b.n	8003f12 <quorem+0x8e>
 8003f84:	6812      	ldr	r2, [r2, #0]
 8003f86:	3b04      	subs	r3, #4
 8003f88:	2a00      	cmp	r2, #0
 8003f8a:	d1ef      	bne.n	8003f6c <quorem+0xe8>
 8003f8c:	3c01      	subs	r4, #1
 8003f8e:	e7ea      	b.n	8003f66 <quorem+0xe2>
 8003f90:	2000      	movs	r0, #0
 8003f92:	e7ee      	b.n	8003f72 <quorem+0xee>
 8003f94:	0000      	movs	r0, r0
	...

08003f98 <_dtoa_r>:
 8003f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f9c:	69c7      	ldr	r7, [r0, #28]
 8003f9e:	b099      	sub	sp, #100	@ 0x64
 8003fa0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003fa4:	ec55 4b10 	vmov	r4, r5, d0
 8003fa8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8003faa:	9109      	str	r1, [sp, #36]	@ 0x24
 8003fac:	4683      	mov	fp, r0
 8003fae:	920e      	str	r2, [sp, #56]	@ 0x38
 8003fb0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003fb2:	b97f      	cbnz	r7, 8003fd4 <_dtoa_r+0x3c>
 8003fb4:	2010      	movs	r0, #16
 8003fb6:	f001 fa43 	bl	8005440 <malloc>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	f8cb 001c 	str.w	r0, [fp, #28]
 8003fc0:	b920      	cbnz	r0, 8003fcc <_dtoa_r+0x34>
 8003fc2:	4ba7      	ldr	r3, [pc, #668]	@ (8004260 <_dtoa_r+0x2c8>)
 8003fc4:	21ef      	movs	r1, #239	@ 0xef
 8003fc6:	48a7      	ldr	r0, [pc, #668]	@ (8004264 <_dtoa_r+0x2cc>)
 8003fc8:	f002 f94e 	bl	8006268 <__assert_func>
 8003fcc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003fd0:	6007      	str	r7, [r0, #0]
 8003fd2:	60c7      	str	r7, [r0, #12]
 8003fd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003fd8:	6819      	ldr	r1, [r3, #0]
 8003fda:	b159      	cbz	r1, 8003ff4 <_dtoa_r+0x5c>
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	604a      	str	r2, [r1, #4]
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	4093      	lsls	r3, r2
 8003fe4:	608b      	str	r3, [r1, #8]
 8003fe6:	4658      	mov	r0, fp
 8003fe8:	f001 fbde 	bl	80057a8 <_Bfree>
 8003fec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	1e2b      	subs	r3, r5, #0
 8003ff6:	bfb9      	ittee	lt
 8003ff8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003ffc:	9303      	strlt	r3, [sp, #12]
 8003ffe:	2300      	movge	r3, #0
 8004000:	6033      	strge	r3, [r6, #0]
 8004002:	9f03      	ldr	r7, [sp, #12]
 8004004:	4b98      	ldr	r3, [pc, #608]	@ (8004268 <_dtoa_r+0x2d0>)
 8004006:	bfbc      	itt	lt
 8004008:	2201      	movlt	r2, #1
 800400a:	6032      	strlt	r2, [r6, #0]
 800400c:	43bb      	bics	r3, r7
 800400e:	d112      	bne.n	8004036 <_dtoa_r+0x9e>
 8004010:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004012:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004016:	6013      	str	r3, [r2, #0]
 8004018:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800401c:	4323      	orrs	r3, r4
 800401e:	f000 854d 	beq.w	8004abc <_dtoa_r+0xb24>
 8004022:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004024:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800427c <_dtoa_r+0x2e4>
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 854f 	beq.w	8004acc <_dtoa_r+0xb34>
 800402e:	f10a 0303 	add.w	r3, sl, #3
 8004032:	f000 bd49 	b.w	8004ac8 <_dtoa_r+0xb30>
 8004036:	ed9d 7b02 	vldr	d7, [sp, #8]
 800403a:	2200      	movs	r2, #0
 800403c:	ec51 0b17 	vmov	r0, r1, d7
 8004040:	2300      	movs	r3, #0
 8004042:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8004046:	f7fc fd47 	bl	8000ad8 <__aeabi_dcmpeq>
 800404a:	4680      	mov	r8, r0
 800404c:	b158      	cbz	r0, 8004066 <_dtoa_r+0xce>
 800404e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004050:	2301      	movs	r3, #1
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004056:	b113      	cbz	r3, 800405e <_dtoa_r+0xc6>
 8004058:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800405a:	4b84      	ldr	r3, [pc, #528]	@ (800426c <_dtoa_r+0x2d4>)
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004280 <_dtoa_r+0x2e8>
 8004062:	f000 bd33 	b.w	8004acc <_dtoa_r+0xb34>
 8004066:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800406a:	aa16      	add	r2, sp, #88	@ 0x58
 800406c:	a917      	add	r1, sp, #92	@ 0x5c
 800406e:	4658      	mov	r0, fp
 8004070:	f001 ff3e 	bl	8005ef0 <__d2b>
 8004074:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004078:	4681      	mov	r9, r0
 800407a:	2e00      	cmp	r6, #0
 800407c:	d077      	beq.n	800416e <_dtoa_r+0x1d6>
 800407e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004080:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004088:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800408c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004090:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004094:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004098:	4619      	mov	r1, r3
 800409a:	2200      	movs	r2, #0
 800409c:	4b74      	ldr	r3, [pc, #464]	@ (8004270 <_dtoa_r+0x2d8>)
 800409e:	f7fc f8fb 	bl	8000298 <__aeabi_dsub>
 80040a2:	a369      	add	r3, pc, #420	@ (adr r3, 8004248 <_dtoa_r+0x2b0>)
 80040a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a8:	f7fc faae 	bl	8000608 <__aeabi_dmul>
 80040ac:	a368      	add	r3, pc, #416	@ (adr r3, 8004250 <_dtoa_r+0x2b8>)
 80040ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b2:	f7fc f8f3 	bl	800029c <__adddf3>
 80040b6:	4604      	mov	r4, r0
 80040b8:	4630      	mov	r0, r6
 80040ba:	460d      	mov	r5, r1
 80040bc:	f7fc fa3a 	bl	8000534 <__aeabi_i2d>
 80040c0:	a365      	add	r3, pc, #404	@ (adr r3, 8004258 <_dtoa_r+0x2c0>)
 80040c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c6:	f7fc fa9f 	bl	8000608 <__aeabi_dmul>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	4620      	mov	r0, r4
 80040d0:	4629      	mov	r1, r5
 80040d2:	f7fc f8e3 	bl	800029c <__adddf3>
 80040d6:	4604      	mov	r4, r0
 80040d8:	460d      	mov	r5, r1
 80040da:	f7fc fd45 	bl	8000b68 <__aeabi_d2iz>
 80040de:	2200      	movs	r2, #0
 80040e0:	4607      	mov	r7, r0
 80040e2:	2300      	movs	r3, #0
 80040e4:	4620      	mov	r0, r4
 80040e6:	4629      	mov	r1, r5
 80040e8:	f7fc fd00 	bl	8000aec <__aeabi_dcmplt>
 80040ec:	b140      	cbz	r0, 8004100 <_dtoa_r+0x168>
 80040ee:	4638      	mov	r0, r7
 80040f0:	f7fc fa20 	bl	8000534 <__aeabi_i2d>
 80040f4:	4622      	mov	r2, r4
 80040f6:	462b      	mov	r3, r5
 80040f8:	f7fc fcee 	bl	8000ad8 <__aeabi_dcmpeq>
 80040fc:	b900      	cbnz	r0, 8004100 <_dtoa_r+0x168>
 80040fe:	3f01      	subs	r7, #1
 8004100:	2f16      	cmp	r7, #22
 8004102:	d851      	bhi.n	80041a8 <_dtoa_r+0x210>
 8004104:	4b5b      	ldr	r3, [pc, #364]	@ (8004274 <_dtoa_r+0x2dc>)
 8004106:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800410a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004112:	f7fc fceb 	bl	8000aec <__aeabi_dcmplt>
 8004116:	2800      	cmp	r0, #0
 8004118:	d048      	beq.n	80041ac <_dtoa_r+0x214>
 800411a:	3f01      	subs	r7, #1
 800411c:	2300      	movs	r3, #0
 800411e:	9312      	str	r3, [sp, #72]	@ 0x48
 8004120:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004122:	1b9b      	subs	r3, r3, r6
 8004124:	1e5a      	subs	r2, r3, #1
 8004126:	bf44      	itt	mi
 8004128:	f1c3 0801 	rsbmi	r8, r3, #1
 800412c:	2300      	movmi	r3, #0
 800412e:	9208      	str	r2, [sp, #32]
 8004130:	bf54      	ite	pl
 8004132:	f04f 0800 	movpl.w	r8, #0
 8004136:	9308      	strmi	r3, [sp, #32]
 8004138:	2f00      	cmp	r7, #0
 800413a:	db39      	blt.n	80041b0 <_dtoa_r+0x218>
 800413c:	9b08      	ldr	r3, [sp, #32]
 800413e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004140:	443b      	add	r3, r7
 8004142:	9308      	str	r3, [sp, #32]
 8004144:	2300      	movs	r3, #0
 8004146:	930a      	str	r3, [sp, #40]	@ 0x28
 8004148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800414a:	2b09      	cmp	r3, #9
 800414c:	d864      	bhi.n	8004218 <_dtoa_r+0x280>
 800414e:	2b05      	cmp	r3, #5
 8004150:	bfc4      	itt	gt
 8004152:	3b04      	subgt	r3, #4
 8004154:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004158:	f1a3 0302 	sub.w	r3, r3, #2
 800415c:	bfcc      	ite	gt
 800415e:	2400      	movgt	r4, #0
 8004160:	2401      	movle	r4, #1
 8004162:	2b03      	cmp	r3, #3
 8004164:	d863      	bhi.n	800422e <_dtoa_r+0x296>
 8004166:	e8df f003 	tbb	[pc, r3]
 800416a:	372a      	.short	0x372a
 800416c:	5535      	.short	0x5535
 800416e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004172:	441e      	add	r6, r3
 8004174:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004178:	2b20      	cmp	r3, #32
 800417a:	bfc1      	itttt	gt
 800417c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004180:	409f      	lslgt	r7, r3
 8004182:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004186:	fa24 f303 	lsrgt.w	r3, r4, r3
 800418a:	bfd6      	itet	le
 800418c:	f1c3 0320 	rsble	r3, r3, #32
 8004190:	ea47 0003 	orrgt.w	r0, r7, r3
 8004194:	fa04 f003 	lslle.w	r0, r4, r3
 8004198:	f7fc f9bc 	bl	8000514 <__aeabi_ui2d>
 800419c:	2201      	movs	r2, #1
 800419e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80041a2:	3e01      	subs	r6, #1
 80041a4:	9214      	str	r2, [sp, #80]	@ 0x50
 80041a6:	e777      	b.n	8004098 <_dtoa_r+0x100>
 80041a8:	2301      	movs	r3, #1
 80041aa:	e7b8      	b.n	800411e <_dtoa_r+0x186>
 80041ac:	9012      	str	r0, [sp, #72]	@ 0x48
 80041ae:	e7b7      	b.n	8004120 <_dtoa_r+0x188>
 80041b0:	427b      	negs	r3, r7
 80041b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80041b4:	2300      	movs	r3, #0
 80041b6:	eba8 0807 	sub.w	r8, r8, r7
 80041ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80041bc:	e7c4      	b.n	8004148 <_dtoa_r+0x1b0>
 80041be:	2300      	movs	r3, #0
 80041c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80041c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	dc35      	bgt.n	8004234 <_dtoa_r+0x29c>
 80041c8:	2301      	movs	r3, #1
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	9307      	str	r3, [sp, #28]
 80041ce:	461a      	mov	r2, r3
 80041d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80041d2:	e00b      	b.n	80041ec <_dtoa_r+0x254>
 80041d4:	2301      	movs	r3, #1
 80041d6:	e7f3      	b.n	80041c0 <_dtoa_r+0x228>
 80041d8:	2300      	movs	r3, #0
 80041da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80041dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80041de:	18fb      	adds	r3, r7, r3
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	3301      	adds	r3, #1
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	9307      	str	r3, [sp, #28]
 80041e8:	bfb8      	it	lt
 80041ea:	2301      	movlt	r3, #1
 80041ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 80041f0:	2100      	movs	r1, #0
 80041f2:	2204      	movs	r2, #4
 80041f4:	f102 0514 	add.w	r5, r2, #20
 80041f8:	429d      	cmp	r5, r3
 80041fa:	d91f      	bls.n	800423c <_dtoa_r+0x2a4>
 80041fc:	6041      	str	r1, [r0, #4]
 80041fe:	4658      	mov	r0, fp
 8004200:	f001 fa92 	bl	8005728 <_Balloc>
 8004204:	4682      	mov	sl, r0
 8004206:	2800      	cmp	r0, #0
 8004208:	d13c      	bne.n	8004284 <_dtoa_r+0x2ec>
 800420a:	4b1b      	ldr	r3, [pc, #108]	@ (8004278 <_dtoa_r+0x2e0>)
 800420c:	4602      	mov	r2, r0
 800420e:	f240 11af 	movw	r1, #431	@ 0x1af
 8004212:	e6d8      	b.n	8003fc6 <_dtoa_r+0x2e>
 8004214:	2301      	movs	r3, #1
 8004216:	e7e0      	b.n	80041da <_dtoa_r+0x242>
 8004218:	2401      	movs	r4, #1
 800421a:	2300      	movs	r3, #0
 800421c:	9309      	str	r3, [sp, #36]	@ 0x24
 800421e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004220:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	9307      	str	r3, [sp, #28]
 8004228:	2200      	movs	r2, #0
 800422a:	2312      	movs	r3, #18
 800422c:	e7d0      	b.n	80041d0 <_dtoa_r+0x238>
 800422e:	2301      	movs	r3, #1
 8004230:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004232:	e7f5      	b.n	8004220 <_dtoa_r+0x288>
 8004234:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	9307      	str	r3, [sp, #28]
 800423a:	e7d7      	b.n	80041ec <_dtoa_r+0x254>
 800423c:	3101      	adds	r1, #1
 800423e:	0052      	lsls	r2, r2, #1
 8004240:	e7d8      	b.n	80041f4 <_dtoa_r+0x25c>
 8004242:	bf00      	nop
 8004244:	f3af 8000 	nop.w
 8004248:	636f4361 	.word	0x636f4361
 800424c:	3fd287a7 	.word	0x3fd287a7
 8004250:	8b60c8b3 	.word	0x8b60c8b3
 8004254:	3fc68a28 	.word	0x3fc68a28
 8004258:	509f79fb 	.word	0x509f79fb
 800425c:	3fd34413 	.word	0x3fd34413
 8004260:	08006ab6 	.word	0x08006ab6
 8004264:	08006acd 	.word	0x08006acd
 8004268:	7ff00000 	.word	0x7ff00000
 800426c:	0800691f 	.word	0x0800691f
 8004270:	3ff80000 	.word	0x3ff80000
 8004274:	08006c38 	.word	0x08006c38
 8004278:	08006b25 	.word	0x08006b25
 800427c:	08006ab2 	.word	0x08006ab2
 8004280:	0800691e 	.word	0x0800691e
 8004284:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004288:	6018      	str	r0, [r3, #0]
 800428a:	9b07      	ldr	r3, [sp, #28]
 800428c:	2b0e      	cmp	r3, #14
 800428e:	f200 80a4 	bhi.w	80043da <_dtoa_r+0x442>
 8004292:	2c00      	cmp	r4, #0
 8004294:	f000 80a1 	beq.w	80043da <_dtoa_r+0x442>
 8004298:	2f00      	cmp	r7, #0
 800429a:	dd33      	ble.n	8004304 <_dtoa_r+0x36c>
 800429c:	4bad      	ldr	r3, [pc, #692]	@ (8004554 <_dtoa_r+0x5bc>)
 800429e:	f007 020f 	and.w	r2, r7, #15
 80042a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80042a6:	ed93 7b00 	vldr	d7, [r3]
 80042aa:	05f8      	lsls	r0, r7, #23
 80042ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 80042b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80042b4:	d516      	bpl.n	80042e4 <_dtoa_r+0x34c>
 80042b6:	4ba8      	ldr	r3, [pc, #672]	@ (8004558 <_dtoa_r+0x5c0>)
 80042b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80042bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80042c0:	f7fc facc 	bl	800085c <__aeabi_ddiv>
 80042c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042c8:	f004 040f 	and.w	r4, r4, #15
 80042cc:	2603      	movs	r6, #3
 80042ce:	4da2      	ldr	r5, [pc, #648]	@ (8004558 <_dtoa_r+0x5c0>)
 80042d0:	b954      	cbnz	r4, 80042e8 <_dtoa_r+0x350>
 80042d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042da:	f7fc fabf 	bl	800085c <__aeabi_ddiv>
 80042de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042e2:	e028      	b.n	8004336 <_dtoa_r+0x39e>
 80042e4:	2602      	movs	r6, #2
 80042e6:	e7f2      	b.n	80042ce <_dtoa_r+0x336>
 80042e8:	07e1      	lsls	r1, r4, #31
 80042ea:	d508      	bpl.n	80042fe <_dtoa_r+0x366>
 80042ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80042f4:	f7fc f988 	bl	8000608 <__aeabi_dmul>
 80042f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80042fc:	3601      	adds	r6, #1
 80042fe:	1064      	asrs	r4, r4, #1
 8004300:	3508      	adds	r5, #8
 8004302:	e7e5      	b.n	80042d0 <_dtoa_r+0x338>
 8004304:	f000 80d2 	beq.w	80044ac <_dtoa_r+0x514>
 8004308:	427c      	negs	r4, r7
 800430a:	4b92      	ldr	r3, [pc, #584]	@ (8004554 <_dtoa_r+0x5bc>)
 800430c:	4d92      	ldr	r5, [pc, #584]	@ (8004558 <_dtoa_r+0x5c0>)
 800430e:	f004 020f 	and.w	r2, r4, #15
 8004312:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800431e:	f7fc f973 	bl	8000608 <__aeabi_dmul>
 8004322:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004326:	1124      	asrs	r4, r4, #4
 8004328:	2300      	movs	r3, #0
 800432a:	2602      	movs	r6, #2
 800432c:	2c00      	cmp	r4, #0
 800432e:	f040 80b2 	bne.w	8004496 <_dtoa_r+0x4fe>
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1d3      	bne.n	80042de <_dtoa_r+0x346>
 8004336:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004338:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 80b7 	beq.w	80044b0 <_dtoa_r+0x518>
 8004342:	4b86      	ldr	r3, [pc, #536]	@ (800455c <_dtoa_r+0x5c4>)
 8004344:	2200      	movs	r2, #0
 8004346:	4620      	mov	r0, r4
 8004348:	4629      	mov	r1, r5
 800434a:	f7fc fbcf 	bl	8000aec <__aeabi_dcmplt>
 800434e:	2800      	cmp	r0, #0
 8004350:	f000 80ae 	beq.w	80044b0 <_dtoa_r+0x518>
 8004354:	9b07      	ldr	r3, [sp, #28]
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 80aa 	beq.w	80044b0 <_dtoa_r+0x518>
 800435c:	9b00      	ldr	r3, [sp, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	dd37      	ble.n	80043d2 <_dtoa_r+0x43a>
 8004362:	1e7b      	subs	r3, r7, #1
 8004364:	9304      	str	r3, [sp, #16]
 8004366:	4620      	mov	r0, r4
 8004368:	4b7d      	ldr	r3, [pc, #500]	@ (8004560 <_dtoa_r+0x5c8>)
 800436a:	2200      	movs	r2, #0
 800436c:	4629      	mov	r1, r5
 800436e:	f7fc f94b 	bl	8000608 <__aeabi_dmul>
 8004372:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004376:	9c00      	ldr	r4, [sp, #0]
 8004378:	3601      	adds	r6, #1
 800437a:	4630      	mov	r0, r6
 800437c:	f7fc f8da 	bl	8000534 <__aeabi_i2d>
 8004380:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004384:	f7fc f940 	bl	8000608 <__aeabi_dmul>
 8004388:	4b76      	ldr	r3, [pc, #472]	@ (8004564 <_dtoa_r+0x5cc>)
 800438a:	2200      	movs	r2, #0
 800438c:	f7fb ff86 	bl	800029c <__adddf3>
 8004390:	4605      	mov	r5, r0
 8004392:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004396:	2c00      	cmp	r4, #0
 8004398:	f040 808d 	bne.w	80044b6 <_dtoa_r+0x51e>
 800439c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043a0:	4b71      	ldr	r3, [pc, #452]	@ (8004568 <_dtoa_r+0x5d0>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	f7fb ff78 	bl	8000298 <__aeabi_dsub>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80043b0:	462a      	mov	r2, r5
 80043b2:	4633      	mov	r3, r6
 80043b4:	f7fc fbb8 	bl	8000b28 <__aeabi_dcmpgt>
 80043b8:	2800      	cmp	r0, #0
 80043ba:	f040 828b 	bne.w	80048d4 <_dtoa_r+0x93c>
 80043be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043c2:	462a      	mov	r2, r5
 80043c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80043c8:	f7fc fb90 	bl	8000aec <__aeabi_dcmplt>
 80043cc:	2800      	cmp	r0, #0
 80043ce:	f040 8128 	bne.w	8004622 <_dtoa_r+0x68a>
 80043d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80043d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80043da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f2c0 815a 	blt.w	8004696 <_dtoa_r+0x6fe>
 80043e2:	2f0e      	cmp	r7, #14
 80043e4:	f300 8157 	bgt.w	8004696 <_dtoa_r+0x6fe>
 80043e8:	4b5a      	ldr	r3, [pc, #360]	@ (8004554 <_dtoa_r+0x5bc>)
 80043ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80043ee:	ed93 7b00 	vldr	d7, [r3]
 80043f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	ed8d 7b00 	vstr	d7, [sp]
 80043fa:	da03      	bge.n	8004404 <_dtoa_r+0x46c>
 80043fc:	9b07      	ldr	r3, [sp, #28]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f340 8101 	ble.w	8004606 <_dtoa_r+0x66e>
 8004404:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004408:	4656      	mov	r6, sl
 800440a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800440e:	4620      	mov	r0, r4
 8004410:	4629      	mov	r1, r5
 8004412:	f7fc fa23 	bl	800085c <__aeabi_ddiv>
 8004416:	f7fc fba7 	bl	8000b68 <__aeabi_d2iz>
 800441a:	4680      	mov	r8, r0
 800441c:	f7fc f88a 	bl	8000534 <__aeabi_i2d>
 8004420:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004424:	f7fc f8f0 	bl	8000608 <__aeabi_dmul>
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	4620      	mov	r0, r4
 800442e:	4629      	mov	r1, r5
 8004430:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004434:	f7fb ff30 	bl	8000298 <__aeabi_dsub>
 8004438:	f806 4b01 	strb.w	r4, [r6], #1
 800443c:	9d07      	ldr	r5, [sp, #28]
 800443e:	eba6 040a 	sub.w	r4, r6, sl
 8004442:	42a5      	cmp	r5, r4
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	f040 8117 	bne.w	800467a <_dtoa_r+0x6e2>
 800444c:	f7fb ff26 	bl	800029c <__adddf3>
 8004450:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004454:	4604      	mov	r4, r0
 8004456:	460d      	mov	r5, r1
 8004458:	f7fc fb66 	bl	8000b28 <__aeabi_dcmpgt>
 800445c:	2800      	cmp	r0, #0
 800445e:	f040 80f9 	bne.w	8004654 <_dtoa_r+0x6bc>
 8004462:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004466:	4620      	mov	r0, r4
 8004468:	4629      	mov	r1, r5
 800446a:	f7fc fb35 	bl	8000ad8 <__aeabi_dcmpeq>
 800446e:	b118      	cbz	r0, 8004478 <_dtoa_r+0x4e0>
 8004470:	f018 0f01 	tst.w	r8, #1
 8004474:	f040 80ee 	bne.w	8004654 <_dtoa_r+0x6bc>
 8004478:	4649      	mov	r1, r9
 800447a:	4658      	mov	r0, fp
 800447c:	f001 f994 	bl	80057a8 <_Bfree>
 8004480:	2300      	movs	r3, #0
 8004482:	7033      	strb	r3, [r6, #0]
 8004484:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004486:	3701      	adds	r7, #1
 8004488:	601f      	str	r7, [r3, #0]
 800448a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 831d 	beq.w	8004acc <_dtoa_r+0xb34>
 8004492:	601e      	str	r6, [r3, #0]
 8004494:	e31a      	b.n	8004acc <_dtoa_r+0xb34>
 8004496:	07e2      	lsls	r2, r4, #31
 8004498:	d505      	bpl.n	80044a6 <_dtoa_r+0x50e>
 800449a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800449e:	f7fc f8b3 	bl	8000608 <__aeabi_dmul>
 80044a2:	3601      	adds	r6, #1
 80044a4:	2301      	movs	r3, #1
 80044a6:	1064      	asrs	r4, r4, #1
 80044a8:	3508      	adds	r5, #8
 80044aa:	e73f      	b.n	800432c <_dtoa_r+0x394>
 80044ac:	2602      	movs	r6, #2
 80044ae:	e742      	b.n	8004336 <_dtoa_r+0x39e>
 80044b0:	9c07      	ldr	r4, [sp, #28]
 80044b2:	9704      	str	r7, [sp, #16]
 80044b4:	e761      	b.n	800437a <_dtoa_r+0x3e2>
 80044b6:	4b27      	ldr	r3, [pc, #156]	@ (8004554 <_dtoa_r+0x5bc>)
 80044b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80044ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80044be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80044c2:	4454      	add	r4, sl
 80044c4:	2900      	cmp	r1, #0
 80044c6:	d053      	beq.n	8004570 <_dtoa_r+0x5d8>
 80044c8:	4928      	ldr	r1, [pc, #160]	@ (800456c <_dtoa_r+0x5d4>)
 80044ca:	2000      	movs	r0, #0
 80044cc:	f7fc f9c6 	bl	800085c <__aeabi_ddiv>
 80044d0:	4633      	mov	r3, r6
 80044d2:	462a      	mov	r2, r5
 80044d4:	f7fb fee0 	bl	8000298 <__aeabi_dsub>
 80044d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80044dc:	4656      	mov	r6, sl
 80044de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044e2:	f7fc fb41 	bl	8000b68 <__aeabi_d2iz>
 80044e6:	4605      	mov	r5, r0
 80044e8:	f7fc f824 	bl	8000534 <__aeabi_i2d>
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044f4:	f7fb fed0 	bl	8000298 <__aeabi_dsub>
 80044f8:	3530      	adds	r5, #48	@ 0x30
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004502:	f806 5b01 	strb.w	r5, [r6], #1
 8004506:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800450a:	f7fc faef 	bl	8000aec <__aeabi_dcmplt>
 800450e:	2800      	cmp	r0, #0
 8004510:	d171      	bne.n	80045f6 <_dtoa_r+0x65e>
 8004512:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004516:	4911      	ldr	r1, [pc, #68]	@ (800455c <_dtoa_r+0x5c4>)
 8004518:	2000      	movs	r0, #0
 800451a:	f7fb febd 	bl	8000298 <__aeabi_dsub>
 800451e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004522:	f7fc fae3 	bl	8000aec <__aeabi_dcmplt>
 8004526:	2800      	cmp	r0, #0
 8004528:	f040 8095 	bne.w	8004656 <_dtoa_r+0x6be>
 800452c:	42a6      	cmp	r6, r4
 800452e:	f43f af50 	beq.w	80043d2 <_dtoa_r+0x43a>
 8004532:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004536:	4b0a      	ldr	r3, [pc, #40]	@ (8004560 <_dtoa_r+0x5c8>)
 8004538:	2200      	movs	r2, #0
 800453a:	f7fc f865 	bl	8000608 <__aeabi_dmul>
 800453e:	4b08      	ldr	r3, [pc, #32]	@ (8004560 <_dtoa_r+0x5c8>)
 8004540:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004544:	2200      	movs	r2, #0
 8004546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800454a:	f7fc f85d 	bl	8000608 <__aeabi_dmul>
 800454e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004552:	e7c4      	b.n	80044de <_dtoa_r+0x546>
 8004554:	08006c38 	.word	0x08006c38
 8004558:	08006c10 	.word	0x08006c10
 800455c:	3ff00000 	.word	0x3ff00000
 8004560:	40240000 	.word	0x40240000
 8004564:	401c0000 	.word	0x401c0000
 8004568:	40140000 	.word	0x40140000
 800456c:	3fe00000 	.word	0x3fe00000
 8004570:	4631      	mov	r1, r6
 8004572:	4628      	mov	r0, r5
 8004574:	f7fc f848 	bl	8000608 <__aeabi_dmul>
 8004578:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800457c:	9415      	str	r4, [sp, #84]	@ 0x54
 800457e:	4656      	mov	r6, sl
 8004580:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004584:	f7fc faf0 	bl	8000b68 <__aeabi_d2iz>
 8004588:	4605      	mov	r5, r0
 800458a:	f7fb ffd3 	bl	8000534 <__aeabi_i2d>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004596:	f7fb fe7f 	bl	8000298 <__aeabi_dsub>
 800459a:	3530      	adds	r5, #48	@ 0x30
 800459c:	f806 5b01 	strb.w	r5, [r6], #1
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	42a6      	cmp	r6, r4
 80045a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	d124      	bne.n	80045fa <_dtoa_r+0x662>
 80045b0:	4bac      	ldr	r3, [pc, #688]	@ (8004864 <_dtoa_r+0x8cc>)
 80045b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80045b6:	f7fb fe71 	bl	800029c <__adddf3>
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045c2:	f7fc fab1 	bl	8000b28 <__aeabi_dcmpgt>
 80045c6:	2800      	cmp	r0, #0
 80045c8:	d145      	bne.n	8004656 <_dtoa_r+0x6be>
 80045ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80045ce:	49a5      	ldr	r1, [pc, #660]	@ (8004864 <_dtoa_r+0x8cc>)
 80045d0:	2000      	movs	r0, #0
 80045d2:	f7fb fe61 	bl	8000298 <__aeabi_dsub>
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045de:	f7fc fa85 	bl	8000aec <__aeabi_dcmplt>
 80045e2:	2800      	cmp	r0, #0
 80045e4:	f43f aef5 	beq.w	80043d2 <_dtoa_r+0x43a>
 80045e8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80045ea:	1e73      	subs	r3, r6, #1
 80045ec:	9315      	str	r3, [sp, #84]	@ 0x54
 80045ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80045f2:	2b30      	cmp	r3, #48	@ 0x30
 80045f4:	d0f8      	beq.n	80045e8 <_dtoa_r+0x650>
 80045f6:	9f04      	ldr	r7, [sp, #16]
 80045f8:	e73e      	b.n	8004478 <_dtoa_r+0x4e0>
 80045fa:	4b9b      	ldr	r3, [pc, #620]	@ (8004868 <_dtoa_r+0x8d0>)
 80045fc:	f7fc f804 	bl	8000608 <__aeabi_dmul>
 8004600:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004604:	e7bc      	b.n	8004580 <_dtoa_r+0x5e8>
 8004606:	d10c      	bne.n	8004622 <_dtoa_r+0x68a>
 8004608:	4b98      	ldr	r3, [pc, #608]	@ (800486c <_dtoa_r+0x8d4>)
 800460a:	2200      	movs	r2, #0
 800460c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004610:	f7fb fffa 	bl	8000608 <__aeabi_dmul>
 8004614:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004618:	f7fc fa7c 	bl	8000b14 <__aeabi_dcmpge>
 800461c:	2800      	cmp	r0, #0
 800461e:	f000 8157 	beq.w	80048d0 <_dtoa_r+0x938>
 8004622:	2400      	movs	r4, #0
 8004624:	4625      	mov	r5, r4
 8004626:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004628:	43db      	mvns	r3, r3
 800462a:	9304      	str	r3, [sp, #16]
 800462c:	4656      	mov	r6, sl
 800462e:	2700      	movs	r7, #0
 8004630:	4621      	mov	r1, r4
 8004632:	4658      	mov	r0, fp
 8004634:	f001 f8b8 	bl	80057a8 <_Bfree>
 8004638:	2d00      	cmp	r5, #0
 800463a:	d0dc      	beq.n	80045f6 <_dtoa_r+0x65e>
 800463c:	b12f      	cbz	r7, 800464a <_dtoa_r+0x6b2>
 800463e:	42af      	cmp	r7, r5
 8004640:	d003      	beq.n	800464a <_dtoa_r+0x6b2>
 8004642:	4639      	mov	r1, r7
 8004644:	4658      	mov	r0, fp
 8004646:	f001 f8af 	bl	80057a8 <_Bfree>
 800464a:	4629      	mov	r1, r5
 800464c:	4658      	mov	r0, fp
 800464e:	f001 f8ab 	bl	80057a8 <_Bfree>
 8004652:	e7d0      	b.n	80045f6 <_dtoa_r+0x65e>
 8004654:	9704      	str	r7, [sp, #16]
 8004656:	4633      	mov	r3, r6
 8004658:	461e      	mov	r6, r3
 800465a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800465e:	2a39      	cmp	r2, #57	@ 0x39
 8004660:	d107      	bne.n	8004672 <_dtoa_r+0x6da>
 8004662:	459a      	cmp	sl, r3
 8004664:	d1f8      	bne.n	8004658 <_dtoa_r+0x6c0>
 8004666:	9a04      	ldr	r2, [sp, #16]
 8004668:	3201      	adds	r2, #1
 800466a:	9204      	str	r2, [sp, #16]
 800466c:	2230      	movs	r2, #48	@ 0x30
 800466e:	f88a 2000 	strb.w	r2, [sl]
 8004672:	781a      	ldrb	r2, [r3, #0]
 8004674:	3201      	adds	r2, #1
 8004676:	701a      	strb	r2, [r3, #0]
 8004678:	e7bd      	b.n	80045f6 <_dtoa_r+0x65e>
 800467a:	4b7b      	ldr	r3, [pc, #492]	@ (8004868 <_dtoa_r+0x8d0>)
 800467c:	2200      	movs	r2, #0
 800467e:	f7fb ffc3 	bl	8000608 <__aeabi_dmul>
 8004682:	2200      	movs	r2, #0
 8004684:	2300      	movs	r3, #0
 8004686:	4604      	mov	r4, r0
 8004688:	460d      	mov	r5, r1
 800468a:	f7fc fa25 	bl	8000ad8 <__aeabi_dcmpeq>
 800468e:	2800      	cmp	r0, #0
 8004690:	f43f aebb 	beq.w	800440a <_dtoa_r+0x472>
 8004694:	e6f0      	b.n	8004478 <_dtoa_r+0x4e0>
 8004696:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004698:	2a00      	cmp	r2, #0
 800469a:	f000 80db 	beq.w	8004854 <_dtoa_r+0x8bc>
 800469e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80046a0:	2a01      	cmp	r2, #1
 80046a2:	f300 80bf 	bgt.w	8004824 <_dtoa_r+0x88c>
 80046a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80046a8:	2a00      	cmp	r2, #0
 80046aa:	f000 80b7 	beq.w	800481c <_dtoa_r+0x884>
 80046ae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80046b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80046b4:	4646      	mov	r6, r8
 80046b6:	9a08      	ldr	r2, [sp, #32]
 80046b8:	2101      	movs	r1, #1
 80046ba:	441a      	add	r2, r3
 80046bc:	4658      	mov	r0, fp
 80046be:	4498      	add	r8, r3
 80046c0:	9208      	str	r2, [sp, #32]
 80046c2:	f001 f96f 	bl	80059a4 <__i2b>
 80046c6:	4605      	mov	r5, r0
 80046c8:	b15e      	cbz	r6, 80046e2 <_dtoa_r+0x74a>
 80046ca:	9b08      	ldr	r3, [sp, #32]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	dd08      	ble.n	80046e2 <_dtoa_r+0x74a>
 80046d0:	42b3      	cmp	r3, r6
 80046d2:	9a08      	ldr	r2, [sp, #32]
 80046d4:	bfa8      	it	ge
 80046d6:	4633      	movge	r3, r6
 80046d8:	eba8 0803 	sub.w	r8, r8, r3
 80046dc:	1af6      	subs	r6, r6, r3
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	9308      	str	r3, [sp, #32]
 80046e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80046e4:	b1f3      	cbz	r3, 8004724 <_dtoa_r+0x78c>
 80046e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 80b7 	beq.w	800485c <_dtoa_r+0x8c4>
 80046ee:	b18c      	cbz	r4, 8004714 <_dtoa_r+0x77c>
 80046f0:	4629      	mov	r1, r5
 80046f2:	4622      	mov	r2, r4
 80046f4:	4658      	mov	r0, fp
 80046f6:	f001 fa15 	bl	8005b24 <__pow5mult>
 80046fa:	464a      	mov	r2, r9
 80046fc:	4601      	mov	r1, r0
 80046fe:	4605      	mov	r5, r0
 8004700:	4658      	mov	r0, fp
 8004702:	f001 f965 	bl	80059d0 <__multiply>
 8004706:	4649      	mov	r1, r9
 8004708:	9004      	str	r0, [sp, #16]
 800470a:	4658      	mov	r0, fp
 800470c:	f001 f84c 	bl	80057a8 <_Bfree>
 8004710:	9b04      	ldr	r3, [sp, #16]
 8004712:	4699      	mov	r9, r3
 8004714:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004716:	1b1a      	subs	r2, r3, r4
 8004718:	d004      	beq.n	8004724 <_dtoa_r+0x78c>
 800471a:	4649      	mov	r1, r9
 800471c:	4658      	mov	r0, fp
 800471e:	f001 fa01 	bl	8005b24 <__pow5mult>
 8004722:	4681      	mov	r9, r0
 8004724:	2101      	movs	r1, #1
 8004726:	4658      	mov	r0, fp
 8004728:	f001 f93c 	bl	80059a4 <__i2b>
 800472c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800472e:	4604      	mov	r4, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 81cf 	beq.w	8004ad4 <_dtoa_r+0xb3c>
 8004736:	461a      	mov	r2, r3
 8004738:	4601      	mov	r1, r0
 800473a:	4658      	mov	r0, fp
 800473c:	f001 f9f2 	bl	8005b24 <__pow5mult>
 8004740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004742:	2b01      	cmp	r3, #1
 8004744:	4604      	mov	r4, r0
 8004746:	f300 8095 	bgt.w	8004874 <_dtoa_r+0x8dc>
 800474a:	9b02      	ldr	r3, [sp, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	f040 8087 	bne.w	8004860 <_dtoa_r+0x8c8>
 8004752:	9b03      	ldr	r3, [sp, #12]
 8004754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004758:	2b00      	cmp	r3, #0
 800475a:	f040 8089 	bne.w	8004870 <_dtoa_r+0x8d8>
 800475e:	9b03      	ldr	r3, [sp, #12]
 8004760:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004764:	0d1b      	lsrs	r3, r3, #20
 8004766:	051b      	lsls	r3, r3, #20
 8004768:	b12b      	cbz	r3, 8004776 <_dtoa_r+0x7de>
 800476a:	9b08      	ldr	r3, [sp, #32]
 800476c:	3301      	adds	r3, #1
 800476e:	9308      	str	r3, [sp, #32]
 8004770:	f108 0801 	add.w	r8, r8, #1
 8004774:	2301      	movs	r3, #1
 8004776:	930a      	str	r3, [sp, #40]	@ 0x28
 8004778:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 81b0 	beq.w	8004ae0 <_dtoa_r+0xb48>
 8004780:	6923      	ldr	r3, [r4, #16]
 8004782:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004786:	6918      	ldr	r0, [r3, #16]
 8004788:	f001 f8c0 	bl	800590c <__hi0bits>
 800478c:	f1c0 0020 	rsb	r0, r0, #32
 8004790:	9b08      	ldr	r3, [sp, #32]
 8004792:	4418      	add	r0, r3
 8004794:	f010 001f 	ands.w	r0, r0, #31
 8004798:	d077      	beq.n	800488a <_dtoa_r+0x8f2>
 800479a:	f1c0 0320 	rsb	r3, r0, #32
 800479e:	2b04      	cmp	r3, #4
 80047a0:	dd6b      	ble.n	800487a <_dtoa_r+0x8e2>
 80047a2:	9b08      	ldr	r3, [sp, #32]
 80047a4:	f1c0 001c 	rsb	r0, r0, #28
 80047a8:	4403      	add	r3, r0
 80047aa:	4480      	add	r8, r0
 80047ac:	4406      	add	r6, r0
 80047ae:	9308      	str	r3, [sp, #32]
 80047b0:	f1b8 0f00 	cmp.w	r8, #0
 80047b4:	dd05      	ble.n	80047c2 <_dtoa_r+0x82a>
 80047b6:	4649      	mov	r1, r9
 80047b8:	4642      	mov	r2, r8
 80047ba:	4658      	mov	r0, fp
 80047bc:	f001 fa0c 	bl	8005bd8 <__lshift>
 80047c0:	4681      	mov	r9, r0
 80047c2:	9b08      	ldr	r3, [sp, #32]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	dd05      	ble.n	80047d4 <_dtoa_r+0x83c>
 80047c8:	4621      	mov	r1, r4
 80047ca:	461a      	mov	r2, r3
 80047cc:	4658      	mov	r0, fp
 80047ce:	f001 fa03 	bl	8005bd8 <__lshift>
 80047d2:	4604      	mov	r4, r0
 80047d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d059      	beq.n	800488e <_dtoa_r+0x8f6>
 80047da:	4621      	mov	r1, r4
 80047dc:	4648      	mov	r0, r9
 80047de:	f001 fa67 	bl	8005cb0 <__mcmp>
 80047e2:	2800      	cmp	r0, #0
 80047e4:	da53      	bge.n	800488e <_dtoa_r+0x8f6>
 80047e6:	1e7b      	subs	r3, r7, #1
 80047e8:	9304      	str	r3, [sp, #16]
 80047ea:	4649      	mov	r1, r9
 80047ec:	2300      	movs	r3, #0
 80047ee:	220a      	movs	r2, #10
 80047f0:	4658      	mov	r0, fp
 80047f2:	f000 fffb 	bl	80057ec <__multadd>
 80047f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80047f8:	4681      	mov	r9, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 8172 	beq.w	8004ae4 <_dtoa_r+0xb4c>
 8004800:	2300      	movs	r3, #0
 8004802:	4629      	mov	r1, r5
 8004804:	220a      	movs	r2, #10
 8004806:	4658      	mov	r0, fp
 8004808:	f000 fff0 	bl	80057ec <__multadd>
 800480c:	9b00      	ldr	r3, [sp, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	4605      	mov	r5, r0
 8004812:	dc67      	bgt.n	80048e4 <_dtoa_r+0x94c>
 8004814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004816:	2b02      	cmp	r3, #2
 8004818:	dc41      	bgt.n	800489e <_dtoa_r+0x906>
 800481a:	e063      	b.n	80048e4 <_dtoa_r+0x94c>
 800481c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800481e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004822:	e746      	b.n	80046b2 <_dtoa_r+0x71a>
 8004824:	9b07      	ldr	r3, [sp, #28]
 8004826:	1e5c      	subs	r4, r3, #1
 8004828:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800482a:	42a3      	cmp	r3, r4
 800482c:	bfbf      	itttt	lt
 800482e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004830:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004832:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004834:	1ae3      	sublt	r3, r4, r3
 8004836:	bfb4      	ite	lt
 8004838:	18d2      	addlt	r2, r2, r3
 800483a:	1b1c      	subge	r4, r3, r4
 800483c:	9b07      	ldr	r3, [sp, #28]
 800483e:	bfbc      	itt	lt
 8004840:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004842:	2400      	movlt	r4, #0
 8004844:	2b00      	cmp	r3, #0
 8004846:	bfb5      	itete	lt
 8004848:	eba8 0603 	sublt.w	r6, r8, r3
 800484c:	9b07      	ldrge	r3, [sp, #28]
 800484e:	2300      	movlt	r3, #0
 8004850:	4646      	movge	r6, r8
 8004852:	e730      	b.n	80046b6 <_dtoa_r+0x71e>
 8004854:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004856:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004858:	4646      	mov	r6, r8
 800485a:	e735      	b.n	80046c8 <_dtoa_r+0x730>
 800485c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800485e:	e75c      	b.n	800471a <_dtoa_r+0x782>
 8004860:	2300      	movs	r3, #0
 8004862:	e788      	b.n	8004776 <_dtoa_r+0x7de>
 8004864:	3fe00000 	.word	0x3fe00000
 8004868:	40240000 	.word	0x40240000
 800486c:	40140000 	.word	0x40140000
 8004870:	9b02      	ldr	r3, [sp, #8]
 8004872:	e780      	b.n	8004776 <_dtoa_r+0x7de>
 8004874:	2300      	movs	r3, #0
 8004876:	930a      	str	r3, [sp, #40]	@ 0x28
 8004878:	e782      	b.n	8004780 <_dtoa_r+0x7e8>
 800487a:	d099      	beq.n	80047b0 <_dtoa_r+0x818>
 800487c:	9a08      	ldr	r2, [sp, #32]
 800487e:	331c      	adds	r3, #28
 8004880:	441a      	add	r2, r3
 8004882:	4498      	add	r8, r3
 8004884:	441e      	add	r6, r3
 8004886:	9208      	str	r2, [sp, #32]
 8004888:	e792      	b.n	80047b0 <_dtoa_r+0x818>
 800488a:	4603      	mov	r3, r0
 800488c:	e7f6      	b.n	800487c <_dtoa_r+0x8e4>
 800488e:	9b07      	ldr	r3, [sp, #28]
 8004890:	9704      	str	r7, [sp, #16]
 8004892:	2b00      	cmp	r3, #0
 8004894:	dc20      	bgt.n	80048d8 <_dtoa_r+0x940>
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800489a:	2b02      	cmp	r3, #2
 800489c:	dd1e      	ble.n	80048dc <_dtoa_r+0x944>
 800489e:	9b00      	ldr	r3, [sp, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f47f aec0 	bne.w	8004626 <_dtoa_r+0x68e>
 80048a6:	4621      	mov	r1, r4
 80048a8:	2205      	movs	r2, #5
 80048aa:	4658      	mov	r0, fp
 80048ac:	f000 ff9e 	bl	80057ec <__multadd>
 80048b0:	4601      	mov	r1, r0
 80048b2:	4604      	mov	r4, r0
 80048b4:	4648      	mov	r0, r9
 80048b6:	f001 f9fb 	bl	8005cb0 <__mcmp>
 80048ba:	2800      	cmp	r0, #0
 80048bc:	f77f aeb3 	ble.w	8004626 <_dtoa_r+0x68e>
 80048c0:	4656      	mov	r6, sl
 80048c2:	2331      	movs	r3, #49	@ 0x31
 80048c4:	f806 3b01 	strb.w	r3, [r6], #1
 80048c8:	9b04      	ldr	r3, [sp, #16]
 80048ca:	3301      	adds	r3, #1
 80048cc:	9304      	str	r3, [sp, #16]
 80048ce:	e6ae      	b.n	800462e <_dtoa_r+0x696>
 80048d0:	9c07      	ldr	r4, [sp, #28]
 80048d2:	9704      	str	r7, [sp, #16]
 80048d4:	4625      	mov	r5, r4
 80048d6:	e7f3      	b.n	80048c0 <_dtoa_r+0x928>
 80048d8:	9b07      	ldr	r3, [sp, #28]
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 8104 	beq.w	8004aec <_dtoa_r+0xb54>
 80048e4:	2e00      	cmp	r6, #0
 80048e6:	dd05      	ble.n	80048f4 <_dtoa_r+0x95c>
 80048e8:	4629      	mov	r1, r5
 80048ea:	4632      	mov	r2, r6
 80048ec:	4658      	mov	r0, fp
 80048ee:	f001 f973 	bl	8005bd8 <__lshift>
 80048f2:	4605      	mov	r5, r0
 80048f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d05a      	beq.n	80049b0 <_dtoa_r+0xa18>
 80048fa:	6869      	ldr	r1, [r5, #4]
 80048fc:	4658      	mov	r0, fp
 80048fe:	f000 ff13 	bl	8005728 <_Balloc>
 8004902:	4606      	mov	r6, r0
 8004904:	b928      	cbnz	r0, 8004912 <_dtoa_r+0x97a>
 8004906:	4b84      	ldr	r3, [pc, #528]	@ (8004b18 <_dtoa_r+0xb80>)
 8004908:	4602      	mov	r2, r0
 800490a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800490e:	f7ff bb5a 	b.w	8003fc6 <_dtoa_r+0x2e>
 8004912:	692a      	ldr	r2, [r5, #16]
 8004914:	3202      	adds	r2, #2
 8004916:	0092      	lsls	r2, r2, #2
 8004918:	f105 010c 	add.w	r1, r5, #12
 800491c:	300c      	adds	r0, #12
 800491e:	f7ff fa92 	bl	8003e46 <memcpy>
 8004922:	2201      	movs	r2, #1
 8004924:	4631      	mov	r1, r6
 8004926:	4658      	mov	r0, fp
 8004928:	f001 f956 	bl	8005bd8 <__lshift>
 800492c:	f10a 0301 	add.w	r3, sl, #1
 8004930:	9307      	str	r3, [sp, #28]
 8004932:	9b00      	ldr	r3, [sp, #0]
 8004934:	4453      	add	r3, sl
 8004936:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004938:	9b02      	ldr	r3, [sp, #8]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	462f      	mov	r7, r5
 8004940:	930a      	str	r3, [sp, #40]	@ 0x28
 8004942:	4605      	mov	r5, r0
 8004944:	9b07      	ldr	r3, [sp, #28]
 8004946:	4621      	mov	r1, r4
 8004948:	3b01      	subs	r3, #1
 800494a:	4648      	mov	r0, r9
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	f7ff fa99 	bl	8003e84 <quorem>
 8004952:	4639      	mov	r1, r7
 8004954:	9002      	str	r0, [sp, #8]
 8004956:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800495a:	4648      	mov	r0, r9
 800495c:	f001 f9a8 	bl	8005cb0 <__mcmp>
 8004960:	462a      	mov	r2, r5
 8004962:	9008      	str	r0, [sp, #32]
 8004964:	4621      	mov	r1, r4
 8004966:	4658      	mov	r0, fp
 8004968:	f001 f9be 	bl	8005ce8 <__mdiff>
 800496c:	68c2      	ldr	r2, [r0, #12]
 800496e:	4606      	mov	r6, r0
 8004970:	bb02      	cbnz	r2, 80049b4 <_dtoa_r+0xa1c>
 8004972:	4601      	mov	r1, r0
 8004974:	4648      	mov	r0, r9
 8004976:	f001 f99b 	bl	8005cb0 <__mcmp>
 800497a:	4602      	mov	r2, r0
 800497c:	4631      	mov	r1, r6
 800497e:	4658      	mov	r0, fp
 8004980:	920e      	str	r2, [sp, #56]	@ 0x38
 8004982:	f000 ff11 	bl	80057a8 <_Bfree>
 8004986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004988:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800498a:	9e07      	ldr	r6, [sp, #28]
 800498c:	ea43 0102 	orr.w	r1, r3, r2
 8004990:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004992:	4319      	orrs	r1, r3
 8004994:	d110      	bne.n	80049b8 <_dtoa_r+0xa20>
 8004996:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800499a:	d029      	beq.n	80049f0 <_dtoa_r+0xa58>
 800499c:	9b08      	ldr	r3, [sp, #32]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	dd02      	ble.n	80049a8 <_dtoa_r+0xa10>
 80049a2:	9b02      	ldr	r3, [sp, #8]
 80049a4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80049a8:	9b00      	ldr	r3, [sp, #0]
 80049aa:	f883 8000 	strb.w	r8, [r3]
 80049ae:	e63f      	b.n	8004630 <_dtoa_r+0x698>
 80049b0:	4628      	mov	r0, r5
 80049b2:	e7bb      	b.n	800492c <_dtoa_r+0x994>
 80049b4:	2201      	movs	r2, #1
 80049b6:	e7e1      	b.n	800497c <_dtoa_r+0x9e4>
 80049b8:	9b08      	ldr	r3, [sp, #32]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	db04      	blt.n	80049c8 <_dtoa_r+0xa30>
 80049be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80049c0:	430b      	orrs	r3, r1
 80049c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80049c4:	430b      	orrs	r3, r1
 80049c6:	d120      	bne.n	8004a0a <_dtoa_r+0xa72>
 80049c8:	2a00      	cmp	r2, #0
 80049ca:	dded      	ble.n	80049a8 <_dtoa_r+0xa10>
 80049cc:	4649      	mov	r1, r9
 80049ce:	2201      	movs	r2, #1
 80049d0:	4658      	mov	r0, fp
 80049d2:	f001 f901 	bl	8005bd8 <__lshift>
 80049d6:	4621      	mov	r1, r4
 80049d8:	4681      	mov	r9, r0
 80049da:	f001 f969 	bl	8005cb0 <__mcmp>
 80049de:	2800      	cmp	r0, #0
 80049e0:	dc03      	bgt.n	80049ea <_dtoa_r+0xa52>
 80049e2:	d1e1      	bne.n	80049a8 <_dtoa_r+0xa10>
 80049e4:	f018 0f01 	tst.w	r8, #1
 80049e8:	d0de      	beq.n	80049a8 <_dtoa_r+0xa10>
 80049ea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80049ee:	d1d8      	bne.n	80049a2 <_dtoa_r+0xa0a>
 80049f0:	9a00      	ldr	r2, [sp, #0]
 80049f2:	2339      	movs	r3, #57	@ 0x39
 80049f4:	7013      	strb	r3, [r2, #0]
 80049f6:	4633      	mov	r3, r6
 80049f8:	461e      	mov	r6, r3
 80049fa:	3b01      	subs	r3, #1
 80049fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004a00:	2a39      	cmp	r2, #57	@ 0x39
 8004a02:	d052      	beq.n	8004aaa <_dtoa_r+0xb12>
 8004a04:	3201      	adds	r2, #1
 8004a06:	701a      	strb	r2, [r3, #0]
 8004a08:	e612      	b.n	8004630 <_dtoa_r+0x698>
 8004a0a:	2a00      	cmp	r2, #0
 8004a0c:	dd07      	ble.n	8004a1e <_dtoa_r+0xa86>
 8004a0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004a12:	d0ed      	beq.n	80049f0 <_dtoa_r+0xa58>
 8004a14:	9a00      	ldr	r2, [sp, #0]
 8004a16:	f108 0301 	add.w	r3, r8, #1
 8004a1a:	7013      	strb	r3, [r2, #0]
 8004a1c:	e608      	b.n	8004630 <_dtoa_r+0x698>
 8004a1e:	9b07      	ldr	r3, [sp, #28]
 8004a20:	9a07      	ldr	r2, [sp, #28]
 8004a22:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004a26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d028      	beq.n	8004a7e <_dtoa_r+0xae6>
 8004a2c:	4649      	mov	r1, r9
 8004a2e:	2300      	movs	r3, #0
 8004a30:	220a      	movs	r2, #10
 8004a32:	4658      	mov	r0, fp
 8004a34:	f000 feda 	bl	80057ec <__multadd>
 8004a38:	42af      	cmp	r7, r5
 8004a3a:	4681      	mov	r9, r0
 8004a3c:	f04f 0300 	mov.w	r3, #0
 8004a40:	f04f 020a 	mov.w	r2, #10
 8004a44:	4639      	mov	r1, r7
 8004a46:	4658      	mov	r0, fp
 8004a48:	d107      	bne.n	8004a5a <_dtoa_r+0xac2>
 8004a4a:	f000 fecf 	bl	80057ec <__multadd>
 8004a4e:	4607      	mov	r7, r0
 8004a50:	4605      	mov	r5, r0
 8004a52:	9b07      	ldr	r3, [sp, #28]
 8004a54:	3301      	adds	r3, #1
 8004a56:	9307      	str	r3, [sp, #28]
 8004a58:	e774      	b.n	8004944 <_dtoa_r+0x9ac>
 8004a5a:	f000 fec7 	bl	80057ec <__multadd>
 8004a5e:	4629      	mov	r1, r5
 8004a60:	4607      	mov	r7, r0
 8004a62:	2300      	movs	r3, #0
 8004a64:	220a      	movs	r2, #10
 8004a66:	4658      	mov	r0, fp
 8004a68:	f000 fec0 	bl	80057ec <__multadd>
 8004a6c:	4605      	mov	r5, r0
 8004a6e:	e7f0      	b.n	8004a52 <_dtoa_r+0xaba>
 8004a70:	9b00      	ldr	r3, [sp, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	bfcc      	ite	gt
 8004a76:	461e      	movgt	r6, r3
 8004a78:	2601      	movle	r6, #1
 8004a7a:	4456      	add	r6, sl
 8004a7c:	2700      	movs	r7, #0
 8004a7e:	4649      	mov	r1, r9
 8004a80:	2201      	movs	r2, #1
 8004a82:	4658      	mov	r0, fp
 8004a84:	f001 f8a8 	bl	8005bd8 <__lshift>
 8004a88:	4621      	mov	r1, r4
 8004a8a:	4681      	mov	r9, r0
 8004a8c:	f001 f910 	bl	8005cb0 <__mcmp>
 8004a90:	2800      	cmp	r0, #0
 8004a92:	dcb0      	bgt.n	80049f6 <_dtoa_r+0xa5e>
 8004a94:	d102      	bne.n	8004a9c <_dtoa_r+0xb04>
 8004a96:	f018 0f01 	tst.w	r8, #1
 8004a9a:	d1ac      	bne.n	80049f6 <_dtoa_r+0xa5e>
 8004a9c:	4633      	mov	r3, r6
 8004a9e:	461e      	mov	r6, r3
 8004aa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004aa4:	2a30      	cmp	r2, #48	@ 0x30
 8004aa6:	d0fa      	beq.n	8004a9e <_dtoa_r+0xb06>
 8004aa8:	e5c2      	b.n	8004630 <_dtoa_r+0x698>
 8004aaa:	459a      	cmp	sl, r3
 8004aac:	d1a4      	bne.n	80049f8 <_dtoa_r+0xa60>
 8004aae:	9b04      	ldr	r3, [sp, #16]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	9304      	str	r3, [sp, #16]
 8004ab4:	2331      	movs	r3, #49	@ 0x31
 8004ab6:	f88a 3000 	strb.w	r3, [sl]
 8004aba:	e5b9      	b.n	8004630 <_dtoa_r+0x698>
 8004abc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004abe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004b1c <_dtoa_r+0xb84>
 8004ac2:	b11b      	cbz	r3, 8004acc <_dtoa_r+0xb34>
 8004ac4:	f10a 0308 	add.w	r3, sl, #8
 8004ac8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	4650      	mov	r0, sl
 8004ace:	b019      	add	sp, #100	@ 0x64
 8004ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ad4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	f77f ae37 	ble.w	800474a <_dtoa_r+0x7b2>
 8004adc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004ade:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	e655      	b.n	8004790 <_dtoa_r+0x7f8>
 8004ae4:	9b00      	ldr	r3, [sp, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f77f aed6 	ble.w	8004898 <_dtoa_r+0x900>
 8004aec:	4656      	mov	r6, sl
 8004aee:	4621      	mov	r1, r4
 8004af0:	4648      	mov	r0, r9
 8004af2:	f7ff f9c7 	bl	8003e84 <quorem>
 8004af6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004afa:	f806 8b01 	strb.w	r8, [r6], #1
 8004afe:	9b00      	ldr	r3, [sp, #0]
 8004b00:	eba6 020a 	sub.w	r2, r6, sl
 8004b04:	4293      	cmp	r3, r2
 8004b06:	ddb3      	ble.n	8004a70 <_dtoa_r+0xad8>
 8004b08:	4649      	mov	r1, r9
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	220a      	movs	r2, #10
 8004b0e:	4658      	mov	r0, fp
 8004b10:	f000 fe6c 	bl	80057ec <__multadd>
 8004b14:	4681      	mov	r9, r0
 8004b16:	e7ea      	b.n	8004aee <_dtoa_r+0xb56>
 8004b18:	08006b25 	.word	0x08006b25
 8004b1c:	08006aa9 	.word	0x08006aa9

08004b20 <rshift>:
 8004b20:	6903      	ldr	r3, [r0, #16]
 8004b22:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8004b26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b2a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8004b2e:	f100 0414 	add.w	r4, r0, #20
 8004b32:	dd45      	ble.n	8004bc0 <rshift+0xa0>
 8004b34:	f011 011f 	ands.w	r1, r1, #31
 8004b38:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8004b3c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8004b40:	d10c      	bne.n	8004b5c <rshift+0x3c>
 8004b42:	f100 0710 	add.w	r7, r0, #16
 8004b46:	4629      	mov	r1, r5
 8004b48:	42b1      	cmp	r1, r6
 8004b4a:	d334      	bcc.n	8004bb6 <rshift+0x96>
 8004b4c:	1a9b      	subs	r3, r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	1eea      	subs	r2, r5, #3
 8004b52:	4296      	cmp	r6, r2
 8004b54:	bf38      	it	cc
 8004b56:	2300      	movcc	r3, #0
 8004b58:	4423      	add	r3, r4
 8004b5a:	e015      	b.n	8004b88 <rshift+0x68>
 8004b5c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8004b60:	f1c1 0820 	rsb	r8, r1, #32
 8004b64:	40cf      	lsrs	r7, r1
 8004b66:	f105 0e04 	add.w	lr, r5, #4
 8004b6a:	46a1      	mov	r9, r4
 8004b6c:	4576      	cmp	r6, lr
 8004b6e:	46f4      	mov	ip, lr
 8004b70:	d815      	bhi.n	8004b9e <rshift+0x7e>
 8004b72:	1a9a      	subs	r2, r3, r2
 8004b74:	0092      	lsls	r2, r2, #2
 8004b76:	3a04      	subs	r2, #4
 8004b78:	3501      	adds	r5, #1
 8004b7a:	42ae      	cmp	r6, r5
 8004b7c:	bf38      	it	cc
 8004b7e:	2200      	movcc	r2, #0
 8004b80:	18a3      	adds	r3, r4, r2
 8004b82:	50a7      	str	r7, [r4, r2]
 8004b84:	b107      	cbz	r7, 8004b88 <rshift+0x68>
 8004b86:	3304      	adds	r3, #4
 8004b88:	1b1a      	subs	r2, r3, r4
 8004b8a:	42a3      	cmp	r3, r4
 8004b8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8004b90:	bf08      	it	eq
 8004b92:	2300      	moveq	r3, #0
 8004b94:	6102      	str	r2, [r0, #16]
 8004b96:	bf08      	it	eq
 8004b98:	6143      	streq	r3, [r0, #20]
 8004b9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b9e:	f8dc c000 	ldr.w	ip, [ip]
 8004ba2:	fa0c fc08 	lsl.w	ip, ip, r8
 8004ba6:	ea4c 0707 	orr.w	r7, ip, r7
 8004baa:	f849 7b04 	str.w	r7, [r9], #4
 8004bae:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004bb2:	40cf      	lsrs	r7, r1
 8004bb4:	e7da      	b.n	8004b6c <rshift+0x4c>
 8004bb6:	f851 cb04 	ldr.w	ip, [r1], #4
 8004bba:	f847 cf04 	str.w	ip, [r7, #4]!
 8004bbe:	e7c3      	b.n	8004b48 <rshift+0x28>
 8004bc0:	4623      	mov	r3, r4
 8004bc2:	e7e1      	b.n	8004b88 <rshift+0x68>

08004bc4 <__hexdig_fun>:
 8004bc4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8004bc8:	2b09      	cmp	r3, #9
 8004bca:	d802      	bhi.n	8004bd2 <__hexdig_fun+0xe>
 8004bcc:	3820      	subs	r0, #32
 8004bce:	b2c0      	uxtb	r0, r0
 8004bd0:	4770      	bx	lr
 8004bd2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8004bd6:	2b05      	cmp	r3, #5
 8004bd8:	d801      	bhi.n	8004bde <__hexdig_fun+0x1a>
 8004bda:	3847      	subs	r0, #71	@ 0x47
 8004bdc:	e7f7      	b.n	8004bce <__hexdig_fun+0xa>
 8004bde:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8004be2:	2b05      	cmp	r3, #5
 8004be4:	d801      	bhi.n	8004bea <__hexdig_fun+0x26>
 8004be6:	3827      	subs	r0, #39	@ 0x27
 8004be8:	e7f1      	b.n	8004bce <__hexdig_fun+0xa>
 8004bea:	2000      	movs	r0, #0
 8004bec:	4770      	bx	lr
	...

08004bf0 <__gethex>:
 8004bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf4:	b085      	sub	sp, #20
 8004bf6:	468a      	mov	sl, r1
 8004bf8:	9302      	str	r3, [sp, #8]
 8004bfa:	680b      	ldr	r3, [r1, #0]
 8004bfc:	9001      	str	r0, [sp, #4]
 8004bfe:	4690      	mov	r8, r2
 8004c00:	1c9c      	adds	r4, r3, #2
 8004c02:	46a1      	mov	r9, r4
 8004c04:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004c08:	2830      	cmp	r0, #48	@ 0x30
 8004c0a:	d0fa      	beq.n	8004c02 <__gethex+0x12>
 8004c0c:	eba9 0303 	sub.w	r3, r9, r3
 8004c10:	f1a3 0b02 	sub.w	fp, r3, #2
 8004c14:	f7ff ffd6 	bl	8004bc4 <__hexdig_fun>
 8004c18:	4605      	mov	r5, r0
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	d168      	bne.n	8004cf0 <__gethex+0x100>
 8004c1e:	49a0      	ldr	r1, [pc, #640]	@ (8004ea0 <__gethex+0x2b0>)
 8004c20:	2201      	movs	r2, #1
 8004c22:	4648      	mov	r0, r9
 8004c24:	f7ff f8c4 	bl	8003db0 <strncmp>
 8004c28:	4607      	mov	r7, r0
 8004c2a:	2800      	cmp	r0, #0
 8004c2c:	d167      	bne.n	8004cfe <__gethex+0x10e>
 8004c2e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8004c32:	4626      	mov	r6, r4
 8004c34:	f7ff ffc6 	bl	8004bc4 <__hexdig_fun>
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	d062      	beq.n	8004d02 <__gethex+0x112>
 8004c3c:	4623      	mov	r3, r4
 8004c3e:	7818      	ldrb	r0, [r3, #0]
 8004c40:	2830      	cmp	r0, #48	@ 0x30
 8004c42:	4699      	mov	r9, r3
 8004c44:	f103 0301 	add.w	r3, r3, #1
 8004c48:	d0f9      	beq.n	8004c3e <__gethex+0x4e>
 8004c4a:	f7ff ffbb 	bl	8004bc4 <__hexdig_fun>
 8004c4e:	fab0 f580 	clz	r5, r0
 8004c52:	096d      	lsrs	r5, r5, #5
 8004c54:	f04f 0b01 	mov.w	fp, #1
 8004c58:	464a      	mov	r2, r9
 8004c5a:	4616      	mov	r6, r2
 8004c5c:	3201      	adds	r2, #1
 8004c5e:	7830      	ldrb	r0, [r6, #0]
 8004c60:	f7ff ffb0 	bl	8004bc4 <__hexdig_fun>
 8004c64:	2800      	cmp	r0, #0
 8004c66:	d1f8      	bne.n	8004c5a <__gethex+0x6a>
 8004c68:	498d      	ldr	r1, [pc, #564]	@ (8004ea0 <__gethex+0x2b0>)
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	4630      	mov	r0, r6
 8004c6e:	f7ff f89f 	bl	8003db0 <strncmp>
 8004c72:	2800      	cmp	r0, #0
 8004c74:	d13f      	bne.n	8004cf6 <__gethex+0x106>
 8004c76:	b944      	cbnz	r4, 8004c8a <__gethex+0x9a>
 8004c78:	1c74      	adds	r4, r6, #1
 8004c7a:	4622      	mov	r2, r4
 8004c7c:	4616      	mov	r6, r2
 8004c7e:	3201      	adds	r2, #1
 8004c80:	7830      	ldrb	r0, [r6, #0]
 8004c82:	f7ff ff9f 	bl	8004bc4 <__hexdig_fun>
 8004c86:	2800      	cmp	r0, #0
 8004c88:	d1f8      	bne.n	8004c7c <__gethex+0x8c>
 8004c8a:	1ba4      	subs	r4, r4, r6
 8004c8c:	00a7      	lsls	r7, r4, #2
 8004c8e:	7833      	ldrb	r3, [r6, #0]
 8004c90:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8004c94:	2b50      	cmp	r3, #80	@ 0x50
 8004c96:	d13e      	bne.n	8004d16 <__gethex+0x126>
 8004c98:	7873      	ldrb	r3, [r6, #1]
 8004c9a:	2b2b      	cmp	r3, #43	@ 0x2b
 8004c9c:	d033      	beq.n	8004d06 <__gethex+0x116>
 8004c9e:	2b2d      	cmp	r3, #45	@ 0x2d
 8004ca0:	d034      	beq.n	8004d0c <__gethex+0x11c>
 8004ca2:	1c71      	adds	r1, r6, #1
 8004ca4:	2400      	movs	r4, #0
 8004ca6:	7808      	ldrb	r0, [r1, #0]
 8004ca8:	f7ff ff8c 	bl	8004bc4 <__hexdig_fun>
 8004cac:	1e43      	subs	r3, r0, #1
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b18      	cmp	r3, #24
 8004cb2:	d830      	bhi.n	8004d16 <__gethex+0x126>
 8004cb4:	f1a0 0210 	sub.w	r2, r0, #16
 8004cb8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004cbc:	f7ff ff82 	bl	8004bc4 <__hexdig_fun>
 8004cc0:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8004cc4:	fa5f fc8c 	uxtb.w	ip, ip
 8004cc8:	f1bc 0f18 	cmp.w	ip, #24
 8004ccc:	f04f 030a 	mov.w	r3, #10
 8004cd0:	d91e      	bls.n	8004d10 <__gethex+0x120>
 8004cd2:	b104      	cbz	r4, 8004cd6 <__gethex+0xe6>
 8004cd4:	4252      	negs	r2, r2
 8004cd6:	4417      	add	r7, r2
 8004cd8:	f8ca 1000 	str.w	r1, [sl]
 8004cdc:	b1ed      	cbz	r5, 8004d1a <__gethex+0x12a>
 8004cde:	f1bb 0f00 	cmp.w	fp, #0
 8004ce2:	bf0c      	ite	eq
 8004ce4:	2506      	moveq	r5, #6
 8004ce6:	2500      	movne	r5, #0
 8004ce8:	4628      	mov	r0, r5
 8004cea:	b005      	add	sp, #20
 8004cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cf0:	2500      	movs	r5, #0
 8004cf2:	462c      	mov	r4, r5
 8004cf4:	e7b0      	b.n	8004c58 <__gethex+0x68>
 8004cf6:	2c00      	cmp	r4, #0
 8004cf8:	d1c7      	bne.n	8004c8a <__gethex+0x9a>
 8004cfa:	4627      	mov	r7, r4
 8004cfc:	e7c7      	b.n	8004c8e <__gethex+0x9e>
 8004cfe:	464e      	mov	r6, r9
 8004d00:	462f      	mov	r7, r5
 8004d02:	2501      	movs	r5, #1
 8004d04:	e7c3      	b.n	8004c8e <__gethex+0x9e>
 8004d06:	2400      	movs	r4, #0
 8004d08:	1cb1      	adds	r1, r6, #2
 8004d0a:	e7cc      	b.n	8004ca6 <__gethex+0xb6>
 8004d0c:	2401      	movs	r4, #1
 8004d0e:	e7fb      	b.n	8004d08 <__gethex+0x118>
 8004d10:	fb03 0002 	mla	r0, r3, r2, r0
 8004d14:	e7ce      	b.n	8004cb4 <__gethex+0xc4>
 8004d16:	4631      	mov	r1, r6
 8004d18:	e7de      	b.n	8004cd8 <__gethex+0xe8>
 8004d1a:	eba6 0309 	sub.w	r3, r6, r9
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	4629      	mov	r1, r5
 8004d22:	2b07      	cmp	r3, #7
 8004d24:	dc0a      	bgt.n	8004d3c <__gethex+0x14c>
 8004d26:	9801      	ldr	r0, [sp, #4]
 8004d28:	f000 fcfe 	bl	8005728 <_Balloc>
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	b940      	cbnz	r0, 8004d42 <__gethex+0x152>
 8004d30:	4b5c      	ldr	r3, [pc, #368]	@ (8004ea4 <__gethex+0x2b4>)
 8004d32:	4602      	mov	r2, r0
 8004d34:	21e4      	movs	r1, #228	@ 0xe4
 8004d36:	485c      	ldr	r0, [pc, #368]	@ (8004ea8 <__gethex+0x2b8>)
 8004d38:	f001 fa96 	bl	8006268 <__assert_func>
 8004d3c:	3101      	adds	r1, #1
 8004d3e:	105b      	asrs	r3, r3, #1
 8004d40:	e7ef      	b.n	8004d22 <__gethex+0x132>
 8004d42:	f100 0a14 	add.w	sl, r0, #20
 8004d46:	2300      	movs	r3, #0
 8004d48:	4655      	mov	r5, sl
 8004d4a:	469b      	mov	fp, r3
 8004d4c:	45b1      	cmp	r9, r6
 8004d4e:	d337      	bcc.n	8004dc0 <__gethex+0x1d0>
 8004d50:	f845 bb04 	str.w	fp, [r5], #4
 8004d54:	eba5 050a 	sub.w	r5, r5, sl
 8004d58:	10ad      	asrs	r5, r5, #2
 8004d5a:	6125      	str	r5, [r4, #16]
 8004d5c:	4658      	mov	r0, fp
 8004d5e:	f000 fdd5 	bl	800590c <__hi0bits>
 8004d62:	016d      	lsls	r5, r5, #5
 8004d64:	f8d8 6000 	ldr.w	r6, [r8]
 8004d68:	1a2d      	subs	r5, r5, r0
 8004d6a:	42b5      	cmp	r5, r6
 8004d6c:	dd54      	ble.n	8004e18 <__gethex+0x228>
 8004d6e:	1bad      	subs	r5, r5, r6
 8004d70:	4629      	mov	r1, r5
 8004d72:	4620      	mov	r0, r4
 8004d74:	f001 f969 	bl	800604a <__any_on>
 8004d78:	4681      	mov	r9, r0
 8004d7a:	b178      	cbz	r0, 8004d9c <__gethex+0x1ac>
 8004d7c:	1e6b      	subs	r3, r5, #1
 8004d7e:	1159      	asrs	r1, r3, #5
 8004d80:	f003 021f 	and.w	r2, r3, #31
 8004d84:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8004d88:	f04f 0901 	mov.w	r9, #1
 8004d8c:	fa09 f202 	lsl.w	r2, r9, r2
 8004d90:	420a      	tst	r2, r1
 8004d92:	d003      	beq.n	8004d9c <__gethex+0x1ac>
 8004d94:	454b      	cmp	r3, r9
 8004d96:	dc36      	bgt.n	8004e06 <__gethex+0x216>
 8004d98:	f04f 0902 	mov.w	r9, #2
 8004d9c:	4629      	mov	r1, r5
 8004d9e:	4620      	mov	r0, r4
 8004da0:	f7ff febe 	bl	8004b20 <rshift>
 8004da4:	442f      	add	r7, r5
 8004da6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004daa:	42bb      	cmp	r3, r7
 8004dac:	da42      	bge.n	8004e34 <__gethex+0x244>
 8004dae:	9801      	ldr	r0, [sp, #4]
 8004db0:	4621      	mov	r1, r4
 8004db2:	f000 fcf9 	bl	80057a8 <_Bfree>
 8004db6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004db8:	2300      	movs	r3, #0
 8004dba:	6013      	str	r3, [r2, #0]
 8004dbc:	25a3      	movs	r5, #163	@ 0xa3
 8004dbe:	e793      	b.n	8004ce8 <__gethex+0xf8>
 8004dc0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8004dc4:	2a2e      	cmp	r2, #46	@ 0x2e
 8004dc6:	d012      	beq.n	8004dee <__gethex+0x1fe>
 8004dc8:	2b20      	cmp	r3, #32
 8004dca:	d104      	bne.n	8004dd6 <__gethex+0x1e6>
 8004dcc:	f845 bb04 	str.w	fp, [r5], #4
 8004dd0:	f04f 0b00 	mov.w	fp, #0
 8004dd4:	465b      	mov	r3, fp
 8004dd6:	7830      	ldrb	r0, [r6, #0]
 8004dd8:	9303      	str	r3, [sp, #12]
 8004dda:	f7ff fef3 	bl	8004bc4 <__hexdig_fun>
 8004dde:	9b03      	ldr	r3, [sp, #12]
 8004de0:	f000 000f 	and.w	r0, r0, #15
 8004de4:	4098      	lsls	r0, r3
 8004de6:	ea4b 0b00 	orr.w	fp, fp, r0
 8004dea:	3304      	adds	r3, #4
 8004dec:	e7ae      	b.n	8004d4c <__gethex+0x15c>
 8004dee:	45b1      	cmp	r9, r6
 8004df0:	d8ea      	bhi.n	8004dc8 <__gethex+0x1d8>
 8004df2:	492b      	ldr	r1, [pc, #172]	@ (8004ea0 <__gethex+0x2b0>)
 8004df4:	9303      	str	r3, [sp, #12]
 8004df6:	2201      	movs	r2, #1
 8004df8:	4630      	mov	r0, r6
 8004dfa:	f7fe ffd9 	bl	8003db0 <strncmp>
 8004dfe:	9b03      	ldr	r3, [sp, #12]
 8004e00:	2800      	cmp	r0, #0
 8004e02:	d1e1      	bne.n	8004dc8 <__gethex+0x1d8>
 8004e04:	e7a2      	b.n	8004d4c <__gethex+0x15c>
 8004e06:	1ea9      	subs	r1, r5, #2
 8004e08:	4620      	mov	r0, r4
 8004e0a:	f001 f91e 	bl	800604a <__any_on>
 8004e0e:	2800      	cmp	r0, #0
 8004e10:	d0c2      	beq.n	8004d98 <__gethex+0x1a8>
 8004e12:	f04f 0903 	mov.w	r9, #3
 8004e16:	e7c1      	b.n	8004d9c <__gethex+0x1ac>
 8004e18:	da09      	bge.n	8004e2e <__gethex+0x23e>
 8004e1a:	1b75      	subs	r5, r6, r5
 8004e1c:	4621      	mov	r1, r4
 8004e1e:	9801      	ldr	r0, [sp, #4]
 8004e20:	462a      	mov	r2, r5
 8004e22:	f000 fed9 	bl	8005bd8 <__lshift>
 8004e26:	1b7f      	subs	r7, r7, r5
 8004e28:	4604      	mov	r4, r0
 8004e2a:	f100 0a14 	add.w	sl, r0, #20
 8004e2e:	f04f 0900 	mov.w	r9, #0
 8004e32:	e7b8      	b.n	8004da6 <__gethex+0x1b6>
 8004e34:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8004e38:	42bd      	cmp	r5, r7
 8004e3a:	dd6f      	ble.n	8004f1c <__gethex+0x32c>
 8004e3c:	1bed      	subs	r5, r5, r7
 8004e3e:	42ae      	cmp	r6, r5
 8004e40:	dc34      	bgt.n	8004eac <__gethex+0x2bc>
 8004e42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d022      	beq.n	8004e90 <__gethex+0x2a0>
 8004e4a:	2b03      	cmp	r3, #3
 8004e4c:	d024      	beq.n	8004e98 <__gethex+0x2a8>
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d115      	bne.n	8004e7e <__gethex+0x28e>
 8004e52:	42ae      	cmp	r6, r5
 8004e54:	d113      	bne.n	8004e7e <__gethex+0x28e>
 8004e56:	2e01      	cmp	r6, #1
 8004e58:	d10b      	bne.n	8004e72 <__gethex+0x282>
 8004e5a:	9a02      	ldr	r2, [sp, #8]
 8004e5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	2301      	movs	r3, #1
 8004e64:	6123      	str	r3, [r4, #16]
 8004e66:	f8ca 3000 	str.w	r3, [sl]
 8004e6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004e6c:	2562      	movs	r5, #98	@ 0x62
 8004e6e:	601c      	str	r4, [r3, #0]
 8004e70:	e73a      	b.n	8004ce8 <__gethex+0xf8>
 8004e72:	1e71      	subs	r1, r6, #1
 8004e74:	4620      	mov	r0, r4
 8004e76:	f001 f8e8 	bl	800604a <__any_on>
 8004e7a:	2800      	cmp	r0, #0
 8004e7c:	d1ed      	bne.n	8004e5a <__gethex+0x26a>
 8004e7e:	9801      	ldr	r0, [sp, #4]
 8004e80:	4621      	mov	r1, r4
 8004e82:	f000 fc91 	bl	80057a8 <_Bfree>
 8004e86:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004e88:	2300      	movs	r3, #0
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	2550      	movs	r5, #80	@ 0x50
 8004e8e:	e72b      	b.n	8004ce8 <__gethex+0xf8>
 8004e90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1f3      	bne.n	8004e7e <__gethex+0x28e>
 8004e96:	e7e0      	b.n	8004e5a <__gethex+0x26a>
 8004e98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1dd      	bne.n	8004e5a <__gethex+0x26a>
 8004e9e:	e7ee      	b.n	8004e7e <__gethex+0x28e>
 8004ea0:	08006947 	.word	0x08006947
 8004ea4:	08006b25 	.word	0x08006b25
 8004ea8:	08006b36 	.word	0x08006b36
 8004eac:	1e6f      	subs	r7, r5, #1
 8004eae:	f1b9 0f00 	cmp.w	r9, #0
 8004eb2:	d130      	bne.n	8004f16 <__gethex+0x326>
 8004eb4:	b127      	cbz	r7, 8004ec0 <__gethex+0x2d0>
 8004eb6:	4639      	mov	r1, r7
 8004eb8:	4620      	mov	r0, r4
 8004eba:	f001 f8c6 	bl	800604a <__any_on>
 8004ebe:	4681      	mov	r9, r0
 8004ec0:	117a      	asrs	r2, r7, #5
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8004ec8:	f007 071f 	and.w	r7, r7, #31
 8004ecc:	40bb      	lsls	r3, r7
 8004ece:	4213      	tst	r3, r2
 8004ed0:	4629      	mov	r1, r5
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	bf18      	it	ne
 8004ed6:	f049 0902 	orrne.w	r9, r9, #2
 8004eda:	f7ff fe21 	bl	8004b20 <rshift>
 8004ede:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8004ee2:	1b76      	subs	r6, r6, r5
 8004ee4:	2502      	movs	r5, #2
 8004ee6:	f1b9 0f00 	cmp.w	r9, #0
 8004eea:	d047      	beq.n	8004f7c <__gethex+0x38c>
 8004eec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d015      	beq.n	8004f20 <__gethex+0x330>
 8004ef4:	2b03      	cmp	r3, #3
 8004ef6:	d017      	beq.n	8004f28 <__gethex+0x338>
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d109      	bne.n	8004f10 <__gethex+0x320>
 8004efc:	f019 0f02 	tst.w	r9, #2
 8004f00:	d006      	beq.n	8004f10 <__gethex+0x320>
 8004f02:	f8da 3000 	ldr.w	r3, [sl]
 8004f06:	ea49 0903 	orr.w	r9, r9, r3
 8004f0a:	f019 0f01 	tst.w	r9, #1
 8004f0e:	d10e      	bne.n	8004f2e <__gethex+0x33e>
 8004f10:	f045 0510 	orr.w	r5, r5, #16
 8004f14:	e032      	b.n	8004f7c <__gethex+0x38c>
 8004f16:	f04f 0901 	mov.w	r9, #1
 8004f1a:	e7d1      	b.n	8004ec0 <__gethex+0x2d0>
 8004f1c:	2501      	movs	r5, #1
 8004f1e:	e7e2      	b.n	8004ee6 <__gethex+0x2f6>
 8004f20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004f22:	f1c3 0301 	rsb	r3, r3, #1
 8004f26:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004f28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0f0      	beq.n	8004f10 <__gethex+0x320>
 8004f2e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8004f32:	f104 0314 	add.w	r3, r4, #20
 8004f36:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8004f3a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8004f3e:	f04f 0c00 	mov.w	ip, #0
 8004f42:	4618      	mov	r0, r3
 8004f44:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f48:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8004f4c:	d01b      	beq.n	8004f86 <__gethex+0x396>
 8004f4e:	3201      	adds	r2, #1
 8004f50:	6002      	str	r2, [r0, #0]
 8004f52:	2d02      	cmp	r5, #2
 8004f54:	f104 0314 	add.w	r3, r4, #20
 8004f58:	d13c      	bne.n	8004fd4 <__gethex+0x3e4>
 8004f5a:	f8d8 2000 	ldr.w	r2, [r8]
 8004f5e:	3a01      	subs	r2, #1
 8004f60:	42b2      	cmp	r2, r6
 8004f62:	d109      	bne.n	8004f78 <__gethex+0x388>
 8004f64:	1171      	asrs	r1, r6, #5
 8004f66:	2201      	movs	r2, #1
 8004f68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004f6c:	f006 061f 	and.w	r6, r6, #31
 8004f70:	fa02 f606 	lsl.w	r6, r2, r6
 8004f74:	421e      	tst	r6, r3
 8004f76:	d13a      	bne.n	8004fee <__gethex+0x3fe>
 8004f78:	f045 0520 	orr.w	r5, r5, #32
 8004f7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f7e:	601c      	str	r4, [r3, #0]
 8004f80:	9b02      	ldr	r3, [sp, #8]
 8004f82:	601f      	str	r7, [r3, #0]
 8004f84:	e6b0      	b.n	8004ce8 <__gethex+0xf8>
 8004f86:	4299      	cmp	r1, r3
 8004f88:	f843 cc04 	str.w	ip, [r3, #-4]
 8004f8c:	d8d9      	bhi.n	8004f42 <__gethex+0x352>
 8004f8e:	68a3      	ldr	r3, [r4, #8]
 8004f90:	459b      	cmp	fp, r3
 8004f92:	db17      	blt.n	8004fc4 <__gethex+0x3d4>
 8004f94:	6861      	ldr	r1, [r4, #4]
 8004f96:	9801      	ldr	r0, [sp, #4]
 8004f98:	3101      	adds	r1, #1
 8004f9a:	f000 fbc5 	bl	8005728 <_Balloc>
 8004f9e:	4681      	mov	r9, r0
 8004fa0:	b918      	cbnz	r0, 8004faa <__gethex+0x3ba>
 8004fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800500c <__gethex+0x41c>)
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	2184      	movs	r1, #132	@ 0x84
 8004fa8:	e6c5      	b.n	8004d36 <__gethex+0x146>
 8004faa:	6922      	ldr	r2, [r4, #16]
 8004fac:	3202      	adds	r2, #2
 8004fae:	f104 010c 	add.w	r1, r4, #12
 8004fb2:	0092      	lsls	r2, r2, #2
 8004fb4:	300c      	adds	r0, #12
 8004fb6:	f7fe ff46 	bl	8003e46 <memcpy>
 8004fba:	4621      	mov	r1, r4
 8004fbc:	9801      	ldr	r0, [sp, #4]
 8004fbe:	f000 fbf3 	bl	80057a8 <_Bfree>
 8004fc2:	464c      	mov	r4, r9
 8004fc4:	6923      	ldr	r3, [r4, #16]
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004fcc:	6122      	str	r2, [r4, #16]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	615a      	str	r2, [r3, #20]
 8004fd2:	e7be      	b.n	8004f52 <__gethex+0x362>
 8004fd4:	6922      	ldr	r2, [r4, #16]
 8004fd6:	455a      	cmp	r2, fp
 8004fd8:	dd0b      	ble.n	8004ff2 <__gethex+0x402>
 8004fda:	2101      	movs	r1, #1
 8004fdc:	4620      	mov	r0, r4
 8004fde:	f7ff fd9f 	bl	8004b20 <rshift>
 8004fe2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004fe6:	3701      	adds	r7, #1
 8004fe8:	42bb      	cmp	r3, r7
 8004fea:	f6ff aee0 	blt.w	8004dae <__gethex+0x1be>
 8004fee:	2501      	movs	r5, #1
 8004ff0:	e7c2      	b.n	8004f78 <__gethex+0x388>
 8004ff2:	f016 061f 	ands.w	r6, r6, #31
 8004ff6:	d0fa      	beq.n	8004fee <__gethex+0x3fe>
 8004ff8:	4453      	add	r3, sl
 8004ffa:	f1c6 0620 	rsb	r6, r6, #32
 8004ffe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005002:	f000 fc83 	bl	800590c <__hi0bits>
 8005006:	42b0      	cmp	r0, r6
 8005008:	dbe7      	blt.n	8004fda <__gethex+0x3ea>
 800500a:	e7f0      	b.n	8004fee <__gethex+0x3fe>
 800500c:	08006b25 	.word	0x08006b25

08005010 <L_shift>:
 8005010:	f1c2 0208 	rsb	r2, r2, #8
 8005014:	0092      	lsls	r2, r2, #2
 8005016:	b570      	push	{r4, r5, r6, lr}
 8005018:	f1c2 0620 	rsb	r6, r2, #32
 800501c:	6843      	ldr	r3, [r0, #4]
 800501e:	6804      	ldr	r4, [r0, #0]
 8005020:	fa03 f506 	lsl.w	r5, r3, r6
 8005024:	432c      	orrs	r4, r5
 8005026:	40d3      	lsrs	r3, r2
 8005028:	6004      	str	r4, [r0, #0]
 800502a:	f840 3f04 	str.w	r3, [r0, #4]!
 800502e:	4288      	cmp	r0, r1
 8005030:	d3f4      	bcc.n	800501c <L_shift+0xc>
 8005032:	bd70      	pop	{r4, r5, r6, pc}

08005034 <__match>:
 8005034:	b530      	push	{r4, r5, lr}
 8005036:	6803      	ldr	r3, [r0, #0]
 8005038:	3301      	adds	r3, #1
 800503a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800503e:	b914      	cbnz	r4, 8005046 <__match+0x12>
 8005040:	6003      	str	r3, [r0, #0]
 8005042:	2001      	movs	r0, #1
 8005044:	bd30      	pop	{r4, r5, pc}
 8005046:	f813 2b01 	ldrb.w	r2, [r3], #1
 800504a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800504e:	2d19      	cmp	r5, #25
 8005050:	bf98      	it	ls
 8005052:	3220      	addls	r2, #32
 8005054:	42a2      	cmp	r2, r4
 8005056:	d0f0      	beq.n	800503a <__match+0x6>
 8005058:	2000      	movs	r0, #0
 800505a:	e7f3      	b.n	8005044 <__match+0x10>

0800505c <__hexnan>:
 800505c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005060:	680b      	ldr	r3, [r1, #0]
 8005062:	6801      	ldr	r1, [r0, #0]
 8005064:	115e      	asrs	r6, r3, #5
 8005066:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800506a:	f013 031f 	ands.w	r3, r3, #31
 800506e:	b087      	sub	sp, #28
 8005070:	bf18      	it	ne
 8005072:	3604      	addne	r6, #4
 8005074:	2500      	movs	r5, #0
 8005076:	1f37      	subs	r7, r6, #4
 8005078:	4682      	mov	sl, r0
 800507a:	4690      	mov	r8, r2
 800507c:	9301      	str	r3, [sp, #4]
 800507e:	f846 5c04 	str.w	r5, [r6, #-4]
 8005082:	46b9      	mov	r9, r7
 8005084:	463c      	mov	r4, r7
 8005086:	9502      	str	r5, [sp, #8]
 8005088:	46ab      	mov	fp, r5
 800508a:	784a      	ldrb	r2, [r1, #1]
 800508c:	1c4b      	adds	r3, r1, #1
 800508e:	9303      	str	r3, [sp, #12]
 8005090:	b342      	cbz	r2, 80050e4 <__hexnan+0x88>
 8005092:	4610      	mov	r0, r2
 8005094:	9105      	str	r1, [sp, #20]
 8005096:	9204      	str	r2, [sp, #16]
 8005098:	f7ff fd94 	bl	8004bc4 <__hexdig_fun>
 800509c:	2800      	cmp	r0, #0
 800509e:	d151      	bne.n	8005144 <__hexnan+0xe8>
 80050a0:	9a04      	ldr	r2, [sp, #16]
 80050a2:	9905      	ldr	r1, [sp, #20]
 80050a4:	2a20      	cmp	r2, #32
 80050a6:	d818      	bhi.n	80050da <__hexnan+0x7e>
 80050a8:	9b02      	ldr	r3, [sp, #8]
 80050aa:	459b      	cmp	fp, r3
 80050ac:	dd13      	ble.n	80050d6 <__hexnan+0x7a>
 80050ae:	454c      	cmp	r4, r9
 80050b0:	d206      	bcs.n	80050c0 <__hexnan+0x64>
 80050b2:	2d07      	cmp	r5, #7
 80050b4:	dc04      	bgt.n	80050c0 <__hexnan+0x64>
 80050b6:	462a      	mov	r2, r5
 80050b8:	4649      	mov	r1, r9
 80050ba:	4620      	mov	r0, r4
 80050bc:	f7ff ffa8 	bl	8005010 <L_shift>
 80050c0:	4544      	cmp	r4, r8
 80050c2:	d952      	bls.n	800516a <__hexnan+0x10e>
 80050c4:	2300      	movs	r3, #0
 80050c6:	f1a4 0904 	sub.w	r9, r4, #4
 80050ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80050ce:	f8cd b008 	str.w	fp, [sp, #8]
 80050d2:	464c      	mov	r4, r9
 80050d4:	461d      	mov	r5, r3
 80050d6:	9903      	ldr	r1, [sp, #12]
 80050d8:	e7d7      	b.n	800508a <__hexnan+0x2e>
 80050da:	2a29      	cmp	r2, #41	@ 0x29
 80050dc:	d157      	bne.n	800518e <__hexnan+0x132>
 80050de:	3102      	adds	r1, #2
 80050e0:	f8ca 1000 	str.w	r1, [sl]
 80050e4:	f1bb 0f00 	cmp.w	fp, #0
 80050e8:	d051      	beq.n	800518e <__hexnan+0x132>
 80050ea:	454c      	cmp	r4, r9
 80050ec:	d206      	bcs.n	80050fc <__hexnan+0xa0>
 80050ee:	2d07      	cmp	r5, #7
 80050f0:	dc04      	bgt.n	80050fc <__hexnan+0xa0>
 80050f2:	462a      	mov	r2, r5
 80050f4:	4649      	mov	r1, r9
 80050f6:	4620      	mov	r0, r4
 80050f8:	f7ff ff8a 	bl	8005010 <L_shift>
 80050fc:	4544      	cmp	r4, r8
 80050fe:	d936      	bls.n	800516e <__hexnan+0x112>
 8005100:	f1a8 0204 	sub.w	r2, r8, #4
 8005104:	4623      	mov	r3, r4
 8005106:	f853 1b04 	ldr.w	r1, [r3], #4
 800510a:	f842 1f04 	str.w	r1, [r2, #4]!
 800510e:	429f      	cmp	r7, r3
 8005110:	d2f9      	bcs.n	8005106 <__hexnan+0xaa>
 8005112:	1b3b      	subs	r3, r7, r4
 8005114:	f023 0303 	bic.w	r3, r3, #3
 8005118:	3304      	adds	r3, #4
 800511a:	3401      	adds	r4, #1
 800511c:	3e03      	subs	r6, #3
 800511e:	42b4      	cmp	r4, r6
 8005120:	bf88      	it	hi
 8005122:	2304      	movhi	r3, #4
 8005124:	4443      	add	r3, r8
 8005126:	2200      	movs	r2, #0
 8005128:	f843 2b04 	str.w	r2, [r3], #4
 800512c:	429f      	cmp	r7, r3
 800512e:	d2fb      	bcs.n	8005128 <__hexnan+0xcc>
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	b91b      	cbnz	r3, 800513c <__hexnan+0xe0>
 8005134:	4547      	cmp	r7, r8
 8005136:	d128      	bne.n	800518a <__hexnan+0x12e>
 8005138:	2301      	movs	r3, #1
 800513a:	603b      	str	r3, [r7, #0]
 800513c:	2005      	movs	r0, #5
 800513e:	b007      	add	sp, #28
 8005140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005144:	3501      	adds	r5, #1
 8005146:	2d08      	cmp	r5, #8
 8005148:	f10b 0b01 	add.w	fp, fp, #1
 800514c:	dd06      	ble.n	800515c <__hexnan+0x100>
 800514e:	4544      	cmp	r4, r8
 8005150:	d9c1      	bls.n	80050d6 <__hexnan+0x7a>
 8005152:	2300      	movs	r3, #0
 8005154:	f844 3c04 	str.w	r3, [r4, #-4]
 8005158:	2501      	movs	r5, #1
 800515a:	3c04      	subs	r4, #4
 800515c:	6822      	ldr	r2, [r4, #0]
 800515e:	f000 000f 	and.w	r0, r0, #15
 8005162:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005166:	6020      	str	r0, [r4, #0]
 8005168:	e7b5      	b.n	80050d6 <__hexnan+0x7a>
 800516a:	2508      	movs	r5, #8
 800516c:	e7b3      	b.n	80050d6 <__hexnan+0x7a>
 800516e:	9b01      	ldr	r3, [sp, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0dd      	beq.n	8005130 <__hexnan+0xd4>
 8005174:	f1c3 0320 	rsb	r3, r3, #32
 8005178:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800517c:	40da      	lsrs	r2, r3
 800517e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005182:	4013      	ands	r3, r2
 8005184:	f846 3c04 	str.w	r3, [r6, #-4]
 8005188:	e7d2      	b.n	8005130 <__hexnan+0xd4>
 800518a:	3f04      	subs	r7, #4
 800518c:	e7d0      	b.n	8005130 <__hexnan+0xd4>
 800518e:	2004      	movs	r0, #4
 8005190:	e7d5      	b.n	800513e <__hexnan+0xe2>

08005192 <__ssputs_r>:
 8005192:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005196:	688e      	ldr	r6, [r1, #8]
 8005198:	461f      	mov	r7, r3
 800519a:	42be      	cmp	r6, r7
 800519c:	680b      	ldr	r3, [r1, #0]
 800519e:	4682      	mov	sl, r0
 80051a0:	460c      	mov	r4, r1
 80051a2:	4690      	mov	r8, r2
 80051a4:	d82d      	bhi.n	8005202 <__ssputs_r+0x70>
 80051a6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80051aa:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80051ae:	d026      	beq.n	80051fe <__ssputs_r+0x6c>
 80051b0:	6965      	ldr	r5, [r4, #20]
 80051b2:	6909      	ldr	r1, [r1, #16]
 80051b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051b8:	eba3 0901 	sub.w	r9, r3, r1
 80051bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051c0:	1c7b      	adds	r3, r7, #1
 80051c2:	444b      	add	r3, r9
 80051c4:	106d      	asrs	r5, r5, #1
 80051c6:	429d      	cmp	r5, r3
 80051c8:	bf38      	it	cc
 80051ca:	461d      	movcc	r5, r3
 80051cc:	0553      	lsls	r3, r2, #21
 80051ce:	d527      	bpl.n	8005220 <__ssputs_r+0x8e>
 80051d0:	4629      	mov	r1, r5
 80051d2:	f000 f95f 	bl	8005494 <_malloc_r>
 80051d6:	4606      	mov	r6, r0
 80051d8:	b360      	cbz	r0, 8005234 <__ssputs_r+0xa2>
 80051da:	6921      	ldr	r1, [r4, #16]
 80051dc:	464a      	mov	r2, r9
 80051de:	f7fe fe32 	bl	8003e46 <memcpy>
 80051e2:	89a3      	ldrh	r3, [r4, #12]
 80051e4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80051e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051ec:	81a3      	strh	r3, [r4, #12]
 80051ee:	6126      	str	r6, [r4, #16]
 80051f0:	6165      	str	r5, [r4, #20]
 80051f2:	444e      	add	r6, r9
 80051f4:	eba5 0509 	sub.w	r5, r5, r9
 80051f8:	6026      	str	r6, [r4, #0]
 80051fa:	60a5      	str	r5, [r4, #8]
 80051fc:	463e      	mov	r6, r7
 80051fe:	42be      	cmp	r6, r7
 8005200:	d900      	bls.n	8005204 <__ssputs_r+0x72>
 8005202:	463e      	mov	r6, r7
 8005204:	6820      	ldr	r0, [r4, #0]
 8005206:	4632      	mov	r2, r6
 8005208:	4641      	mov	r1, r8
 800520a:	f000 ffbd 	bl	8006188 <memmove>
 800520e:	68a3      	ldr	r3, [r4, #8]
 8005210:	1b9b      	subs	r3, r3, r6
 8005212:	60a3      	str	r3, [r4, #8]
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	4433      	add	r3, r6
 8005218:	6023      	str	r3, [r4, #0]
 800521a:	2000      	movs	r0, #0
 800521c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005220:	462a      	mov	r2, r5
 8005222:	f000 ff76 	bl	8006112 <_realloc_r>
 8005226:	4606      	mov	r6, r0
 8005228:	2800      	cmp	r0, #0
 800522a:	d1e0      	bne.n	80051ee <__ssputs_r+0x5c>
 800522c:	6921      	ldr	r1, [r4, #16]
 800522e:	4650      	mov	r0, sl
 8005230:	f001 f84c 	bl	80062cc <_free_r>
 8005234:	230c      	movs	r3, #12
 8005236:	f8ca 3000 	str.w	r3, [sl]
 800523a:	89a3      	ldrh	r3, [r4, #12]
 800523c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005240:	81a3      	strh	r3, [r4, #12]
 8005242:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005246:	e7e9      	b.n	800521c <__ssputs_r+0x8a>

08005248 <_svfiprintf_r>:
 8005248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800524c:	4698      	mov	r8, r3
 800524e:	898b      	ldrh	r3, [r1, #12]
 8005250:	061b      	lsls	r3, r3, #24
 8005252:	b09d      	sub	sp, #116	@ 0x74
 8005254:	4607      	mov	r7, r0
 8005256:	460d      	mov	r5, r1
 8005258:	4614      	mov	r4, r2
 800525a:	d510      	bpl.n	800527e <_svfiprintf_r+0x36>
 800525c:	690b      	ldr	r3, [r1, #16]
 800525e:	b973      	cbnz	r3, 800527e <_svfiprintf_r+0x36>
 8005260:	2140      	movs	r1, #64	@ 0x40
 8005262:	f000 f917 	bl	8005494 <_malloc_r>
 8005266:	6028      	str	r0, [r5, #0]
 8005268:	6128      	str	r0, [r5, #16]
 800526a:	b930      	cbnz	r0, 800527a <_svfiprintf_r+0x32>
 800526c:	230c      	movs	r3, #12
 800526e:	603b      	str	r3, [r7, #0]
 8005270:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005274:	b01d      	add	sp, #116	@ 0x74
 8005276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800527a:	2340      	movs	r3, #64	@ 0x40
 800527c:	616b      	str	r3, [r5, #20]
 800527e:	2300      	movs	r3, #0
 8005280:	9309      	str	r3, [sp, #36]	@ 0x24
 8005282:	2320      	movs	r3, #32
 8005284:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005288:	f8cd 800c 	str.w	r8, [sp, #12]
 800528c:	2330      	movs	r3, #48	@ 0x30
 800528e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800542c <_svfiprintf_r+0x1e4>
 8005292:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005296:	f04f 0901 	mov.w	r9, #1
 800529a:	4623      	mov	r3, r4
 800529c:	469a      	mov	sl, r3
 800529e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052a2:	b10a      	cbz	r2, 80052a8 <_svfiprintf_r+0x60>
 80052a4:	2a25      	cmp	r2, #37	@ 0x25
 80052a6:	d1f9      	bne.n	800529c <_svfiprintf_r+0x54>
 80052a8:	ebba 0b04 	subs.w	fp, sl, r4
 80052ac:	d00b      	beq.n	80052c6 <_svfiprintf_r+0x7e>
 80052ae:	465b      	mov	r3, fp
 80052b0:	4622      	mov	r2, r4
 80052b2:	4629      	mov	r1, r5
 80052b4:	4638      	mov	r0, r7
 80052b6:	f7ff ff6c 	bl	8005192 <__ssputs_r>
 80052ba:	3001      	adds	r0, #1
 80052bc:	f000 80a7 	beq.w	800540e <_svfiprintf_r+0x1c6>
 80052c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052c2:	445a      	add	r2, fp
 80052c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80052c6:	f89a 3000 	ldrb.w	r3, [sl]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 809f 	beq.w	800540e <_svfiprintf_r+0x1c6>
 80052d0:	2300      	movs	r3, #0
 80052d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80052d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052da:	f10a 0a01 	add.w	sl, sl, #1
 80052de:	9304      	str	r3, [sp, #16]
 80052e0:	9307      	str	r3, [sp, #28]
 80052e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80052e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80052e8:	4654      	mov	r4, sl
 80052ea:	2205      	movs	r2, #5
 80052ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052f0:	484e      	ldr	r0, [pc, #312]	@ (800542c <_svfiprintf_r+0x1e4>)
 80052f2:	f7fa ff75 	bl	80001e0 <memchr>
 80052f6:	9a04      	ldr	r2, [sp, #16]
 80052f8:	b9d8      	cbnz	r0, 8005332 <_svfiprintf_r+0xea>
 80052fa:	06d0      	lsls	r0, r2, #27
 80052fc:	bf44      	itt	mi
 80052fe:	2320      	movmi	r3, #32
 8005300:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005304:	0711      	lsls	r1, r2, #28
 8005306:	bf44      	itt	mi
 8005308:	232b      	movmi	r3, #43	@ 0x2b
 800530a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800530e:	f89a 3000 	ldrb.w	r3, [sl]
 8005312:	2b2a      	cmp	r3, #42	@ 0x2a
 8005314:	d015      	beq.n	8005342 <_svfiprintf_r+0xfa>
 8005316:	9a07      	ldr	r2, [sp, #28]
 8005318:	4654      	mov	r4, sl
 800531a:	2000      	movs	r0, #0
 800531c:	f04f 0c0a 	mov.w	ip, #10
 8005320:	4621      	mov	r1, r4
 8005322:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005326:	3b30      	subs	r3, #48	@ 0x30
 8005328:	2b09      	cmp	r3, #9
 800532a:	d94b      	bls.n	80053c4 <_svfiprintf_r+0x17c>
 800532c:	b1b0      	cbz	r0, 800535c <_svfiprintf_r+0x114>
 800532e:	9207      	str	r2, [sp, #28]
 8005330:	e014      	b.n	800535c <_svfiprintf_r+0x114>
 8005332:	eba0 0308 	sub.w	r3, r0, r8
 8005336:	fa09 f303 	lsl.w	r3, r9, r3
 800533a:	4313      	orrs	r3, r2
 800533c:	9304      	str	r3, [sp, #16]
 800533e:	46a2      	mov	sl, r4
 8005340:	e7d2      	b.n	80052e8 <_svfiprintf_r+0xa0>
 8005342:	9b03      	ldr	r3, [sp, #12]
 8005344:	1d19      	adds	r1, r3, #4
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	9103      	str	r1, [sp, #12]
 800534a:	2b00      	cmp	r3, #0
 800534c:	bfbb      	ittet	lt
 800534e:	425b      	neglt	r3, r3
 8005350:	f042 0202 	orrlt.w	r2, r2, #2
 8005354:	9307      	strge	r3, [sp, #28]
 8005356:	9307      	strlt	r3, [sp, #28]
 8005358:	bfb8      	it	lt
 800535a:	9204      	strlt	r2, [sp, #16]
 800535c:	7823      	ldrb	r3, [r4, #0]
 800535e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005360:	d10a      	bne.n	8005378 <_svfiprintf_r+0x130>
 8005362:	7863      	ldrb	r3, [r4, #1]
 8005364:	2b2a      	cmp	r3, #42	@ 0x2a
 8005366:	d132      	bne.n	80053ce <_svfiprintf_r+0x186>
 8005368:	9b03      	ldr	r3, [sp, #12]
 800536a:	1d1a      	adds	r2, r3, #4
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	9203      	str	r2, [sp, #12]
 8005370:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005374:	3402      	adds	r4, #2
 8005376:	9305      	str	r3, [sp, #20]
 8005378:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800543c <_svfiprintf_r+0x1f4>
 800537c:	7821      	ldrb	r1, [r4, #0]
 800537e:	2203      	movs	r2, #3
 8005380:	4650      	mov	r0, sl
 8005382:	f7fa ff2d 	bl	80001e0 <memchr>
 8005386:	b138      	cbz	r0, 8005398 <_svfiprintf_r+0x150>
 8005388:	9b04      	ldr	r3, [sp, #16]
 800538a:	eba0 000a 	sub.w	r0, r0, sl
 800538e:	2240      	movs	r2, #64	@ 0x40
 8005390:	4082      	lsls	r2, r0
 8005392:	4313      	orrs	r3, r2
 8005394:	3401      	adds	r4, #1
 8005396:	9304      	str	r3, [sp, #16]
 8005398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800539c:	4824      	ldr	r0, [pc, #144]	@ (8005430 <_svfiprintf_r+0x1e8>)
 800539e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80053a2:	2206      	movs	r2, #6
 80053a4:	f7fa ff1c 	bl	80001e0 <memchr>
 80053a8:	2800      	cmp	r0, #0
 80053aa:	d036      	beq.n	800541a <_svfiprintf_r+0x1d2>
 80053ac:	4b21      	ldr	r3, [pc, #132]	@ (8005434 <_svfiprintf_r+0x1ec>)
 80053ae:	bb1b      	cbnz	r3, 80053f8 <_svfiprintf_r+0x1b0>
 80053b0:	9b03      	ldr	r3, [sp, #12]
 80053b2:	3307      	adds	r3, #7
 80053b4:	f023 0307 	bic.w	r3, r3, #7
 80053b8:	3308      	adds	r3, #8
 80053ba:	9303      	str	r3, [sp, #12]
 80053bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053be:	4433      	add	r3, r6
 80053c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80053c2:	e76a      	b.n	800529a <_svfiprintf_r+0x52>
 80053c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80053c8:	460c      	mov	r4, r1
 80053ca:	2001      	movs	r0, #1
 80053cc:	e7a8      	b.n	8005320 <_svfiprintf_r+0xd8>
 80053ce:	2300      	movs	r3, #0
 80053d0:	3401      	adds	r4, #1
 80053d2:	9305      	str	r3, [sp, #20]
 80053d4:	4619      	mov	r1, r3
 80053d6:	f04f 0c0a 	mov.w	ip, #10
 80053da:	4620      	mov	r0, r4
 80053dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053e0:	3a30      	subs	r2, #48	@ 0x30
 80053e2:	2a09      	cmp	r2, #9
 80053e4:	d903      	bls.n	80053ee <_svfiprintf_r+0x1a6>
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d0c6      	beq.n	8005378 <_svfiprintf_r+0x130>
 80053ea:	9105      	str	r1, [sp, #20]
 80053ec:	e7c4      	b.n	8005378 <_svfiprintf_r+0x130>
 80053ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80053f2:	4604      	mov	r4, r0
 80053f4:	2301      	movs	r3, #1
 80053f6:	e7f0      	b.n	80053da <_svfiprintf_r+0x192>
 80053f8:	ab03      	add	r3, sp, #12
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	462a      	mov	r2, r5
 80053fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005438 <_svfiprintf_r+0x1f0>)
 8005400:	a904      	add	r1, sp, #16
 8005402:	4638      	mov	r0, r7
 8005404:	f7fc ffa2 	bl	800234c <_printf_float>
 8005408:	1c42      	adds	r2, r0, #1
 800540a:	4606      	mov	r6, r0
 800540c:	d1d6      	bne.n	80053bc <_svfiprintf_r+0x174>
 800540e:	89ab      	ldrh	r3, [r5, #12]
 8005410:	065b      	lsls	r3, r3, #25
 8005412:	f53f af2d 	bmi.w	8005270 <_svfiprintf_r+0x28>
 8005416:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005418:	e72c      	b.n	8005274 <_svfiprintf_r+0x2c>
 800541a:	ab03      	add	r3, sp, #12
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	462a      	mov	r2, r5
 8005420:	4b05      	ldr	r3, [pc, #20]	@ (8005438 <_svfiprintf_r+0x1f0>)
 8005422:	a904      	add	r1, sp, #16
 8005424:	4638      	mov	r0, r7
 8005426:	f7fd fa29 	bl	800287c <_printf_i>
 800542a:	e7ed      	b.n	8005408 <_svfiprintf_r+0x1c0>
 800542c:	08006b96 	.word	0x08006b96
 8005430:	08006ba0 	.word	0x08006ba0
 8005434:	0800234d 	.word	0x0800234d
 8005438:	08005193 	.word	0x08005193
 800543c:	08006b9c 	.word	0x08006b9c

08005440 <malloc>:
 8005440:	4b02      	ldr	r3, [pc, #8]	@ (800544c <malloc+0xc>)
 8005442:	4601      	mov	r1, r0
 8005444:	6818      	ldr	r0, [r3, #0]
 8005446:	f000 b825 	b.w	8005494 <_malloc_r>
 800544a:	bf00      	nop
 800544c:	20000188 	.word	0x20000188

08005450 <sbrk_aligned>:
 8005450:	b570      	push	{r4, r5, r6, lr}
 8005452:	4e0f      	ldr	r6, [pc, #60]	@ (8005490 <sbrk_aligned+0x40>)
 8005454:	460c      	mov	r4, r1
 8005456:	6831      	ldr	r1, [r6, #0]
 8005458:	4605      	mov	r5, r0
 800545a:	b911      	cbnz	r1, 8005462 <sbrk_aligned+0x12>
 800545c:	f000 fee2 	bl	8006224 <_sbrk_r>
 8005460:	6030      	str	r0, [r6, #0]
 8005462:	4621      	mov	r1, r4
 8005464:	4628      	mov	r0, r5
 8005466:	f000 fedd 	bl	8006224 <_sbrk_r>
 800546a:	1c43      	adds	r3, r0, #1
 800546c:	d103      	bne.n	8005476 <sbrk_aligned+0x26>
 800546e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005472:	4620      	mov	r0, r4
 8005474:	bd70      	pop	{r4, r5, r6, pc}
 8005476:	1cc4      	adds	r4, r0, #3
 8005478:	f024 0403 	bic.w	r4, r4, #3
 800547c:	42a0      	cmp	r0, r4
 800547e:	d0f8      	beq.n	8005472 <sbrk_aligned+0x22>
 8005480:	1a21      	subs	r1, r4, r0
 8005482:	4628      	mov	r0, r5
 8005484:	f000 fece 	bl	8006224 <_sbrk_r>
 8005488:	3001      	adds	r0, #1
 800548a:	d1f2      	bne.n	8005472 <sbrk_aligned+0x22>
 800548c:	e7ef      	b.n	800546e <sbrk_aligned+0x1e>
 800548e:	bf00      	nop
 8005490:	20004094 	.word	0x20004094

08005494 <_malloc_r>:
 8005494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005498:	1ccd      	adds	r5, r1, #3
 800549a:	f025 0503 	bic.w	r5, r5, #3
 800549e:	3508      	adds	r5, #8
 80054a0:	2d0c      	cmp	r5, #12
 80054a2:	bf38      	it	cc
 80054a4:	250c      	movcc	r5, #12
 80054a6:	2d00      	cmp	r5, #0
 80054a8:	4606      	mov	r6, r0
 80054aa:	db01      	blt.n	80054b0 <_malloc_r+0x1c>
 80054ac:	42a9      	cmp	r1, r5
 80054ae:	d904      	bls.n	80054ba <_malloc_r+0x26>
 80054b0:	230c      	movs	r3, #12
 80054b2:	6033      	str	r3, [r6, #0]
 80054b4:	2000      	movs	r0, #0
 80054b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005590 <_malloc_r+0xfc>
 80054be:	f000 f927 	bl	8005710 <__malloc_lock>
 80054c2:	f8d8 3000 	ldr.w	r3, [r8]
 80054c6:	461c      	mov	r4, r3
 80054c8:	bb44      	cbnz	r4, 800551c <_malloc_r+0x88>
 80054ca:	4629      	mov	r1, r5
 80054cc:	4630      	mov	r0, r6
 80054ce:	f7ff ffbf 	bl	8005450 <sbrk_aligned>
 80054d2:	1c43      	adds	r3, r0, #1
 80054d4:	4604      	mov	r4, r0
 80054d6:	d158      	bne.n	800558a <_malloc_r+0xf6>
 80054d8:	f8d8 4000 	ldr.w	r4, [r8]
 80054dc:	4627      	mov	r7, r4
 80054de:	2f00      	cmp	r7, #0
 80054e0:	d143      	bne.n	800556a <_malloc_r+0xd6>
 80054e2:	2c00      	cmp	r4, #0
 80054e4:	d04b      	beq.n	800557e <_malloc_r+0xea>
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	4639      	mov	r1, r7
 80054ea:	4630      	mov	r0, r6
 80054ec:	eb04 0903 	add.w	r9, r4, r3
 80054f0:	f000 fe98 	bl	8006224 <_sbrk_r>
 80054f4:	4581      	cmp	r9, r0
 80054f6:	d142      	bne.n	800557e <_malloc_r+0xea>
 80054f8:	6821      	ldr	r1, [r4, #0]
 80054fa:	1a6d      	subs	r5, r5, r1
 80054fc:	4629      	mov	r1, r5
 80054fe:	4630      	mov	r0, r6
 8005500:	f7ff ffa6 	bl	8005450 <sbrk_aligned>
 8005504:	3001      	adds	r0, #1
 8005506:	d03a      	beq.n	800557e <_malloc_r+0xea>
 8005508:	6823      	ldr	r3, [r4, #0]
 800550a:	442b      	add	r3, r5
 800550c:	6023      	str	r3, [r4, #0]
 800550e:	f8d8 3000 	ldr.w	r3, [r8]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	bb62      	cbnz	r2, 8005570 <_malloc_r+0xdc>
 8005516:	f8c8 7000 	str.w	r7, [r8]
 800551a:	e00f      	b.n	800553c <_malloc_r+0xa8>
 800551c:	6822      	ldr	r2, [r4, #0]
 800551e:	1b52      	subs	r2, r2, r5
 8005520:	d420      	bmi.n	8005564 <_malloc_r+0xd0>
 8005522:	2a0b      	cmp	r2, #11
 8005524:	d917      	bls.n	8005556 <_malloc_r+0xc2>
 8005526:	1961      	adds	r1, r4, r5
 8005528:	42a3      	cmp	r3, r4
 800552a:	6025      	str	r5, [r4, #0]
 800552c:	bf18      	it	ne
 800552e:	6059      	strne	r1, [r3, #4]
 8005530:	6863      	ldr	r3, [r4, #4]
 8005532:	bf08      	it	eq
 8005534:	f8c8 1000 	streq.w	r1, [r8]
 8005538:	5162      	str	r2, [r4, r5]
 800553a:	604b      	str	r3, [r1, #4]
 800553c:	4630      	mov	r0, r6
 800553e:	f000 f8ed 	bl	800571c <__malloc_unlock>
 8005542:	f104 000b 	add.w	r0, r4, #11
 8005546:	1d23      	adds	r3, r4, #4
 8005548:	f020 0007 	bic.w	r0, r0, #7
 800554c:	1ac2      	subs	r2, r0, r3
 800554e:	bf1c      	itt	ne
 8005550:	1a1b      	subne	r3, r3, r0
 8005552:	50a3      	strne	r3, [r4, r2]
 8005554:	e7af      	b.n	80054b6 <_malloc_r+0x22>
 8005556:	6862      	ldr	r2, [r4, #4]
 8005558:	42a3      	cmp	r3, r4
 800555a:	bf0c      	ite	eq
 800555c:	f8c8 2000 	streq.w	r2, [r8]
 8005560:	605a      	strne	r2, [r3, #4]
 8005562:	e7eb      	b.n	800553c <_malloc_r+0xa8>
 8005564:	4623      	mov	r3, r4
 8005566:	6864      	ldr	r4, [r4, #4]
 8005568:	e7ae      	b.n	80054c8 <_malloc_r+0x34>
 800556a:	463c      	mov	r4, r7
 800556c:	687f      	ldr	r7, [r7, #4]
 800556e:	e7b6      	b.n	80054de <_malloc_r+0x4a>
 8005570:	461a      	mov	r2, r3
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	42a3      	cmp	r3, r4
 8005576:	d1fb      	bne.n	8005570 <_malloc_r+0xdc>
 8005578:	2300      	movs	r3, #0
 800557a:	6053      	str	r3, [r2, #4]
 800557c:	e7de      	b.n	800553c <_malloc_r+0xa8>
 800557e:	230c      	movs	r3, #12
 8005580:	6033      	str	r3, [r6, #0]
 8005582:	4630      	mov	r0, r6
 8005584:	f000 f8ca 	bl	800571c <__malloc_unlock>
 8005588:	e794      	b.n	80054b4 <_malloc_r+0x20>
 800558a:	6005      	str	r5, [r0, #0]
 800558c:	e7d6      	b.n	800553c <_malloc_r+0xa8>
 800558e:	bf00      	nop
 8005590:	20004098 	.word	0x20004098

08005594 <__ascii_mbtowc>:
 8005594:	b082      	sub	sp, #8
 8005596:	b901      	cbnz	r1, 800559a <__ascii_mbtowc+0x6>
 8005598:	a901      	add	r1, sp, #4
 800559a:	b142      	cbz	r2, 80055ae <__ascii_mbtowc+0x1a>
 800559c:	b14b      	cbz	r3, 80055b2 <__ascii_mbtowc+0x1e>
 800559e:	7813      	ldrb	r3, [r2, #0]
 80055a0:	600b      	str	r3, [r1, #0]
 80055a2:	7812      	ldrb	r2, [r2, #0]
 80055a4:	1e10      	subs	r0, r2, #0
 80055a6:	bf18      	it	ne
 80055a8:	2001      	movne	r0, #1
 80055aa:	b002      	add	sp, #8
 80055ac:	4770      	bx	lr
 80055ae:	4610      	mov	r0, r2
 80055b0:	e7fb      	b.n	80055aa <__ascii_mbtowc+0x16>
 80055b2:	f06f 0001 	mvn.w	r0, #1
 80055b6:	e7f8      	b.n	80055aa <__ascii_mbtowc+0x16>

080055b8 <__sflush_r>:
 80055b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80055bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055c0:	0716      	lsls	r6, r2, #28
 80055c2:	4605      	mov	r5, r0
 80055c4:	460c      	mov	r4, r1
 80055c6:	d454      	bmi.n	8005672 <__sflush_r+0xba>
 80055c8:	684b      	ldr	r3, [r1, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	dc02      	bgt.n	80055d4 <__sflush_r+0x1c>
 80055ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	dd48      	ble.n	8005666 <__sflush_r+0xae>
 80055d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80055d6:	2e00      	cmp	r6, #0
 80055d8:	d045      	beq.n	8005666 <__sflush_r+0xae>
 80055da:	2300      	movs	r3, #0
 80055dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80055e0:	682f      	ldr	r7, [r5, #0]
 80055e2:	6a21      	ldr	r1, [r4, #32]
 80055e4:	602b      	str	r3, [r5, #0]
 80055e6:	d030      	beq.n	800564a <__sflush_r+0x92>
 80055e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80055ea:	89a3      	ldrh	r3, [r4, #12]
 80055ec:	0759      	lsls	r1, r3, #29
 80055ee:	d505      	bpl.n	80055fc <__sflush_r+0x44>
 80055f0:	6863      	ldr	r3, [r4, #4]
 80055f2:	1ad2      	subs	r2, r2, r3
 80055f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80055f6:	b10b      	cbz	r3, 80055fc <__sflush_r+0x44>
 80055f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80055fa:	1ad2      	subs	r2, r2, r3
 80055fc:	2300      	movs	r3, #0
 80055fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005600:	6a21      	ldr	r1, [r4, #32]
 8005602:	4628      	mov	r0, r5
 8005604:	47b0      	blx	r6
 8005606:	1c43      	adds	r3, r0, #1
 8005608:	89a3      	ldrh	r3, [r4, #12]
 800560a:	d106      	bne.n	800561a <__sflush_r+0x62>
 800560c:	6829      	ldr	r1, [r5, #0]
 800560e:	291d      	cmp	r1, #29
 8005610:	d82b      	bhi.n	800566a <__sflush_r+0xb2>
 8005612:	4a2a      	ldr	r2, [pc, #168]	@ (80056bc <__sflush_r+0x104>)
 8005614:	410a      	asrs	r2, r1
 8005616:	07d6      	lsls	r6, r2, #31
 8005618:	d427      	bmi.n	800566a <__sflush_r+0xb2>
 800561a:	2200      	movs	r2, #0
 800561c:	6062      	str	r2, [r4, #4]
 800561e:	04d9      	lsls	r1, r3, #19
 8005620:	6922      	ldr	r2, [r4, #16]
 8005622:	6022      	str	r2, [r4, #0]
 8005624:	d504      	bpl.n	8005630 <__sflush_r+0x78>
 8005626:	1c42      	adds	r2, r0, #1
 8005628:	d101      	bne.n	800562e <__sflush_r+0x76>
 800562a:	682b      	ldr	r3, [r5, #0]
 800562c:	b903      	cbnz	r3, 8005630 <__sflush_r+0x78>
 800562e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005630:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005632:	602f      	str	r7, [r5, #0]
 8005634:	b1b9      	cbz	r1, 8005666 <__sflush_r+0xae>
 8005636:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800563a:	4299      	cmp	r1, r3
 800563c:	d002      	beq.n	8005644 <__sflush_r+0x8c>
 800563e:	4628      	mov	r0, r5
 8005640:	f000 fe44 	bl	80062cc <_free_r>
 8005644:	2300      	movs	r3, #0
 8005646:	6363      	str	r3, [r4, #52]	@ 0x34
 8005648:	e00d      	b.n	8005666 <__sflush_r+0xae>
 800564a:	2301      	movs	r3, #1
 800564c:	4628      	mov	r0, r5
 800564e:	47b0      	blx	r6
 8005650:	4602      	mov	r2, r0
 8005652:	1c50      	adds	r0, r2, #1
 8005654:	d1c9      	bne.n	80055ea <__sflush_r+0x32>
 8005656:	682b      	ldr	r3, [r5, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0c6      	beq.n	80055ea <__sflush_r+0x32>
 800565c:	2b1d      	cmp	r3, #29
 800565e:	d001      	beq.n	8005664 <__sflush_r+0xac>
 8005660:	2b16      	cmp	r3, #22
 8005662:	d11e      	bne.n	80056a2 <__sflush_r+0xea>
 8005664:	602f      	str	r7, [r5, #0]
 8005666:	2000      	movs	r0, #0
 8005668:	e022      	b.n	80056b0 <__sflush_r+0xf8>
 800566a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800566e:	b21b      	sxth	r3, r3
 8005670:	e01b      	b.n	80056aa <__sflush_r+0xf2>
 8005672:	690f      	ldr	r7, [r1, #16]
 8005674:	2f00      	cmp	r7, #0
 8005676:	d0f6      	beq.n	8005666 <__sflush_r+0xae>
 8005678:	0793      	lsls	r3, r2, #30
 800567a:	680e      	ldr	r6, [r1, #0]
 800567c:	bf08      	it	eq
 800567e:	694b      	ldreq	r3, [r1, #20]
 8005680:	600f      	str	r7, [r1, #0]
 8005682:	bf18      	it	ne
 8005684:	2300      	movne	r3, #0
 8005686:	eba6 0807 	sub.w	r8, r6, r7
 800568a:	608b      	str	r3, [r1, #8]
 800568c:	f1b8 0f00 	cmp.w	r8, #0
 8005690:	dde9      	ble.n	8005666 <__sflush_r+0xae>
 8005692:	6a21      	ldr	r1, [r4, #32]
 8005694:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005696:	4643      	mov	r3, r8
 8005698:	463a      	mov	r2, r7
 800569a:	4628      	mov	r0, r5
 800569c:	47b0      	blx	r6
 800569e:	2800      	cmp	r0, #0
 80056a0:	dc08      	bgt.n	80056b4 <__sflush_r+0xfc>
 80056a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056aa:	81a3      	strh	r3, [r4, #12]
 80056ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056b4:	4407      	add	r7, r0
 80056b6:	eba8 0800 	sub.w	r8, r8, r0
 80056ba:	e7e7      	b.n	800568c <__sflush_r+0xd4>
 80056bc:	dfbffffe 	.word	0xdfbffffe

080056c0 <_fflush_r>:
 80056c0:	b538      	push	{r3, r4, r5, lr}
 80056c2:	690b      	ldr	r3, [r1, #16]
 80056c4:	4605      	mov	r5, r0
 80056c6:	460c      	mov	r4, r1
 80056c8:	b913      	cbnz	r3, 80056d0 <_fflush_r+0x10>
 80056ca:	2500      	movs	r5, #0
 80056cc:	4628      	mov	r0, r5
 80056ce:	bd38      	pop	{r3, r4, r5, pc}
 80056d0:	b118      	cbz	r0, 80056da <_fflush_r+0x1a>
 80056d2:	6a03      	ldr	r3, [r0, #32]
 80056d4:	b90b      	cbnz	r3, 80056da <_fflush_r+0x1a>
 80056d6:	f7fd fcb1 	bl	800303c <__sinit>
 80056da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0f3      	beq.n	80056ca <_fflush_r+0xa>
 80056e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80056e4:	07d0      	lsls	r0, r2, #31
 80056e6:	d404      	bmi.n	80056f2 <_fflush_r+0x32>
 80056e8:	0599      	lsls	r1, r3, #22
 80056ea:	d402      	bmi.n	80056f2 <_fflush_r+0x32>
 80056ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056ee:	f7fe fba8 	bl	8003e42 <__retarget_lock_acquire_recursive>
 80056f2:	4628      	mov	r0, r5
 80056f4:	4621      	mov	r1, r4
 80056f6:	f7ff ff5f 	bl	80055b8 <__sflush_r>
 80056fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056fc:	07da      	lsls	r2, r3, #31
 80056fe:	4605      	mov	r5, r0
 8005700:	d4e4      	bmi.n	80056cc <_fflush_r+0xc>
 8005702:	89a3      	ldrh	r3, [r4, #12]
 8005704:	059b      	lsls	r3, r3, #22
 8005706:	d4e1      	bmi.n	80056cc <_fflush_r+0xc>
 8005708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800570a:	f7fe fb9b 	bl	8003e44 <__retarget_lock_release_recursive>
 800570e:	e7dd      	b.n	80056cc <_fflush_r+0xc>

08005710 <__malloc_lock>:
 8005710:	4801      	ldr	r0, [pc, #4]	@ (8005718 <__malloc_lock+0x8>)
 8005712:	f7fe bb96 	b.w	8003e42 <__retarget_lock_acquire_recursive>
 8005716:	bf00      	nop
 8005718:	20004090 	.word	0x20004090

0800571c <__malloc_unlock>:
 800571c:	4801      	ldr	r0, [pc, #4]	@ (8005724 <__malloc_unlock+0x8>)
 800571e:	f7fe bb91 	b.w	8003e44 <__retarget_lock_release_recursive>
 8005722:	bf00      	nop
 8005724:	20004090 	.word	0x20004090

08005728 <_Balloc>:
 8005728:	b570      	push	{r4, r5, r6, lr}
 800572a:	69c6      	ldr	r6, [r0, #28]
 800572c:	4604      	mov	r4, r0
 800572e:	460d      	mov	r5, r1
 8005730:	b976      	cbnz	r6, 8005750 <_Balloc+0x28>
 8005732:	2010      	movs	r0, #16
 8005734:	f7ff fe84 	bl	8005440 <malloc>
 8005738:	4602      	mov	r2, r0
 800573a:	61e0      	str	r0, [r4, #28]
 800573c:	b920      	cbnz	r0, 8005748 <_Balloc+0x20>
 800573e:	4b18      	ldr	r3, [pc, #96]	@ (80057a0 <_Balloc+0x78>)
 8005740:	4818      	ldr	r0, [pc, #96]	@ (80057a4 <_Balloc+0x7c>)
 8005742:	216b      	movs	r1, #107	@ 0x6b
 8005744:	f000 fd90 	bl	8006268 <__assert_func>
 8005748:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800574c:	6006      	str	r6, [r0, #0]
 800574e:	60c6      	str	r6, [r0, #12]
 8005750:	69e6      	ldr	r6, [r4, #28]
 8005752:	68f3      	ldr	r3, [r6, #12]
 8005754:	b183      	cbz	r3, 8005778 <_Balloc+0x50>
 8005756:	69e3      	ldr	r3, [r4, #28]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800575e:	b9b8      	cbnz	r0, 8005790 <_Balloc+0x68>
 8005760:	2101      	movs	r1, #1
 8005762:	fa01 f605 	lsl.w	r6, r1, r5
 8005766:	1d72      	adds	r2, r6, #5
 8005768:	0092      	lsls	r2, r2, #2
 800576a:	4620      	mov	r0, r4
 800576c:	f000 fd9a 	bl	80062a4 <_calloc_r>
 8005770:	b160      	cbz	r0, 800578c <_Balloc+0x64>
 8005772:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005776:	e00e      	b.n	8005796 <_Balloc+0x6e>
 8005778:	2221      	movs	r2, #33	@ 0x21
 800577a:	2104      	movs	r1, #4
 800577c:	4620      	mov	r0, r4
 800577e:	f000 fd91 	bl	80062a4 <_calloc_r>
 8005782:	69e3      	ldr	r3, [r4, #28]
 8005784:	60f0      	str	r0, [r6, #12]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1e4      	bne.n	8005756 <_Balloc+0x2e>
 800578c:	2000      	movs	r0, #0
 800578e:	bd70      	pop	{r4, r5, r6, pc}
 8005790:	6802      	ldr	r2, [r0, #0]
 8005792:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005796:	2300      	movs	r3, #0
 8005798:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800579c:	e7f7      	b.n	800578e <_Balloc+0x66>
 800579e:	bf00      	nop
 80057a0:	08006ab6 	.word	0x08006ab6
 80057a4:	08006ba7 	.word	0x08006ba7

080057a8 <_Bfree>:
 80057a8:	b570      	push	{r4, r5, r6, lr}
 80057aa:	69c6      	ldr	r6, [r0, #28]
 80057ac:	4605      	mov	r5, r0
 80057ae:	460c      	mov	r4, r1
 80057b0:	b976      	cbnz	r6, 80057d0 <_Bfree+0x28>
 80057b2:	2010      	movs	r0, #16
 80057b4:	f7ff fe44 	bl	8005440 <malloc>
 80057b8:	4602      	mov	r2, r0
 80057ba:	61e8      	str	r0, [r5, #28]
 80057bc:	b920      	cbnz	r0, 80057c8 <_Bfree+0x20>
 80057be:	4b09      	ldr	r3, [pc, #36]	@ (80057e4 <_Bfree+0x3c>)
 80057c0:	4809      	ldr	r0, [pc, #36]	@ (80057e8 <_Bfree+0x40>)
 80057c2:	218f      	movs	r1, #143	@ 0x8f
 80057c4:	f000 fd50 	bl	8006268 <__assert_func>
 80057c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80057cc:	6006      	str	r6, [r0, #0]
 80057ce:	60c6      	str	r6, [r0, #12]
 80057d0:	b13c      	cbz	r4, 80057e2 <_Bfree+0x3a>
 80057d2:	69eb      	ldr	r3, [r5, #28]
 80057d4:	6862      	ldr	r2, [r4, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057dc:	6021      	str	r1, [r4, #0]
 80057de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80057e2:	bd70      	pop	{r4, r5, r6, pc}
 80057e4:	08006ab6 	.word	0x08006ab6
 80057e8:	08006ba7 	.word	0x08006ba7

080057ec <__multadd>:
 80057ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057f0:	690d      	ldr	r5, [r1, #16]
 80057f2:	4607      	mov	r7, r0
 80057f4:	460c      	mov	r4, r1
 80057f6:	461e      	mov	r6, r3
 80057f8:	f101 0c14 	add.w	ip, r1, #20
 80057fc:	2000      	movs	r0, #0
 80057fe:	f8dc 3000 	ldr.w	r3, [ip]
 8005802:	b299      	uxth	r1, r3
 8005804:	fb02 6101 	mla	r1, r2, r1, r6
 8005808:	0c1e      	lsrs	r6, r3, #16
 800580a:	0c0b      	lsrs	r3, r1, #16
 800580c:	fb02 3306 	mla	r3, r2, r6, r3
 8005810:	b289      	uxth	r1, r1
 8005812:	3001      	adds	r0, #1
 8005814:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005818:	4285      	cmp	r5, r0
 800581a:	f84c 1b04 	str.w	r1, [ip], #4
 800581e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005822:	dcec      	bgt.n	80057fe <__multadd+0x12>
 8005824:	b30e      	cbz	r6, 800586a <__multadd+0x7e>
 8005826:	68a3      	ldr	r3, [r4, #8]
 8005828:	42ab      	cmp	r3, r5
 800582a:	dc19      	bgt.n	8005860 <__multadd+0x74>
 800582c:	6861      	ldr	r1, [r4, #4]
 800582e:	4638      	mov	r0, r7
 8005830:	3101      	adds	r1, #1
 8005832:	f7ff ff79 	bl	8005728 <_Balloc>
 8005836:	4680      	mov	r8, r0
 8005838:	b928      	cbnz	r0, 8005846 <__multadd+0x5a>
 800583a:	4602      	mov	r2, r0
 800583c:	4b0c      	ldr	r3, [pc, #48]	@ (8005870 <__multadd+0x84>)
 800583e:	480d      	ldr	r0, [pc, #52]	@ (8005874 <__multadd+0x88>)
 8005840:	21ba      	movs	r1, #186	@ 0xba
 8005842:	f000 fd11 	bl	8006268 <__assert_func>
 8005846:	6922      	ldr	r2, [r4, #16]
 8005848:	3202      	adds	r2, #2
 800584a:	f104 010c 	add.w	r1, r4, #12
 800584e:	0092      	lsls	r2, r2, #2
 8005850:	300c      	adds	r0, #12
 8005852:	f7fe faf8 	bl	8003e46 <memcpy>
 8005856:	4621      	mov	r1, r4
 8005858:	4638      	mov	r0, r7
 800585a:	f7ff ffa5 	bl	80057a8 <_Bfree>
 800585e:	4644      	mov	r4, r8
 8005860:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005864:	3501      	adds	r5, #1
 8005866:	615e      	str	r6, [r3, #20]
 8005868:	6125      	str	r5, [r4, #16]
 800586a:	4620      	mov	r0, r4
 800586c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005870:	08006b25 	.word	0x08006b25
 8005874:	08006ba7 	.word	0x08006ba7

08005878 <__s2b>:
 8005878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800587c:	460c      	mov	r4, r1
 800587e:	4615      	mov	r5, r2
 8005880:	461f      	mov	r7, r3
 8005882:	2209      	movs	r2, #9
 8005884:	3308      	adds	r3, #8
 8005886:	4606      	mov	r6, r0
 8005888:	fb93 f3f2 	sdiv	r3, r3, r2
 800588c:	2100      	movs	r1, #0
 800588e:	2201      	movs	r2, #1
 8005890:	429a      	cmp	r2, r3
 8005892:	db09      	blt.n	80058a8 <__s2b+0x30>
 8005894:	4630      	mov	r0, r6
 8005896:	f7ff ff47 	bl	8005728 <_Balloc>
 800589a:	b940      	cbnz	r0, 80058ae <__s2b+0x36>
 800589c:	4602      	mov	r2, r0
 800589e:	4b19      	ldr	r3, [pc, #100]	@ (8005904 <__s2b+0x8c>)
 80058a0:	4819      	ldr	r0, [pc, #100]	@ (8005908 <__s2b+0x90>)
 80058a2:	21d3      	movs	r1, #211	@ 0xd3
 80058a4:	f000 fce0 	bl	8006268 <__assert_func>
 80058a8:	0052      	lsls	r2, r2, #1
 80058aa:	3101      	adds	r1, #1
 80058ac:	e7f0      	b.n	8005890 <__s2b+0x18>
 80058ae:	9b08      	ldr	r3, [sp, #32]
 80058b0:	6143      	str	r3, [r0, #20]
 80058b2:	2d09      	cmp	r5, #9
 80058b4:	f04f 0301 	mov.w	r3, #1
 80058b8:	6103      	str	r3, [r0, #16]
 80058ba:	dd16      	ble.n	80058ea <__s2b+0x72>
 80058bc:	f104 0909 	add.w	r9, r4, #9
 80058c0:	46c8      	mov	r8, r9
 80058c2:	442c      	add	r4, r5
 80058c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80058c8:	4601      	mov	r1, r0
 80058ca:	3b30      	subs	r3, #48	@ 0x30
 80058cc:	220a      	movs	r2, #10
 80058ce:	4630      	mov	r0, r6
 80058d0:	f7ff ff8c 	bl	80057ec <__multadd>
 80058d4:	45a0      	cmp	r8, r4
 80058d6:	d1f5      	bne.n	80058c4 <__s2b+0x4c>
 80058d8:	f1a5 0408 	sub.w	r4, r5, #8
 80058dc:	444c      	add	r4, r9
 80058de:	1b2d      	subs	r5, r5, r4
 80058e0:	1963      	adds	r3, r4, r5
 80058e2:	42bb      	cmp	r3, r7
 80058e4:	db04      	blt.n	80058f0 <__s2b+0x78>
 80058e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ea:	340a      	adds	r4, #10
 80058ec:	2509      	movs	r5, #9
 80058ee:	e7f6      	b.n	80058de <__s2b+0x66>
 80058f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80058f4:	4601      	mov	r1, r0
 80058f6:	3b30      	subs	r3, #48	@ 0x30
 80058f8:	220a      	movs	r2, #10
 80058fa:	4630      	mov	r0, r6
 80058fc:	f7ff ff76 	bl	80057ec <__multadd>
 8005900:	e7ee      	b.n	80058e0 <__s2b+0x68>
 8005902:	bf00      	nop
 8005904:	08006b25 	.word	0x08006b25
 8005908:	08006ba7 	.word	0x08006ba7

0800590c <__hi0bits>:
 800590c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005910:	4603      	mov	r3, r0
 8005912:	bf36      	itet	cc
 8005914:	0403      	lslcc	r3, r0, #16
 8005916:	2000      	movcs	r0, #0
 8005918:	2010      	movcc	r0, #16
 800591a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800591e:	bf3c      	itt	cc
 8005920:	021b      	lslcc	r3, r3, #8
 8005922:	3008      	addcc	r0, #8
 8005924:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005928:	bf3c      	itt	cc
 800592a:	011b      	lslcc	r3, r3, #4
 800592c:	3004      	addcc	r0, #4
 800592e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005932:	bf3c      	itt	cc
 8005934:	009b      	lslcc	r3, r3, #2
 8005936:	3002      	addcc	r0, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	db05      	blt.n	8005948 <__hi0bits+0x3c>
 800593c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005940:	f100 0001 	add.w	r0, r0, #1
 8005944:	bf08      	it	eq
 8005946:	2020      	moveq	r0, #32
 8005948:	4770      	bx	lr

0800594a <__lo0bits>:
 800594a:	6803      	ldr	r3, [r0, #0]
 800594c:	4602      	mov	r2, r0
 800594e:	f013 0007 	ands.w	r0, r3, #7
 8005952:	d00b      	beq.n	800596c <__lo0bits+0x22>
 8005954:	07d9      	lsls	r1, r3, #31
 8005956:	d421      	bmi.n	800599c <__lo0bits+0x52>
 8005958:	0798      	lsls	r0, r3, #30
 800595a:	bf49      	itett	mi
 800595c:	085b      	lsrmi	r3, r3, #1
 800595e:	089b      	lsrpl	r3, r3, #2
 8005960:	2001      	movmi	r0, #1
 8005962:	6013      	strmi	r3, [r2, #0]
 8005964:	bf5c      	itt	pl
 8005966:	6013      	strpl	r3, [r2, #0]
 8005968:	2002      	movpl	r0, #2
 800596a:	4770      	bx	lr
 800596c:	b299      	uxth	r1, r3
 800596e:	b909      	cbnz	r1, 8005974 <__lo0bits+0x2a>
 8005970:	0c1b      	lsrs	r3, r3, #16
 8005972:	2010      	movs	r0, #16
 8005974:	b2d9      	uxtb	r1, r3
 8005976:	b909      	cbnz	r1, 800597c <__lo0bits+0x32>
 8005978:	3008      	adds	r0, #8
 800597a:	0a1b      	lsrs	r3, r3, #8
 800597c:	0719      	lsls	r1, r3, #28
 800597e:	bf04      	itt	eq
 8005980:	091b      	lsreq	r3, r3, #4
 8005982:	3004      	addeq	r0, #4
 8005984:	0799      	lsls	r1, r3, #30
 8005986:	bf04      	itt	eq
 8005988:	089b      	lsreq	r3, r3, #2
 800598a:	3002      	addeq	r0, #2
 800598c:	07d9      	lsls	r1, r3, #31
 800598e:	d403      	bmi.n	8005998 <__lo0bits+0x4e>
 8005990:	085b      	lsrs	r3, r3, #1
 8005992:	f100 0001 	add.w	r0, r0, #1
 8005996:	d003      	beq.n	80059a0 <__lo0bits+0x56>
 8005998:	6013      	str	r3, [r2, #0]
 800599a:	4770      	bx	lr
 800599c:	2000      	movs	r0, #0
 800599e:	4770      	bx	lr
 80059a0:	2020      	movs	r0, #32
 80059a2:	4770      	bx	lr

080059a4 <__i2b>:
 80059a4:	b510      	push	{r4, lr}
 80059a6:	460c      	mov	r4, r1
 80059a8:	2101      	movs	r1, #1
 80059aa:	f7ff febd 	bl	8005728 <_Balloc>
 80059ae:	4602      	mov	r2, r0
 80059b0:	b928      	cbnz	r0, 80059be <__i2b+0x1a>
 80059b2:	4b05      	ldr	r3, [pc, #20]	@ (80059c8 <__i2b+0x24>)
 80059b4:	4805      	ldr	r0, [pc, #20]	@ (80059cc <__i2b+0x28>)
 80059b6:	f240 1145 	movw	r1, #325	@ 0x145
 80059ba:	f000 fc55 	bl	8006268 <__assert_func>
 80059be:	2301      	movs	r3, #1
 80059c0:	6144      	str	r4, [r0, #20]
 80059c2:	6103      	str	r3, [r0, #16]
 80059c4:	bd10      	pop	{r4, pc}
 80059c6:	bf00      	nop
 80059c8:	08006b25 	.word	0x08006b25
 80059cc:	08006ba7 	.word	0x08006ba7

080059d0 <__multiply>:
 80059d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d4:	4614      	mov	r4, r2
 80059d6:	690a      	ldr	r2, [r1, #16]
 80059d8:	6923      	ldr	r3, [r4, #16]
 80059da:	429a      	cmp	r2, r3
 80059dc:	bfa8      	it	ge
 80059de:	4623      	movge	r3, r4
 80059e0:	460f      	mov	r7, r1
 80059e2:	bfa4      	itt	ge
 80059e4:	460c      	movge	r4, r1
 80059e6:	461f      	movge	r7, r3
 80059e8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80059ec:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80059f0:	68a3      	ldr	r3, [r4, #8]
 80059f2:	6861      	ldr	r1, [r4, #4]
 80059f4:	eb0a 0609 	add.w	r6, sl, r9
 80059f8:	42b3      	cmp	r3, r6
 80059fa:	b085      	sub	sp, #20
 80059fc:	bfb8      	it	lt
 80059fe:	3101      	addlt	r1, #1
 8005a00:	f7ff fe92 	bl	8005728 <_Balloc>
 8005a04:	b930      	cbnz	r0, 8005a14 <__multiply+0x44>
 8005a06:	4602      	mov	r2, r0
 8005a08:	4b44      	ldr	r3, [pc, #272]	@ (8005b1c <__multiply+0x14c>)
 8005a0a:	4845      	ldr	r0, [pc, #276]	@ (8005b20 <__multiply+0x150>)
 8005a0c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005a10:	f000 fc2a 	bl	8006268 <__assert_func>
 8005a14:	f100 0514 	add.w	r5, r0, #20
 8005a18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005a1c:	462b      	mov	r3, r5
 8005a1e:	2200      	movs	r2, #0
 8005a20:	4543      	cmp	r3, r8
 8005a22:	d321      	bcc.n	8005a68 <__multiply+0x98>
 8005a24:	f107 0114 	add.w	r1, r7, #20
 8005a28:	f104 0214 	add.w	r2, r4, #20
 8005a2c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005a30:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005a34:	9302      	str	r3, [sp, #8]
 8005a36:	1b13      	subs	r3, r2, r4
 8005a38:	3b15      	subs	r3, #21
 8005a3a:	f023 0303 	bic.w	r3, r3, #3
 8005a3e:	3304      	adds	r3, #4
 8005a40:	f104 0715 	add.w	r7, r4, #21
 8005a44:	42ba      	cmp	r2, r7
 8005a46:	bf38      	it	cc
 8005a48:	2304      	movcc	r3, #4
 8005a4a:	9301      	str	r3, [sp, #4]
 8005a4c:	9b02      	ldr	r3, [sp, #8]
 8005a4e:	9103      	str	r1, [sp, #12]
 8005a50:	428b      	cmp	r3, r1
 8005a52:	d80c      	bhi.n	8005a6e <__multiply+0x9e>
 8005a54:	2e00      	cmp	r6, #0
 8005a56:	dd03      	ble.n	8005a60 <__multiply+0x90>
 8005a58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d05b      	beq.n	8005b18 <__multiply+0x148>
 8005a60:	6106      	str	r6, [r0, #16]
 8005a62:	b005      	add	sp, #20
 8005a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a68:	f843 2b04 	str.w	r2, [r3], #4
 8005a6c:	e7d8      	b.n	8005a20 <__multiply+0x50>
 8005a6e:	f8b1 a000 	ldrh.w	sl, [r1]
 8005a72:	f1ba 0f00 	cmp.w	sl, #0
 8005a76:	d024      	beq.n	8005ac2 <__multiply+0xf2>
 8005a78:	f104 0e14 	add.w	lr, r4, #20
 8005a7c:	46a9      	mov	r9, r5
 8005a7e:	f04f 0c00 	mov.w	ip, #0
 8005a82:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005a86:	f8d9 3000 	ldr.w	r3, [r9]
 8005a8a:	fa1f fb87 	uxth.w	fp, r7
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	fb0a 330b 	mla	r3, sl, fp, r3
 8005a94:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005a98:	f8d9 7000 	ldr.w	r7, [r9]
 8005a9c:	4463      	add	r3, ip
 8005a9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005aa2:	fb0a c70b 	mla	r7, sl, fp, ip
 8005aa6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005ab0:	4572      	cmp	r2, lr
 8005ab2:	f849 3b04 	str.w	r3, [r9], #4
 8005ab6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005aba:	d8e2      	bhi.n	8005a82 <__multiply+0xb2>
 8005abc:	9b01      	ldr	r3, [sp, #4]
 8005abe:	f845 c003 	str.w	ip, [r5, r3]
 8005ac2:	9b03      	ldr	r3, [sp, #12]
 8005ac4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005ac8:	3104      	adds	r1, #4
 8005aca:	f1b9 0f00 	cmp.w	r9, #0
 8005ace:	d021      	beq.n	8005b14 <__multiply+0x144>
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	f104 0c14 	add.w	ip, r4, #20
 8005ad6:	46ae      	mov	lr, r5
 8005ad8:	f04f 0a00 	mov.w	sl, #0
 8005adc:	f8bc b000 	ldrh.w	fp, [ip]
 8005ae0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005ae4:	fb09 770b 	mla	r7, r9, fp, r7
 8005ae8:	4457      	add	r7, sl
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005af0:	f84e 3b04 	str.w	r3, [lr], #4
 8005af4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005af8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005afc:	f8be 3000 	ldrh.w	r3, [lr]
 8005b00:	fb09 330a 	mla	r3, r9, sl, r3
 8005b04:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005b08:	4562      	cmp	r2, ip
 8005b0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b0e:	d8e5      	bhi.n	8005adc <__multiply+0x10c>
 8005b10:	9f01      	ldr	r7, [sp, #4]
 8005b12:	51eb      	str	r3, [r5, r7]
 8005b14:	3504      	adds	r5, #4
 8005b16:	e799      	b.n	8005a4c <__multiply+0x7c>
 8005b18:	3e01      	subs	r6, #1
 8005b1a:	e79b      	b.n	8005a54 <__multiply+0x84>
 8005b1c:	08006b25 	.word	0x08006b25
 8005b20:	08006ba7 	.word	0x08006ba7

08005b24 <__pow5mult>:
 8005b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b28:	4615      	mov	r5, r2
 8005b2a:	f012 0203 	ands.w	r2, r2, #3
 8005b2e:	4607      	mov	r7, r0
 8005b30:	460e      	mov	r6, r1
 8005b32:	d007      	beq.n	8005b44 <__pow5mult+0x20>
 8005b34:	4c25      	ldr	r4, [pc, #148]	@ (8005bcc <__pow5mult+0xa8>)
 8005b36:	3a01      	subs	r2, #1
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005b3e:	f7ff fe55 	bl	80057ec <__multadd>
 8005b42:	4606      	mov	r6, r0
 8005b44:	10ad      	asrs	r5, r5, #2
 8005b46:	d03d      	beq.n	8005bc4 <__pow5mult+0xa0>
 8005b48:	69fc      	ldr	r4, [r7, #28]
 8005b4a:	b97c      	cbnz	r4, 8005b6c <__pow5mult+0x48>
 8005b4c:	2010      	movs	r0, #16
 8005b4e:	f7ff fc77 	bl	8005440 <malloc>
 8005b52:	4602      	mov	r2, r0
 8005b54:	61f8      	str	r0, [r7, #28]
 8005b56:	b928      	cbnz	r0, 8005b64 <__pow5mult+0x40>
 8005b58:	4b1d      	ldr	r3, [pc, #116]	@ (8005bd0 <__pow5mult+0xac>)
 8005b5a:	481e      	ldr	r0, [pc, #120]	@ (8005bd4 <__pow5mult+0xb0>)
 8005b5c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005b60:	f000 fb82 	bl	8006268 <__assert_func>
 8005b64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b68:	6004      	str	r4, [r0, #0]
 8005b6a:	60c4      	str	r4, [r0, #12]
 8005b6c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005b70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005b74:	b94c      	cbnz	r4, 8005b8a <__pow5mult+0x66>
 8005b76:	f240 2171 	movw	r1, #625	@ 0x271
 8005b7a:	4638      	mov	r0, r7
 8005b7c:	f7ff ff12 	bl	80059a4 <__i2b>
 8005b80:	2300      	movs	r3, #0
 8005b82:	f8c8 0008 	str.w	r0, [r8, #8]
 8005b86:	4604      	mov	r4, r0
 8005b88:	6003      	str	r3, [r0, #0]
 8005b8a:	f04f 0900 	mov.w	r9, #0
 8005b8e:	07eb      	lsls	r3, r5, #31
 8005b90:	d50a      	bpl.n	8005ba8 <__pow5mult+0x84>
 8005b92:	4631      	mov	r1, r6
 8005b94:	4622      	mov	r2, r4
 8005b96:	4638      	mov	r0, r7
 8005b98:	f7ff ff1a 	bl	80059d0 <__multiply>
 8005b9c:	4631      	mov	r1, r6
 8005b9e:	4680      	mov	r8, r0
 8005ba0:	4638      	mov	r0, r7
 8005ba2:	f7ff fe01 	bl	80057a8 <_Bfree>
 8005ba6:	4646      	mov	r6, r8
 8005ba8:	106d      	asrs	r5, r5, #1
 8005baa:	d00b      	beq.n	8005bc4 <__pow5mult+0xa0>
 8005bac:	6820      	ldr	r0, [r4, #0]
 8005bae:	b938      	cbnz	r0, 8005bc0 <__pow5mult+0x9c>
 8005bb0:	4622      	mov	r2, r4
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	4638      	mov	r0, r7
 8005bb6:	f7ff ff0b 	bl	80059d0 <__multiply>
 8005bba:	6020      	str	r0, [r4, #0]
 8005bbc:	f8c0 9000 	str.w	r9, [r0]
 8005bc0:	4604      	mov	r4, r0
 8005bc2:	e7e4      	b.n	8005b8e <__pow5mult+0x6a>
 8005bc4:	4630      	mov	r0, r6
 8005bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bca:	bf00      	nop
 8005bcc:	08006c00 	.word	0x08006c00
 8005bd0:	08006ab6 	.word	0x08006ab6
 8005bd4:	08006ba7 	.word	0x08006ba7

08005bd8 <__lshift>:
 8005bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bdc:	460c      	mov	r4, r1
 8005bde:	6849      	ldr	r1, [r1, #4]
 8005be0:	6923      	ldr	r3, [r4, #16]
 8005be2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005be6:	68a3      	ldr	r3, [r4, #8]
 8005be8:	4607      	mov	r7, r0
 8005bea:	4691      	mov	r9, r2
 8005bec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005bf0:	f108 0601 	add.w	r6, r8, #1
 8005bf4:	42b3      	cmp	r3, r6
 8005bf6:	db0b      	blt.n	8005c10 <__lshift+0x38>
 8005bf8:	4638      	mov	r0, r7
 8005bfa:	f7ff fd95 	bl	8005728 <_Balloc>
 8005bfe:	4605      	mov	r5, r0
 8005c00:	b948      	cbnz	r0, 8005c16 <__lshift+0x3e>
 8005c02:	4602      	mov	r2, r0
 8005c04:	4b28      	ldr	r3, [pc, #160]	@ (8005ca8 <__lshift+0xd0>)
 8005c06:	4829      	ldr	r0, [pc, #164]	@ (8005cac <__lshift+0xd4>)
 8005c08:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005c0c:	f000 fb2c 	bl	8006268 <__assert_func>
 8005c10:	3101      	adds	r1, #1
 8005c12:	005b      	lsls	r3, r3, #1
 8005c14:	e7ee      	b.n	8005bf4 <__lshift+0x1c>
 8005c16:	2300      	movs	r3, #0
 8005c18:	f100 0114 	add.w	r1, r0, #20
 8005c1c:	f100 0210 	add.w	r2, r0, #16
 8005c20:	4618      	mov	r0, r3
 8005c22:	4553      	cmp	r3, sl
 8005c24:	db33      	blt.n	8005c8e <__lshift+0xb6>
 8005c26:	6920      	ldr	r0, [r4, #16]
 8005c28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005c2c:	f104 0314 	add.w	r3, r4, #20
 8005c30:	f019 091f 	ands.w	r9, r9, #31
 8005c34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005c38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005c3c:	d02b      	beq.n	8005c96 <__lshift+0xbe>
 8005c3e:	f1c9 0e20 	rsb	lr, r9, #32
 8005c42:	468a      	mov	sl, r1
 8005c44:	2200      	movs	r2, #0
 8005c46:	6818      	ldr	r0, [r3, #0]
 8005c48:	fa00 f009 	lsl.w	r0, r0, r9
 8005c4c:	4310      	orrs	r0, r2
 8005c4e:	f84a 0b04 	str.w	r0, [sl], #4
 8005c52:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c56:	459c      	cmp	ip, r3
 8005c58:	fa22 f20e 	lsr.w	r2, r2, lr
 8005c5c:	d8f3      	bhi.n	8005c46 <__lshift+0x6e>
 8005c5e:	ebac 0304 	sub.w	r3, ip, r4
 8005c62:	3b15      	subs	r3, #21
 8005c64:	f023 0303 	bic.w	r3, r3, #3
 8005c68:	3304      	adds	r3, #4
 8005c6a:	f104 0015 	add.w	r0, r4, #21
 8005c6e:	4584      	cmp	ip, r0
 8005c70:	bf38      	it	cc
 8005c72:	2304      	movcc	r3, #4
 8005c74:	50ca      	str	r2, [r1, r3]
 8005c76:	b10a      	cbz	r2, 8005c7c <__lshift+0xa4>
 8005c78:	f108 0602 	add.w	r6, r8, #2
 8005c7c:	3e01      	subs	r6, #1
 8005c7e:	4638      	mov	r0, r7
 8005c80:	612e      	str	r6, [r5, #16]
 8005c82:	4621      	mov	r1, r4
 8005c84:	f7ff fd90 	bl	80057a8 <_Bfree>
 8005c88:	4628      	mov	r0, r5
 8005c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005c92:	3301      	adds	r3, #1
 8005c94:	e7c5      	b.n	8005c22 <__lshift+0x4a>
 8005c96:	3904      	subs	r1, #4
 8005c98:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ca0:	459c      	cmp	ip, r3
 8005ca2:	d8f9      	bhi.n	8005c98 <__lshift+0xc0>
 8005ca4:	e7ea      	b.n	8005c7c <__lshift+0xa4>
 8005ca6:	bf00      	nop
 8005ca8:	08006b25 	.word	0x08006b25
 8005cac:	08006ba7 	.word	0x08006ba7

08005cb0 <__mcmp>:
 8005cb0:	690a      	ldr	r2, [r1, #16]
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	6900      	ldr	r0, [r0, #16]
 8005cb6:	1a80      	subs	r0, r0, r2
 8005cb8:	b530      	push	{r4, r5, lr}
 8005cba:	d10e      	bne.n	8005cda <__mcmp+0x2a>
 8005cbc:	3314      	adds	r3, #20
 8005cbe:	3114      	adds	r1, #20
 8005cc0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005cc4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005cc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005ccc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005cd0:	4295      	cmp	r5, r2
 8005cd2:	d003      	beq.n	8005cdc <__mcmp+0x2c>
 8005cd4:	d205      	bcs.n	8005ce2 <__mcmp+0x32>
 8005cd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005cda:	bd30      	pop	{r4, r5, pc}
 8005cdc:	42a3      	cmp	r3, r4
 8005cde:	d3f3      	bcc.n	8005cc8 <__mcmp+0x18>
 8005ce0:	e7fb      	b.n	8005cda <__mcmp+0x2a>
 8005ce2:	2001      	movs	r0, #1
 8005ce4:	e7f9      	b.n	8005cda <__mcmp+0x2a>
	...

08005ce8 <__mdiff>:
 8005ce8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cec:	4689      	mov	r9, r1
 8005cee:	4606      	mov	r6, r0
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	4648      	mov	r0, r9
 8005cf4:	4614      	mov	r4, r2
 8005cf6:	f7ff ffdb 	bl	8005cb0 <__mcmp>
 8005cfa:	1e05      	subs	r5, r0, #0
 8005cfc:	d112      	bne.n	8005d24 <__mdiff+0x3c>
 8005cfe:	4629      	mov	r1, r5
 8005d00:	4630      	mov	r0, r6
 8005d02:	f7ff fd11 	bl	8005728 <_Balloc>
 8005d06:	4602      	mov	r2, r0
 8005d08:	b928      	cbnz	r0, 8005d16 <__mdiff+0x2e>
 8005d0a:	4b3f      	ldr	r3, [pc, #252]	@ (8005e08 <__mdiff+0x120>)
 8005d0c:	f240 2137 	movw	r1, #567	@ 0x237
 8005d10:	483e      	ldr	r0, [pc, #248]	@ (8005e0c <__mdiff+0x124>)
 8005d12:	f000 faa9 	bl	8006268 <__assert_func>
 8005d16:	2301      	movs	r3, #1
 8005d18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	b003      	add	sp, #12
 8005d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d24:	bfbc      	itt	lt
 8005d26:	464b      	movlt	r3, r9
 8005d28:	46a1      	movlt	r9, r4
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005d30:	bfba      	itte	lt
 8005d32:	461c      	movlt	r4, r3
 8005d34:	2501      	movlt	r5, #1
 8005d36:	2500      	movge	r5, #0
 8005d38:	f7ff fcf6 	bl	8005728 <_Balloc>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	b918      	cbnz	r0, 8005d48 <__mdiff+0x60>
 8005d40:	4b31      	ldr	r3, [pc, #196]	@ (8005e08 <__mdiff+0x120>)
 8005d42:	f240 2145 	movw	r1, #581	@ 0x245
 8005d46:	e7e3      	b.n	8005d10 <__mdiff+0x28>
 8005d48:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005d4c:	6926      	ldr	r6, [r4, #16]
 8005d4e:	60c5      	str	r5, [r0, #12]
 8005d50:	f109 0310 	add.w	r3, r9, #16
 8005d54:	f109 0514 	add.w	r5, r9, #20
 8005d58:	f104 0e14 	add.w	lr, r4, #20
 8005d5c:	f100 0b14 	add.w	fp, r0, #20
 8005d60:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005d64:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005d68:	9301      	str	r3, [sp, #4]
 8005d6a:	46d9      	mov	r9, fp
 8005d6c:	f04f 0c00 	mov.w	ip, #0
 8005d70:	9b01      	ldr	r3, [sp, #4]
 8005d72:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005d76:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005d7a:	9301      	str	r3, [sp, #4]
 8005d7c:	fa1f f38a 	uxth.w	r3, sl
 8005d80:	4619      	mov	r1, r3
 8005d82:	b283      	uxth	r3, r0
 8005d84:	1acb      	subs	r3, r1, r3
 8005d86:	0c00      	lsrs	r0, r0, #16
 8005d88:	4463      	add	r3, ip
 8005d8a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005d8e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005d98:	4576      	cmp	r6, lr
 8005d9a:	f849 3b04 	str.w	r3, [r9], #4
 8005d9e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005da2:	d8e5      	bhi.n	8005d70 <__mdiff+0x88>
 8005da4:	1b33      	subs	r3, r6, r4
 8005da6:	3b15      	subs	r3, #21
 8005da8:	f023 0303 	bic.w	r3, r3, #3
 8005dac:	3415      	adds	r4, #21
 8005dae:	3304      	adds	r3, #4
 8005db0:	42a6      	cmp	r6, r4
 8005db2:	bf38      	it	cc
 8005db4:	2304      	movcc	r3, #4
 8005db6:	441d      	add	r5, r3
 8005db8:	445b      	add	r3, fp
 8005dba:	461e      	mov	r6, r3
 8005dbc:	462c      	mov	r4, r5
 8005dbe:	4544      	cmp	r4, r8
 8005dc0:	d30e      	bcc.n	8005de0 <__mdiff+0xf8>
 8005dc2:	f108 0103 	add.w	r1, r8, #3
 8005dc6:	1b49      	subs	r1, r1, r5
 8005dc8:	f021 0103 	bic.w	r1, r1, #3
 8005dcc:	3d03      	subs	r5, #3
 8005dce:	45a8      	cmp	r8, r5
 8005dd0:	bf38      	it	cc
 8005dd2:	2100      	movcc	r1, #0
 8005dd4:	440b      	add	r3, r1
 8005dd6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005dda:	b191      	cbz	r1, 8005e02 <__mdiff+0x11a>
 8005ddc:	6117      	str	r7, [r2, #16]
 8005dde:	e79d      	b.n	8005d1c <__mdiff+0x34>
 8005de0:	f854 1b04 	ldr.w	r1, [r4], #4
 8005de4:	46e6      	mov	lr, ip
 8005de6:	0c08      	lsrs	r0, r1, #16
 8005de8:	fa1c fc81 	uxtah	ip, ip, r1
 8005dec:	4471      	add	r1, lr
 8005dee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005df2:	b289      	uxth	r1, r1
 8005df4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005df8:	f846 1b04 	str.w	r1, [r6], #4
 8005dfc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005e00:	e7dd      	b.n	8005dbe <__mdiff+0xd6>
 8005e02:	3f01      	subs	r7, #1
 8005e04:	e7e7      	b.n	8005dd6 <__mdiff+0xee>
 8005e06:	bf00      	nop
 8005e08:	08006b25 	.word	0x08006b25
 8005e0c:	08006ba7 	.word	0x08006ba7

08005e10 <__ulp>:
 8005e10:	b082      	sub	sp, #8
 8005e12:	ed8d 0b00 	vstr	d0, [sp]
 8005e16:	9a01      	ldr	r2, [sp, #4]
 8005e18:	4b0f      	ldr	r3, [pc, #60]	@ (8005e58 <__ulp+0x48>)
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	dc08      	bgt.n	8005e36 <__ulp+0x26>
 8005e24:	425b      	negs	r3, r3
 8005e26:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005e2a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005e2e:	da04      	bge.n	8005e3a <__ulp+0x2a>
 8005e30:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005e34:	4113      	asrs	r3, r2
 8005e36:	2200      	movs	r2, #0
 8005e38:	e008      	b.n	8005e4c <__ulp+0x3c>
 8005e3a:	f1a2 0314 	sub.w	r3, r2, #20
 8005e3e:	2b1e      	cmp	r3, #30
 8005e40:	bfda      	itte	le
 8005e42:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8005e46:	40da      	lsrle	r2, r3
 8005e48:	2201      	movgt	r2, #1
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	4610      	mov	r0, r2
 8005e50:	ec41 0b10 	vmov	d0, r0, r1
 8005e54:	b002      	add	sp, #8
 8005e56:	4770      	bx	lr
 8005e58:	7ff00000 	.word	0x7ff00000

08005e5c <__b2d>:
 8005e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e60:	6906      	ldr	r6, [r0, #16]
 8005e62:	f100 0814 	add.w	r8, r0, #20
 8005e66:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8005e6a:	1f37      	subs	r7, r6, #4
 8005e6c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005e70:	4610      	mov	r0, r2
 8005e72:	f7ff fd4b 	bl	800590c <__hi0bits>
 8005e76:	f1c0 0320 	rsb	r3, r0, #32
 8005e7a:	280a      	cmp	r0, #10
 8005e7c:	600b      	str	r3, [r1, #0]
 8005e7e:	491b      	ldr	r1, [pc, #108]	@ (8005eec <__b2d+0x90>)
 8005e80:	dc15      	bgt.n	8005eae <__b2d+0x52>
 8005e82:	f1c0 0c0b 	rsb	ip, r0, #11
 8005e86:	fa22 f30c 	lsr.w	r3, r2, ip
 8005e8a:	45b8      	cmp	r8, r7
 8005e8c:	ea43 0501 	orr.w	r5, r3, r1
 8005e90:	bf34      	ite	cc
 8005e92:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8005e96:	2300      	movcs	r3, #0
 8005e98:	3015      	adds	r0, #21
 8005e9a:	fa02 f000 	lsl.w	r0, r2, r0
 8005e9e:	fa23 f30c 	lsr.w	r3, r3, ip
 8005ea2:	4303      	orrs	r3, r0
 8005ea4:	461c      	mov	r4, r3
 8005ea6:	ec45 4b10 	vmov	d0, r4, r5
 8005eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eae:	45b8      	cmp	r8, r7
 8005eb0:	bf3a      	itte	cc
 8005eb2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8005eb6:	f1a6 0708 	subcc.w	r7, r6, #8
 8005eba:	2300      	movcs	r3, #0
 8005ebc:	380b      	subs	r0, #11
 8005ebe:	d012      	beq.n	8005ee6 <__b2d+0x8a>
 8005ec0:	f1c0 0120 	rsb	r1, r0, #32
 8005ec4:	fa23 f401 	lsr.w	r4, r3, r1
 8005ec8:	4082      	lsls	r2, r0
 8005eca:	4322      	orrs	r2, r4
 8005ecc:	4547      	cmp	r7, r8
 8005ece:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8005ed2:	bf8c      	ite	hi
 8005ed4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8005ed8:	2200      	movls	r2, #0
 8005eda:	4083      	lsls	r3, r0
 8005edc:	40ca      	lsrs	r2, r1
 8005ede:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	e7de      	b.n	8005ea4 <__b2d+0x48>
 8005ee6:	ea42 0501 	orr.w	r5, r2, r1
 8005eea:	e7db      	b.n	8005ea4 <__b2d+0x48>
 8005eec:	3ff00000 	.word	0x3ff00000

08005ef0 <__d2b>:
 8005ef0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ef4:	460f      	mov	r7, r1
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	ec59 8b10 	vmov	r8, r9, d0
 8005efc:	4616      	mov	r6, r2
 8005efe:	f7ff fc13 	bl	8005728 <_Balloc>
 8005f02:	4604      	mov	r4, r0
 8005f04:	b930      	cbnz	r0, 8005f14 <__d2b+0x24>
 8005f06:	4602      	mov	r2, r0
 8005f08:	4b23      	ldr	r3, [pc, #140]	@ (8005f98 <__d2b+0xa8>)
 8005f0a:	4824      	ldr	r0, [pc, #144]	@ (8005f9c <__d2b+0xac>)
 8005f0c:	f240 310f 	movw	r1, #783	@ 0x30f
 8005f10:	f000 f9aa 	bl	8006268 <__assert_func>
 8005f14:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005f18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f1c:	b10d      	cbz	r5, 8005f22 <__d2b+0x32>
 8005f1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f22:	9301      	str	r3, [sp, #4]
 8005f24:	f1b8 0300 	subs.w	r3, r8, #0
 8005f28:	d023      	beq.n	8005f72 <__d2b+0x82>
 8005f2a:	4668      	mov	r0, sp
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	f7ff fd0c 	bl	800594a <__lo0bits>
 8005f32:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005f36:	b1d0      	cbz	r0, 8005f6e <__d2b+0x7e>
 8005f38:	f1c0 0320 	rsb	r3, r0, #32
 8005f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f40:	430b      	orrs	r3, r1
 8005f42:	40c2      	lsrs	r2, r0
 8005f44:	6163      	str	r3, [r4, #20]
 8005f46:	9201      	str	r2, [sp, #4]
 8005f48:	9b01      	ldr	r3, [sp, #4]
 8005f4a:	61a3      	str	r3, [r4, #24]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	bf0c      	ite	eq
 8005f50:	2201      	moveq	r2, #1
 8005f52:	2202      	movne	r2, #2
 8005f54:	6122      	str	r2, [r4, #16]
 8005f56:	b1a5      	cbz	r5, 8005f82 <__d2b+0x92>
 8005f58:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005f5c:	4405      	add	r5, r0
 8005f5e:	603d      	str	r5, [r7, #0]
 8005f60:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005f64:	6030      	str	r0, [r6, #0]
 8005f66:	4620      	mov	r0, r4
 8005f68:	b003      	add	sp, #12
 8005f6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f6e:	6161      	str	r1, [r4, #20]
 8005f70:	e7ea      	b.n	8005f48 <__d2b+0x58>
 8005f72:	a801      	add	r0, sp, #4
 8005f74:	f7ff fce9 	bl	800594a <__lo0bits>
 8005f78:	9b01      	ldr	r3, [sp, #4]
 8005f7a:	6163      	str	r3, [r4, #20]
 8005f7c:	3020      	adds	r0, #32
 8005f7e:	2201      	movs	r2, #1
 8005f80:	e7e8      	b.n	8005f54 <__d2b+0x64>
 8005f82:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005f86:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005f8a:	6038      	str	r0, [r7, #0]
 8005f8c:	6918      	ldr	r0, [r3, #16]
 8005f8e:	f7ff fcbd 	bl	800590c <__hi0bits>
 8005f92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005f96:	e7e5      	b.n	8005f64 <__d2b+0x74>
 8005f98:	08006b25 	.word	0x08006b25
 8005f9c:	08006ba7 	.word	0x08006ba7

08005fa0 <__ratio>:
 8005fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa4:	b085      	sub	sp, #20
 8005fa6:	e9cd 1000 	strd	r1, r0, [sp]
 8005faa:	a902      	add	r1, sp, #8
 8005fac:	f7ff ff56 	bl	8005e5c <__b2d>
 8005fb0:	9800      	ldr	r0, [sp, #0]
 8005fb2:	a903      	add	r1, sp, #12
 8005fb4:	ec55 4b10 	vmov	r4, r5, d0
 8005fb8:	f7ff ff50 	bl	8005e5c <__b2d>
 8005fbc:	9b01      	ldr	r3, [sp, #4]
 8005fbe:	6919      	ldr	r1, [r3, #16]
 8005fc0:	9b00      	ldr	r3, [sp, #0]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	1ac9      	subs	r1, r1, r3
 8005fc6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005fca:	1a9b      	subs	r3, r3, r2
 8005fcc:	ec5b ab10 	vmov	sl, fp, d0
 8005fd0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	bfce      	itee	gt
 8005fd8:	462a      	movgt	r2, r5
 8005fda:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005fde:	465a      	movle	r2, fp
 8005fe0:	462f      	mov	r7, r5
 8005fe2:	46d9      	mov	r9, fp
 8005fe4:	bfcc      	ite	gt
 8005fe6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8005fea:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8005fee:	464b      	mov	r3, r9
 8005ff0:	4652      	mov	r2, sl
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	4639      	mov	r1, r7
 8005ff6:	f7fa fc31 	bl	800085c <__aeabi_ddiv>
 8005ffa:	ec41 0b10 	vmov	d0, r0, r1
 8005ffe:	b005      	add	sp, #20
 8006000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006004 <__copybits>:
 8006004:	3901      	subs	r1, #1
 8006006:	b570      	push	{r4, r5, r6, lr}
 8006008:	1149      	asrs	r1, r1, #5
 800600a:	6914      	ldr	r4, [r2, #16]
 800600c:	3101      	adds	r1, #1
 800600e:	f102 0314 	add.w	r3, r2, #20
 8006012:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006016:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800601a:	1f05      	subs	r5, r0, #4
 800601c:	42a3      	cmp	r3, r4
 800601e:	d30c      	bcc.n	800603a <__copybits+0x36>
 8006020:	1aa3      	subs	r3, r4, r2
 8006022:	3b11      	subs	r3, #17
 8006024:	f023 0303 	bic.w	r3, r3, #3
 8006028:	3211      	adds	r2, #17
 800602a:	42a2      	cmp	r2, r4
 800602c:	bf88      	it	hi
 800602e:	2300      	movhi	r3, #0
 8006030:	4418      	add	r0, r3
 8006032:	2300      	movs	r3, #0
 8006034:	4288      	cmp	r0, r1
 8006036:	d305      	bcc.n	8006044 <__copybits+0x40>
 8006038:	bd70      	pop	{r4, r5, r6, pc}
 800603a:	f853 6b04 	ldr.w	r6, [r3], #4
 800603e:	f845 6f04 	str.w	r6, [r5, #4]!
 8006042:	e7eb      	b.n	800601c <__copybits+0x18>
 8006044:	f840 3b04 	str.w	r3, [r0], #4
 8006048:	e7f4      	b.n	8006034 <__copybits+0x30>

0800604a <__any_on>:
 800604a:	f100 0214 	add.w	r2, r0, #20
 800604e:	6900      	ldr	r0, [r0, #16]
 8006050:	114b      	asrs	r3, r1, #5
 8006052:	4298      	cmp	r0, r3
 8006054:	b510      	push	{r4, lr}
 8006056:	db11      	blt.n	800607c <__any_on+0x32>
 8006058:	dd0a      	ble.n	8006070 <__any_on+0x26>
 800605a:	f011 011f 	ands.w	r1, r1, #31
 800605e:	d007      	beq.n	8006070 <__any_on+0x26>
 8006060:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006064:	fa24 f001 	lsr.w	r0, r4, r1
 8006068:	fa00 f101 	lsl.w	r1, r0, r1
 800606c:	428c      	cmp	r4, r1
 800606e:	d10b      	bne.n	8006088 <__any_on+0x3e>
 8006070:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006074:	4293      	cmp	r3, r2
 8006076:	d803      	bhi.n	8006080 <__any_on+0x36>
 8006078:	2000      	movs	r0, #0
 800607a:	bd10      	pop	{r4, pc}
 800607c:	4603      	mov	r3, r0
 800607e:	e7f7      	b.n	8006070 <__any_on+0x26>
 8006080:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006084:	2900      	cmp	r1, #0
 8006086:	d0f5      	beq.n	8006074 <__any_on+0x2a>
 8006088:	2001      	movs	r0, #1
 800608a:	e7f6      	b.n	800607a <__any_on+0x30>

0800608c <__sread>:
 800608c:	b510      	push	{r4, lr}
 800608e:	460c      	mov	r4, r1
 8006090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006094:	f000 f8b4 	bl	8006200 <_read_r>
 8006098:	2800      	cmp	r0, #0
 800609a:	bfab      	itete	ge
 800609c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800609e:	89a3      	ldrhlt	r3, [r4, #12]
 80060a0:	181b      	addge	r3, r3, r0
 80060a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80060a6:	bfac      	ite	ge
 80060a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80060aa:	81a3      	strhlt	r3, [r4, #12]
 80060ac:	bd10      	pop	{r4, pc}

080060ae <__swrite>:
 80060ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060b2:	461f      	mov	r7, r3
 80060b4:	898b      	ldrh	r3, [r1, #12]
 80060b6:	05db      	lsls	r3, r3, #23
 80060b8:	4605      	mov	r5, r0
 80060ba:	460c      	mov	r4, r1
 80060bc:	4616      	mov	r6, r2
 80060be:	d505      	bpl.n	80060cc <__swrite+0x1e>
 80060c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060c4:	2302      	movs	r3, #2
 80060c6:	2200      	movs	r2, #0
 80060c8:	f000 f888 	bl	80061dc <_lseek_r>
 80060cc:	89a3      	ldrh	r3, [r4, #12]
 80060ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80060d6:	81a3      	strh	r3, [r4, #12]
 80060d8:	4632      	mov	r2, r6
 80060da:	463b      	mov	r3, r7
 80060dc:	4628      	mov	r0, r5
 80060de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060e2:	f000 b8af 	b.w	8006244 <_write_r>

080060e6 <__sseek>:
 80060e6:	b510      	push	{r4, lr}
 80060e8:	460c      	mov	r4, r1
 80060ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ee:	f000 f875 	bl	80061dc <_lseek_r>
 80060f2:	1c43      	adds	r3, r0, #1
 80060f4:	89a3      	ldrh	r3, [r4, #12]
 80060f6:	bf15      	itete	ne
 80060f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80060fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80060fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006102:	81a3      	strheq	r3, [r4, #12]
 8006104:	bf18      	it	ne
 8006106:	81a3      	strhne	r3, [r4, #12]
 8006108:	bd10      	pop	{r4, pc}

0800610a <__sclose>:
 800610a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800610e:	f000 b855 	b.w	80061bc <_close_r>

08006112 <_realloc_r>:
 8006112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006116:	4680      	mov	r8, r0
 8006118:	4615      	mov	r5, r2
 800611a:	460c      	mov	r4, r1
 800611c:	b921      	cbnz	r1, 8006128 <_realloc_r+0x16>
 800611e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006122:	4611      	mov	r1, r2
 8006124:	f7ff b9b6 	b.w	8005494 <_malloc_r>
 8006128:	b92a      	cbnz	r2, 8006136 <_realloc_r+0x24>
 800612a:	f000 f8cf 	bl	80062cc <_free_r>
 800612e:	2400      	movs	r4, #0
 8006130:	4620      	mov	r0, r4
 8006132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006136:	f000 f913 	bl	8006360 <_malloc_usable_size_r>
 800613a:	4285      	cmp	r5, r0
 800613c:	4606      	mov	r6, r0
 800613e:	d802      	bhi.n	8006146 <_realloc_r+0x34>
 8006140:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006144:	d8f4      	bhi.n	8006130 <_realloc_r+0x1e>
 8006146:	4629      	mov	r1, r5
 8006148:	4640      	mov	r0, r8
 800614a:	f7ff f9a3 	bl	8005494 <_malloc_r>
 800614e:	4607      	mov	r7, r0
 8006150:	2800      	cmp	r0, #0
 8006152:	d0ec      	beq.n	800612e <_realloc_r+0x1c>
 8006154:	42b5      	cmp	r5, r6
 8006156:	462a      	mov	r2, r5
 8006158:	4621      	mov	r1, r4
 800615a:	bf28      	it	cs
 800615c:	4632      	movcs	r2, r6
 800615e:	f7fd fe72 	bl	8003e46 <memcpy>
 8006162:	4621      	mov	r1, r4
 8006164:	4640      	mov	r0, r8
 8006166:	f000 f8b1 	bl	80062cc <_free_r>
 800616a:	463c      	mov	r4, r7
 800616c:	e7e0      	b.n	8006130 <_realloc_r+0x1e>

0800616e <__ascii_wctomb>:
 800616e:	4603      	mov	r3, r0
 8006170:	4608      	mov	r0, r1
 8006172:	b141      	cbz	r1, 8006186 <__ascii_wctomb+0x18>
 8006174:	2aff      	cmp	r2, #255	@ 0xff
 8006176:	d904      	bls.n	8006182 <__ascii_wctomb+0x14>
 8006178:	228a      	movs	r2, #138	@ 0x8a
 800617a:	601a      	str	r2, [r3, #0]
 800617c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006180:	4770      	bx	lr
 8006182:	700a      	strb	r2, [r1, #0]
 8006184:	2001      	movs	r0, #1
 8006186:	4770      	bx	lr

08006188 <memmove>:
 8006188:	4288      	cmp	r0, r1
 800618a:	b510      	push	{r4, lr}
 800618c:	eb01 0402 	add.w	r4, r1, r2
 8006190:	d902      	bls.n	8006198 <memmove+0x10>
 8006192:	4284      	cmp	r4, r0
 8006194:	4623      	mov	r3, r4
 8006196:	d807      	bhi.n	80061a8 <memmove+0x20>
 8006198:	1e43      	subs	r3, r0, #1
 800619a:	42a1      	cmp	r1, r4
 800619c:	d008      	beq.n	80061b0 <memmove+0x28>
 800619e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061a6:	e7f8      	b.n	800619a <memmove+0x12>
 80061a8:	4402      	add	r2, r0
 80061aa:	4601      	mov	r1, r0
 80061ac:	428a      	cmp	r2, r1
 80061ae:	d100      	bne.n	80061b2 <memmove+0x2a>
 80061b0:	bd10      	pop	{r4, pc}
 80061b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061ba:	e7f7      	b.n	80061ac <memmove+0x24>

080061bc <_close_r>:
 80061bc:	b538      	push	{r3, r4, r5, lr}
 80061be:	4d06      	ldr	r5, [pc, #24]	@ (80061d8 <_close_r+0x1c>)
 80061c0:	2300      	movs	r3, #0
 80061c2:	4604      	mov	r4, r0
 80061c4:	4608      	mov	r0, r1
 80061c6:	602b      	str	r3, [r5, #0]
 80061c8:	f7fb fee2 	bl	8001f90 <_close>
 80061cc:	1c43      	adds	r3, r0, #1
 80061ce:	d102      	bne.n	80061d6 <_close_r+0x1a>
 80061d0:	682b      	ldr	r3, [r5, #0]
 80061d2:	b103      	cbz	r3, 80061d6 <_close_r+0x1a>
 80061d4:	6023      	str	r3, [r4, #0]
 80061d6:	bd38      	pop	{r3, r4, r5, pc}
 80061d8:	2000409c 	.word	0x2000409c

080061dc <_lseek_r>:
 80061dc:	b538      	push	{r3, r4, r5, lr}
 80061de:	4d07      	ldr	r5, [pc, #28]	@ (80061fc <_lseek_r+0x20>)
 80061e0:	4604      	mov	r4, r0
 80061e2:	4608      	mov	r0, r1
 80061e4:	4611      	mov	r1, r2
 80061e6:	2200      	movs	r2, #0
 80061e8:	602a      	str	r2, [r5, #0]
 80061ea:	461a      	mov	r2, r3
 80061ec:	f7fb fef7 	bl	8001fde <_lseek>
 80061f0:	1c43      	adds	r3, r0, #1
 80061f2:	d102      	bne.n	80061fa <_lseek_r+0x1e>
 80061f4:	682b      	ldr	r3, [r5, #0]
 80061f6:	b103      	cbz	r3, 80061fa <_lseek_r+0x1e>
 80061f8:	6023      	str	r3, [r4, #0]
 80061fa:	bd38      	pop	{r3, r4, r5, pc}
 80061fc:	2000409c 	.word	0x2000409c

08006200 <_read_r>:
 8006200:	b538      	push	{r3, r4, r5, lr}
 8006202:	4d07      	ldr	r5, [pc, #28]	@ (8006220 <_read_r+0x20>)
 8006204:	4604      	mov	r4, r0
 8006206:	4608      	mov	r0, r1
 8006208:	4611      	mov	r1, r2
 800620a:	2200      	movs	r2, #0
 800620c:	602a      	str	r2, [r5, #0]
 800620e:	461a      	mov	r2, r3
 8006210:	f7fb fe85 	bl	8001f1e <_read>
 8006214:	1c43      	adds	r3, r0, #1
 8006216:	d102      	bne.n	800621e <_read_r+0x1e>
 8006218:	682b      	ldr	r3, [r5, #0]
 800621a:	b103      	cbz	r3, 800621e <_read_r+0x1e>
 800621c:	6023      	str	r3, [r4, #0]
 800621e:	bd38      	pop	{r3, r4, r5, pc}
 8006220:	2000409c 	.word	0x2000409c

08006224 <_sbrk_r>:
 8006224:	b538      	push	{r3, r4, r5, lr}
 8006226:	4d06      	ldr	r5, [pc, #24]	@ (8006240 <_sbrk_r+0x1c>)
 8006228:	2300      	movs	r3, #0
 800622a:	4604      	mov	r4, r0
 800622c:	4608      	mov	r0, r1
 800622e:	602b      	str	r3, [r5, #0]
 8006230:	f7fb fee2 	bl	8001ff8 <_sbrk>
 8006234:	1c43      	adds	r3, r0, #1
 8006236:	d102      	bne.n	800623e <_sbrk_r+0x1a>
 8006238:	682b      	ldr	r3, [r5, #0]
 800623a:	b103      	cbz	r3, 800623e <_sbrk_r+0x1a>
 800623c:	6023      	str	r3, [r4, #0]
 800623e:	bd38      	pop	{r3, r4, r5, pc}
 8006240:	2000409c 	.word	0x2000409c

08006244 <_write_r>:
 8006244:	b538      	push	{r3, r4, r5, lr}
 8006246:	4d07      	ldr	r5, [pc, #28]	@ (8006264 <_write_r+0x20>)
 8006248:	4604      	mov	r4, r0
 800624a:	4608      	mov	r0, r1
 800624c:	4611      	mov	r1, r2
 800624e:	2200      	movs	r2, #0
 8006250:	602a      	str	r2, [r5, #0]
 8006252:	461a      	mov	r2, r3
 8006254:	f7fb fe80 	bl	8001f58 <_write>
 8006258:	1c43      	adds	r3, r0, #1
 800625a:	d102      	bne.n	8006262 <_write_r+0x1e>
 800625c:	682b      	ldr	r3, [r5, #0]
 800625e:	b103      	cbz	r3, 8006262 <_write_r+0x1e>
 8006260:	6023      	str	r3, [r4, #0]
 8006262:	bd38      	pop	{r3, r4, r5, pc}
 8006264:	2000409c 	.word	0x2000409c

08006268 <__assert_func>:
 8006268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800626a:	4614      	mov	r4, r2
 800626c:	461a      	mov	r2, r3
 800626e:	4b09      	ldr	r3, [pc, #36]	@ (8006294 <__assert_func+0x2c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4605      	mov	r5, r0
 8006274:	68d8      	ldr	r0, [r3, #12]
 8006276:	b954      	cbnz	r4, 800628e <__assert_func+0x26>
 8006278:	4b07      	ldr	r3, [pc, #28]	@ (8006298 <__assert_func+0x30>)
 800627a:	461c      	mov	r4, r3
 800627c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006280:	9100      	str	r1, [sp, #0]
 8006282:	462b      	mov	r3, r5
 8006284:	4905      	ldr	r1, [pc, #20]	@ (800629c <__assert_func+0x34>)
 8006286:	f000 f873 	bl	8006370 <fiprintf>
 800628a:	f000 f883 	bl	8006394 <abort>
 800628e:	4b04      	ldr	r3, [pc, #16]	@ (80062a0 <__assert_func+0x38>)
 8006290:	e7f4      	b.n	800627c <__assert_func+0x14>
 8006292:	bf00      	nop
 8006294:	20000188 	.word	0x20000188
 8006298:	08006d3b 	.word	0x08006d3b
 800629c:	08006d0d 	.word	0x08006d0d
 80062a0:	08006d00 	.word	0x08006d00

080062a4 <_calloc_r>:
 80062a4:	b570      	push	{r4, r5, r6, lr}
 80062a6:	fba1 5402 	umull	r5, r4, r1, r2
 80062aa:	b93c      	cbnz	r4, 80062bc <_calloc_r+0x18>
 80062ac:	4629      	mov	r1, r5
 80062ae:	f7ff f8f1 	bl	8005494 <_malloc_r>
 80062b2:	4606      	mov	r6, r0
 80062b4:	b928      	cbnz	r0, 80062c2 <_calloc_r+0x1e>
 80062b6:	2600      	movs	r6, #0
 80062b8:	4630      	mov	r0, r6
 80062ba:	bd70      	pop	{r4, r5, r6, pc}
 80062bc:	220c      	movs	r2, #12
 80062be:	6002      	str	r2, [r0, #0]
 80062c0:	e7f9      	b.n	80062b6 <_calloc_r+0x12>
 80062c2:	462a      	mov	r2, r5
 80062c4:	4621      	mov	r1, r4
 80062c6:	f7fd fd85 	bl	8003dd4 <memset>
 80062ca:	e7f5      	b.n	80062b8 <_calloc_r+0x14>

080062cc <_free_r>:
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	4605      	mov	r5, r0
 80062d0:	2900      	cmp	r1, #0
 80062d2:	d041      	beq.n	8006358 <_free_r+0x8c>
 80062d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062d8:	1f0c      	subs	r4, r1, #4
 80062da:	2b00      	cmp	r3, #0
 80062dc:	bfb8      	it	lt
 80062de:	18e4      	addlt	r4, r4, r3
 80062e0:	f7ff fa16 	bl	8005710 <__malloc_lock>
 80062e4:	4a1d      	ldr	r2, [pc, #116]	@ (800635c <_free_r+0x90>)
 80062e6:	6813      	ldr	r3, [r2, #0]
 80062e8:	b933      	cbnz	r3, 80062f8 <_free_r+0x2c>
 80062ea:	6063      	str	r3, [r4, #4]
 80062ec:	6014      	str	r4, [r2, #0]
 80062ee:	4628      	mov	r0, r5
 80062f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062f4:	f7ff ba12 	b.w	800571c <__malloc_unlock>
 80062f8:	42a3      	cmp	r3, r4
 80062fa:	d908      	bls.n	800630e <_free_r+0x42>
 80062fc:	6820      	ldr	r0, [r4, #0]
 80062fe:	1821      	adds	r1, r4, r0
 8006300:	428b      	cmp	r3, r1
 8006302:	bf01      	itttt	eq
 8006304:	6819      	ldreq	r1, [r3, #0]
 8006306:	685b      	ldreq	r3, [r3, #4]
 8006308:	1809      	addeq	r1, r1, r0
 800630a:	6021      	streq	r1, [r4, #0]
 800630c:	e7ed      	b.n	80062ea <_free_r+0x1e>
 800630e:	461a      	mov	r2, r3
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	b10b      	cbz	r3, 8006318 <_free_r+0x4c>
 8006314:	42a3      	cmp	r3, r4
 8006316:	d9fa      	bls.n	800630e <_free_r+0x42>
 8006318:	6811      	ldr	r1, [r2, #0]
 800631a:	1850      	adds	r0, r2, r1
 800631c:	42a0      	cmp	r0, r4
 800631e:	d10b      	bne.n	8006338 <_free_r+0x6c>
 8006320:	6820      	ldr	r0, [r4, #0]
 8006322:	4401      	add	r1, r0
 8006324:	1850      	adds	r0, r2, r1
 8006326:	4283      	cmp	r3, r0
 8006328:	6011      	str	r1, [r2, #0]
 800632a:	d1e0      	bne.n	80062ee <_free_r+0x22>
 800632c:	6818      	ldr	r0, [r3, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	6053      	str	r3, [r2, #4]
 8006332:	4408      	add	r0, r1
 8006334:	6010      	str	r0, [r2, #0]
 8006336:	e7da      	b.n	80062ee <_free_r+0x22>
 8006338:	d902      	bls.n	8006340 <_free_r+0x74>
 800633a:	230c      	movs	r3, #12
 800633c:	602b      	str	r3, [r5, #0]
 800633e:	e7d6      	b.n	80062ee <_free_r+0x22>
 8006340:	6820      	ldr	r0, [r4, #0]
 8006342:	1821      	adds	r1, r4, r0
 8006344:	428b      	cmp	r3, r1
 8006346:	bf04      	itt	eq
 8006348:	6819      	ldreq	r1, [r3, #0]
 800634a:	685b      	ldreq	r3, [r3, #4]
 800634c:	6063      	str	r3, [r4, #4]
 800634e:	bf04      	itt	eq
 8006350:	1809      	addeq	r1, r1, r0
 8006352:	6021      	streq	r1, [r4, #0]
 8006354:	6054      	str	r4, [r2, #4]
 8006356:	e7ca      	b.n	80062ee <_free_r+0x22>
 8006358:	bd38      	pop	{r3, r4, r5, pc}
 800635a:	bf00      	nop
 800635c:	20004098 	.word	0x20004098

08006360 <_malloc_usable_size_r>:
 8006360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006364:	1f18      	subs	r0, r3, #4
 8006366:	2b00      	cmp	r3, #0
 8006368:	bfbc      	itt	lt
 800636a:	580b      	ldrlt	r3, [r1, r0]
 800636c:	18c0      	addlt	r0, r0, r3
 800636e:	4770      	bx	lr

08006370 <fiprintf>:
 8006370:	b40e      	push	{r1, r2, r3}
 8006372:	b503      	push	{r0, r1, lr}
 8006374:	4601      	mov	r1, r0
 8006376:	ab03      	add	r3, sp, #12
 8006378:	4805      	ldr	r0, [pc, #20]	@ (8006390 <fiprintf+0x20>)
 800637a:	f853 2b04 	ldr.w	r2, [r3], #4
 800637e:	6800      	ldr	r0, [r0, #0]
 8006380:	9301      	str	r3, [sp, #4]
 8006382:	f000 f837 	bl	80063f4 <_vfiprintf_r>
 8006386:	b002      	add	sp, #8
 8006388:	f85d eb04 	ldr.w	lr, [sp], #4
 800638c:	b003      	add	sp, #12
 800638e:	4770      	bx	lr
 8006390:	20000188 	.word	0x20000188

08006394 <abort>:
 8006394:	b508      	push	{r3, lr}
 8006396:	2006      	movs	r0, #6
 8006398:	f000 fa84 	bl	80068a4 <raise>
 800639c:	2001      	movs	r0, #1
 800639e:	f7fb fdb3 	bl	8001f08 <_exit>

080063a2 <__sfputc_r>:
 80063a2:	6893      	ldr	r3, [r2, #8]
 80063a4:	3b01      	subs	r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	b410      	push	{r4}
 80063aa:	6093      	str	r3, [r2, #8]
 80063ac:	da08      	bge.n	80063c0 <__sfputc_r+0x1e>
 80063ae:	6994      	ldr	r4, [r2, #24]
 80063b0:	42a3      	cmp	r3, r4
 80063b2:	db01      	blt.n	80063b8 <__sfputc_r+0x16>
 80063b4:	290a      	cmp	r1, #10
 80063b6:	d103      	bne.n	80063c0 <__sfputc_r+0x1e>
 80063b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063bc:	f000 b932 	b.w	8006624 <__swbuf_r>
 80063c0:	6813      	ldr	r3, [r2, #0]
 80063c2:	1c58      	adds	r0, r3, #1
 80063c4:	6010      	str	r0, [r2, #0]
 80063c6:	7019      	strb	r1, [r3, #0]
 80063c8:	4608      	mov	r0, r1
 80063ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <__sfputs_r>:
 80063d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d2:	4606      	mov	r6, r0
 80063d4:	460f      	mov	r7, r1
 80063d6:	4614      	mov	r4, r2
 80063d8:	18d5      	adds	r5, r2, r3
 80063da:	42ac      	cmp	r4, r5
 80063dc:	d101      	bne.n	80063e2 <__sfputs_r+0x12>
 80063de:	2000      	movs	r0, #0
 80063e0:	e007      	b.n	80063f2 <__sfputs_r+0x22>
 80063e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063e6:	463a      	mov	r2, r7
 80063e8:	4630      	mov	r0, r6
 80063ea:	f7ff ffda 	bl	80063a2 <__sfputc_r>
 80063ee:	1c43      	adds	r3, r0, #1
 80063f0:	d1f3      	bne.n	80063da <__sfputs_r+0xa>
 80063f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080063f4 <_vfiprintf_r>:
 80063f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f8:	460d      	mov	r5, r1
 80063fa:	b09d      	sub	sp, #116	@ 0x74
 80063fc:	4614      	mov	r4, r2
 80063fe:	4698      	mov	r8, r3
 8006400:	4606      	mov	r6, r0
 8006402:	b118      	cbz	r0, 800640c <_vfiprintf_r+0x18>
 8006404:	6a03      	ldr	r3, [r0, #32]
 8006406:	b90b      	cbnz	r3, 800640c <_vfiprintf_r+0x18>
 8006408:	f7fc fe18 	bl	800303c <__sinit>
 800640c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800640e:	07d9      	lsls	r1, r3, #31
 8006410:	d405      	bmi.n	800641e <_vfiprintf_r+0x2a>
 8006412:	89ab      	ldrh	r3, [r5, #12]
 8006414:	059a      	lsls	r2, r3, #22
 8006416:	d402      	bmi.n	800641e <_vfiprintf_r+0x2a>
 8006418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800641a:	f7fd fd12 	bl	8003e42 <__retarget_lock_acquire_recursive>
 800641e:	89ab      	ldrh	r3, [r5, #12]
 8006420:	071b      	lsls	r3, r3, #28
 8006422:	d501      	bpl.n	8006428 <_vfiprintf_r+0x34>
 8006424:	692b      	ldr	r3, [r5, #16]
 8006426:	b99b      	cbnz	r3, 8006450 <_vfiprintf_r+0x5c>
 8006428:	4629      	mov	r1, r5
 800642a:	4630      	mov	r0, r6
 800642c:	f000 f938 	bl	80066a0 <__swsetup_r>
 8006430:	b170      	cbz	r0, 8006450 <_vfiprintf_r+0x5c>
 8006432:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006434:	07dc      	lsls	r4, r3, #31
 8006436:	d504      	bpl.n	8006442 <_vfiprintf_r+0x4e>
 8006438:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800643c:	b01d      	add	sp, #116	@ 0x74
 800643e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006442:	89ab      	ldrh	r3, [r5, #12]
 8006444:	0598      	lsls	r0, r3, #22
 8006446:	d4f7      	bmi.n	8006438 <_vfiprintf_r+0x44>
 8006448:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800644a:	f7fd fcfb 	bl	8003e44 <__retarget_lock_release_recursive>
 800644e:	e7f3      	b.n	8006438 <_vfiprintf_r+0x44>
 8006450:	2300      	movs	r3, #0
 8006452:	9309      	str	r3, [sp, #36]	@ 0x24
 8006454:	2320      	movs	r3, #32
 8006456:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800645a:	f8cd 800c 	str.w	r8, [sp, #12]
 800645e:	2330      	movs	r3, #48	@ 0x30
 8006460:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006610 <_vfiprintf_r+0x21c>
 8006464:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006468:	f04f 0901 	mov.w	r9, #1
 800646c:	4623      	mov	r3, r4
 800646e:	469a      	mov	sl, r3
 8006470:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006474:	b10a      	cbz	r2, 800647a <_vfiprintf_r+0x86>
 8006476:	2a25      	cmp	r2, #37	@ 0x25
 8006478:	d1f9      	bne.n	800646e <_vfiprintf_r+0x7a>
 800647a:	ebba 0b04 	subs.w	fp, sl, r4
 800647e:	d00b      	beq.n	8006498 <_vfiprintf_r+0xa4>
 8006480:	465b      	mov	r3, fp
 8006482:	4622      	mov	r2, r4
 8006484:	4629      	mov	r1, r5
 8006486:	4630      	mov	r0, r6
 8006488:	f7ff ffa2 	bl	80063d0 <__sfputs_r>
 800648c:	3001      	adds	r0, #1
 800648e:	f000 80a7 	beq.w	80065e0 <_vfiprintf_r+0x1ec>
 8006492:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006494:	445a      	add	r2, fp
 8006496:	9209      	str	r2, [sp, #36]	@ 0x24
 8006498:	f89a 3000 	ldrb.w	r3, [sl]
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 809f 	beq.w	80065e0 <_vfiprintf_r+0x1ec>
 80064a2:	2300      	movs	r3, #0
 80064a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80064a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064ac:	f10a 0a01 	add.w	sl, sl, #1
 80064b0:	9304      	str	r3, [sp, #16]
 80064b2:	9307      	str	r3, [sp, #28]
 80064b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80064b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80064ba:	4654      	mov	r4, sl
 80064bc:	2205      	movs	r2, #5
 80064be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064c2:	4853      	ldr	r0, [pc, #332]	@ (8006610 <_vfiprintf_r+0x21c>)
 80064c4:	f7f9 fe8c 	bl	80001e0 <memchr>
 80064c8:	9a04      	ldr	r2, [sp, #16]
 80064ca:	b9d8      	cbnz	r0, 8006504 <_vfiprintf_r+0x110>
 80064cc:	06d1      	lsls	r1, r2, #27
 80064ce:	bf44      	itt	mi
 80064d0:	2320      	movmi	r3, #32
 80064d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064d6:	0713      	lsls	r3, r2, #28
 80064d8:	bf44      	itt	mi
 80064da:	232b      	movmi	r3, #43	@ 0x2b
 80064dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064e0:	f89a 3000 	ldrb.w	r3, [sl]
 80064e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80064e6:	d015      	beq.n	8006514 <_vfiprintf_r+0x120>
 80064e8:	9a07      	ldr	r2, [sp, #28]
 80064ea:	4654      	mov	r4, sl
 80064ec:	2000      	movs	r0, #0
 80064ee:	f04f 0c0a 	mov.w	ip, #10
 80064f2:	4621      	mov	r1, r4
 80064f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064f8:	3b30      	subs	r3, #48	@ 0x30
 80064fa:	2b09      	cmp	r3, #9
 80064fc:	d94b      	bls.n	8006596 <_vfiprintf_r+0x1a2>
 80064fe:	b1b0      	cbz	r0, 800652e <_vfiprintf_r+0x13a>
 8006500:	9207      	str	r2, [sp, #28]
 8006502:	e014      	b.n	800652e <_vfiprintf_r+0x13a>
 8006504:	eba0 0308 	sub.w	r3, r0, r8
 8006508:	fa09 f303 	lsl.w	r3, r9, r3
 800650c:	4313      	orrs	r3, r2
 800650e:	9304      	str	r3, [sp, #16]
 8006510:	46a2      	mov	sl, r4
 8006512:	e7d2      	b.n	80064ba <_vfiprintf_r+0xc6>
 8006514:	9b03      	ldr	r3, [sp, #12]
 8006516:	1d19      	adds	r1, r3, #4
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	9103      	str	r1, [sp, #12]
 800651c:	2b00      	cmp	r3, #0
 800651e:	bfbb      	ittet	lt
 8006520:	425b      	neglt	r3, r3
 8006522:	f042 0202 	orrlt.w	r2, r2, #2
 8006526:	9307      	strge	r3, [sp, #28]
 8006528:	9307      	strlt	r3, [sp, #28]
 800652a:	bfb8      	it	lt
 800652c:	9204      	strlt	r2, [sp, #16]
 800652e:	7823      	ldrb	r3, [r4, #0]
 8006530:	2b2e      	cmp	r3, #46	@ 0x2e
 8006532:	d10a      	bne.n	800654a <_vfiprintf_r+0x156>
 8006534:	7863      	ldrb	r3, [r4, #1]
 8006536:	2b2a      	cmp	r3, #42	@ 0x2a
 8006538:	d132      	bne.n	80065a0 <_vfiprintf_r+0x1ac>
 800653a:	9b03      	ldr	r3, [sp, #12]
 800653c:	1d1a      	adds	r2, r3, #4
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	9203      	str	r2, [sp, #12]
 8006542:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006546:	3402      	adds	r4, #2
 8006548:	9305      	str	r3, [sp, #20]
 800654a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006620 <_vfiprintf_r+0x22c>
 800654e:	7821      	ldrb	r1, [r4, #0]
 8006550:	2203      	movs	r2, #3
 8006552:	4650      	mov	r0, sl
 8006554:	f7f9 fe44 	bl	80001e0 <memchr>
 8006558:	b138      	cbz	r0, 800656a <_vfiprintf_r+0x176>
 800655a:	9b04      	ldr	r3, [sp, #16]
 800655c:	eba0 000a 	sub.w	r0, r0, sl
 8006560:	2240      	movs	r2, #64	@ 0x40
 8006562:	4082      	lsls	r2, r0
 8006564:	4313      	orrs	r3, r2
 8006566:	3401      	adds	r4, #1
 8006568:	9304      	str	r3, [sp, #16]
 800656a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800656e:	4829      	ldr	r0, [pc, #164]	@ (8006614 <_vfiprintf_r+0x220>)
 8006570:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006574:	2206      	movs	r2, #6
 8006576:	f7f9 fe33 	bl	80001e0 <memchr>
 800657a:	2800      	cmp	r0, #0
 800657c:	d03f      	beq.n	80065fe <_vfiprintf_r+0x20a>
 800657e:	4b26      	ldr	r3, [pc, #152]	@ (8006618 <_vfiprintf_r+0x224>)
 8006580:	bb1b      	cbnz	r3, 80065ca <_vfiprintf_r+0x1d6>
 8006582:	9b03      	ldr	r3, [sp, #12]
 8006584:	3307      	adds	r3, #7
 8006586:	f023 0307 	bic.w	r3, r3, #7
 800658a:	3308      	adds	r3, #8
 800658c:	9303      	str	r3, [sp, #12]
 800658e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006590:	443b      	add	r3, r7
 8006592:	9309      	str	r3, [sp, #36]	@ 0x24
 8006594:	e76a      	b.n	800646c <_vfiprintf_r+0x78>
 8006596:	fb0c 3202 	mla	r2, ip, r2, r3
 800659a:	460c      	mov	r4, r1
 800659c:	2001      	movs	r0, #1
 800659e:	e7a8      	b.n	80064f2 <_vfiprintf_r+0xfe>
 80065a0:	2300      	movs	r3, #0
 80065a2:	3401      	adds	r4, #1
 80065a4:	9305      	str	r3, [sp, #20]
 80065a6:	4619      	mov	r1, r3
 80065a8:	f04f 0c0a 	mov.w	ip, #10
 80065ac:	4620      	mov	r0, r4
 80065ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065b2:	3a30      	subs	r2, #48	@ 0x30
 80065b4:	2a09      	cmp	r2, #9
 80065b6:	d903      	bls.n	80065c0 <_vfiprintf_r+0x1cc>
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0c6      	beq.n	800654a <_vfiprintf_r+0x156>
 80065bc:	9105      	str	r1, [sp, #20]
 80065be:	e7c4      	b.n	800654a <_vfiprintf_r+0x156>
 80065c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80065c4:	4604      	mov	r4, r0
 80065c6:	2301      	movs	r3, #1
 80065c8:	e7f0      	b.n	80065ac <_vfiprintf_r+0x1b8>
 80065ca:	ab03      	add	r3, sp, #12
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	462a      	mov	r2, r5
 80065d0:	4b12      	ldr	r3, [pc, #72]	@ (800661c <_vfiprintf_r+0x228>)
 80065d2:	a904      	add	r1, sp, #16
 80065d4:	4630      	mov	r0, r6
 80065d6:	f7fb feb9 	bl	800234c <_printf_float>
 80065da:	4607      	mov	r7, r0
 80065dc:	1c78      	adds	r0, r7, #1
 80065de:	d1d6      	bne.n	800658e <_vfiprintf_r+0x19a>
 80065e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065e2:	07d9      	lsls	r1, r3, #31
 80065e4:	d405      	bmi.n	80065f2 <_vfiprintf_r+0x1fe>
 80065e6:	89ab      	ldrh	r3, [r5, #12]
 80065e8:	059a      	lsls	r2, r3, #22
 80065ea:	d402      	bmi.n	80065f2 <_vfiprintf_r+0x1fe>
 80065ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065ee:	f7fd fc29 	bl	8003e44 <__retarget_lock_release_recursive>
 80065f2:	89ab      	ldrh	r3, [r5, #12]
 80065f4:	065b      	lsls	r3, r3, #25
 80065f6:	f53f af1f 	bmi.w	8006438 <_vfiprintf_r+0x44>
 80065fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065fc:	e71e      	b.n	800643c <_vfiprintf_r+0x48>
 80065fe:	ab03      	add	r3, sp, #12
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	462a      	mov	r2, r5
 8006604:	4b05      	ldr	r3, [pc, #20]	@ (800661c <_vfiprintf_r+0x228>)
 8006606:	a904      	add	r1, sp, #16
 8006608:	4630      	mov	r0, r6
 800660a:	f7fc f937 	bl	800287c <_printf_i>
 800660e:	e7e4      	b.n	80065da <_vfiprintf_r+0x1e6>
 8006610:	08006b96 	.word	0x08006b96
 8006614:	08006ba0 	.word	0x08006ba0
 8006618:	0800234d 	.word	0x0800234d
 800661c:	080063d1 	.word	0x080063d1
 8006620:	08006b9c 	.word	0x08006b9c

08006624 <__swbuf_r>:
 8006624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006626:	460e      	mov	r6, r1
 8006628:	4614      	mov	r4, r2
 800662a:	4605      	mov	r5, r0
 800662c:	b118      	cbz	r0, 8006636 <__swbuf_r+0x12>
 800662e:	6a03      	ldr	r3, [r0, #32]
 8006630:	b90b      	cbnz	r3, 8006636 <__swbuf_r+0x12>
 8006632:	f7fc fd03 	bl	800303c <__sinit>
 8006636:	69a3      	ldr	r3, [r4, #24]
 8006638:	60a3      	str	r3, [r4, #8]
 800663a:	89a3      	ldrh	r3, [r4, #12]
 800663c:	071a      	lsls	r2, r3, #28
 800663e:	d501      	bpl.n	8006644 <__swbuf_r+0x20>
 8006640:	6923      	ldr	r3, [r4, #16]
 8006642:	b943      	cbnz	r3, 8006656 <__swbuf_r+0x32>
 8006644:	4621      	mov	r1, r4
 8006646:	4628      	mov	r0, r5
 8006648:	f000 f82a 	bl	80066a0 <__swsetup_r>
 800664c:	b118      	cbz	r0, 8006656 <__swbuf_r+0x32>
 800664e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006652:	4638      	mov	r0, r7
 8006654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	6922      	ldr	r2, [r4, #16]
 800665a:	1a98      	subs	r0, r3, r2
 800665c:	6963      	ldr	r3, [r4, #20]
 800665e:	b2f6      	uxtb	r6, r6
 8006660:	4283      	cmp	r3, r0
 8006662:	4637      	mov	r7, r6
 8006664:	dc05      	bgt.n	8006672 <__swbuf_r+0x4e>
 8006666:	4621      	mov	r1, r4
 8006668:	4628      	mov	r0, r5
 800666a:	f7ff f829 	bl	80056c0 <_fflush_r>
 800666e:	2800      	cmp	r0, #0
 8006670:	d1ed      	bne.n	800664e <__swbuf_r+0x2a>
 8006672:	68a3      	ldr	r3, [r4, #8]
 8006674:	3b01      	subs	r3, #1
 8006676:	60a3      	str	r3, [r4, #8]
 8006678:	6823      	ldr	r3, [r4, #0]
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	6022      	str	r2, [r4, #0]
 800667e:	701e      	strb	r6, [r3, #0]
 8006680:	6962      	ldr	r2, [r4, #20]
 8006682:	1c43      	adds	r3, r0, #1
 8006684:	429a      	cmp	r2, r3
 8006686:	d004      	beq.n	8006692 <__swbuf_r+0x6e>
 8006688:	89a3      	ldrh	r3, [r4, #12]
 800668a:	07db      	lsls	r3, r3, #31
 800668c:	d5e1      	bpl.n	8006652 <__swbuf_r+0x2e>
 800668e:	2e0a      	cmp	r6, #10
 8006690:	d1df      	bne.n	8006652 <__swbuf_r+0x2e>
 8006692:	4621      	mov	r1, r4
 8006694:	4628      	mov	r0, r5
 8006696:	f7ff f813 	bl	80056c0 <_fflush_r>
 800669a:	2800      	cmp	r0, #0
 800669c:	d0d9      	beq.n	8006652 <__swbuf_r+0x2e>
 800669e:	e7d6      	b.n	800664e <__swbuf_r+0x2a>

080066a0 <__swsetup_r>:
 80066a0:	b538      	push	{r3, r4, r5, lr}
 80066a2:	4b29      	ldr	r3, [pc, #164]	@ (8006748 <__swsetup_r+0xa8>)
 80066a4:	4605      	mov	r5, r0
 80066a6:	6818      	ldr	r0, [r3, #0]
 80066a8:	460c      	mov	r4, r1
 80066aa:	b118      	cbz	r0, 80066b4 <__swsetup_r+0x14>
 80066ac:	6a03      	ldr	r3, [r0, #32]
 80066ae:	b90b      	cbnz	r3, 80066b4 <__swsetup_r+0x14>
 80066b0:	f7fc fcc4 	bl	800303c <__sinit>
 80066b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066b8:	0719      	lsls	r1, r3, #28
 80066ba:	d422      	bmi.n	8006702 <__swsetup_r+0x62>
 80066bc:	06da      	lsls	r2, r3, #27
 80066be:	d407      	bmi.n	80066d0 <__swsetup_r+0x30>
 80066c0:	2209      	movs	r2, #9
 80066c2:	602a      	str	r2, [r5, #0]
 80066c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066c8:	81a3      	strh	r3, [r4, #12]
 80066ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066ce:	e033      	b.n	8006738 <__swsetup_r+0x98>
 80066d0:	0758      	lsls	r0, r3, #29
 80066d2:	d512      	bpl.n	80066fa <__swsetup_r+0x5a>
 80066d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066d6:	b141      	cbz	r1, 80066ea <__swsetup_r+0x4a>
 80066d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80066dc:	4299      	cmp	r1, r3
 80066de:	d002      	beq.n	80066e6 <__swsetup_r+0x46>
 80066e0:	4628      	mov	r0, r5
 80066e2:	f7ff fdf3 	bl	80062cc <_free_r>
 80066e6:	2300      	movs	r3, #0
 80066e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80066ea:	89a3      	ldrh	r3, [r4, #12]
 80066ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80066f0:	81a3      	strh	r3, [r4, #12]
 80066f2:	2300      	movs	r3, #0
 80066f4:	6063      	str	r3, [r4, #4]
 80066f6:	6923      	ldr	r3, [r4, #16]
 80066f8:	6023      	str	r3, [r4, #0]
 80066fa:	89a3      	ldrh	r3, [r4, #12]
 80066fc:	f043 0308 	orr.w	r3, r3, #8
 8006700:	81a3      	strh	r3, [r4, #12]
 8006702:	6923      	ldr	r3, [r4, #16]
 8006704:	b94b      	cbnz	r3, 800671a <__swsetup_r+0x7a>
 8006706:	89a3      	ldrh	r3, [r4, #12]
 8006708:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800670c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006710:	d003      	beq.n	800671a <__swsetup_r+0x7a>
 8006712:	4621      	mov	r1, r4
 8006714:	4628      	mov	r0, r5
 8006716:	f000 f83f 	bl	8006798 <__smakebuf_r>
 800671a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800671e:	f013 0201 	ands.w	r2, r3, #1
 8006722:	d00a      	beq.n	800673a <__swsetup_r+0x9a>
 8006724:	2200      	movs	r2, #0
 8006726:	60a2      	str	r2, [r4, #8]
 8006728:	6962      	ldr	r2, [r4, #20]
 800672a:	4252      	negs	r2, r2
 800672c:	61a2      	str	r2, [r4, #24]
 800672e:	6922      	ldr	r2, [r4, #16]
 8006730:	b942      	cbnz	r2, 8006744 <__swsetup_r+0xa4>
 8006732:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006736:	d1c5      	bne.n	80066c4 <__swsetup_r+0x24>
 8006738:	bd38      	pop	{r3, r4, r5, pc}
 800673a:	0799      	lsls	r1, r3, #30
 800673c:	bf58      	it	pl
 800673e:	6962      	ldrpl	r2, [r4, #20]
 8006740:	60a2      	str	r2, [r4, #8]
 8006742:	e7f4      	b.n	800672e <__swsetup_r+0x8e>
 8006744:	2000      	movs	r0, #0
 8006746:	e7f7      	b.n	8006738 <__swsetup_r+0x98>
 8006748:	20000188 	.word	0x20000188

0800674c <__swhatbuf_r>:
 800674c:	b570      	push	{r4, r5, r6, lr}
 800674e:	460c      	mov	r4, r1
 8006750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006754:	2900      	cmp	r1, #0
 8006756:	b096      	sub	sp, #88	@ 0x58
 8006758:	4615      	mov	r5, r2
 800675a:	461e      	mov	r6, r3
 800675c:	da0d      	bge.n	800677a <__swhatbuf_r+0x2e>
 800675e:	89a3      	ldrh	r3, [r4, #12]
 8006760:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006764:	f04f 0100 	mov.w	r1, #0
 8006768:	bf14      	ite	ne
 800676a:	2340      	movne	r3, #64	@ 0x40
 800676c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006770:	2000      	movs	r0, #0
 8006772:	6031      	str	r1, [r6, #0]
 8006774:	602b      	str	r3, [r5, #0]
 8006776:	b016      	add	sp, #88	@ 0x58
 8006778:	bd70      	pop	{r4, r5, r6, pc}
 800677a:	466a      	mov	r2, sp
 800677c:	f000 f848 	bl	8006810 <_fstat_r>
 8006780:	2800      	cmp	r0, #0
 8006782:	dbec      	blt.n	800675e <__swhatbuf_r+0x12>
 8006784:	9901      	ldr	r1, [sp, #4]
 8006786:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800678a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800678e:	4259      	negs	r1, r3
 8006790:	4159      	adcs	r1, r3
 8006792:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006796:	e7eb      	b.n	8006770 <__swhatbuf_r+0x24>

08006798 <__smakebuf_r>:
 8006798:	898b      	ldrh	r3, [r1, #12]
 800679a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800679c:	079d      	lsls	r5, r3, #30
 800679e:	4606      	mov	r6, r0
 80067a0:	460c      	mov	r4, r1
 80067a2:	d507      	bpl.n	80067b4 <__smakebuf_r+0x1c>
 80067a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80067a8:	6023      	str	r3, [r4, #0]
 80067aa:	6123      	str	r3, [r4, #16]
 80067ac:	2301      	movs	r3, #1
 80067ae:	6163      	str	r3, [r4, #20]
 80067b0:	b003      	add	sp, #12
 80067b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067b4:	ab01      	add	r3, sp, #4
 80067b6:	466a      	mov	r2, sp
 80067b8:	f7ff ffc8 	bl	800674c <__swhatbuf_r>
 80067bc:	9f00      	ldr	r7, [sp, #0]
 80067be:	4605      	mov	r5, r0
 80067c0:	4639      	mov	r1, r7
 80067c2:	4630      	mov	r0, r6
 80067c4:	f7fe fe66 	bl	8005494 <_malloc_r>
 80067c8:	b948      	cbnz	r0, 80067de <__smakebuf_r+0x46>
 80067ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067ce:	059a      	lsls	r2, r3, #22
 80067d0:	d4ee      	bmi.n	80067b0 <__smakebuf_r+0x18>
 80067d2:	f023 0303 	bic.w	r3, r3, #3
 80067d6:	f043 0302 	orr.w	r3, r3, #2
 80067da:	81a3      	strh	r3, [r4, #12]
 80067dc:	e7e2      	b.n	80067a4 <__smakebuf_r+0xc>
 80067de:	89a3      	ldrh	r3, [r4, #12]
 80067e0:	6020      	str	r0, [r4, #0]
 80067e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067e6:	81a3      	strh	r3, [r4, #12]
 80067e8:	9b01      	ldr	r3, [sp, #4]
 80067ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80067ee:	b15b      	cbz	r3, 8006808 <__smakebuf_r+0x70>
 80067f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067f4:	4630      	mov	r0, r6
 80067f6:	f000 f81d 	bl	8006834 <_isatty_r>
 80067fa:	b128      	cbz	r0, 8006808 <__smakebuf_r+0x70>
 80067fc:	89a3      	ldrh	r3, [r4, #12]
 80067fe:	f023 0303 	bic.w	r3, r3, #3
 8006802:	f043 0301 	orr.w	r3, r3, #1
 8006806:	81a3      	strh	r3, [r4, #12]
 8006808:	89a3      	ldrh	r3, [r4, #12]
 800680a:	431d      	orrs	r5, r3
 800680c:	81a5      	strh	r5, [r4, #12]
 800680e:	e7cf      	b.n	80067b0 <__smakebuf_r+0x18>

08006810 <_fstat_r>:
 8006810:	b538      	push	{r3, r4, r5, lr}
 8006812:	4d07      	ldr	r5, [pc, #28]	@ (8006830 <_fstat_r+0x20>)
 8006814:	2300      	movs	r3, #0
 8006816:	4604      	mov	r4, r0
 8006818:	4608      	mov	r0, r1
 800681a:	4611      	mov	r1, r2
 800681c:	602b      	str	r3, [r5, #0]
 800681e:	f7fb fbc3 	bl	8001fa8 <_fstat>
 8006822:	1c43      	adds	r3, r0, #1
 8006824:	d102      	bne.n	800682c <_fstat_r+0x1c>
 8006826:	682b      	ldr	r3, [r5, #0]
 8006828:	b103      	cbz	r3, 800682c <_fstat_r+0x1c>
 800682a:	6023      	str	r3, [r4, #0]
 800682c:	bd38      	pop	{r3, r4, r5, pc}
 800682e:	bf00      	nop
 8006830:	2000409c 	.word	0x2000409c

08006834 <_isatty_r>:
 8006834:	b538      	push	{r3, r4, r5, lr}
 8006836:	4d06      	ldr	r5, [pc, #24]	@ (8006850 <_isatty_r+0x1c>)
 8006838:	2300      	movs	r3, #0
 800683a:	4604      	mov	r4, r0
 800683c:	4608      	mov	r0, r1
 800683e:	602b      	str	r3, [r5, #0]
 8006840:	f7fb fbc2 	bl	8001fc8 <_isatty>
 8006844:	1c43      	adds	r3, r0, #1
 8006846:	d102      	bne.n	800684e <_isatty_r+0x1a>
 8006848:	682b      	ldr	r3, [r5, #0]
 800684a:	b103      	cbz	r3, 800684e <_isatty_r+0x1a>
 800684c:	6023      	str	r3, [r4, #0]
 800684e:	bd38      	pop	{r3, r4, r5, pc}
 8006850:	2000409c 	.word	0x2000409c

08006854 <_raise_r>:
 8006854:	291f      	cmp	r1, #31
 8006856:	b538      	push	{r3, r4, r5, lr}
 8006858:	4605      	mov	r5, r0
 800685a:	460c      	mov	r4, r1
 800685c:	d904      	bls.n	8006868 <_raise_r+0x14>
 800685e:	2316      	movs	r3, #22
 8006860:	6003      	str	r3, [r0, #0]
 8006862:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006866:	bd38      	pop	{r3, r4, r5, pc}
 8006868:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800686a:	b112      	cbz	r2, 8006872 <_raise_r+0x1e>
 800686c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006870:	b94b      	cbnz	r3, 8006886 <_raise_r+0x32>
 8006872:	4628      	mov	r0, r5
 8006874:	f000 f830 	bl	80068d8 <_getpid_r>
 8006878:	4622      	mov	r2, r4
 800687a:	4601      	mov	r1, r0
 800687c:	4628      	mov	r0, r5
 800687e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006882:	f000 b817 	b.w	80068b4 <_kill_r>
 8006886:	2b01      	cmp	r3, #1
 8006888:	d00a      	beq.n	80068a0 <_raise_r+0x4c>
 800688a:	1c59      	adds	r1, r3, #1
 800688c:	d103      	bne.n	8006896 <_raise_r+0x42>
 800688e:	2316      	movs	r3, #22
 8006890:	6003      	str	r3, [r0, #0]
 8006892:	2001      	movs	r0, #1
 8006894:	e7e7      	b.n	8006866 <_raise_r+0x12>
 8006896:	2100      	movs	r1, #0
 8006898:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800689c:	4620      	mov	r0, r4
 800689e:	4798      	blx	r3
 80068a0:	2000      	movs	r0, #0
 80068a2:	e7e0      	b.n	8006866 <_raise_r+0x12>

080068a4 <raise>:
 80068a4:	4b02      	ldr	r3, [pc, #8]	@ (80068b0 <raise+0xc>)
 80068a6:	4601      	mov	r1, r0
 80068a8:	6818      	ldr	r0, [r3, #0]
 80068aa:	f7ff bfd3 	b.w	8006854 <_raise_r>
 80068ae:	bf00      	nop
 80068b0:	20000188 	.word	0x20000188

080068b4 <_kill_r>:
 80068b4:	b538      	push	{r3, r4, r5, lr}
 80068b6:	4d07      	ldr	r5, [pc, #28]	@ (80068d4 <_kill_r+0x20>)
 80068b8:	2300      	movs	r3, #0
 80068ba:	4604      	mov	r4, r0
 80068bc:	4608      	mov	r0, r1
 80068be:	4611      	mov	r1, r2
 80068c0:	602b      	str	r3, [r5, #0]
 80068c2:	f7fb fb11 	bl	8001ee8 <_kill>
 80068c6:	1c43      	adds	r3, r0, #1
 80068c8:	d102      	bne.n	80068d0 <_kill_r+0x1c>
 80068ca:	682b      	ldr	r3, [r5, #0]
 80068cc:	b103      	cbz	r3, 80068d0 <_kill_r+0x1c>
 80068ce:	6023      	str	r3, [r4, #0]
 80068d0:	bd38      	pop	{r3, r4, r5, pc}
 80068d2:	bf00      	nop
 80068d4:	2000409c 	.word	0x2000409c

080068d8 <_getpid_r>:
 80068d8:	f7fb bafe 	b.w	8001ed8 <_getpid>

080068dc <_init>:
 80068dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068de:	bf00      	nop
 80068e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068e2:	bc08      	pop	{r3}
 80068e4:	469e      	mov	lr, r3
 80068e6:	4770      	bx	lr

080068e8 <_fini>:
 80068e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ea:	bf00      	nop
 80068ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ee:	bc08      	pop	{r3}
 80068f0:	469e      	mov	lr, r3
 80068f2:	4770      	bx	lr
