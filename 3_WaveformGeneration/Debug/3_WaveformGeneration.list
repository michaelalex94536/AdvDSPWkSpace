
3_WaveformGeneration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a6c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c4c  08006c10  08006c10  00007c10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800785c  0800785c  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800785c  0800785c  0000885c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007864  08007864  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007864  08007864  00008864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007868  08007868  00008868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800786c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f08  200001d4  08007a40  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040dc  08007a40  0000a0dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005a11  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001578  00000000  00000000  0000ec15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000558  00000000  00000000  00010190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000381  00000000  00000000  000106e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ef2d  00000000  00000000  00010a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000066d6  00000000  00000000  0001f996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005d68b  00000000  00000000  0002606c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  000836f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027a8  00000000  00000000  000837a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00085f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000d13  00000000  00000000  00085fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000000c0  00000000  00000000  00086cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006bf4 	.word	0x08006bf4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08006bf4 	.word	0x08006bf4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f103 0208 	add.w	r2, r3, #8
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f103 0208 	add.w	r2, r3, #8
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f103 0208 	add.w	r2, r3, #8
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b085      	sub	sp, #20
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
 8000d66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	68fa      	ldr	r2, [r7, #12]
 8000d72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	683a      	ldr	r2, [r7, #0]
 8000d82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	1c5a      	adds	r2, r3, #1
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	601a      	str	r2, [r3, #0]
}
 8000d9a:	bf00      	nop
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000da6:	b480      	push	{r7}
 8000da8:	b085      	sub	sp, #20
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	691b      	ldr	r3, [r3, #16]
 8000db2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	6892      	ldr	r2, [r2, #8]
 8000dbc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	6852      	ldr	r2, [r2, #4]
 8000dc6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d103      	bne.n	8000dda <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689a      	ldr	r2, [r3, #8]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	1e5a      	subs	r2, r3, #1
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681b      	ldr	r3, [r3, #0]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b08c      	sub	sp, #48	@ 0x30
 8000dfe:	af04      	add	r7, sp, #16
 8000e00:	60f8      	str	r0, [r7, #12]
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	603b      	str	r3, [r7, #0]
 8000e06:	4613      	mov	r3, r2
 8000e08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000e0a:	88fb      	ldrh	r3, [r7, #6]
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 fc7c 	bl	800170c <pvPortMalloc>
 8000e14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d00e      	beq.n	8000e3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000e1c:	205c      	movs	r0, #92	@ 0x5c
 8000e1e:	f000 fc75 	bl	800170c <pvPortMalloc>
 8000e22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e30:	e005      	b.n	8000e3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000e32:	6978      	ldr	r0, [r7, #20]
 8000e34:	f000 fd38 	bl	80018a8 <vPortFree>
 8000e38:	e001      	b.n	8000e3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d013      	beq.n	8000e6c <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000e44:	88fa      	ldrh	r2, [r7, #6]
 8000e46:	2300      	movs	r3, #0
 8000e48:	9303      	str	r3, [sp, #12]
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	9302      	str	r3, [sp, #8]
 8000e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e50:	9301      	str	r3, [sp, #4]
 8000e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f000 f80e 	bl	8000e7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000e60:	69f8      	ldr	r0, [r7, #28]
 8000e62:	f000 f89b 	bl	8000f9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000e66:	2301      	movs	r3, #1
 8000e68:	61bb      	str	r3, [r7, #24]
 8000e6a:	e002      	b.n	8000e72 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000e6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e70:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000e72:	69bb      	ldr	r3, [r7, #24]
	}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3720      	adds	r7, #32
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e8c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	461a      	mov	r2, r3
 8000e94:	21a5      	movs	r1, #165	@ 0xa5
 8000e96:	f003 f927 	bl	80040e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4413      	add	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	f023 0307 	bic.w	r3, r3, #7
 8000eb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d00b      	beq.n	8000ed6 <prvInitialiseNewTask+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ec2:	f383 8811 	msr	BASEPRI, r3
 8000ec6:	f3bf 8f6f 	isb	sy
 8000eca:	f3bf 8f4f 	dsb	sy
 8000ece:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	e7fd      	b.n	8000ed2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d01f      	beq.n	8000f1c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
 8000ee0:	e012      	b.n	8000f08 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	7819      	ldrb	r1, [r3, #0]
 8000eea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	4413      	add	r3, r2
 8000ef0:	3334      	adds	r3, #52	@ 0x34
 8000ef2:	460a      	mov	r2, r1
 8000ef4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	4413      	add	r3, r2
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d006      	beq.n	8000f10 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3301      	adds	r3, #1
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	2b0f      	cmp	r3, #15
 8000f0c:	d9e9      	bls.n	8000ee2 <prvInitialiseNewTask+0x66>
 8000f0e:	e000      	b.n	8000f12 <prvInitialiseNewTask+0x96>
			{
				break;
 8000f10:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8000f1a:	e003      	b.n	8000f24 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d901      	bls.n	8000f2e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000f2a:	2306      	movs	r3, #6
 8000f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f32:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f38:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8000f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f42:	3304      	adds	r3, #4
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fefd 	bl	8000d44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f4c:	3318      	adds	r3, #24
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fef8 	bl	8000d44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f58:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f5c:	f1c3 0207 	rsb	r2, r3, #7
 8000f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f62:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f68:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	68f9      	ldr	r1, [r7, #12]
 8000f7c:	69b8      	ldr	r0, [r7, #24]
 8000f7e:	f000 fa9d 	bl	80014bc <pxPortInitialiseStack>
 8000f82:	4602      	mov	r2, r0
 8000f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f86:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8000f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d002      	beq.n	8000f94 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000f94:	bf00      	nop
 8000f96:	3720      	adds	r7, #32
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000fa4:	f000 fb00 	bl	80015a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000fa8:	4b2c      	ldr	r3, [pc, #176]	@ (800105c <prvAddNewTaskToReadyList+0xc0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	4a2b      	ldr	r2, [pc, #172]	@ (800105c <prvAddNewTaskToReadyList+0xc0>)
 8000fb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000fb2:	4b2b      	ldr	r3, [pc, #172]	@ (8001060 <prvAddNewTaskToReadyList+0xc4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d109      	bne.n	8000fce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000fba:	4a29      	ldr	r2, [pc, #164]	@ (8001060 <prvAddNewTaskToReadyList+0xc4>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000fc0:	4b26      	ldr	r3, [pc, #152]	@ (800105c <prvAddNewTaskToReadyList+0xc0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d110      	bne.n	8000fea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000fc8:	f000 fa18 	bl	80013fc <prvInitialiseTaskLists>
 8000fcc:	e00d      	b.n	8000fea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000fce:	4b25      	ldr	r3, [pc, #148]	@ (8001064 <prvAddNewTaskToReadyList+0xc8>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d109      	bne.n	8000fea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000fd6:	4b22      	ldr	r3, [pc, #136]	@ (8001060 <prvAddNewTaskToReadyList+0xc4>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d802      	bhi.n	8000fea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000fe4:	4a1e      	ldr	r2, [pc, #120]	@ (8001060 <prvAddNewTaskToReadyList+0xc4>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000fea:	4b1f      	ldr	r3, [pc, #124]	@ (8001068 <prvAddNewTaskToReadyList+0xcc>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8001068 <prvAddNewTaskToReadyList+0xcc>)
 8000ff2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8001068 <prvAddNewTaskToReadyList+0xcc>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001000:	2201      	movs	r2, #1
 8001002:	409a      	lsls	r2, r3
 8001004:	4b19      	ldr	r3, [pc, #100]	@ (800106c <prvAddNewTaskToReadyList+0xd0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4313      	orrs	r3, r2
 800100a:	4a18      	ldr	r2, [pc, #96]	@ (800106c <prvAddNewTaskToReadyList+0xd0>)
 800100c:	6013      	str	r3, [r2, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001012:	4613      	mov	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4a15      	ldr	r2, [pc, #84]	@ (8001070 <prvAddNewTaskToReadyList+0xd4>)
 800101c:	441a      	add	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3304      	adds	r3, #4
 8001022:	4619      	mov	r1, r3
 8001024:	4610      	mov	r0, r2
 8001026:	f7ff fe9a 	bl	8000d5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800102a:	f000 faef 	bl	800160c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800102e:	4b0d      	ldr	r3, [pc, #52]	@ (8001064 <prvAddNewTaskToReadyList+0xc8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00e      	beq.n	8001054 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001036:	4b0a      	ldr	r3, [pc, #40]	@ (8001060 <prvAddNewTaskToReadyList+0xc4>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001040:	429a      	cmp	r2, r3
 8001042:	d207      	bcs.n	8001054 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001044:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <prvAddNewTaskToReadyList+0xd8>)
 8001046:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	f3bf 8f4f 	dsb	sy
 8001050:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200002ec 	.word	0x200002ec
 8001060:	200001f0 	.word	0x200001f0
 8001064:	200002f8 	.word	0x200002f8
 8001068:	20000308 	.word	0x20000308
 800106c:	200002f4 	.word	0x200002f4
 8001070:	200001f4 	.word	0x200001f4
 8001074:	e000ed04 	.word	0xe000ed04

08001078 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800107c:	4b04      	ldr	r3, [pc, #16]	@ (8001090 <vTaskSuspendAll+0x18>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	3301      	adds	r3, #1
 8001082:	4a03      	ldr	r2, [pc, #12]	@ (8001090 <vTaskSuspendAll+0x18>)
 8001084:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	20000310 	.word	0x20000310

08001094 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80010a2:	4b42      	ldr	r3, [pc, #264]	@ (80011ac <xTaskResumeAll+0x118>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d10b      	bne.n	80010c2 <xTaskResumeAll+0x2e>
	__asm volatile
 80010aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010ae:	f383 8811 	msr	BASEPRI, r3
 80010b2:	f3bf 8f6f 	isb	sy
 80010b6:	f3bf 8f4f 	dsb	sy
 80010ba:	603b      	str	r3, [r7, #0]
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	e7fd      	b.n	80010be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80010c2:	f000 fa71 	bl	80015a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80010c6:	4b39      	ldr	r3, [pc, #228]	@ (80011ac <xTaskResumeAll+0x118>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	4a37      	ldr	r2, [pc, #220]	@ (80011ac <xTaskResumeAll+0x118>)
 80010ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80010d0:	4b36      	ldr	r3, [pc, #216]	@ (80011ac <xTaskResumeAll+0x118>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d161      	bne.n	800119c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80010d8:	4b35      	ldr	r3, [pc, #212]	@ (80011b0 <xTaskResumeAll+0x11c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d05d      	beq.n	800119c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80010e0:	e02e      	b.n	8001140 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80010e2:	4b34      	ldr	r3, [pc, #208]	@ (80011b4 <xTaskResumeAll+0x120>)
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	3318      	adds	r3, #24
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fe59 	bl	8000da6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	3304      	adds	r3, #4
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fe54 	bl	8000da6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001102:	2201      	movs	r2, #1
 8001104:	409a      	lsls	r2, r3
 8001106:	4b2c      	ldr	r3, [pc, #176]	@ (80011b8 <xTaskResumeAll+0x124>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4313      	orrs	r3, r2
 800110c:	4a2a      	ldr	r2, [pc, #168]	@ (80011b8 <xTaskResumeAll+0x124>)
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001114:	4613      	mov	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4a27      	ldr	r2, [pc, #156]	@ (80011bc <xTaskResumeAll+0x128>)
 800111e:	441a      	add	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3304      	adds	r3, #4
 8001124:	4619      	mov	r1, r3
 8001126:	4610      	mov	r0, r2
 8001128:	f7ff fe19 	bl	8000d5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001130:	4b23      	ldr	r3, [pc, #140]	@ (80011c0 <xTaskResumeAll+0x12c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001136:	429a      	cmp	r2, r3
 8001138:	d302      	bcc.n	8001140 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800113a:	4b22      	ldr	r3, [pc, #136]	@ (80011c4 <xTaskResumeAll+0x130>)
 800113c:	2201      	movs	r2, #1
 800113e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001140:	4b1c      	ldr	r3, [pc, #112]	@ (80011b4 <xTaskResumeAll+0x120>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1cc      	bne.n	80010e2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800114e:	f000 f995 	bl	800147c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001152:	4b1d      	ldr	r3, [pc, #116]	@ (80011c8 <xTaskResumeAll+0x134>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d010      	beq.n	8001180 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800115e:	f000 f837 	bl	80011d0 <xTaskIncrementTick>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8001168:	4b16      	ldr	r3, [pc, #88]	@ (80011c4 <xTaskResumeAll+0x130>)
 800116a:	2201      	movs	r2, #1
 800116c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3b01      	subs	r3, #1
 8001172:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f1      	bne.n	800115e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800117a:	4b13      	ldr	r3, [pc, #76]	@ (80011c8 <xTaskResumeAll+0x134>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001180:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <xTaskResumeAll+0x130>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d009      	beq.n	800119c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001188:	2301      	movs	r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800118c:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <xTaskResumeAll+0x138>)
 800118e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	f3bf 8f4f 	dsb	sy
 8001198:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800119c:	f000 fa36 	bl	800160c <vPortExitCritical>

	return xAlreadyYielded;
 80011a0:	68bb      	ldr	r3, [r7, #8]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000310 	.word	0x20000310
 80011b0:	200002ec 	.word	0x200002ec
 80011b4:	200002b0 	.word	0x200002b0
 80011b8:	200002f4 	.word	0x200002f4
 80011bc:	200001f4 	.word	0x200001f4
 80011c0:	200001f0 	.word	0x200001f0
 80011c4:	20000300 	.word	0x20000300
 80011c8:	200002fc 	.word	0x200002fc
 80011cc:	e000ed04 	.word	0xe000ed04

080011d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80011da:	4b4f      	ldr	r3, [pc, #316]	@ (8001318 <xTaskIncrementTick+0x148>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f040 808f 	bne.w	8001302 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80011e4:	4b4d      	ldr	r3, [pc, #308]	@ (800131c <xTaskIncrementTick+0x14c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80011ec:	4a4b      	ldr	r2, [pc, #300]	@ (800131c <xTaskIncrementTick+0x14c>)
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d121      	bne.n	800123c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80011f8:	4b49      	ldr	r3, [pc, #292]	@ (8001320 <xTaskIncrementTick+0x150>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00b      	beq.n	800121a <xTaskIncrementTick+0x4a>
	__asm volatile
 8001202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001206:	f383 8811 	msr	BASEPRI, r3
 800120a:	f3bf 8f6f 	isb	sy
 800120e:	f3bf 8f4f 	dsb	sy
 8001212:	603b      	str	r3, [r7, #0]
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	e7fd      	b.n	8001216 <xTaskIncrementTick+0x46>
 800121a:	4b41      	ldr	r3, [pc, #260]	@ (8001320 <xTaskIncrementTick+0x150>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	4b40      	ldr	r3, [pc, #256]	@ (8001324 <xTaskIncrementTick+0x154>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a3e      	ldr	r2, [pc, #248]	@ (8001320 <xTaskIncrementTick+0x150>)
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	4a3e      	ldr	r2, [pc, #248]	@ (8001324 <xTaskIncrementTick+0x154>)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	4b3e      	ldr	r3, [pc, #248]	@ (8001328 <xTaskIncrementTick+0x158>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	3301      	adds	r3, #1
 8001234:	4a3c      	ldr	r2, [pc, #240]	@ (8001328 <xTaskIncrementTick+0x158>)
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	f000 f920 	bl	800147c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800123c:	4b3b      	ldr	r3, [pc, #236]	@ (800132c <xTaskIncrementTick+0x15c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	429a      	cmp	r2, r3
 8001244:	d348      	bcc.n	80012d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001246:	4b36      	ldr	r3, [pc, #216]	@ (8001320 <xTaskIncrementTick+0x150>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d104      	bne.n	800125a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001250:	4b36      	ldr	r3, [pc, #216]	@ (800132c <xTaskIncrementTick+0x15c>)
 8001252:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001256:	601a      	str	r2, [r3, #0]
					break;
 8001258:	e03e      	b.n	80012d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800125a:	4b31      	ldr	r3, [pc, #196]	@ (8001320 <xTaskIncrementTick+0x150>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	429a      	cmp	r2, r3
 8001270:	d203      	bcs.n	800127a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001272:	4a2e      	ldr	r2, [pc, #184]	@ (800132c <xTaskIncrementTick+0x15c>)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001278:	e02e      	b.n	80012d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	3304      	adds	r3, #4
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fd91 	bl	8000da6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001288:	2b00      	cmp	r3, #0
 800128a:	d004      	beq.n	8001296 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	3318      	adds	r3, #24
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fd88 	bl	8000da6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800129a:	2201      	movs	r2, #1
 800129c:	409a      	lsls	r2, r3
 800129e:	4b24      	ldr	r3, [pc, #144]	@ (8001330 <xTaskIncrementTick+0x160>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	4a22      	ldr	r2, [pc, #136]	@ (8001330 <xTaskIncrementTick+0x160>)
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012ac:	4613      	mov	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4a1f      	ldr	r2, [pc, #124]	@ (8001334 <xTaskIncrementTick+0x164>)
 80012b6:	441a      	add	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	3304      	adds	r3, #4
 80012bc:	4619      	mov	r1, r3
 80012be:	4610      	mov	r0, r2
 80012c0:	f7ff fd4d 	bl	8000d5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001338 <xTaskIncrementTick+0x168>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d3b9      	bcc.n	8001246 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80012d2:	2301      	movs	r3, #1
 80012d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80012d6:	e7b6      	b.n	8001246 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80012d8:	4b17      	ldr	r3, [pc, #92]	@ (8001338 <xTaskIncrementTick+0x168>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012de:	4915      	ldr	r1, [pc, #84]	@ (8001334 <xTaskIncrementTick+0x164>)
 80012e0:	4613      	mov	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	440b      	add	r3, r1
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d901      	bls.n	80012f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80012f0:	2301      	movs	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80012f4:	4b11      	ldr	r3, [pc, #68]	@ (800133c <xTaskIncrementTick+0x16c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d007      	beq.n	800130c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80012fc:	2301      	movs	r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	e004      	b.n	800130c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001302:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <xTaskIncrementTick+0x170>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	3301      	adds	r3, #1
 8001308:	4a0d      	ldr	r2, [pc, #52]	@ (8001340 <xTaskIncrementTick+0x170>)
 800130a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800130c:	697b      	ldr	r3, [r7, #20]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000310 	.word	0x20000310
 800131c:	200002f0 	.word	0x200002f0
 8001320:	200002a8 	.word	0x200002a8
 8001324:	200002ac 	.word	0x200002ac
 8001328:	20000304 	.word	0x20000304
 800132c:	2000030c 	.word	0x2000030c
 8001330:	200002f4 	.word	0x200002f4
 8001334:	200001f4 	.word	0x200001f4
 8001338:	200001f0 	.word	0x200001f0
 800133c:	20000300 	.word	0x20000300
 8001340:	200002fc 	.word	0x200002fc

08001344 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001344:	b480      	push	{r7}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800134a:	4b27      	ldr	r3, [pc, #156]	@ (80013e8 <vTaskSwitchContext+0xa4>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001352:	4b26      	ldr	r3, [pc, #152]	@ (80013ec <vTaskSwitchContext+0xa8>)
 8001354:	2201      	movs	r2, #1
 8001356:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001358:	e040      	b.n	80013dc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800135a:	4b24      	ldr	r3, [pc, #144]	@ (80013ec <vTaskSwitchContext+0xa8>)
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001360:	4b23      	ldr	r3, [pc, #140]	@ (80013f0 <vTaskSwitchContext+0xac>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	fab3 f383 	clz	r3, r3
 800136c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800136e:	7afb      	ldrb	r3, [r7, #11]
 8001370:	f1c3 031f 	rsb	r3, r3, #31
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	491f      	ldr	r1, [pc, #124]	@ (80013f4 <vTaskSwitchContext+0xb0>)
 8001378:	697a      	ldr	r2, [r7, #20]
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	440b      	add	r3, r1
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10b      	bne.n	80013a2 <vTaskSwitchContext+0x5e>
	__asm volatile
 800138a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800138e:	f383 8811 	msr	BASEPRI, r3
 8001392:	f3bf 8f6f 	isb	sy
 8001396:	f3bf 8f4f 	dsb	sy
 800139a:	607b      	str	r3, [r7, #4]
}
 800139c:	bf00      	nop
 800139e:	bf00      	nop
 80013a0:	e7fd      	b.n	800139e <vTaskSwitchContext+0x5a>
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	4613      	mov	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4a11      	ldr	r2, [pc, #68]	@ (80013f4 <vTaskSwitchContext+0xb0>)
 80013ae:	4413      	add	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	3308      	adds	r3, #8
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d104      	bne.n	80013d2 <vTaskSwitchContext+0x8e>
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	4a07      	ldr	r2, [pc, #28]	@ (80013f8 <vTaskSwitchContext+0xb4>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	371c      	adds	r7, #28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	20000310 	.word	0x20000310
 80013ec:	20000300 	.word	0x20000300
 80013f0:	200002f4 	.word	0x200002f4
 80013f4:	200001f4 	.word	0x200001f4
 80013f8:	200001f0 	.word	0x200001f0

080013fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	e00c      	b.n	8001422 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	4613      	mov	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4a12      	ldr	r2, [pc, #72]	@ (800145c <prvInitialiseTaskLists+0x60>)
 8001414:	4413      	add	r3, r2
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fc74 	bl	8000d04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3301      	adds	r3, #1
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b06      	cmp	r3, #6
 8001426:	d9ef      	bls.n	8001408 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001428:	480d      	ldr	r0, [pc, #52]	@ (8001460 <prvInitialiseTaskLists+0x64>)
 800142a:	f7ff fc6b 	bl	8000d04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800142e:	480d      	ldr	r0, [pc, #52]	@ (8001464 <prvInitialiseTaskLists+0x68>)
 8001430:	f7ff fc68 	bl	8000d04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001434:	480c      	ldr	r0, [pc, #48]	@ (8001468 <prvInitialiseTaskLists+0x6c>)
 8001436:	f7ff fc65 	bl	8000d04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800143a:	480c      	ldr	r0, [pc, #48]	@ (800146c <prvInitialiseTaskLists+0x70>)
 800143c:	f7ff fc62 	bl	8000d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001440:	480b      	ldr	r0, [pc, #44]	@ (8001470 <prvInitialiseTaskLists+0x74>)
 8001442:	f7ff fc5f 	bl	8000d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001446:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <prvInitialiseTaskLists+0x78>)
 8001448:	4a05      	ldr	r2, [pc, #20]	@ (8001460 <prvInitialiseTaskLists+0x64>)
 800144a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800144c:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <prvInitialiseTaskLists+0x7c>)
 800144e:	4a05      	ldr	r2, [pc, #20]	@ (8001464 <prvInitialiseTaskLists+0x68>)
 8001450:	601a      	str	r2, [r3, #0]
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200001f4 	.word	0x200001f4
 8001460:	20000280 	.word	0x20000280
 8001464:	20000294 	.word	0x20000294
 8001468:	200002b0 	.word	0x200002b0
 800146c:	200002c4 	.word	0x200002c4
 8001470:	200002d8 	.word	0x200002d8
 8001474:	200002a8 	.word	0x200002a8
 8001478:	200002ac 	.word	0x200002ac

0800147c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001482:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <prvResetNextTaskUnblockTime+0x38>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d104      	bne.n	8001496 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800148c:	4b0a      	ldr	r3, [pc, #40]	@ (80014b8 <prvResetNextTaskUnblockTime+0x3c>)
 800148e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001492:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001494:	e008      	b.n	80014a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001496:	4b07      	ldr	r3, [pc, #28]	@ (80014b4 <prvResetNextTaskUnblockTime+0x38>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	4a04      	ldr	r2, [pc, #16]	@ (80014b8 <prvResetNextTaskUnblockTime+0x3c>)
 80014a6:	6013      	str	r3, [r2, #0]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	200002a8 	.word	0x200002a8
 80014b8:	2000030c 	.word	0x2000030c

080014bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	3b04      	subs	r3, #4
 80014cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80014d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	3b04      	subs	r3, #4
 80014da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	f023 0201 	bic.w	r2, r3, #1
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3b04      	subs	r3, #4
 80014ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80014ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001520 <pxPortInitialiseStack+0x64>)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	3b14      	subs	r3, #20
 80014f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	3b04      	subs	r3, #4
 8001502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f06f 0202 	mvn.w	r2, #2
 800150a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	3b20      	subs	r3, #32
 8001510:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001512:	68fb      	ldr	r3, [r7, #12]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	08001525 	.word	0x08001525

08001524 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800152e:	4b13      	ldr	r3, [pc, #76]	@ (800157c <prvTaskExitError+0x58>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001536:	d00b      	beq.n	8001550 <prvTaskExitError+0x2c>
	__asm volatile
 8001538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800153c:	f383 8811 	msr	BASEPRI, r3
 8001540:	f3bf 8f6f 	isb	sy
 8001544:	f3bf 8f4f 	dsb	sy
 8001548:	60fb      	str	r3, [r7, #12]
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <prvTaskExitError+0x28>
	__asm volatile
 8001550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001554:	f383 8811 	msr	BASEPRI, r3
 8001558:	f3bf 8f6f 	isb	sy
 800155c:	f3bf 8f4f 	dsb	sy
 8001560:	60bb      	str	r3, [r7, #8]
}
 8001562:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001564:	bf00      	nop
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0fc      	beq.n	8001566 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800156c:	bf00      	nop
 800156e:	bf00      	nop
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20000000 	.word	0x20000000

08001580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001580:	4b07      	ldr	r3, [pc, #28]	@ (80015a0 <pxCurrentTCBConst2>)
 8001582:	6819      	ldr	r1, [r3, #0]
 8001584:	6808      	ldr	r0, [r1, #0]
 8001586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800158a:	f380 8809 	msr	PSP, r0
 800158e:	f3bf 8f6f 	isb	sy
 8001592:	f04f 0000 	mov.w	r0, #0
 8001596:	f380 8811 	msr	BASEPRI, r0
 800159a:	4770      	bx	lr
 800159c:	f3af 8000 	nop.w

080015a0 <pxCurrentTCBConst2>:
 80015a0:	200001f0 	.word	0x200001f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop

080015a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
	__asm volatile
 80015ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015b2:	f383 8811 	msr	BASEPRI, r3
 80015b6:	f3bf 8f6f 	isb	sy
 80015ba:	f3bf 8f4f 	dsb	sy
 80015be:	607b      	str	r3, [r7, #4]
}
 80015c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80015c2:	4b10      	ldr	r3, [pc, #64]	@ (8001604 <vPortEnterCritical+0x5c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001604 <vPortEnterCritical+0x5c>)
 80015ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80015cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001604 <vPortEnterCritical+0x5c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d110      	bne.n	80015f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80015d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <vPortEnterCritical+0x60>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00b      	beq.n	80015f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80015de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015e2:	f383 8811 	msr	BASEPRI, r3
 80015e6:	f3bf 8f6f 	isb	sy
 80015ea:	f3bf 8f4f 	dsb	sy
 80015ee:	603b      	str	r3, [r7, #0]
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	e7fd      	b.n	80015f2 <vPortEnterCritical+0x4a>
	}
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20000000 	.word	0x20000000
 8001608:	e000ed04 	.word	0xe000ed04

0800160c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8001612:	4b12      	ldr	r3, [pc, #72]	@ (800165c <vPortExitCritical+0x50>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10b      	bne.n	8001632 <vPortExitCritical+0x26>
	__asm volatile
 800161a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800161e:	f383 8811 	msr	BASEPRI, r3
 8001622:	f3bf 8f6f 	isb	sy
 8001626:	f3bf 8f4f 	dsb	sy
 800162a:	607b      	str	r3, [r7, #4]
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	e7fd      	b.n	800162e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8001632:	4b0a      	ldr	r3, [pc, #40]	@ (800165c <vPortExitCritical+0x50>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	3b01      	subs	r3, #1
 8001638:	4a08      	ldr	r2, [pc, #32]	@ (800165c <vPortExitCritical+0x50>)
 800163a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800163c:	4b07      	ldr	r3, [pc, #28]	@ (800165c <vPortExitCritical+0x50>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d105      	bne.n	8001650 <vPortExitCritical+0x44>
 8001644:	2300      	movs	r3, #0
 8001646:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800164e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	20000000 	.word	0x20000000

08001660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001660:	f3ef 8009 	mrs	r0, PSP
 8001664:	f3bf 8f6f 	isb	sy
 8001668:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <pxCurrentTCBConst>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	f01e 0f10 	tst.w	lr, #16
 8001670:	bf08      	it	eq
 8001672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800167a:	6010      	str	r0, [r2, #0]
 800167c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001680:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8001684:	f380 8811 	msr	BASEPRI, r0
 8001688:	f3bf 8f4f 	dsb	sy
 800168c:	f3bf 8f6f 	isb	sy
 8001690:	f7ff fe58 	bl	8001344 <vTaskSwitchContext>
 8001694:	f04f 0000 	mov.w	r0, #0
 8001698:	f380 8811 	msr	BASEPRI, r0
 800169c:	bc09      	pop	{r0, r3}
 800169e:	6819      	ldr	r1, [r3, #0]
 80016a0:	6808      	ldr	r0, [r1, #0]
 80016a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016a6:	f01e 0f10 	tst.w	lr, #16
 80016aa:	bf08      	it	eq
 80016ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80016b0:	f380 8809 	msr	PSP, r0
 80016b4:	f3bf 8f6f 	isb	sy
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	f3af 8000 	nop.w

080016c0 <pxCurrentTCBConst>:
 80016c0:	200001f0 	.word	0x200001f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80016c4:	bf00      	nop
 80016c6:	bf00      	nop

080016c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
	__asm volatile
 80016ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016d2:	f383 8811 	msr	BASEPRI, r3
 80016d6:	f3bf 8f6f 	isb	sy
 80016da:	f3bf 8f4f 	dsb	sy
 80016de:	607b      	str	r3, [r7, #4]
}
 80016e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80016e2:	f7ff fd75 	bl	80011d0 <xTaskIncrementTick>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80016ec:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <SysTick_Handler+0x40>)
 80016ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	2300      	movs	r3, #0
 80016f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	f383 8811 	msr	BASEPRI, r3
}
 80016fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	e000ed04 	.word	0xe000ed04

0800170c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	@ 0x28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001718:	f7ff fcae 	bl	8001078 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800171c:	4b5c      	ldr	r3, [pc, #368]	@ (8001890 <pvPortMalloc+0x184>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001724:	f000 f924 	bl	8001970 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001728:	4b5a      	ldr	r3, [pc, #360]	@ (8001894 <pvPortMalloc+0x188>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4013      	ands	r3, r2
 8001730:	2b00      	cmp	r3, #0
 8001732:	f040 8095 	bne.w	8001860 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d01e      	beq.n	800177a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800173c:	2208      	movs	r2, #8
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	2b00      	cmp	r3, #0
 800174c:	d015      	beq.n	800177a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f023 0307 	bic.w	r3, r3, #7
 8001754:	3308      	adds	r3, #8
 8001756:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00b      	beq.n	800177a <pvPortMalloc+0x6e>
	__asm volatile
 8001762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001766:	f383 8811 	msr	BASEPRI, r3
 800176a:	f3bf 8f6f 	isb	sy
 800176e:	f3bf 8f4f 	dsb	sy
 8001772:	617b      	str	r3, [r7, #20]
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	e7fd      	b.n	8001776 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d06f      	beq.n	8001860 <pvPortMalloc+0x154>
 8001780:	4b45      	ldr	r3, [pc, #276]	@ (8001898 <pvPortMalloc+0x18c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	429a      	cmp	r2, r3
 8001788:	d86a      	bhi.n	8001860 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800178a:	4b44      	ldr	r3, [pc, #272]	@ (800189c <pvPortMalloc+0x190>)
 800178c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800178e:	4b43      	ldr	r3, [pc, #268]	@ (800189c <pvPortMalloc+0x190>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001794:	e004      	b.n	80017a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001798:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800179a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80017a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d903      	bls.n	80017b2 <pvPortMalloc+0xa6>
 80017aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f1      	bne.n	8001796 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80017b2:	4b37      	ldr	r3, [pc, #220]	@ (8001890 <pvPortMalloc+0x184>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d051      	beq.n	8001860 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2208      	movs	r2, #8
 80017c2:	4413      	add	r3, r2
 80017c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80017c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80017ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	1ad2      	subs	r2, r2, r3
 80017d6:	2308      	movs	r3, #8
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	429a      	cmp	r2, r3
 80017dc:	d920      	bls.n	8001820 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80017de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4413      	add	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00b      	beq.n	8001808 <pvPortMalloc+0xfc>
	__asm volatile
 80017f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017f4:	f383 8811 	msr	BASEPRI, r3
 80017f8:	f3bf 8f6f 	isb	sy
 80017fc:	f3bf 8f4f 	dsb	sy
 8001800:	613b      	str	r3, [r7, #16]
}
 8001802:	bf00      	nop
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	1ad2      	subs	r2, r2, r3
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800181a:	69b8      	ldr	r0, [r7, #24]
 800181c:	f000 f90a 	bl	8001a34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001820:	4b1d      	ldr	r3, [pc, #116]	@ (8001898 <pvPortMalloc+0x18c>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	4a1b      	ldr	r2, [pc, #108]	@ (8001898 <pvPortMalloc+0x18c>)
 800182c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800182e:	4b1a      	ldr	r3, [pc, #104]	@ (8001898 <pvPortMalloc+0x18c>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <pvPortMalloc+0x194>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d203      	bcs.n	8001842 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800183a:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <pvPortMalloc+0x18c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a18      	ldr	r2, [pc, #96]	@ (80018a0 <pvPortMalloc+0x194>)
 8001840:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	4b13      	ldr	r3, [pc, #76]	@ (8001894 <pvPortMalloc+0x188>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	431a      	orrs	r2, r3
 800184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8001856:	4b13      	ldr	r3, [pc, #76]	@ (80018a4 <pvPortMalloc+0x198>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	3301      	adds	r3, #1
 800185c:	4a11      	ldr	r2, [pc, #68]	@ (80018a4 <pvPortMalloc+0x198>)
 800185e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001860:	f7ff fc18 	bl	8001094 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00b      	beq.n	8001886 <pvPortMalloc+0x17a>
	__asm volatile
 800186e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001872:	f383 8811 	msr	BASEPRI, r3
 8001876:	f3bf 8f6f 	isb	sy
 800187a:	f3bf 8f4f 	dsb	sy
 800187e:	60fb      	str	r3, [r7, #12]
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	e7fd      	b.n	8001882 <pvPortMalloc+0x176>
	return pvReturn;
 8001886:	69fb      	ldr	r3, [r7, #28]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3728      	adds	r7, #40	@ 0x28
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20003f1c 	.word	0x20003f1c
 8001894:	20003f30 	.word	0x20003f30
 8001898:	20003f20 	.word	0x20003f20
 800189c:	20003f14 	.word	0x20003f14
 80018a0:	20003f24 	.word	0x20003f24
 80018a4:	20003f28 	.word	0x20003f28

080018a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d04f      	beq.n	800195a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80018ba:	2308      	movs	r3, #8
 80018bc:	425b      	negs	r3, r3
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4413      	add	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	4b25      	ldr	r3, [pc, #148]	@ (8001964 <vPortFree+0xbc>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10b      	bne.n	80018ee <vPortFree+0x46>
	__asm volatile
 80018d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018da:	f383 8811 	msr	BASEPRI, r3
 80018de:	f3bf 8f6f 	isb	sy
 80018e2:	f3bf 8f4f 	dsb	sy
 80018e6:	60fb      	str	r3, [r7, #12]
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	e7fd      	b.n	80018ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00b      	beq.n	800190e <vPortFree+0x66>
	__asm volatile
 80018f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018fa:	f383 8811 	msr	BASEPRI, r3
 80018fe:	f3bf 8f6f 	isb	sy
 8001902:	f3bf 8f4f 	dsb	sy
 8001906:	60bb      	str	r3, [r7, #8]
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	e7fd      	b.n	800190a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	4b14      	ldr	r3, [pc, #80]	@ (8001964 <vPortFree+0xbc>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d01e      	beq.n	800195a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d11a      	bne.n	800195a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <vPortFree+0xbc>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	43db      	mvns	r3, r3
 800192e:	401a      	ands	r2, r3
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001934:	f7ff fba0 	bl	8001078 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	4b0a      	ldr	r3, [pc, #40]	@ (8001968 <vPortFree+0xc0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4413      	add	r3, r2
 8001942:	4a09      	ldr	r2, [pc, #36]	@ (8001968 <vPortFree+0xc0>)
 8001944:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001946:	6938      	ldr	r0, [r7, #16]
 8001948:	f000 f874 	bl	8001a34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800194c:	4b07      	ldr	r3, [pc, #28]	@ (800196c <vPortFree+0xc4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	3301      	adds	r3, #1
 8001952:	4a06      	ldr	r2, [pc, #24]	@ (800196c <vPortFree+0xc4>)
 8001954:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8001956:	f7ff fb9d 	bl	8001094 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800195a:	bf00      	nop
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20003f30 	.word	0x20003f30
 8001968:	20003f20 	.word	0x20003f20
 800196c:	20003f2c 	.word	0x20003f2c

08001970 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001976:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800197a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800197c:	4b27      	ldr	r3, [pc, #156]	@ (8001a1c <prvHeapInit+0xac>)
 800197e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00c      	beq.n	80019a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	3307      	adds	r3, #7
 800198e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f023 0307 	bic.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	4a1f      	ldr	r2, [pc, #124]	@ (8001a1c <prvHeapInit+0xac>)
 80019a0:	4413      	add	r3, r2
 80019a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80019a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001a20 <prvHeapInit+0xb0>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80019ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001a20 <prvHeapInit+0xb0>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	4413      	add	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80019bc:	2208      	movs	r2, #8
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f023 0307 	bic.w	r3, r3, #7
 80019ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4a15      	ldr	r2, [pc, #84]	@ (8001a24 <prvHeapInit+0xb4>)
 80019d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80019d2:	4b14      	ldr	r3, [pc, #80]	@ (8001a24 <prvHeapInit+0xb4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2200      	movs	r2, #0
 80019d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80019da:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <prvHeapInit+0xb4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	1ad2      	subs	r2, r2, r3
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a24 <prvHeapInit+0xb4>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001a28 <prvHeapInit+0xb8>)
 80019fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	4a09      	ldr	r2, [pc, #36]	@ (8001a2c <prvHeapInit+0xbc>)
 8001a06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001a08:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <prvHeapInit+0xc0>)
 8001a0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001a0e:	601a      	str	r2, [r3, #0]
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	20000314 	.word	0x20000314
 8001a20:	20003f14 	.word	0x20003f14
 8001a24:	20003f1c 	.word	0x20003f1c
 8001a28:	20003f24 	.word	0x20003f24
 8001a2c:	20003f20 	.word	0x20003f20
 8001a30:	20003f30 	.word	0x20003f30

08001a34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001a3c:	4b28      	ldr	r3, [pc, #160]	@ (8001ae0 <prvInsertBlockIntoFreeList+0xac>)
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	e002      	b.n	8001a48 <prvInsertBlockIntoFreeList+0x14>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d8f7      	bhi.n	8001a42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d108      	bne.n	8001a76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	441a      	add	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	441a      	add	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d118      	bne.n	8001abc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <prvInsertBlockIntoFreeList+0xb0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d00d      	beq.n	8001ab2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	441a      	add	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e008      	b.n	8001ac4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <prvInsertBlockIntoFreeList+0xb0>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	e003      	b.n	8001ac4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d002      	beq.n	8001ad2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001ad2:	bf00      	nop
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20003f14 	.word	0x20003f14
 8001ae4:	20003f1c 	.word	0x20003f1c

08001ae8 <main>:

// Signal plus noise
q15_t corrupt_sig_sample;

int main(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af02      	add	r7, sp, #8
	// Enable FPU
	fpu_enable();
 8001aee:	f000 f8c3 	bl	8001c78 <fpu_enable>

	// Initialize the UART
	uart2_tx_init();
 8001af2:	f000 fab1 	bl	8002058 <uart2_tx_init>

	// Create the two tasks
	xTaskCreate(Task1, "Task1", 100, NULL, Task1_priority, NULL);
 8001af6:	4b30      	ldr	r3, [pc, #192]	@ (8001bb8 <main+0xd0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	2300      	movs	r3, #0
 8001afe:	9301      	str	r3, [sp, #4]
 8001b00:	9200      	str	r2, [sp, #0]
 8001b02:	2300      	movs	r3, #0
 8001b04:	2264      	movs	r2, #100	@ 0x64
 8001b06:	492d      	ldr	r1, [pc, #180]	@ (8001bbc <main+0xd4>)
 8001b08:	482d      	ldr	r0, [pc, #180]	@ (8001bc0 <main+0xd8>)
 8001b0a:	f7ff f976 	bl	8000dfa <xTaskCreate>
	xTaskCreate(Task2, "Task2", 100, NULL, Task2_priority, NULL);
 8001b0e:	4b2d      	ldr	r3, [pc, #180]	@ (8001bc4 <main+0xdc>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	2300      	movs	r3, #0
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	9200      	str	r2, [sp, #0]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2264      	movs	r2, #100	@ 0x64
 8001b1e:	492a      	ldr	r1, [pc, #168]	@ (8001bc8 <main+0xe0>)
 8001b20:	482a      	ldr	r0, [pc, #168]	@ (8001bcc <main+0xe4>)
 8001b22:	f7ff f96a 	bl	8000dfa <xTaskCreate>

	// Must start the scheduler or nothing happens!
	//vTaskStartScheduler();

	// Initialize the signal (noise) generators here
	sine_gen_init_q15(&signal_desc, SIGNAL_FREQ, SAMPLING_FREQ);
 8001b26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b2a:	210a      	movs	r1, #10
 8001b2c:	4828      	ldr	r0, [pc, #160]	@ (8001bd0 <main+0xe8>)
 8001b2e:	f000 f8b7 	bl	8001ca0 <sine_gen_init_q15>
	sine_gen_init_q15(&noise_desc, NOISE_FREQ, SAMPLING_FREQ);
 8001b32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b36:	2132      	movs	r1, #50	@ 0x32
 8001b38:	4826      	ldr	r0, [pc, #152]	@ (8001bd4 <main+0xec>)
 8001b3a:	f000 f8b1 	bl	8001ca0 <sine_gen_init_q15>
	{
			// swv_plot_signal();
			// serial_plot_signal();

		//  If you don't divide signal and noise by 2, corrupt signal will get clipped
		sine_sig_sample = sine_calc_sample_q15(&signal_desc)/2;
 8001b3e:	4824      	ldr	r0, [pc, #144]	@ (8001bd0 <main+0xe8>)
 8001b40:	f000 f992 	bl	8001e68 <sine_calc_sample_q15>
 8001b44:	4603      	mov	r3, r0
 8001b46:	0fda      	lsrs	r2, r3, #31
 8001b48:	4413      	add	r3, r2
 8001b4a:	105b      	asrs	r3, r3, #1
 8001b4c:	b21a      	sxth	r2, r3
 8001b4e:	4b22      	ldr	r3, [pc, #136]	@ (8001bd8 <main+0xf0>)
 8001b50:	801a      	strh	r2, [r3, #0]
		noise_sig_sample = sine_calc_sample_q15(&noise_desc)/2;
 8001b52:	4820      	ldr	r0, [pc, #128]	@ (8001bd4 <main+0xec>)
 8001b54:	f000 f988 	bl	8001e68 <sine_calc_sample_q15>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	0fda      	lsrs	r2, r3, #31
 8001b5c:	4413      	add	r3, r2
 8001b5e:	105b      	asrs	r3, r3, #1
 8001b60:	b21a      	sxth	r2, r3
 8001b62:	4b1e      	ldr	r3, [pc, #120]	@ (8001bdc <main+0xf4>)
 8001b64:	801a      	strh	r2, [r3, #0]
		corrupt_sig_sample = sine_sig_sample + noise_sig_sample;
 8001b66:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd8 <main+0xf0>)
 8001b68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bdc <main+0xf4>)
 8001b70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	4413      	add	r3, r2
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	b21a      	sxth	r2, r3
 8001b7c:	4b18      	ldr	r3, [pc, #96]	@ (8001be0 <main+0xf8>)
 8001b7e:	801a      	strh	r2, [r3, #0]

		printf("%d, ", (int)sine_sig_sample);
 8001b80:	4b15      	ldr	r3, [pc, #84]	@ (8001bd8 <main+0xf0>)
 8001b82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b86:	4619      	mov	r1, r3
 8001b88:	4816      	ldr	r0, [pc, #88]	@ (8001be4 <main+0xfc>)
 8001b8a:	f002 fa89 	bl	80040a0 <iprintf>
		printf("%d, ", (int)noise_sig_sample);
 8001b8e:	4b13      	ldr	r3, [pc, #76]	@ (8001bdc <main+0xf4>)
 8001b90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b94:	4619      	mov	r1, r3
 8001b96:	4813      	ldr	r0, [pc, #76]	@ (8001be4 <main+0xfc>)
 8001b98:	f002 fa82 	bl	80040a0 <iprintf>
		printf("%d\n\r", (int)corrupt_sig_sample);
 8001b9c:	4b10      	ldr	r3, [pc, #64]	@ (8001be0 <main+0xf8>)
 8001b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4810      	ldr	r0, [pc, #64]	@ (8001be8 <main+0x100>)
 8001ba6:	f002 fa7b 	bl	80040a0 <iprintf>

		pseudo_dly(9000);
 8001baa:	f242 3028 	movw	r0, #9000	@ 0x2328
 8001bae:	f000 f84d 	bl	8001c4c <pseudo_dly>
		sine_sig_sample = sine_calc_sample_q15(&signal_desc)/2;
 8001bb2:	bf00      	nop
 8001bb4:	e7c3      	b.n	8001b3e <main+0x56>
 8001bb6:	bf00      	nop
 8001bb8:	20000004 	.word	0x20000004
 8001bbc:	08006c10 	.word	0x08006c10
 8001bc0:	08001bed 	.word	0x08001bed
 8001bc4:	20000008 	.word	0x20000008
 8001bc8:	08006c18 	.word	0x08006c18
 8001bcc:	08001c1d 	.word	0x08001c1d
 8001bd0:	20003f3c 	.word	0x20003f3c
 8001bd4:	20003f60 	.word	0x20003f60
 8001bd8:	20003f84 	.word	0x20003f84
 8001bdc:	20003f86 	.word	0x20003f86
 8001be0:	20003f88 	.word	0x20003f88
 8001be4:	08006c20 	.word	0x08006c20
 8001be8:	08006c28 	.word	0x08006c28

08001bec <Task1>:

} // End of main

// Definition of the first task
void Task1(void *pvParameters)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Task1_profiler++;
 8001bf4:	4b07      	ldr	r3, [pc, #28]	@ (8001c14 <Task1+0x28>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	4a06      	ldr	r2, [pc, #24]	@ (8001c14 <Task1+0x28>)
 8001bfc:	6013      	str	r3, [r2, #0]

		taskYIELD();
 8001bfe:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <Task1+0x2c>)
 8001c00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	f3bf 8f4f 	dsb	sy
 8001c0a:	f3bf 8f6f 	isb	sy
		Task1_profiler++;
 8001c0e:	bf00      	nop
 8001c10:	e7f0      	b.n	8001bf4 <Task1+0x8>
 8001c12:	bf00      	nop
 8001c14:	20003f34 	.word	0x20003f34
 8001c18:	e000ed04 	.word	0xe000ed04

08001c1c <Task2>:

}

// Definition of the second task
void Task2(void *pvParameters)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Task2_profiler++;
 8001c24:	4b07      	ldr	r3, [pc, #28]	@ (8001c44 <Task2+0x28>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	4a06      	ldr	r2, [pc, #24]	@ (8001c44 <Task2+0x28>)
 8001c2c:	6013      	str	r3, [r2, #0]

		taskYIELD();
 8001c2e:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <Task2+0x2c>)
 8001c30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	f3bf 8f4f 	dsb	sy
 8001c3a:	f3bf 8f6f 	isb	sy
		Task2_profiler++;
 8001c3e:	bf00      	nop
 8001c40:	e7f0      	b.n	8001c24 <Task2+0x8>
 8001c42:	bf00      	nop
 8001c44:	20003f38 	.word	0x20003f38
 8001c48:	e000ed04 	.word	0xe000ed04

08001c4c <pseudo_dly>:
}

*/

static void pseudo_dly(int dly)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < dly; i++){}
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	e002      	b.n	8001c60 <pseudo_dly+0x14>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	dbf8      	blt.n	8001c5a <pseudo_dly+0xe>
}
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <fpu_enable>:



static void fpu_enable(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
	// Enable FPU - Set bits 20, 21, 22, 23 to "1" - See page 264 of Cortex-M4 Devices Users Guide
	SCB->CPACR |= ((3UL << 20) | (3UL << 22));
 8001c7c:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <fpu_enable+0x20>)
 8001c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c82:	4a05      	ldr	r2, [pc, #20]	@ (8001c98 <fpu_enable+0x20>)
 8001c84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000ed00 	.word	0xe000ed00
 8001c9c:	00000000 	.word	0x00000000

08001ca0 <sine_gen_init_q15>:

#include "sine_generator.h"


void sine_gen_init_q15(sine_generator_q15_t *sine_desc,  q15_t sine_freq, q15_t sample_freq)
{
 8001ca0:	b5b0      	push	{r4, r5, r7, lr}
 8001ca2:	b08a      	sub	sp, #40	@ 0x28
 8001ca4:	af02      	add	r7, sp, #8
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	807b      	strh	r3, [r7, #2]
 8001cac:	4613      	mov	r3, r2
 8001cae:	803b      	strh	r3, [r7, #0]
	//  Variables to hold intermediate sine values and coefficients
	float32_t y[4];
	float32_t coeff4;
	float32_t coeff5;

	y[0] = 0.0;
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]

	// Calculate sine values normalized by sampling frequency for first three harmonics
	y[1] = arm_sin_f32(2.0 * PI * sine_freq/sample_freq);
 8001cb6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fc3a 	bl	8000534 <__aeabi_i2d>
 8001cc0:	a363      	add	r3, pc, #396	@ (adr r3, 8001e50 <sine_gen_init_q15+0x1b0>)
 8001cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc6:	f7fe fc9f 	bl	8000608 <__aeabi_dmul>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4614      	mov	r4, r2
 8001cd0:	461d      	mov	r5, r3
 8001cd2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fc2c 	bl	8000534 <__aeabi_i2d>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	4629      	mov	r1, r5
 8001ce4:	f7fe fdba 	bl	800085c <__aeabi_ddiv>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4610      	mov	r0, r2
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f7fe ff82 	bl	8000bf8 <__aeabi_d2f>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	ee00 3a10 	vmov	s0, r3
 8001cfa:	f000 fbb1 	bl	8002460 <arm_sin_f32>
 8001cfe:	eef0 7a40 	vmov.f32	s15, s0
 8001d02:	edc7 7a05 	vstr	s15, [r7, #20]
	y[2] = arm_sin_f32(4.0 * PI * sine_freq/sample_freq);
 8001d06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fc12 	bl	8000534 <__aeabi_i2d>
 8001d10:	a351      	add	r3, pc, #324	@ (adr r3, 8001e58 <sine_gen_init_q15+0x1b8>)
 8001d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d16:	f7fe fc77 	bl	8000608 <__aeabi_dmul>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4614      	mov	r4, r2
 8001d20:	461d      	mov	r5, r3
 8001d22:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fc04 	bl	8000534 <__aeabi_i2d>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4620      	mov	r0, r4
 8001d32:	4629      	mov	r1, r5
 8001d34:	f7fe fd92 	bl	800085c <__aeabi_ddiv>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f7fe ff5a 	bl	8000bf8 <__aeabi_d2f>
 8001d44:	4603      	mov	r3, r0
 8001d46:	ee00 3a10 	vmov	s0, r3
 8001d4a:	f000 fb89 	bl	8002460 <arm_sin_f32>
 8001d4e:	eef0 7a40 	vmov.f32	s15, s0
 8001d52:	edc7 7a06 	vstr	s15, [r7, #24]
	y[3] = arm_sin_f32(6.0 * PI * sine_freq/sample_freq);
 8001d56:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fbea 	bl	8000534 <__aeabi_i2d>
 8001d60:	a33f      	add	r3, pc, #252	@ (adr r3, 8001e60 <sine_gen_init_q15+0x1c0>)
 8001d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d66:	f7fe fc4f 	bl	8000608 <__aeabi_dmul>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4614      	mov	r4, r2
 8001d70:	461d      	mov	r5, r3
 8001d72:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fbdc 	bl	8000534 <__aeabi_i2d>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4620      	mov	r0, r4
 8001d82:	4629      	mov	r1, r5
 8001d84:	f7fe fd6a 	bl	800085c <__aeabi_ddiv>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f7fe ff32 	bl	8000bf8 <__aeabi_d2f>
 8001d94:	4603      	mov	r3, r0
 8001d96:	ee00 3a10 	vmov	s0, r3
 8001d9a:	f000 fb61 	bl	8002460 <arm_sin_f32>
 8001d9e:	eef0 7a40 	vmov.f32	s15, s0
 8001da2:	edc7 7a07 	vstr	s15, [r7, #28]

	// Calculate coefficients for sine wave generator
	coeff4 = (y[2]/y[1])/2.0;
 8001da6:	edd7 6a06 	vldr	s13, [r7, #24]
 8001daa:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001db2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001db6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dba:	edc7 7a03 	vstr	s15, [r7, #12]
	coeff5 = ((y[1] * y[3] - y[2] * y[2])/(y[1] * y[1]))/2.0;
 8001dbe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001dc2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dca:	edd7 6a06 	vldr	s13, [r7, #24]
 8001dce:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dd6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001dda:	ed97 7a05 	vldr	s14, [r7, #20]
 8001dde:	edd7 7a05 	vldr	s15, [r7, #20]
 8001de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dea:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001dee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001df2:	edc7 7a02 	vstr	s15, [r7, #8]

	// Convert floats to q data type
	arm_float_to_q15(&coeff4, &(sine_desc->coeff[4]), 1);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f103 0118 	add.w	r1, r3, #24
 8001dfc:	f107 030c 	add.w	r3, r7, #12
 8001e00:	2201      	movs	r2, #1
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 f9e0 	bl	80021c8 <arm_float_to_q15>
	arm_float_to_q15(&coeff5, &(sine_desc->coeff[5]), 1);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f103 011a 	add.w	r1, r3, #26
 8001e0e:	f107 0308 	add.w	r3, r7, #8
 8001e12:	2201      	movs	r2, #1
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 f9d7 	bl	80021c8 <arm_float_to_q15>

	// Initialize biquad filter for sine wave generator
	arm_biquad_cascade_df1_init_q15(&(sine_desc->iir_sine_generator_instance), 1, sine_desc->coeff, sine_desc->state, 1);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f103 0210 	add.w	r2, r3, #16
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	331c      	adds	r3, #28
 8001e26:	2101      	movs	r1, #1
 8001e28:	9100      	str	r1, [sp, #0]
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	f000 fb08 	bl	8002440 <arm_biquad_cascade_df1_init_q15>

	// Initialize state variables
	arm_float_to_q15(&y[1], &(sine_desc->state[3]), 1);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f103 0122 	add.w	r1, r3, #34	@ 0x22
 8001e36:	f107 0310 	add.w	r3, r7, #16
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 f9c2 	bl	80021c8 <arm_float_to_q15>

}
 8001e44:	bf00      	nop
 8001e46:	3720      	adds	r7, #32
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e4c:	f3af 8000 	nop.w
 8001e50:	60000000 	.word	0x60000000
 8001e54:	401921fb 	.word	0x401921fb
 8001e58:	60000000 	.word	0x60000000
 8001e5c:	402921fb 	.word	0x402921fb
 8001e60:	88000000 	.word	0x88000000
 8001e64:	4032d97c 	.word	0x4032d97c

08001e68 <sine_calc_sample_q15>:


q15_t sine_calc_sample_q15(sine_generator_q15_t *sine_desc)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	q15_t input, output;

	input = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	81fb      	strh	r3, [r7, #14]

	// Generate one sample of the sine wave using biquad filter
	arm_biquad_cascade_df1_q15(&(sine_desc->iir_sine_generator_instance), &input, &output, 1);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f107 020c 	add.w	r2, r7, #12
 8001e7a:	f107 010e 	add.w	r1, r7, #14
 8001e7e:	2301      	movs	r3, #1
 8001e80:	f000 fa3a 	bl	80022f8 <arm_biquad_cascade_df1_q15>

	return (output);
 8001e84:	f9b7 300c 	ldrsh.w	r3, [r7, #12]

}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return 1;
 8001e94:	2301      	movs	r3, #1
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <_kill>:

int _kill(int pid, int sig)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001eaa:	f002 f929 	bl	8004100 <__errno>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2216      	movs	r2, #22
 8001eb2:	601a      	str	r2, [r3, #0]
  return -1;
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <_exit>:

void _exit (int status)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ec8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff ffe7 	bl	8001ea0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ed2:	bf00      	nop
 8001ed4:	e7fd      	b.n	8001ed2 <_exit+0x12>

08001ed6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b086      	sub	sp, #24
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	60f8      	str	r0, [r7, #12]
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	e00a      	b.n	8001efe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ee8:	f3af 8000 	nop.w
 8001eec:	4601      	mov	r1, r0
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	60ba      	str	r2, [r7, #8]
 8001ef4:	b2ca      	uxtb	r2, r1
 8001ef6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	3301      	adds	r3, #1
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	dbf0      	blt.n	8001ee8 <_read+0x12>
  }

  return len;
 8001f06:	687b      	ldr	r3, [r7, #4]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	e009      	b.n	8001f36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	1c5a      	adds	r2, r3, #1
 8001f26:	60ba      	str	r2, [r7, #8]
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 f888 	bl	8002040 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	3301      	adds	r3, #1
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	dbf1      	blt.n	8001f22 <_write+0x12>
  }
  return len;
 8001f3e:	687b      	ldr	r3, [r7, #4]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <_close>:

int _close(int file)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f70:	605a      	str	r2, [r3, #4]
  return 0;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <_isatty>:

int _isatty(int file)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f88:	2301      	movs	r3, #1
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b085      	sub	sp, #20
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	60f8      	str	r0, [r7, #12]
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fb8:	4a14      	ldr	r2, [pc, #80]	@ (800200c <_sbrk+0x5c>)
 8001fba:	4b15      	ldr	r3, [pc, #84]	@ (8002010 <_sbrk+0x60>)
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fc4:	4b13      	ldr	r3, [pc, #76]	@ (8002014 <_sbrk+0x64>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d102      	bne.n	8001fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fcc:	4b11      	ldr	r3, [pc, #68]	@ (8002014 <_sbrk+0x64>)
 8001fce:	4a12      	ldr	r2, [pc, #72]	@ (8002018 <_sbrk+0x68>)
 8001fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fd2:	4b10      	ldr	r3, [pc, #64]	@ (8002014 <_sbrk+0x64>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d207      	bcs.n	8001ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fe0:	f002 f88e 	bl	8004100 <__errno>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	220c      	movs	r2, #12
 8001fe8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fee:	e009      	b.n	8002004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ff0:	4b08      	ldr	r3, [pc, #32]	@ (8002014 <_sbrk+0x64>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ff6:	4b07      	ldr	r3, [pc, #28]	@ (8002014 <_sbrk+0x64>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	4a05      	ldr	r2, [pc, #20]	@ (8002014 <_sbrk+0x64>)
 8002000:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002002:	68fb      	ldr	r3, [r7, #12]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20020000 	.word	0x20020000
 8002010:	00000400 	.word	0x00000400
 8002014:	20003f8c 	.word	0x20003f8c
 8002018:	200040e0 	.word	0x200040e0

0800201c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002020:	4b06      	ldr	r3, [pc, #24]	@ (800203c <SystemInit+0x20>)
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002026:	4a05      	ldr	r2, [pc, #20]	@ (800203c <SystemInit+0x20>)
 8002028:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800202c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate);

void uart2_write(int ch);

int __io_putchar(int ch)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f87b 	bl	8002144 <uart2_write>

	return ch;
 800204e:	687b      	ldr	r3, [r7, #4]

}
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <uart2_tx_init>:

// Function to initialize UART2
void uart2_tx_init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
	/****** [1] Configure UART2 Pins on Port A, PA2 (Tx) and PA3 (Rx) ******/
	/*  Enable clock access to GPIOA on AHB1 bus  */
	RCC->AHB1ENR |= GPIOAEN;
 800205c:	4b21      	ldr	r3, [pc, #132]	@ (80020e4 <uart2_tx_init+0x8c>)
 800205e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002060:	4a20      	ldr	r2, [pc, #128]	@ (80020e4 <uart2_tx_init+0x8c>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	6313      	str	r3, [r2, #48]	@ 0x30

	/*  Set PA2 mode to alternate function mode. (Set bits 5 and 4 to 0b10) */
	GPIOA->MODER |= (1U << 5);
 8002068:	4b1f      	ldr	r3, [pc, #124]	@ (80020e8 <uart2_tx_init+0x90>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a1e      	ldr	r2, [pc, #120]	@ (80020e8 <uart2_tx_init+0x90>)
 800206e:	f043 0320 	orr.w	r3, r3, #32
 8002072:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U << 4);
 8002074:	4b1c      	ldr	r3, [pc, #112]	@ (80020e8 <uart2_tx_init+0x90>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a1b      	ldr	r2, [pc, #108]	@ (80020e8 <uart2_tx_init+0x90>)
 800207a:	f023 0310 	bic.w	r3, r3, #16
 800207e:	6013      	str	r3, [r2, #0]

	/*  Set PA2 alternate function mode to UART_TX (AF07) . (Set bits 11, 10, 9, 8 to 0b0111, respectively.) */
	/*  Note this is in the alternate function low register, since we are working with PA2  */
	/*  Also note that the AF low register is AFR[0] and the AF high register is AFR[1]  */
	GPIOA->AFR[0] |= (1U << 8);
 8002080:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <uart2_tx_init+0x90>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4a18      	ldr	r2, [pc, #96]	@ (80020e8 <uart2_tx_init+0x90>)
 8002086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800208a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 9);
 800208c:	4b16      	ldr	r3, [pc, #88]	@ (80020e8 <uart2_tx_init+0x90>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4a15      	ldr	r2, [pc, #84]	@ (80020e8 <uart2_tx_init+0x90>)
 8002092:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002096:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 10);
 8002098:	4b13      	ldr	r3, [pc, #76]	@ (80020e8 <uart2_tx_init+0x90>)
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	4a12      	ldr	r2, [pc, #72]	@ (80020e8 <uart2_tx_init+0x90>)
 800209e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020a2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U << 11);
 80020a4:	4b10      	ldr	r3, [pc, #64]	@ (80020e8 <uart2_tx_init+0x90>)
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	4a0f      	ldr	r2, [pc, #60]	@ (80020e8 <uart2_tx_init+0x90>)
 80020aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80020ae:	6213      	str	r3, [r2, #32]


	/****** [2] Configure UART  ******/
	/*  Enable clock access to UART2 on APB1*/
	RCC->APB1ENR |= UART2EN;
 80020b0:	4b0c      	ldr	r3, [pc, #48]	@ (80020e4 <uart2_tx_init+0x8c>)
 80020b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b4:	4a0b      	ldr	r2, [pc, #44]	@ (80020e4 <uart2_tx_init+0x8c>)
 80020b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020ba:	6413      	str	r3, [r2, #64]	@ 0x40

	/*  Configure baud rate  */
	uart2_set_baudrate(APB1_CLK, UART_BAUDRATE);
 80020bc:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80020c0:	480a      	ldr	r0, [pc, #40]	@ (80020ec <uart2_tx_init+0x94>)
 80020c2:	f000 f817 	bl	80020f4 <uart2_set_baudrate>

	/*  Configure data transfer direction for Tx  */
	USART2->CR1 |= CR1_TE;
 80020c6:	4b0a      	ldr	r3, [pc, #40]	@ (80020f0 <uart2_tx_init+0x98>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	4a09      	ldr	r2, [pc, #36]	@ (80020f0 <uart2_tx_init+0x98>)
 80020cc:	f043 0308 	orr.w	r3, r3, #8
 80020d0:	60d3      	str	r3, [r2, #12]

	/*  Enable UART module */
	USART2->CR1 |= CR1_UE;
 80020d2:	4b07      	ldr	r3, [pc, #28]	@ (80020f0 <uart2_tx_init+0x98>)
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	4a06      	ldr	r2, [pc, #24]	@ (80020f0 <uart2_tx_init+0x98>)
 80020d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020dc:	60d3      	str	r3, [r2, #12]

}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40020000 	.word	0x40020000
 80020ec:	00f42400 	.word	0x00f42400
 80020f0:	40004400 	.word	0x40004400

080020f4 <uart2_set_baudrate>:

static void uart2_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk, baudrate);
 80020fe:	6839      	ldr	r1, [r7, #0]
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f80b 	bl	800211c <compute_uart_bd>
 8002106:	4603      	mov	r3, r0
 8002108:	461a      	mov	r2, r3
 800210a:	4b03      	ldr	r3, [pc, #12]	@ (8002118 <uart2_set_baudrate+0x24>)
 800210c:	609a      	str	r2, [r3, #8]
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40004400 	.word	0x40004400

0800211c <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
	return ((baudrate/2U) + periph_clk)/baudrate;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	085a      	lsrs	r2, r3, #1
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	441a      	add	r2, r3
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	fbb2 f3f3 	udiv	r3, r2, r3
 8002134:	b29b      	uxth	r3, r3
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <uart2_write>:

void uart2_write(int ch)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
	/*  First, make sure data transmit register is empty - need to read the USART status register, SR */
	/*  Read the status register  */
	while(!(USART2->SR & SR_TXE) ) {}// Sit here until SR bit is a "1" (Data has been transferred)
 800214c:	bf00      	nop
 800214e:	4b08      	ldr	r3, [pc, #32]	@ (8002170 <uart2_write+0x2c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f9      	beq.n	800214e <uart2_write+0xa>

	/*  Write to the transmit data register.  */
	USART2->DR = (ch & 0xFF);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a04      	ldr	r2, [pc, #16]	@ (8002170 <uart2_write+0x2c>)
 800215e:	b2db      	uxtb	r3, r3
 8002160:	6053      	str	r3, [r2, #4]
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40004400 	.word	0x40004400

08002174 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002174:	480d      	ldr	r0, [pc, #52]	@ (80021ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002176:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002178:	f7ff ff50 	bl	800201c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800217c:	480c      	ldr	r0, [pc, #48]	@ (80021b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800217e:	490d      	ldr	r1, [pc, #52]	@ (80021b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002180:	4a0d      	ldr	r2, [pc, #52]	@ (80021b8 <LoopForever+0xe>)
  movs r3, #0
 8002182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002184:	e002      	b.n	800218c <LoopCopyDataInit>

08002186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218a:	3304      	adds	r3, #4

0800218c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800218c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002190:	d3f9      	bcc.n	8002186 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002192:	4a0a      	ldr	r2, [pc, #40]	@ (80021bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002194:	4c0a      	ldr	r4, [pc, #40]	@ (80021c0 <LoopForever+0x16>)
  movs r3, #0
 8002196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002198:	e001      	b.n	800219e <LoopFillZerobss>

0800219a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800219c:	3204      	adds	r2, #4

0800219e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a0:	d3fb      	bcc.n	800219a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021a2:	f001 ffb3 	bl	800410c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021a6:	f7ff fc9f 	bl	8001ae8 <main>

080021aa <LoopForever>:

LoopForever:
  b LoopForever
 80021aa:	e7fe      	b.n	80021aa <LoopForever>
  ldr   r0, =_estack
 80021ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80021b8:	0800786c 	.word	0x0800786c
  ldr r2, =_sbss
 80021bc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80021c0:	200040dc 	.word	0x200040dc

080021c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021c4:	e7fe      	b.n	80021c4 <ADC_IRQHandler>
	...

080021c8 <arm_float_to_q15>:
 80021c8:	b4f0      	push	{r4, r5, r6, r7}
 80021ca:	0897      	lsrs	r7, r2, #2
 80021cc:	d06e      	beq.n	80022ac <arm_float_to_q15+0xe4>
 80021ce:	eddf 5a49 	vldr	s11, [pc, #292]	@ 80022f4 <arm_float_to_q15+0x12c>
 80021d2:	f100 0510 	add.w	r5, r0, #16
 80021d6:	f101 0408 	add.w	r4, r1, #8
 80021da:	463e      	mov	r6, r7
 80021dc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80021e0:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
 80021e4:	ed55 7a04 	vldr	s15, [r5, #-16]
 80021e8:	ee27 7aa5 	vmul.f32	s14, s15, s11
 80021ec:	3510      	adds	r5, #16
 80021ee:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80021f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f6:	bfd4      	ite	le
 80021f8:	eef0 7a66 	vmovle.f32	s15, s13
 80021fc:	eef0 7a46 	vmovgt.f32	s15, s12
 8002200:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002204:	3408      	adds	r4, #8
 8002206:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800220a:	ee17 3a90 	vmov	r3, s15
 800220e:	f303 030f 	ssat	r3, #16, r3
 8002212:	f824 3c10 	strh.w	r3, [r4, #-16]
 8002216:	ed55 7a07 	vldr	s15, [r5, #-28]	@ 0xffffffe4
 800221a:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800221e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8002222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002226:	bfd4      	ite	le
 8002228:	eef0 7a66 	vmovle.f32	s15, s13
 800222c:	eef0 7a46 	vmovgt.f32	s15, s12
 8002230:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002234:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002238:	ee17 3a90 	vmov	r3, s15
 800223c:	f303 030f 	ssat	r3, #16, r3
 8002240:	f824 3c0e 	strh.w	r3, [r4, #-14]
 8002244:	ed55 7a06 	vldr	s15, [r5, #-24]	@ 0xffffffe8
 8002248:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800224c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8002250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002254:	bfd4      	ite	le
 8002256:	eef0 7a66 	vmovle.f32	s15, s13
 800225a:	eef0 7a46 	vmovgt.f32	s15, s12
 800225e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002262:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002266:	ee17 3a90 	vmov	r3, s15
 800226a:	f303 030f 	ssat	r3, #16, r3
 800226e:	f824 3c0c 	strh.w	r3, [r4, #-12]
 8002272:	ed55 7a05 	vldr	s15, [r5, #-20]	@ 0xffffffec
 8002276:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800227a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800227e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002282:	bfd4      	ite	le
 8002284:	eef0 7a66 	vmovle.f32	s15, s13
 8002288:	eef0 7a46 	vmovgt.f32	s15, s12
 800228c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002290:	3e01      	subs	r6, #1
 8002292:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002296:	ee17 3a90 	vmov	r3, s15
 800229a:	f303 030f 	ssat	r3, #16, r3
 800229e:	f824 3c0a 	strh.w	r3, [r4, #-10]
 80022a2:	d19f      	bne.n	80021e4 <arm_float_to_q15+0x1c>
 80022a4:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 80022a8:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 80022ac:	f012 0203 	ands.w	r2, r2, #3
 80022b0:	d01e      	beq.n	80022f0 <arm_float_to_q15+0x128>
 80022b2:	eddf 5a10 	vldr	s11, [pc, #64]	@ 80022f4 <arm_float_to_q15+0x12c>
 80022b6:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80022ba:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
 80022be:	ecf0 7a01 	vldmia	r0!, {s15}
 80022c2:	ee27 7aa5 	vmul.f32	s14, s15, s11
 80022c6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80022ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ce:	bfd4      	ite	le
 80022d0:	eef0 7a66 	vmovle.f32	s15, s13
 80022d4:	eef0 7a46 	vmovgt.f32	s15, s12
 80022d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022dc:	3a01      	subs	r2, #1
 80022de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022e2:	ee17 3a90 	vmov	r3, s15
 80022e6:	f303 030f 	ssat	r3, #16, r3
 80022ea:	f821 3b02 	strh.w	r3, [r1], #2
 80022ee:	d1e6      	bne.n	80022be <arm_float_to_q15+0xf6>
 80022f0:	bcf0      	pop	{r4, r5, r6, r7}
 80022f2:	4770      	bx	lr
 80022f4:	47000000 	.word	0x47000000

080022f8 <arm_biquad_cascade_df1_q15>:
 80022f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022fc:	b08b      	sub	sp, #44	@ 0x2c
 80022fe:	f990 800c 	ldrsb.w	r8, [r0, #12]
 8002302:	6885      	ldr	r5, [r0, #8]
 8002304:	6844      	ldr	r4, [r0, #4]
 8002306:	f990 0000 	ldrsb.w	r0, [r0]
 800230a:	9004      	str	r0, [sp, #16]
 800230c:	0858      	lsrs	r0, r3, #1
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	9006      	str	r0, [sp, #24]
 8002314:	9307      	str	r3, [sp, #28]
 8002316:	0080      	lsls	r0, r0, #2
 8002318:	4613      	mov	r3, r2
 800231a:	4403      	add	r3, r0
 800231c:	9309      	str	r3, [sp, #36]	@ 0x24
 800231e:	f105 030c 	add.w	r3, r5, #12
 8002322:	f1c8 080f 	rsb	r8, r8, #15
 8002326:	9303      	str	r3, [sp, #12]
 8002328:	f104 0308 	add.w	r3, r4, #8
 800232c:	9205      	str	r2, [sp, #20]
 800232e:	9008      	str	r0, [sp, #32]
 8002330:	9101      	str	r1, [sp, #4]
 8002332:	f1c8 0a20 	rsb	sl, r8, #32
 8002336:	9302      	str	r3, [sp, #8]
 8002338:	9a03      	ldr	r2, [sp, #12]
 800233a:	9902      	ldr	r1, [sp, #8]
 800233c:	f852 5c0c 	ldr.w	r5, [r2, #-12]
 8002340:	f852 4c08 	ldr.w	r4, [r2, #-8]
 8002344:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8002348:	e911 000c 	ldmdb	r1, {r2, r3}
 800234c:	9906      	ldr	r1, [sp, #24]
 800234e:	2900      	cmp	r1, #0
 8002350:	d074      	beq.n	800243c <arm_biquad_cascade_df1_q15+0x144>
 8002352:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8002356:	f8dd c014 	ldr.w	ip, [sp, #20]
 800235a:	468e      	mov	lr, r1
 800235c:	4693      	mov	fp, r2
 800235e:	4619      	mov	r1, r3
 8002360:	f859 6b04 	ldr.w	r6, [r9], #4
 8002364:	fb25 f706 	smuad	r7, r5, r6
 8002368:	17fb      	asrs	r3, r7, #31
 800236a:	461a      	mov	r2, r3
 800236c:	463b      	mov	r3, r7
 800236e:	fbc4 32cb 	smlald	r3, r2, r4, fp
 8002372:	4617      	mov	r7, r2
 8002374:	fbc0 37c1 	smlald	r3, r7, r0, r1
 8002378:	fa07 f70a 	lsl.w	r7, r7, sl
 800237c:	fa23 f308 	lsr.w	r3, r3, r8
 8002380:	431f      	orrs	r7, r3
 8002382:	b2b2      	uxth	r2, r6
 8002384:	f307 070f 	ssat	r7, #16, r7
 8002388:	b2bf      	uxth	r7, r7
 800238a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800238e:	ea42 4b0b 	orr.w	fp, r2, fp, lsl #16
 8002392:	fb25 f116 	smuadx	r1, r5, r6
 8002396:	17cb      	asrs	r3, r1, #31
 8002398:	fbc4 13cb 	smlald	r1, r3, r4, fp
 800239c:	fbc0 13c7 	smlald	r1, r3, r0, r7
 80023a0:	fa21 f108 	lsr.w	r1, r1, r8
 80023a4:	fa03 f30a 	lsl.w	r3, r3, sl
 80023a8:	b2ba      	uxth	r2, r7
 80023aa:	430b      	orrs	r3, r1
 80023ac:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
 80023b0:	f303 030f 	ssat	r3, #16, r3
 80023b4:	f1be 0e01 	subs.w	lr, lr, #1
 80023b8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80023bc:	b299      	uxth	r1, r3
 80023be:	ea4b 4b16 	orr.w	fp, fp, r6, lsr #16
 80023c2:	f84c 2b04 	str.w	r2, [ip], #4
 80023c6:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 80023ca:	d1c9      	bne.n	8002360 <arm_biquad_cascade_df1_q15+0x68>
 80023cc:	460b      	mov	r3, r1
 80023ce:	9e08      	ldr	r6, [sp, #32]
 80023d0:	9901      	ldr	r1, [sp, #4]
 80023d2:	4431      	add	r1, r6
 80023d4:	9101      	str	r1, [sp, #4]
 80023d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80023d8:	465a      	mov	r2, fp
 80023da:	9e07      	ldr	r6, [sp, #28]
 80023dc:	b1d6      	cbz	r6, 8002414 <arm_biquad_cascade_df1_q15+0x11c>
 80023de:	9e01      	ldr	r6, [sp, #4]
 80023e0:	f9b6 e000 	ldrsh.w	lr, [r6]
 80023e4:	fb25 f50e 	smuad	r5, r5, lr
 80023e8:	17ef      	asrs	r7, r5, #31
 80023ea:	463e      	mov	r6, r7
 80023ec:	fbc4 56c2 	smlald	r5, r6, r4, r2
 80023f0:	fbc0 56c3 	smlald	r5, r6, r0, r3
 80023f4:	fa06 f60a 	lsl.w	r6, r6, sl
 80023f8:	fa25 f508 	lsr.w	r5, r5, r8
 80023fc:	ea46 0005 	orr.w	r0, r6, r5
 8002400:	fa1f fe8e 	uxth.w	lr, lr
 8002404:	f300 000f 	ssat	r0, #16, r0
 8002408:	b284      	uxth	r4, r0
 800240a:	8008      	strh	r0, [r1, #0]
 800240c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8002410:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 8002414:	9802      	ldr	r0, [sp, #8]
 8002416:	f840 3c04 	str.w	r3, [r0, #-4]
 800241a:	9b03      	ldr	r3, [sp, #12]
 800241c:	f840 2c08 	str.w	r2, [r0, #-8]
 8002420:	330c      	adds	r3, #12
 8002422:	9303      	str	r3, [sp, #12]
 8002424:	f100 0308 	add.w	r3, r0, #8
 8002428:	9302      	str	r3, [sp, #8]
 800242a:	9b05      	ldr	r3, [sp, #20]
 800242c:	9301      	str	r3, [sp, #4]
 800242e:	9b04      	ldr	r3, [sp, #16]
 8002430:	3b01      	subs	r3, #1
 8002432:	9304      	str	r3, [sp, #16]
 8002434:	d180      	bne.n	8002338 <arm_biquad_cascade_df1_q15+0x40>
 8002436:	b00b      	add	sp, #44	@ 0x2c
 8002438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800243c:	9905      	ldr	r1, [sp, #20]
 800243e:	e7cc      	b.n	80023da <arm_biquad_cascade_df1_q15+0xe2>

08002440 <arm_biquad_cascade_df1_init_q15>:
 8002440:	b538      	push	{r3, r4, r5, lr}
 8002442:	461d      	mov	r5, r3
 8002444:	4604      	mov	r4, r0
 8002446:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800244a:	6082      	str	r2, [r0, #8]
 800244c:	7001      	strb	r1, [r0, #0]
 800244e:	00ca      	lsls	r2, r1, #3
 8002450:	7303      	strb	r3, [r0, #12]
 8002452:	2100      	movs	r1, #0
 8002454:	4628      	mov	r0, r5
 8002456:	f001 fe47 	bl	80040e8 <memset>
 800245a:	6065      	str	r5, [r4, #4]
 800245c:	bd38      	pop	{r3, r4, r5, pc}
 800245e:	bf00      	nop

08002460 <arm_sin_f32>:
 8002460:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002468:	d42c      	bmi.n	80024c4 <arm_sin_f32+0x64>
 800246a:	eddf 7a20 	vldr	s15, [pc, #128]	@ 80024ec <arm_sin_f32+0x8c>
 800246e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002472:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002476:	d432      	bmi.n	80024de <arm_sin_f32+0x7e>
 8002478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800247c:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80024f0 <arm_sin_f32+0x90>
 8002480:	4a1c      	ldr	r2, [pc, #112]	@ (80024f4 <arm_sin_f32+0x94>)
 8002482:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002486:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800248a:	ee20 0a26 	vmul.f32	s0, s0, s13
 800248e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8002492:	ee17 3a90 	vmov	r3, s15
 8002496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800249a:	ee07 3a90 	vmov	s15, r3
 800249e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80024a6:	ee70 7a67 	vsub.f32	s15, s0, s15
 80024aa:	edd1 6a01 	vldr	s13, [r1, #4]
 80024ae:	ed91 0a00 	vldr	s0, [r1]
 80024b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80024ba:	ee27 0a00 	vmul.f32	s0, s14, s0
 80024be:	ee30 0a27 	vadd.f32	s0, s0, s15
 80024c2:	4770      	bx	lr
 80024c4:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80024f8 <arm_sin_f32+0x98>
 80024c8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80024cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d0:	da0b      	bge.n	80024ea <arm_sin_f32+0x8a>
 80024d2:	eddf 7a06 	vldr	s15, [pc, #24]	@ 80024ec <arm_sin_f32+0x8c>
 80024d6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80024da:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80024de:	ee17 3a90 	vmov	r3, s15
 80024e2:	3b01      	subs	r3, #1
 80024e4:	ee07 3a90 	vmov	s15, r3
 80024e8:	e7c6      	b.n	8002478 <arm_sin_f32+0x18>
 80024ea:	4770      	bx	lr
 80024ec:	3e22f983 	.word	0x3e22f983
 80024f0:	44000000 	.word	0x44000000
 80024f4:	08006c30 	.word	0x08006c30
 80024f8:	b44c02cd 	.word	0xb44c02cd

080024fc <__cvt>:
 80024fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002500:	ec57 6b10 	vmov	r6, r7, d0
 8002504:	2f00      	cmp	r7, #0
 8002506:	460c      	mov	r4, r1
 8002508:	4619      	mov	r1, r3
 800250a:	463b      	mov	r3, r7
 800250c:	bfbb      	ittet	lt
 800250e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8002512:	461f      	movlt	r7, r3
 8002514:	2300      	movge	r3, #0
 8002516:	232d      	movlt	r3, #45	@ 0x2d
 8002518:	700b      	strb	r3, [r1, #0]
 800251a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800251c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8002520:	4691      	mov	r9, r2
 8002522:	f023 0820 	bic.w	r8, r3, #32
 8002526:	bfbc      	itt	lt
 8002528:	4632      	movlt	r2, r6
 800252a:	4616      	movlt	r6, r2
 800252c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002530:	d005      	beq.n	800253e <__cvt+0x42>
 8002532:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002536:	d100      	bne.n	800253a <__cvt+0x3e>
 8002538:	3401      	adds	r4, #1
 800253a:	2102      	movs	r1, #2
 800253c:	e000      	b.n	8002540 <__cvt+0x44>
 800253e:	2103      	movs	r1, #3
 8002540:	ab03      	add	r3, sp, #12
 8002542:	9301      	str	r3, [sp, #4]
 8002544:	ab02      	add	r3, sp, #8
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	ec47 6b10 	vmov	d0, r6, r7
 800254c:	4653      	mov	r3, sl
 800254e:	4622      	mov	r2, r4
 8002550:	f001 feaa 	bl	80042a8 <_dtoa_r>
 8002554:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002558:	4605      	mov	r5, r0
 800255a:	d119      	bne.n	8002590 <__cvt+0x94>
 800255c:	f019 0f01 	tst.w	r9, #1
 8002560:	d00e      	beq.n	8002580 <__cvt+0x84>
 8002562:	eb00 0904 	add.w	r9, r0, r4
 8002566:	2200      	movs	r2, #0
 8002568:	2300      	movs	r3, #0
 800256a:	4630      	mov	r0, r6
 800256c:	4639      	mov	r1, r7
 800256e:	f7fe fab3 	bl	8000ad8 <__aeabi_dcmpeq>
 8002572:	b108      	cbz	r0, 8002578 <__cvt+0x7c>
 8002574:	f8cd 900c 	str.w	r9, [sp, #12]
 8002578:	2230      	movs	r2, #48	@ 0x30
 800257a:	9b03      	ldr	r3, [sp, #12]
 800257c:	454b      	cmp	r3, r9
 800257e:	d31e      	bcc.n	80025be <__cvt+0xc2>
 8002580:	9b03      	ldr	r3, [sp, #12]
 8002582:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002584:	1b5b      	subs	r3, r3, r5
 8002586:	4628      	mov	r0, r5
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	b004      	add	sp, #16
 800258c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002590:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002594:	eb00 0904 	add.w	r9, r0, r4
 8002598:	d1e5      	bne.n	8002566 <__cvt+0x6a>
 800259a:	7803      	ldrb	r3, [r0, #0]
 800259c:	2b30      	cmp	r3, #48	@ 0x30
 800259e:	d10a      	bne.n	80025b6 <__cvt+0xba>
 80025a0:	2200      	movs	r2, #0
 80025a2:	2300      	movs	r3, #0
 80025a4:	4630      	mov	r0, r6
 80025a6:	4639      	mov	r1, r7
 80025a8:	f7fe fa96 	bl	8000ad8 <__aeabi_dcmpeq>
 80025ac:	b918      	cbnz	r0, 80025b6 <__cvt+0xba>
 80025ae:	f1c4 0401 	rsb	r4, r4, #1
 80025b2:	f8ca 4000 	str.w	r4, [sl]
 80025b6:	f8da 3000 	ldr.w	r3, [sl]
 80025ba:	4499      	add	r9, r3
 80025bc:	e7d3      	b.n	8002566 <__cvt+0x6a>
 80025be:	1c59      	adds	r1, r3, #1
 80025c0:	9103      	str	r1, [sp, #12]
 80025c2:	701a      	strb	r2, [r3, #0]
 80025c4:	e7d9      	b.n	800257a <__cvt+0x7e>

080025c6 <__exponent>:
 80025c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025c8:	2900      	cmp	r1, #0
 80025ca:	bfba      	itte	lt
 80025cc:	4249      	neglt	r1, r1
 80025ce:	232d      	movlt	r3, #45	@ 0x2d
 80025d0:	232b      	movge	r3, #43	@ 0x2b
 80025d2:	2909      	cmp	r1, #9
 80025d4:	7002      	strb	r2, [r0, #0]
 80025d6:	7043      	strb	r3, [r0, #1]
 80025d8:	dd29      	ble.n	800262e <__exponent+0x68>
 80025da:	f10d 0307 	add.w	r3, sp, #7
 80025de:	461d      	mov	r5, r3
 80025e0:	270a      	movs	r7, #10
 80025e2:	461a      	mov	r2, r3
 80025e4:	fbb1 f6f7 	udiv	r6, r1, r7
 80025e8:	fb07 1416 	mls	r4, r7, r6, r1
 80025ec:	3430      	adds	r4, #48	@ 0x30
 80025ee:	f802 4c01 	strb.w	r4, [r2, #-1]
 80025f2:	460c      	mov	r4, r1
 80025f4:	2c63      	cmp	r4, #99	@ 0x63
 80025f6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80025fa:	4631      	mov	r1, r6
 80025fc:	dcf1      	bgt.n	80025e2 <__exponent+0x1c>
 80025fe:	3130      	adds	r1, #48	@ 0x30
 8002600:	1e94      	subs	r4, r2, #2
 8002602:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002606:	1c41      	adds	r1, r0, #1
 8002608:	4623      	mov	r3, r4
 800260a:	42ab      	cmp	r3, r5
 800260c:	d30a      	bcc.n	8002624 <__exponent+0x5e>
 800260e:	f10d 0309 	add.w	r3, sp, #9
 8002612:	1a9b      	subs	r3, r3, r2
 8002614:	42ac      	cmp	r4, r5
 8002616:	bf88      	it	hi
 8002618:	2300      	movhi	r3, #0
 800261a:	3302      	adds	r3, #2
 800261c:	4403      	add	r3, r0
 800261e:	1a18      	subs	r0, r3, r0
 8002620:	b003      	add	sp, #12
 8002622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002624:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002628:	f801 6f01 	strb.w	r6, [r1, #1]!
 800262c:	e7ed      	b.n	800260a <__exponent+0x44>
 800262e:	2330      	movs	r3, #48	@ 0x30
 8002630:	3130      	adds	r1, #48	@ 0x30
 8002632:	7083      	strb	r3, [r0, #2]
 8002634:	70c1      	strb	r1, [r0, #3]
 8002636:	1d03      	adds	r3, r0, #4
 8002638:	e7f1      	b.n	800261e <__exponent+0x58>
	...

0800263c <_printf_float>:
 800263c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002640:	b08d      	sub	sp, #52	@ 0x34
 8002642:	460c      	mov	r4, r1
 8002644:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8002648:	4616      	mov	r6, r2
 800264a:	461f      	mov	r7, r3
 800264c:	4605      	mov	r5, r0
 800264e:	f001 fd53 	bl	80040f8 <_localeconv_r>
 8002652:	6803      	ldr	r3, [r0, #0]
 8002654:	9304      	str	r3, [sp, #16]
 8002656:	4618      	mov	r0, r3
 8002658:	f7fd fe12 	bl	8000280 <strlen>
 800265c:	2300      	movs	r3, #0
 800265e:	930a      	str	r3, [sp, #40]	@ 0x28
 8002660:	f8d8 3000 	ldr.w	r3, [r8]
 8002664:	9005      	str	r0, [sp, #20]
 8002666:	3307      	adds	r3, #7
 8002668:	f023 0307 	bic.w	r3, r3, #7
 800266c:	f103 0208 	add.w	r2, r3, #8
 8002670:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002674:	f8d4 b000 	ldr.w	fp, [r4]
 8002678:	f8c8 2000 	str.w	r2, [r8]
 800267c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002680:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002684:	9307      	str	r3, [sp, #28]
 8002686:	f8cd 8018 	str.w	r8, [sp, #24]
 800268a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800268e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002692:	4b9c      	ldr	r3, [pc, #624]	@ (8002904 <_printf_float+0x2c8>)
 8002694:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002698:	f7fe fa50 	bl	8000b3c <__aeabi_dcmpun>
 800269c:	bb70      	cbnz	r0, 80026fc <_printf_float+0xc0>
 800269e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80026a2:	4b98      	ldr	r3, [pc, #608]	@ (8002904 <_printf_float+0x2c8>)
 80026a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80026a8:	f7fe fa2a 	bl	8000b00 <__aeabi_dcmple>
 80026ac:	bb30      	cbnz	r0, 80026fc <_printf_float+0xc0>
 80026ae:	2200      	movs	r2, #0
 80026b0:	2300      	movs	r3, #0
 80026b2:	4640      	mov	r0, r8
 80026b4:	4649      	mov	r1, r9
 80026b6:	f7fe fa19 	bl	8000aec <__aeabi_dcmplt>
 80026ba:	b110      	cbz	r0, 80026c2 <_printf_float+0x86>
 80026bc:	232d      	movs	r3, #45	@ 0x2d
 80026be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80026c2:	4a91      	ldr	r2, [pc, #580]	@ (8002908 <_printf_float+0x2cc>)
 80026c4:	4b91      	ldr	r3, [pc, #580]	@ (800290c <_printf_float+0x2d0>)
 80026c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80026ca:	bf94      	ite	ls
 80026cc:	4690      	movls	r8, r2
 80026ce:	4698      	movhi	r8, r3
 80026d0:	2303      	movs	r3, #3
 80026d2:	6123      	str	r3, [r4, #16]
 80026d4:	f02b 0304 	bic.w	r3, fp, #4
 80026d8:	6023      	str	r3, [r4, #0]
 80026da:	f04f 0900 	mov.w	r9, #0
 80026de:	9700      	str	r7, [sp, #0]
 80026e0:	4633      	mov	r3, r6
 80026e2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80026e4:	4621      	mov	r1, r4
 80026e6:	4628      	mov	r0, r5
 80026e8:	f000 f9d2 	bl	8002a90 <_printf_common>
 80026ec:	3001      	adds	r0, #1
 80026ee:	f040 808d 	bne.w	800280c <_printf_float+0x1d0>
 80026f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80026f6:	b00d      	add	sp, #52	@ 0x34
 80026f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026fc:	4642      	mov	r2, r8
 80026fe:	464b      	mov	r3, r9
 8002700:	4640      	mov	r0, r8
 8002702:	4649      	mov	r1, r9
 8002704:	f7fe fa1a 	bl	8000b3c <__aeabi_dcmpun>
 8002708:	b140      	cbz	r0, 800271c <_printf_float+0xe0>
 800270a:	464b      	mov	r3, r9
 800270c:	2b00      	cmp	r3, #0
 800270e:	bfbc      	itt	lt
 8002710:	232d      	movlt	r3, #45	@ 0x2d
 8002712:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002716:	4a7e      	ldr	r2, [pc, #504]	@ (8002910 <_printf_float+0x2d4>)
 8002718:	4b7e      	ldr	r3, [pc, #504]	@ (8002914 <_printf_float+0x2d8>)
 800271a:	e7d4      	b.n	80026c6 <_printf_float+0x8a>
 800271c:	6863      	ldr	r3, [r4, #4]
 800271e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8002722:	9206      	str	r2, [sp, #24]
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	d13b      	bne.n	80027a0 <_printf_float+0x164>
 8002728:	2306      	movs	r3, #6
 800272a:	6063      	str	r3, [r4, #4]
 800272c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8002730:	2300      	movs	r3, #0
 8002732:	6022      	str	r2, [r4, #0]
 8002734:	9303      	str	r3, [sp, #12]
 8002736:	ab0a      	add	r3, sp, #40	@ 0x28
 8002738:	e9cd a301 	strd	sl, r3, [sp, #4]
 800273c:	ab09      	add	r3, sp, #36	@ 0x24
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	6861      	ldr	r1, [r4, #4]
 8002742:	ec49 8b10 	vmov	d0, r8, r9
 8002746:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800274a:	4628      	mov	r0, r5
 800274c:	f7ff fed6 	bl	80024fc <__cvt>
 8002750:	9b06      	ldr	r3, [sp, #24]
 8002752:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002754:	2b47      	cmp	r3, #71	@ 0x47
 8002756:	4680      	mov	r8, r0
 8002758:	d129      	bne.n	80027ae <_printf_float+0x172>
 800275a:	1cc8      	adds	r0, r1, #3
 800275c:	db02      	blt.n	8002764 <_printf_float+0x128>
 800275e:	6863      	ldr	r3, [r4, #4]
 8002760:	4299      	cmp	r1, r3
 8002762:	dd41      	ble.n	80027e8 <_printf_float+0x1ac>
 8002764:	f1aa 0a02 	sub.w	sl, sl, #2
 8002768:	fa5f fa8a 	uxtb.w	sl, sl
 800276c:	3901      	subs	r1, #1
 800276e:	4652      	mov	r2, sl
 8002770:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002774:	9109      	str	r1, [sp, #36]	@ 0x24
 8002776:	f7ff ff26 	bl	80025c6 <__exponent>
 800277a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800277c:	1813      	adds	r3, r2, r0
 800277e:	2a01      	cmp	r2, #1
 8002780:	4681      	mov	r9, r0
 8002782:	6123      	str	r3, [r4, #16]
 8002784:	dc02      	bgt.n	800278c <_printf_float+0x150>
 8002786:	6822      	ldr	r2, [r4, #0]
 8002788:	07d2      	lsls	r2, r2, #31
 800278a:	d501      	bpl.n	8002790 <_printf_float+0x154>
 800278c:	3301      	adds	r3, #1
 800278e:	6123      	str	r3, [r4, #16]
 8002790:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0a2      	beq.n	80026de <_printf_float+0xa2>
 8002798:	232d      	movs	r3, #45	@ 0x2d
 800279a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800279e:	e79e      	b.n	80026de <_printf_float+0xa2>
 80027a0:	9a06      	ldr	r2, [sp, #24]
 80027a2:	2a47      	cmp	r2, #71	@ 0x47
 80027a4:	d1c2      	bne.n	800272c <_printf_float+0xf0>
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1c0      	bne.n	800272c <_printf_float+0xf0>
 80027aa:	2301      	movs	r3, #1
 80027ac:	e7bd      	b.n	800272a <_printf_float+0xee>
 80027ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80027b2:	d9db      	bls.n	800276c <_printf_float+0x130>
 80027b4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80027b8:	d118      	bne.n	80027ec <_printf_float+0x1b0>
 80027ba:	2900      	cmp	r1, #0
 80027bc:	6863      	ldr	r3, [r4, #4]
 80027be:	dd0b      	ble.n	80027d8 <_printf_float+0x19c>
 80027c0:	6121      	str	r1, [r4, #16]
 80027c2:	b913      	cbnz	r3, 80027ca <_printf_float+0x18e>
 80027c4:	6822      	ldr	r2, [r4, #0]
 80027c6:	07d0      	lsls	r0, r2, #31
 80027c8:	d502      	bpl.n	80027d0 <_printf_float+0x194>
 80027ca:	3301      	adds	r3, #1
 80027cc:	440b      	add	r3, r1
 80027ce:	6123      	str	r3, [r4, #16]
 80027d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80027d2:	f04f 0900 	mov.w	r9, #0
 80027d6:	e7db      	b.n	8002790 <_printf_float+0x154>
 80027d8:	b913      	cbnz	r3, 80027e0 <_printf_float+0x1a4>
 80027da:	6822      	ldr	r2, [r4, #0]
 80027dc:	07d2      	lsls	r2, r2, #31
 80027de:	d501      	bpl.n	80027e4 <_printf_float+0x1a8>
 80027e0:	3302      	adds	r3, #2
 80027e2:	e7f4      	b.n	80027ce <_printf_float+0x192>
 80027e4:	2301      	movs	r3, #1
 80027e6:	e7f2      	b.n	80027ce <_printf_float+0x192>
 80027e8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80027ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80027ee:	4299      	cmp	r1, r3
 80027f0:	db05      	blt.n	80027fe <_printf_float+0x1c2>
 80027f2:	6823      	ldr	r3, [r4, #0]
 80027f4:	6121      	str	r1, [r4, #16]
 80027f6:	07d8      	lsls	r0, r3, #31
 80027f8:	d5ea      	bpl.n	80027d0 <_printf_float+0x194>
 80027fa:	1c4b      	adds	r3, r1, #1
 80027fc:	e7e7      	b.n	80027ce <_printf_float+0x192>
 80027fe:	2900      	cmp	r1, #0
 8002800:	bfd4      	ite	le
 8002802:	f1c1 0202 	rsble	r2, r1, #2
 8002806:	2201      	movgt	r2, #1
 8002808:	4413      	add	r3, r2
 800280a:	e7e0      	b.n	80027ce <_printf_float+0x192>
 800280c:	6823      	ldr	r3, [r4, #0]
 800280e:	055a      	lsls	r2, r3, #21
 8002810:	d407      	bmi.n	8002822 <_printf_float+0x1e6>
 8002812:	6923      	ldr	r3, [r4, #16]
 8002814:	4642      	mov	r2, r8
 8002816:	4631      	mov	r1, r6
 8002818:	4628      	mov	r0, r5
 800281a:	47b8      	blx	r7
 800281c:	3001      	adds	r0, #1
 800281e:	d12b      	bne.n	8002878 <_printf_float+0x23c>
 8002820:	e767      	b.n	80026f2 <_printf_float+0xb6>
 8002822:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002826:	f240 80dd 	bls.w	80029e4 <_printf_float+0x3a8>
 800282a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800282e:	2200      	movs	r2, #0
 8002830:	2300      	movs	r3, #0
 8002832:	f7fe f951 	bl	8000ad8 <__aeabi_dcmpeq>
 8002836:	2800      	cmp	r0, #0
 8002838:	d033      	beq.n	80028a2 <_printf_float+0x266>
 800283a:	4a37      	ldr	r2, [pc, #220]	@ (8002918 <_printf_float+0x2dc>)
 800283c:	2301      	movs	r3, #1
 800283e:	4631      	mov	r1, r6
 8002840:	4628      	mov	r0, r5
 8002842:	47b8      	blx	r7
 8002844:	3001      	adds	r0, #1
 8002846:	f43f af54 	beq.w	80026f2 <_printf_float+0xb6>
 800284a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800284e:	4543      	cmp	r3, r8
 8002850:	db02      	blt.n	8002858 <_printf_float+0x21c>
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	07d8      	lsls	r0, r3, #31
 8002856:	d50f      	bpl.n	8002878 <_printf_float+0x23c>
 8002858:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800285c:	4631      	mov	r1, r6
 800285e:	4628      	mov	r0, r5
 8002860:	47b8      	blx	r7
 8002862:	3001      	adds	r0, #1
 8002864:	f43f af45 	beq.w	80026f2 <_printf_float+0xb6>
 8002868:	f04f 0900 	mov.w	r9, #0
 800286c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8002870:	f104 0a1a 	add.w	sl, r4, #26
 8002874:	45c8      	cmp	r8, r9
 8002876:	dc09      	bgt.n	800288c <_printf_float+0x250>
 8002878:	6823      	ldr	r3, [r4, #0]
 800287a:	079b      	lsls	r3, r3, #30
 800287c:	f100 8103 	bmi.w	8002a86 <_printf_float+0x44a>
 8002880:	68e0      	ldr	r0, [r4, #12]
 8002882:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002884:	4298      	cmp	r0, r3
 8002886:	bfb8      	it	lt
 8002888:	4618      	movlt	r0, r3
 800288a:	e734      	b.n	80026f6 <_printf_float+0xba>
 800288c:	2301      	movs	r3, #1
 800288e:	4652      	mov	r2, sl
 8002890:	4631      	mov	r1, r6
 8002892:	4628      	mov	r0, r5
 8002894:	47b8      	blx	r7
 8002896:	3001      	adds	r0, #1
 8002898:	f43f af2b 	beq.w	80026f2 <_printf_float+0xb6>
 800289c:	f109 0901 	add.w	r9, r9, #1
 80028a0:	e7e8      	b.n	8002874 <_printf_float+0x238>
 80028a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	dc39      	bgt.n	800291c <_printf_float+0x2e0>
 80028a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002918 <_printf_float+0x2dc>)
 80028aa:	2301      	movs	r3, #1
 80028ac:	4631      	mov	r1, r6
 80028ae:	4628      	mov	r0, r5
 80028b0:	47b8      	blx	r7
 80028b2:	3001      	adds	r0, #1
 80028b4:	f43f af1d 	beq.w	80026f2 <_printf_float+0xb6>
 80028b8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80028bc:	ea59 0303 	orrs.w	r3, r9, r3
 80028c0:	d102      	bne.n	80028c8 <_printf_float+0x28c>
 80028c2:	6823      	ldr	r3, [r4, #0]
 80028c4:	07d9      	lsls	r1, r3, #31
 80028c6:	d5d7      	bpl.n	8002878 <_printf_float+0x23c>
 80028c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80028cc:	4631      	mov	r1, r6
 80028ce:	4628      	mov	r0, r5
 80028d0:	47b8      	blx	r7
 80028d2:	3001      	adds	r0, #1
 80028d4:	f43f af0d 	beq.w	80026f2 <_printf_float+0xb6>
 80028d8:	f04f 0a00 	mov.w	sl, #0
 80028dc:	f104 0b1a 	add.w	fp, r4, #26
 80028e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80028e2:	425b      	negs	r3, r3
 80028e4:	4553      	cmp	r3, sl
 80028e6:	dc01      	bgt.n	80028ec <_printf_float+0x2b0>
 80028e8:	464b      	mov	r3, r9
 80028ea:	e793      	b.n	8002814 <_printf_float+0x1d8>
 80028ec:	2301      	movs	r3, #1
 80028ee:	465a      	mov	r2, fp
 80028f0:	4631      	mov	r1, r6
 80028f2:	4628      	mov	r0, r5
 80028f4:	47b8      	blx	r7
 80028f6:	3001      	adds	r0, #1
 80028f8:	f43f aefb 	beq.w	80026f2 <_printf_float+0xb6>
 80028fc:	f10a 0a01 	add.w	sl, sl, #1
 8002900:	e7ee      	b.n	80028e0 <_printf_float+0x2a4>
 8002902:	bf00      	nop
 8002904:	7fefffff 	.word	0x7fefffff
 8002908:	08007434 	.word	0x08007434
 800290c:	08007438 	.word	0x08007438
 8002910:	0800743c 	.word	0x0800743c
 8002914:	08007440 	.word	0x08007440
 8002918:	08007444 	.word	0x08007444
 800291c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800291e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002922:	4553      	cmp	r3, sl
 8002924:	bfa8      	it	ge
 8002926:	4653      	movge	r3, sl
 8002928:	2b00      	cmp	r3, #0
 800292a:	4699      	mov	r9, r3
 800292c:	dc36      	bgt.n	800299c <_printf_float+0x360>
 800292e:	f04f 0b00 	mov.w	fp, #0
 8002932:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002936:	f104 021a 	add.w	r2, r4, #26
 800293a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800293c:	9306      	str	r3, [sp, #24]
 800293e:	eba3 0309 	sub.w	r3, r3, r9
 8002942:	455b      	cmp	r3, fp
 8002944:	dc31      	bgt.n	80029aa <_printf_float+0x36e>
 8002946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002948:	459a      	cmp	sl, r3
 800294a:	dc3a      	bgt.n	80029c2 <_printf_float+0x386>
 800294c:	6823      	ldr	r3, [r4, #0]
 800294e:	07da      	lsls	r2, r3, #31
 8002950:	d437      	bmi.n	80029c2 <_printf_float+0x386>
 8002952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002954:	ebaa 0903 	sub.w	r9, sl, r3
 8002958:	9b06      	ldr	r3, [sp, #24]
 800295a:	ebaa 0303 	sub.w	r3, sl, r3
 800295e:	4599      	cmp	r9, r3
 8002960:	bfa8      	it	ge
 8002962:	4699      	movge	r9, r3
 8002964:	f1b9 0f00 	cmp.w	r9, #0
 8002968:	dc33      	bgt.n	80029d2 <_printf_float+0x396>
 800296a:	f04f 0800 	mov.w	r8, #0
 800296e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002972:	f104 0b1a 	add.w	fp, r4, #26
 8002976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002978:	ebaa 0303 	sub.w	r3, sl, r3
 800297c:	eba3 0309 	sub.w	r3, r3, r9
 8002980:	4543      	cmp	r3, r8
 8002982:	f77f af79 	ble.w	8002878 <_printf_float+0x23c>
 8002986:	2301      	movs	r3, #1
 8002988:	465a      	mov	r2, fp
 800298a:	4631      	mov	r1, r6
 800298c:	4628      	mov	r0, r5
 800298e:	47b8      	blx	r7
 8002990:	3001      	adds	r0, #1
 8002992:	f43f aeae 	beq.w	80026f2 <_printf_float+0xb6>
 8002996:	f108 0801 	add.w	r8, r8, #1
 800299a:	e7ec      	b.n	8002976 <_printf_float+0x33a>
 800299c:	4642      	mov	r2, r8
 800299e:	4631      	mov	r1, r6
 80029a0:	4628      	mov	r0, r5
 80029a2:	47b8      	blx	r7
 80029a4:	3001      	adds	r0, #1
 80029a6:	d1c2      	bne.n	800292e <_printf_float+0x2f2>
 80029a8:	e6a3      	b.n	80026f2 <_printf_float+0xb6>
 80029aa:	2301      	movs	r3, #1
 80029ac:	4631      	mov	r1, r6
 80029ae:	4628      	mov	r0, r5
 80029b0:	9206      	str	r2, [sp, #24]
 80029b2:	47b8      	blx	r7
 80029b4:	3001      	adds	r0, #1
 80029b6:	f43f ae9c 	beq.w	80026f2 <_printf_float+0xb6>
 80029ba:	9a06      	ldr	r2, [sp, #24]
 80029bc:	f10b 0b01 	add.w	fp, fp, #1
 80029c0:	e7bb      	b.n	800293a <_printf_float+0x2fe>
 80029c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80029c6:	4631      	mov	r1, r6
 80029c8:	4628      	mov	r0, r5
 80029ca:	47b8      	blx	r7
 80029cc:	3001      	adds	r0, #1
 80029ce:	d1c0      	bne.n	8002952 <_printf_float+0x316>
 80029d0:	e68f      	b.n	80026f2 <_printf_float+0xb6>
 80029d2:	9a06      	ldr	r2, [sp, #24]
 80029d4:	464b      	mov	r3, r9
 80029d6:	4442      	add	r2, r8
 80029d8:	4631      	mov	r1, r6
 80029da:	4628      	mov	r0, r5
 80029dc:	47b8      	blx	r7
 80029de:	3001      	adds	r0, #1
 80029e0:	d1c3      	bne.n	800296a <_printf_float+0x32e>
 80029e2:	e686      	b.n	80026f2 <_printf_float+0xb6>
 80029e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80029e8:	f1ba 0f01 	cmp.w	sl, #1
 80029ec:	dc01      	bgt.n	80029f2 <_printf_float+0x3b6>
 80029ee:	07db      	lsls	r3, r3, #31
 80029f0:	d536      	bpl.n	8002a60 <_printf_float+0x424>
 80029f2:	2301      	movs	r3, #1
 80029f4:	4642      	mov	r2, r8
 80029f6:	4631      	mov	r1, r6
 80029f8:	4628      	mov	r0, r5
 80029fa:	47b8      	blx	r7
 80029fc:	3001      	adds	r0, #1
 80029fe:	f43f ae78 	beq.w	80026f2 <_printf_float+0xb6>
 8002a02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002a06:	4631      	mov	r1, r6
 8002a08:	4628      	mov	r0, r5
 8002a0a:	47b8      	blx	r7
 8002a0c:	3001      	adds	r0, #1
 8002a0e:	f43f ae70 	beq.w	80026f2 <_printf_float+0xb6>
 8002a12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002a16:	2200      	movs	r2, #0
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8002a1e:	f7fe f85b 	bl	8000ad8 <__aeabi_dcmpeq>
 8002a22:	b9c0      	cbnz	r0, 8002a56 <_printf_float+0x41a>
 8002a24:	4653      	mov	r3, sl
 8002a26:	f108 0201 	add.w	r2, r8, #1
 8002a2a:	4631      	mov	r1, r6
 8002a2c:	4628      	mov	r0, r5
 8002a2e:	47b8      	blx	r7
 8002a30:	3001      	adds	r0, #1
 8002a32:	d10c      	bne.n	8002a4e <_printf_float+0x412>
 8002a34:	e65d      	b.n	80026f2 <_printf_float+0xb6>
 8002a36:	2301      	movs	r3, #1
 8002a38:	465a      	mov	r2, fp
 8002a3a:	4631      	mov	r1, r6
 8002a3c:	4628      	mov	r0, r5
 8002a3e:	47b8      	blx	r7
 8002a40:	3001      	adds	r0, #1
 8002a42:	f43f ae56 	beq.w	80026f2 <_printf_float+0xb6>
 8002a46:	f108 0801 	add.w	r8, r8, #1
 8002a4a:	45d0      	cmp	r8, sl
 8002a4c:	dbf3      	blt.n	8002a36 <_printf_float+0x3fa>
 8002a4e:	464b      	mov	r3, r9
 8002a50:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002a54:	e6df      	b.n	8002816 <_printf_float+0x1da>
 8002a56:	f04f 0800 	mov.w	r8, #0
 8002a5a:	f104 0b1a 	add.w	fp, r4, #26
 8002a5e:	e7f4      	b.n	8002a4a <_printf_float+0x40e>
 8002a60:	2301      	movs	r3, #1
 8002a62:	4642      	mov	r2, r8
 8002a64:	e7e1      	b.n	8002a2a <_printf_float+0x3ee>
 8002a66:	2301      	movs	r3, #1
 8002a68:	464a      	mov	r2, r9
 8002a6a:	4631      	mov	r1, r6
 8002a6c:	4628      	mov	r0, r5
 8002a6e:	47b8      	blx	r7
 8002a70:	3001      	adds	r0, #1
 8002a72:	f43f ae3e 	beq.w	80026f2 <_printf_float+0xb6>
 8002a76:	f108 0801 	add.w	r8, r8, #1
 8002a7a:	68e3      	ldr	r3, [r4, #12]
 8002a7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8002a7e:	1a5b      	subs	r3, r3, r1
 8002a80:	4543      	cmp	r3, r8
 8002a82:	dcf0      	bgt.n	8002a66 <_printf_float+0x42a>
 8002a84:	e6fc      	b.n	8002880 <_printf_float+0x244>
 8002a86:	f04f 0800 	mov.w	r8, #0
 8002a8a:	f104 0919 	add.w	r9, r4, #25
 8002a8e:	e7f4      	b.n	8002a7a <_printf_float+0x43e>

08002a90 <_printf_common>:
 8002a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a94:	4616      	mov	r6, r2
 8002a96:	4698      	mov	r8, r3
 8002a98:	688a      	ldr	r2, [r1, #8]
 8002a9a:	690b      	ldr	r3, [r1, #16]
 8002a9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	bfb8      	it	lt
 8002aa4:	4613      	movlt	r3, r2
 8002aa6:	6033      	str	r3, [r6, #0]
 8002aa8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002aac:	4607      	mov	r7, r0
 8002aae:	460c      	mov	r4, r1
 8002ab0:	b10a      	cbz	r2, 8002ab6 <_printf_common+0x26>
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	6033      	str	r3, [r6, #0]
 8002ab6:	6823      	ldr	r3, [r4, #0]
 8002ab8:	0699      	lsls	r1, r3, #26
 8002aba:	bf42      	ittt	mi
 8002abc:	6833      	ldrmi	r3, [r6, #0]
 8002abe:	3302      	addmi	r3, #2
 8002ac0:	6033      	strmi	r3, [r6, #0]
 8002ac2:	6825      	ldr	r5, [r4, #0]
 8002ac4:	f015 0506 	ands.w	r5, r5, #6
 8002ac8:	d106      	bne.n	8002ad8 <_printf_common+0x48>
 8002aca:	f104 0a19 	add.w	sl, r4, #25
 8002ace:	68e3      	ldr	r3, [r4, #12]
 8002ad0:	6832      	ldr	r2, [r6, #0]
 8002ad2:	1a9b      	subs	r3, r3, r2
 8002ad4:	42ab      	cmp	r3, r5
 8002ad6:	dc26      	bgt.n	8002b26 <_printf_common+0x96>
 8002ad8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002adc:	6822      	ldr	r2, [r4, #0]
 8002ade:	3b00      	subs	r3, #0
 8002ae0:	bf18      	it	ne
 8002ae2:	2301      	movne	r3, #1
 8002ae4:	0692      	lsls	r2, r2, #26
 8002ae6:	d42b      	bmi.n	8002b40 <_printf_common+0xb0>
 8002ae8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002aec:	4641      	mov	r1, r8
 8002aee:	4638      	mov	r0, r7
 8002af0:	47c8      	blx	r9
 8002af2:	3001      	adds	r0, #1
 8002af4:	d01e      	beq.n	8002b34 <_printf_common+0xa4>
 8002af6:	6823      	ldr	r3, [r4, #0]
 8002af8:	6922      	ldr	r2, [r4, #16]
 8002afa:	f003 0306 	and.w	r3, r3, #6
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	bf02      	ittt	eq
 8002b02:	68e5      	ldreq	r5, [r4, #12]
 8002b04:	6833      	ldreq	r3, [r6, #0]
 8002b06:	1aed      	subeq	r5, r5, r3
 8002b08:	68a3      	ldr	r3, [r4, #8]
 8002b0a:	bf0c      	ite	eq
 8002b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b10:	2500      	movne	r5, #0
 8002b12:	4293      	cmp	r3, r2
 8002b14:	bfc4      	itt	gt
 8002b16:	1a9b      	subgt	r3, r3, r2
 8002b18:	18ed      	addgt	r5, r5, r3
 8002b1a:	2600      	movs	r6, #0
 8002b1c:	341a      	adds	r4, #26
 8002b1e:	42b5      	cmp	r5, r6
 8002b20:	d11a      	bne.n	8002b58 <_printf_common+0xc8>
 8002b22:	2000      	movs	r0, #0
 8002b24:	e008      	b.n	8002b38 <_printf_common+0xa8>
 8002b26:	2301      	movs	r3, #1
 8002b28:	4652      	mov	r2, sl
 8002b2a:	4641      	mov	r1, r8
 8002b2c:	4638      	mov	r0, r7
 8002b2e:	47c8      	blx	r9
 8002b30:	3001      	adds	r0, #1
 8002b32:	d103      	bne.n	8002b3c <_printf_common+0xac>
 8002b34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b3c:	3501      	adds	r5, #1
 8002b3e:	e7c6      	b.n	8002ace <_printf_common+0x3e>
 8002b40:	18e1      	adds	r1, r4, r3
 8002b42:	1c5a      	adds	r2, r3, #1
 8002b44:	2030      	movs	r0, #48	@ 0x30
 8002b46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002b4a:	4422      	add	r2, r4
 8002b4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002b50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002b54:	3302      	adds	r3, #2
 8002b56:	e7c7      	b.n	8002ae8 <_printf_common+0x58>
 8002b58:	2301      	movs	r3, #1
 8002b5a:	4622      	mov	r2, r4
 8002b5c:	4641      	mov	r1, r8
 8002b5e:	4638      	mov	r0, r7
 8002b60:	47c8      	blx	r9
 8002b62:	3001      	adds	r0, #1
 8002b64:	d0e6      	beq.n	8002b34 <_printf_common+0xa4>
 8002b66:	3601      	adds	r6, #1
 8002b68:	e7d9      	b.n	8002b1e <_printf_common+0x8e>
	...

08002b6c <_printf_i>:
 8002b6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b70:	7e0f      	ldrb	r7, [r1, #24]
 8002b72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002b74:	2f78      	cmp	r7, #120	@ 0x78
 8002b76:	4691      	mov	r9, r2
 8002b78:	4680      	mov	r8, r0
 8002b7a:	460c      	mov	r4, r1
 8002b7c:	469a      	mov	sl, r3
 8002b7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002b82:	d807      	bhi.n	8002b94 <_printf_i+0x28>
 8002b84:	2f62      	cmp	r7, #98	@ 0x62
 8002b86:	d80a      	bhi.n	8002b9e <_printf_i+0x32>
 8002b88:	2f00      	cmp	r7, #0
 8002b8a:	f000 80d2 	beq.w	8002d32 <_printf_i+0x1c6>
 8002b8e:	2f58      	cmp	r7, #88	@ 0x58
 8002b90:	f000 80b9 	beq.w	8002d06 <_printf_i+0x19a>
 8002b94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002b9c:	e03a      	b.n	8002c14 <_printf_i+0xa8>
 8002b9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002ba2:	2b15      	cmp	r3, #21
 8002ba4:	d8f6      	bhi.n	8002b94 <_printf_i+0x28>
 8002ba6:	a101      	add	r1, pc, #4	@ (adr r1, 8002bac <_printf_i+0x40>)
 8002ba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002bac:	08002c05 	.word	0x08002c05
 8002bb0:	08002c19 	.word	0x08002c19
 8002bb4:	08002b95 	.word	0x08002b95
 8002bb8:	08002b95 	.word	0x08002b95
 8002bbc:	08002b95 	.word	0x08002b95
 8002bc0:	08002b95 	.word	0x08002b95
 8002bc4:	08002c19 	.word	0x08002c19
 8002bc8:	08002b95 	.word	0x08002b95
 8002bcc:	08002b95 	.word	0x08002b95
 8002bd0:	08002b95 	.word	0x08002b95
 8002bd4:	08002b95 	.word	0x08002b95
 8002bd8:	08002d19 	.word	0x08002d19
 8002bdc:	08002c43 	.word	0x08002c43
 8002be0:	08002cd3 	.word	0x08002cd3
 8002be4:	08002b95 	.word	0x08002b95
 8002be8:	08002b95 	.word	0x08002b95
 8002bec:	08002d3b 	.word	0x08002d3b
 8002bf0:	08002b95 	.word	0x08002b95
 8002bf4:	08002c43 	.word	0x08002c43
 8002bf8:	08002b95 	.word	0x08002b95
 8002bfc:	08002b95 	.word	0x08002b95
 8002c00:	08002cdb 	.word	0x08002cdb
 8002c04:	6833      	ldr	r3, [r6, #0]
 8002c06:	1d1a      	adds	r2, r3, #4
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6032      	str	r2, [r6, #0]
 8002c0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002c10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002c14:	2301      	movs	r3, #1
 8002c16:	e09d      	b.n	8002d54 <_printf_i+0x1e8>
 8002c18:	6833      	ldr	r3, [r6, #0]
 8002c1a:	6820      	ldr	r0, [r4, #0]
 8002c1c:	1d19      	adds	r1, r3, #4
 8002c1e:	6031      	str	r1, [r6, #0]
 8002c20:	0606      	lsls	r6, r0, #24
 8002c22:	d501      	bpl.n	8002c28 <_printf_i+0xbc>
 8002c24:	681d      	ldr	r5, [r3, #0]
 8002c26:	e003      	b.n	8002c30 <_printf_i+0xc4>
 8002c28:	0645      	lsls	r5, r0, #25
 8002c2a:	d5fb      	bpl.n	8002c24 <_printf_i+0xb8>
 8002c2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002c30:	2d00      	cmp	r5, #0
 8002c32:	da03      	bge.n	8002c3c <_printf_i+0xd0>
 8002c34:	232d      	movs	r3, #45	@ 0x2d
 8002c36:	426d      	negs	r5, r5
 8002c38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c3c:	4859      	ldr	r0, [pc, #356]	@ (8002da4 <_printf_i+0x238>)
 8002c3e:	230a      	movs	r3, #10
 8002c40:	e011      	b.n	8002c66 <_printf_i+0xfa>
 8002c42:	6821      	ldr	r1, [r4, #0]
 8002c44:	6833      	ldr	r3, [r6, #0]
 8002c46:	0608      	lsls	r0, r1, #24
 8002c48:	f853 5b04 	ldr.w	r5, [r3], #4
 8002c4c:	d402      	bmi.n	8002c54 <_printf_i+0xe8>
 8002c4e:	0649      	lsls	r1, r1, #25
 8002c50:	bf48      	it	mi
 8002c52:	b2ad      	uxthmi	r5, r5
 8002c54:	2f6f      	cmp	r7, #111	@ 0x6f
 8002c56:	4853      	ldr	r0, [pc, #332]	@ (8002da4 <_printf_i+0x238>)
 8002c58:	6033      	str	r3, [r6, #0]
 8002c5a:	bf14      	ite	ne
 8002c5c:	230a      	movne	r3, #10
 8002c5e:	2308      	moveq	r3, #8
 8002c60:	2100      	movs	r1, #0
 8002c62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002c66:	6866      	ldr	r6, [r4, #4]
 8002c68:	60a6      	str	r6, [r4, #8]
 8002c6a:	2e00      	cmp	r6, #0
 8002c6c:	bfa2      	ittt	ge
 8002c6e:	6821      	ldrge	r1, [r4, #0]
 8002c70:	f021 0104 	bicge.w	r1, r1, #4
 8002c74:	6021      	strge	r1, [r4, #0]
 8002c76:	b90d      	cbnz	r5, 8002c7c <_printf_i+0x110>
 8002c78:	2e00      	cmp	r6, #0
 8002c7a:	d04b      	beq.n	8002d14 <_printf_i+0x1a8>
 8002c7c:	4616      	mov	r6, r2
 8002c7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8002c82:	fb03 5711 	mls	r7, r3, r1, r5
 8002c86:	5dc7      	ldrb	r7, [r0, r7]
 8002c88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002c8c:	462f      	mov	r7, r5
 8002c8e:	42bb      	cmp	r3, r7
 8002c90:	460d      	mov	r5, r1
 8002c92:	d9f4      	bls.n	8002c7e <_printf_i+0x112>
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d10b      	bne.n	8002cb0 <_printf_i+0x144>
 8002c98:	6823      	ldr	r3, [r4, #0]
 8002c9a:	07df      	lsls	r7, r3, #31
 8002c9c:	d508      	bpl.n	8002cb0 <_printf_i+0x144>
 8002c9e:	6923      	ldr	r3, [r4, #16]
 8002ca0:	6861      	ldr	r1, [r4, #4]
 8002ca2:	4299      	cmp	r1, r3
 8002ca4:	bfde      	ittt	le
 8002ca6:	2330      	movle	r3, #48	@ 0x30
 8002ca8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002cac:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8002cb0:	1b92      	subs	r2, r2, r6
 8002cb2:	6122      	str	r2, [r4, #16]
 8002cb4:	f8cd a000 	str.w	sl, [sp]
 8002cb8:	464b      	mov	r3, r9
 8002cba:	aa03      	add	r2, sp, #12
 8002cbc:	4621      	mov	r1, r4
 8002cbe:	4640      	mov	r0, r8
 8002cc0:	f7ff fee6 	bl	8002a90 <_printf_common>
 8002cc4:	3001      	adds	r0, #1
 8002cc6:	d14a      	bne.n	8002d5e <_printf_i+0x1f2>
 8002cc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ccc:	b004      	add	sp, #16
 8002cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	f043 0320 	orr.w	r3, r3, #32
 8002cd8:	6023      	str	r3, [r4, #0]
 8002cda:	4833      	ldr	r0, [pc, #204]	@ (8002da8 <_printf_i+0x23c>)
 8002cdc:	2778      	movs	r7, #120	@ 0x78
 8002cde:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002ce2:	6823      	ldr	r3, [r4, #0]
 8002ce4:	6831      	ldr	r1, [r6, #0]
 8002ce6:	061f      	lsls	r7, r3, #24
 8002ce8:	f851 5b04 	ldr.w	r5, [r1], #4
 8002cec:	d402      	bmi.n	8002cf4 <_printf_i+0x188>
 8002cee:	065f      	lsls	r7, r3, #25
 8002cf0:	bf48      	it	mi
 8002cf2:	b2ad      	uxthmi	r5, r5
 8002cf4:	6031      	str	r1, [r6, #0]
 8002cf6:	07d9      	lsls	r1, r3, #31
 8002cf8:	bf44      	itt	mi
 8002cfa:	f043 0320 	orrmi.w	r3, r3, #32
 8002cfe:	6023      	strmi	r3, [r4, #0]
 8002d00:	b11d      	cbz	r5, 8002d0a <_printf_i+0x19e>
 8002d02:	2310      	movs	r3, #16
 8002d04:	e7ac      	b.n	8002c60 <_printf_i+0xf4>
 8002d06:	4827      	ldr	r0, [pc, #156]	@ (8002da4 <_printf_i+0x238>)
 8002d08:	e7e9      	b.n	8002cde <_printf_i+0x172>
 8002d0a:	6823      	ldr	r3, [r4, #0]
 8002d0c:	f023 0320 	bic.w	r3, r3, #32
 8002d10:	6023      	str	r3, [r4, #0]
 8002d12:	e7f6      	b.n	8002d02 <_printf_i+0x196>
 8002d14:	4616      	mov	r6, r2
 8002d16:	e7bd      	b.n	8002c94 <_printf_i+0x128>
 8002d18:	6833      	ldr	r3, [r6, #0]
 8002d1a:	6825      	ldr	r5, [r4, #0]
 8002d1c:	6961      	ldr	r1, [r4, #20]
 8002d1e:	1d18      	adds	r0, r3, #4
 8002d20:	6030      	str	r0, [r6, #0]
 8002d22:	062e      	lsls	r6, r5, #24
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	d501      	bpl.n	8002d2c <_printf_i+0x1c0>
 8002d28:	6019      	str	r1, [r3, #0]
 8002d2a:	e002      	b.n	8002d32 <_printf_i+0x1c6>
 8002d2c:	0668      	lsls	r0, r5, #25
 8002d2e:	d5fb      	bpl.n	8002d28 <_printf_i+0x1bc>
 8002d30:	8019      	strh	r1, [r3, #0]
 8002d32:	2300      	movs	r3, #0
 8002d34:	6123      	str	r3, [r4, #16]
 8002d36:	4616      	mov	r6, r2
 8002d38:	e7bc      	b.n	8002cb4 <_printf_i+0x148>
 8002d3a:	6833      	ldr	r3, [r6, #0]
 8002d3c:	1d1a      	adds	r2, r3, #4
 8002d3e:	6032      	str	r2, [r6, #0]
 8002d40:	681e      	ldr	r6, [r3, #0]
 8002d42:	6862      	ldr	r2, [r4, #4]
 8002d44:	2100      	movs	r1, #0
 8002d46:	4630      	mov	r0, r6
 8002d48:	f7fd fa4a 	bl	80001e0 <memchr>
 8002d4c:	b108      	cbz	r0, 8002d52 <_printf_i+0x1e6>
 8002d4e:	1b80      	subs	r0, r0, r6
 8002d50:	6060      	str	r0, [r4, #4]
 8002d52:	6863      	ldr	r3, [r4, #4]
 8002d54:	6123      	str	r3, [r4, #16]
 8002d56:	2300      	movs	r3, #0
 8002d58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d5c:	e7aa      	b.n	8002cb4 <_printf_i+0x148>
 8002d5e:	6923      	ldr	r3, [r4, #16]
 8002d60:	4632      	mov	r2, r6
 8002d62:	4649      	mov	r1, r9
 8002d64:	4640      	mov	r0, r8
 8002d66:	47d0      	blx	sl
 8002d68:	3001      	adds	r0, #1
 8002d6a:	d0ad      	beq.n	8002cc8 <_printf_i+0x15c>
 8002d6c:	6823      	ldr	r3, [r4, #0]
 8002d6e:	079b      	lsls	r3, r3, #30
 8002d70:	d413      	bmi.n	8002d9a <_printf_i+0x22e>
 8002d72:	68e0      	ldr	r0, [r4, #12]
 8002d74:	9b03      	ldr	r3, [sp, #12]
 8002d76:	4298      	cmp	r0, r3
 8002d78:	bfb8      	it	lt
 8002d7a:	4618      	movlt	r0, r3
 8002d7c:	e7a6      	b.n	8002ccc <_printf_i+0x160>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	4632      	mov	r2, r6
 8002d82:	4649      	mov	r1, r9
 8002d84:	4640      	mov	r0, r8
 8002d86:	47d0      	blx	sl
 8002d88:	3001      	adds	r0, #1
 8002d8a:	d09d      	beq.n	8002cc8 <_printf_i+0x15c>
 8002d8c:	3501      	adds	r5, #1
 8002d8e:	68e3      	ldr	r3, [r4, #12]
 8002d90:	9903      	ldr	r1, [sp, #12]
 8002d92:	1a5b      	subs	r3, r3, r1
 8002d94:	42ab      	cmp	r3, r5
 8002d96:	dcf2      	bgt.n	8002d7e <_printf_i+0x212>
 8002d98:	e7eb      	b.n	8002d72 <_printf_i+0x206>
 8002d9a:	2500      	movs	r5, #0
 8002d9c:	f104 0619 	add.w	r6, r4, #25
 8002da0:	e7f5      	b.n	8002d8e <_printf_i+0x222>
 8002da2:	bf00      	nop
 8002da4:	08007446 	.word	0x08007446
 8002da8:	08007457 	.word	0x08007457

08002dac <_scanf_float>:
 8002dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db0:	b087      	sub	sp, #28
 8002db2:	4617      	mov	r7, r2
 8002db4:	9303      	str	r3, [sp, #12]
 8002db6:	688b      	ldr	r3, [r1, #8]
 8002db8:	1e5a      	subs	r2, r3, #1
 8002dba:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8002dbe:	bf81      	itttt	hi
 8002dc0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8002dc4:	eb03 0b05 	addhi.w	fp, r3, r5
 8002dc8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8002dcc:	608b      	strhi	r3, [r1, #8]
 8002dce:	680b      	ldr	r3, [r1, #0]
 8002dd0:	460a      	mov	r2, r1
 8002dd2:	f04f 0500 	mov.w	r5, #0
 8002dd6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8002dda:	f842 3b1c 	str.w	r3, [r2], #28
 8002dde:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8002de2:	4680      	mov	r8, r0
 8002de4:	460c      	mov	r4, r1
 8002de6:	bf98      	it	ls
 8002de8:	f04f 0b00 	movls.w	fp, #0
 8002dec:	9201      	str	r2, [sp, #4]
 8002dee:	4616      	mov	r6, r2
 8002df0:	46aa      	mov	sl, r5
 8002df2:	46a9      	mov	r9, r5
 8002df4:	9502      	str	r5, [sp, #8]
 8002df6:	68a2      	ldr	r2, [r4, #8]
 8002df8:	b152      	cbz	r2, 8002e10 <_scanf_float+0x64>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b4e      	cmp	r3, #78	@ 0x4e
 8002e00:	d864      	bhi.n	8002ecc <_scanf_float+0x120>
 8002e02:	2b40      	cmp	r3, #64	@ 0x40
 8002e04:	d83c      	bhi.n	8002e80 <_scanf_float+0xd4>
 8002e06:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8002e0a:	b2c8      	uxtb	r0, r1
 8002e0c:	280e      	cmp	r0, #14
 8002e0e:	d93a      	bls.n	8002e86 <_scanf_float+0xda>
 8002e10:	f1b9 0f00 	cmp.w	r9, #0
 8002e14:	d003      	beq.n	8002e1e <_scanf_float+0x72>
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e1c:	6023      	str	r3, [r4, #0]
 8002e1e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8002e22:	f1ba 0f01 	cmp.w	sl, #1
 8002e26:	f200 8117 	bhi.w	8003058 <_scanf_float+0x2ac>
 8002e2a:	9b01      	ldr	r3, [sp, #4]
 8002e2c:	429e      	cmp	r6, r3
 8002e2e:	f200 8108 	bhi.w	8003042 <_scanf_float+0x296>
 8002e32:	2001      	movs	r0, #1
 8002e34:	b007      	add	sp, #28
 8002e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e3a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8002e3e:	2a0d      	cmp	r2, #13
 8002e40:	d8e6      	bhi.n	8002e10 <_scanf_float+0x64>
 8002e42:	a101      	add	r1, pc, #4	@ (adr r1, 8002e48 <_scanf_float+0x9c>)
 8002e44:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002e48:	08002f8f 	.word	0x08002f8f
 8002e4c:	08002e11 	.word	0x08002e11
 8002e50:	08002e11 	.word	0x08002e11
 8002e54:	08002e11 	.word	0x08002e11
 8002e58:	08002fef 	.word	0x08002fef
 8002e5c:	08002fc7 	.word	0x08002fc7
 8002e60:	08002e11 	.word	0x08002e11
 8002e64:	08002e11 	.word	0x08002e11
 8002e68:	08002f9d 	.word	0x08002f9d
 8002e6c:	08002e11 	.word	0x08002e11
 8002e70:	08002e11 	.word	0x08002e11
 8002e74:	08002e11 	.word	0x08002e11
 8002e78:	08002e11 	.word	0x08002e11
 8002e7c:	08002f55 	.word	0x08002f55
 8002e80:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8002e84:	e7db      	b.n	8002e3e <_scanf_float+0x92>
 8002e86:	290e      	cmp	r1, #14
 8002e88:	d8c2      	bhi.n	8002e10 <_scanf_float+0x64>
 8002e8a:	a001      	add	r0, pc, #4	@ (adr r0, 8002e90 <_scanf_float+0xe4>)
 8002e8c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8002e90:	08002f45 	.word	0x08002f45
 8002e94:	08002e11 	.word	0x08002e11
 8002e98:	08002f45 	.word	0x08002f45
 8002e9c:	08002fdb 	.word	0x08002fdb
 8002ea0:	08002e11 	.word	0x08002e11
 8002ea4:	08002eed 	.word	0x08002eed
 8002ea8:	08002f2b 	.word	0x08002f2b
 8002eac:	08002f2b 	.word	0x08002f2b
 8002eb0:	08002f2b 	.word	0x08002f2b
 8002eb4:	08002f2b 	.word	0x08002f2b
 8002eb8:	08002f2b 	.word	0x08002f2b
 8002ebc:	08002f2b 	.word	0x08002f2b
 8002ec0:	08002f2b 	.word	0x08002f2b
 8002ec4:	08002f2b 	.word	0x08002f2b
 8002ec8:	08002f2b 	.word	0x08002f2b
 8002ecc:	2b6e      	cmp	r3, #110	@ 0x6e
 8002ece:	d809      	bhi.n	8002ee4 <_scanf_float+0x138>
 8002ed0:	2b60      	cmp	r3, #96	@ 0x60
 8002ed2:	d8b2      	bhi.n	8002e3a <_scanf_float+0x8e>
 8002ed4:	2b54      	cmp	r3, #84	@ 0x54
 8002ed6:	d07b      	beq.n	8002fd0 <_scanf_float+0x224>
 8002ed8:	2b59      	cmp	r3, #89	@ 0x59
 8002eda:	d199      	bne.n	8002e10 <_scanf_float+0x64>
 8002edc:	2d07      	cmp	r5, #7
 8002ede:	d197      	bne.n	8002e10 <_scanf_float+0x64>
 8002ee0:	2508      	movs	r5, #8
 8002ee2:	e02c      	b.n	8002f3e <_scanf_float+0x192>
 8002ee4:	2b74      	cmp	r3, #116	@ 0x74
 8002ee6:	d073      	beq.n	8002fd0 <_scanf_float+0x224>
 8002ee8:	2b79      	cmp	r3, #121	@ 0x79
 8002eea:	e7f6      	b.n	8002eda <_scanf_float+0x12e>
 8002eec:	6821      	ldr	r1, [r4, #0]
 8002eee:	05c8      	lsls	r0, r1, #23
 8002ef0:	d51b      	bpl.n	8002f2a <_scanf_float+0x17e>
 8002ef2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8002ef6:	6021      	str	r1, [r4, #0]
 8002ef8:	f109 0901 	add.w	r9, r9, #1
 8002efc:	f1bb 0f00 	cmp.w	fp, #0
 8002f00:	d003      	beq.n	8002f0a <_scanf_float+0x15e>
 8002f02:	3201      	adds	r2, #1
 8002f04:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8002f08:	60a2      	str	r2, [r4, #8]
 8002f0a:	68a3      	ldr	r3, [r4, #8]
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	60a3      	str	r3, [r4, #8]
 8002f10:	6923      	ldr	r3, [r4, #16]
 8002f12:	3301      	adds	r3, #1
 8002f14:	6123      	str	r3, [r4, #16]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	607b      	str	r3, [r7, #4]
 8002f1e:	f340 8087 	ble.w	8003030 <_scanf_float+0x284>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	3301      	adds	r3, #1
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	e765      	b.n	8002df6 <_scanf_float+0x4a>
 8002f2a:	eb1a 0105 	adds.w	r1, sl, r5
 8002f2e:	f47f af6f 	bne.w	8002e10 <_scanf_float+0x64>
 8002f32:	6822      	ldr	r2, [r4, #0]
 8002f34:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8002f38:	6022      	str	r2, [r4, #0]
 8002f3a:	460d      	mov	r5, r1
 8002f3c:	468a      	mov	sl, r1
 8002f3e:	f806 3b01 	strb.w	r3, [r6], #1
 8002f42:	e7e2      	b.n	8002f0a <_scanf_float+0x15e>
 8002f44:	6822      	ldr	r2, [r4, #0]
 8002f46:	0610      	lsls	r0, r2, #24
 8002f48:	f57f af62 	bpl.w	8002e10 <_scanf_float+0x64>
 8002f4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f50:	6022      	str	r2, [r4, #0]
 8002f52:	e7f4      	b.n	8002f3e <_scanf_float+0x192>
 8002f54:	f1ba 0f00 	cmp.w	sl, #0
 8002f58:	d10e      	bne.n	8002f78 <_scanf_float+0x1cc>
 8002f5a:	f1b9 0f00 	cmp.w	r9, #0
 8002f5e:	d10e      	bne.n	8002f7e <_scanf_float+0x1d2>
 8002f60:	6822      	ldr	r2, [r4, #0]
 8002f62:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8002f66:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8002f6a:	d108      	bne.n	8002f7e <_scanf_float+0x1d2>
 8002f6c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8002f70:	6022      	str	r2, [r4, #0]
 8002f72:	f04f 0a01 	mov.w	sl, #1
 8002f76:	e7e2      	b.n	8002f3e <_scanf_float+0x192>
 8002f78:	f1ba 0f02 	cmp.w	sl, #2
 8002f7c:	d055      	beq.n	800302a <_scanf_float+0x27e>
 8002f7e:	2d01      	cmp	r5, #1
 8002f80:	d002      	beq.n	8002f88 <_scanf_float+0x1dc>
 8002f82:	2d04      	cmp	r5, #4
 8002f84:	f47f af44 	bne.w	8002e10 <_scanf_float+0x64>
 8002f88:	3501      	adds	r5, #1
 8002f8a:	b2ed      	uxtb	r5, r5
 8002f8c:	e7d7      	b.n	8002f3e <_scanf_float+0x192>
 8002f8e:	f1ba 0f01 	cmp.w	sl, #1
 8002f92:	f47f af3d 	bne.w	8002e10 <_scanf_float+0x64>
 8002f96:	f04f 0a02 	mov.w	sl, #2
 8002f9a:	e7d0      	b.n	8002f3e <_scanf_float+0x192>
 8002f9c:	b97d      	cbnz	r5, 8002fbe <_scanf_float+0x212>
 8002f9e:	f1b9 0f00 	cmp.w	r9, #0
 8002fa2:	f47f af38 	bne.w	8002e16 <_scanf_float+0x6a>
 8002fa6:	6822      	ldr	r2, [r4, #0]
 8002fa8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8002fac:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8002fb0:	f040 8108 	bne.w	80031c4 <_scanf_float+0x418>
 8002fb4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8002fb8:	6022      	str	r2, [r4, #0]
 8002fba:	2501      	movs	r5, #1
 8002fbc:	e7bf      	b.n	8002f3e <_scanf_float+0x192>
 8002fbe:	2d03      	cmp	r5, #3
 8002fc0:	d0e2      	beq.n	8002f88 <_scanf_float+0x1dc>
 8002fc2:	2d05      	cmp	r5, #5
 8002fc4:	e7de      	b.n	8002f84 <_scanf_float+0x1d8>
 8002fc6:	2d02      	cmp	r5, #2
 8002fc8:	f47f af22 	bne.w	8002e10 <_scanf_float+0x64>
 8002fcc:	2503      	movs	r5, #3
 8002fce:	e7b6      	b.n	8002f3e <_scanf_float+0x192>
 8002fd0:	2d06      	cmp	r5, #6
 8002fd2:	f47f af1d 	bne.w	8002e10 <_scanf_float+0x64>
 8002fd6:	2507      	movs	r5, #7
 8002fd8:	e7b1      	b.n	8002f3e <_scanf_float+0x192>
 8002fda:	6822      	ldr	r2, [r4, #0]
 8002fdc:	0591      	lsls	r1, r2, #22
 8002fde:	f57f af17 	bpl.w	8002e10 <_scanf_float+0x64>
 8002fe2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8002fe6:	6022      	str	r2, [r4, #0]
 8002fe8:	f8cd 9008 	str.w	r9, [sp, #8]
 8002fec:	e7a7      	b.n	8002f3e <_scanf_float+0x192>
 8002fee:	6822      	ldr	r2, [r4, #0]
 8002ff0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8002ff4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8002ff8:	d006      	beq.n	8003008 <_scanf_float+0x25c>
 8002ffa:	0550      	lsls	r0, r2, #21
 8002ffc:	f57f af08 	bpl.w	8002e10 <_scanf_float+0x64>
 8003000:	f1b9 0f00 	cmp.w	r9, #0
 8003004:	f000 80de 	beq.w	80031c4 <_scanf_float+0x418>
 8003008:	0591      	lsls	r1, r2, #22
 800300a:	bf58      	it	pl
 800300c:	9902      	ldrpl	r1, [sp, #8]
 800300e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003012:	bf58      	it	pl
 8003014:	eba9 0101 	subpl.w	r1, r9, r1
 8003018:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800301c:	bf58      	it	pl
 800301e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003022:	6022      	str	r2, [r4, #0]
 8003024:	f04f 0900 	mov.w	r9, #0
 8003028:	e789      	b.n	8002f3e <_scanf_float+0x192>
 800302a:	f04f 0a03 	mov.w	sl, #3
 800302e:	e786      	b.n	8002f3e <_scanf_float+0x192>
 8003030:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003034:	4639      	mov	r1, r7
 8003036:	4640      	mov	r0, r8
 8003038:	4798      	blx	r3
 800303a:	2800      	cmp	r0, #0
 800303c:	f43f aedb 	beq.w	8002df6 <_scanf_float+0x4a>
 8003040:	e6e6      	b.n	8002e10 <_scanf_float+0x64>
 8003042:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003046:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800304a:	463a      	mov	r2, r7
 800304c:	4640      	mov	r0, r8
 800304e:	4798      	blx	r3
 8003050:	6923      	ldr	r3, [r4, #16]
 8003052:	3b01      	subs	r3, #1
 8003054:	6123      	str	r3, [r4, #16]
 8003056:	e6e8      	b.n	8002e2a <_scanf_float+0x7e>
 8003058:	1e6b      	subs	r3, r5, #1
 800305a:	2b06      	cmp	r3, #6
 800305c:	d824      	bhi.n	80030a8 <_scanf_float+0x2fc>
 800305e:	2d02      	cmp	r5, #2
 8003060:	d836      	bhi.n	80030d0 <_scanf_float+0x324>
 8003062:	9b01      	ldr	r3, [sp, #4]
 8003064:	429e      	cmp	r6, r3
 8003066:	f67f aee4 	bls.w	8002e32 <_scanf_float+0x86>
 800306a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800306e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003072:	463a      	mov	r2, r7
 8003074:	4640      	mov	r0, r8
 8003076:	4798      	blx	r3
 8003078:	6923      	ldr	r3, [r4, #16]
 800307a:	3b01      	subs	r3, #1
 800307c:	6123      	str	r3, [r4, #16]
 800307e:	e7f0      	b.n	8003062 <_scanf_float+0x2b6>
 8003080:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003084:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8003088:	463a      	mov	r2, r7
 800308a:	4640      	mov	r0, r8
 800308c:	4798      	blx	r3
 800308e:	6923      	ldr	r3, [r4, #16]
 8003090:	3b01      	subs	r3, #1
 8003092:	6123      	str	r3, [r4, #16]
 8003094:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8003098:	fa5f fa8a 	uxtb.w	sl, sl
 800309c:	f1ba 0f02 	cmp.w	sl, #2
 80030a0:	d1ee      	bne.n	8003080 <_scanf_float+0x2d4>
 80030a2:	3d03      	subs	r5, #3
 80030a4:	b2ed      	uxtb	r5, r5
 80030a6:	1b76      	subs	r6, r6, r5
 80030a8:	6823      	ldr	r3, [r4, #0]
 80030aa:	05da      	lsls	r2, r3, #23
 80030ac:	d530      	bpl.n	8003110 <_scanf_float+0x364>
 80030ae:	055b      	lsls	r3, r3, #21
 80030b0:	d511      	bpl.n	80030d6 <_scanf_float+0x32a>
 80030b2:	9b01      	ldr	r3, [sp, #4]
 80030b4:	429e      	cmp	r6, r3
 80030b6:	f67f aebc 	bls.w	8002e32 <_scanf_float+0x86>
 80030ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80030be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80030c2:	463a      	mov	r2, r7
 80030c4:	4640      	mov	r0, r8
 80030c6:	4798      	blx	r3
 80030c8:	6923      	ldr	r3, [r4, #16]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	6123      	str	r3, [r4, #16]
 80030ce:	e7f0      	b.n	80030b2 <_scanf_float+0x306>
 80030d0:	46aa      	mov	sl, r5
 80030d2:	46b3      	mov	fp, r6
 80030d4:	e7de      	b.n	8003094 <_scanf_float+0x2e8>
 80030d6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80030da:	6923      	ldr	r3, [r4, #16]
 80030dc:	2965      	cmp	r1, #101	@ 0x65
 80030de:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80030e2:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 80030e6:	6123      	str	r3, [r4, #16]
 80030e8:	d00c      	beq.n	8003104 <_scanf_float+0x358>
 80030ea:	2945      	cmp	r1, #69	@ 0x45
 80030ec:	d00a      	beq.n	8003104 <_scanf_float+0x358>
 80030ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80030f2:	463a      	mov	r2, r7
 80030f4:	4640      	mov	r0, r8
 80030f6:	4798      	blx	r3
 80030f8:	6923      	ldr	r3, [r4, #16]
 80030fa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80030fe:	3b01      	subs	r3, #1
 8003100:	1eb5      	subs	r5, r6, #2
 8003102:	6123      	str	r3, [r4, #16]
 8003104:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003108:	463a      	mov	r2, r7
 800310a:	4640      	mov	r0, r8
 800310c:	4798      	blx	r3
 800310e:	462e      	mov	r6, r5
 8003110:	6822      	ldr	r2, [r4, #0]
 8003112:	f012 0210 	ands.w	r2, r2, #16
 8003116:	d001      	beq.n	800311c <_scanf_float+0x370>
 8003118:	2000      	movs	r0, #0
 800311a:	e68b      	b.n	8002e34 <_scanf_float+0x88>
 800311c:	7032      	strb	r2, [r6, #0]
 800311e:	6823      	ldr	r3, [r4, #0]
 8003120:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003124:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003128:	d11c      	bne.n	8003164 <_scanf_float+0x3b8>
 800312a:	9b02      	ldr	r3, [sp, #8]
 800312c:	454b      	cmp	r3, r9
 800312e:	eba3 0209 	sub.w	r2, r3, r9
 8003132:	d123      	bne.n	800317c <_scanf_float+0x3d0>
 8003134:	9901      	ldr	r1, [sp, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	4640      	mov	r0, r8
 800313a:	f000 ff11 	bl	8003f60 <_strtod_r>
 800313e:	9b03      	ldr	r3, [sp, #12]
 8003140:	6821      	ldr	r1, [r4, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f011 0f02 	tst.w	r1, #2
 8003148:	ec57 6b10 	vmov	r6, r7, d0
 800314c:	f103 0204 	add.w	r2, r3, #4
 8003150:	d01f      	beq.n	8003192 <_scanf_float+0x3e6>
 8003152:	9903      	ldr	r1, [sp, #12]
 8003154:	600a      	str	r2, [r1, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	e9c3 6700 	strd	r6, r7, [r3]
 800315c:	68e3      	ldr	r3, [r4, #12]
 800315e:	3301      	adds	r3, #1
 8003160:	60e3      	str	r3, [r4, #12]
 8003162:	e7d9      	b.n	8003118 <_scanf_float+0x36c>
 8003164:	9b04      	ldr	r3, [sp, #16]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0e4      	beq.n	8003134 <_scanf_float+0x388>
 800316a:	9905      	ldr	r1, [sp, #20]
 800316c:	230a      	movs	r3, #10
 800316e:	3101      	adds	r1, #1
 8003170:	4640      	mov	r0, r8
 8003172:	f000 ff75 	bl	8004060 <_strtol_r>
 8003176:	9b04      	ldr	r3, [sp, #16]
 8003178:	9e05      	ldr	r6, [sp, #20]
 800317a:	1ac2      	subs	r2, r0, r3
 800317c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8003180:	429e      	cmp	r6, r3
 8003182:	bf28      	it	cs
 8003184:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8003188:	4910      	ldr	r1, [pc, #64]	@ (80031cc <_scanf_float+0x420>)
 800318a:	4630      	mov	r0, r6
 800318c:	f000 f822 	bl	80031d4 <siprintf>
 8003190:	e7d0      	b.n	8003134 <_scanf_float+0x388>
 8003192:	f011 0f04 	tst.w	r1, #4
 8003196:	9903      	ldr	r1, [sp, #12]
 8003198:	600a      	str	r2, [r1, #0]
 800319a:	d1dc      	bne.n	8003156 <_scanf_float+0x3aa>
 800319c:	681d      	ldr	r5, [r3, #0]
 800319e:	4632      	mov	r2, r6
 80031a0:	463b      	mov	r3, r7
 80031a2:	4630      	mov	r0, r6
 80031a4:	4639      	mov	r1, r7
 80031a6:	f7fd fcc9 	bl	8000b3c <__aeabi_dcmpun>
 80031aa:	b128      	cbz	r0, 80031b8 <_scanf_float+0x40c>
 80031ac:	4808      	ldr	r0, [pc, #32]	@ (80031d0 <_scanf_float+0x424>)
 80031ae:	f000 ffeb 	bl	8004188 <nanf>
 80031b2:	ed85 0a00 	vstr	s0, [r5]
 80031b6:	e7d1      	b.n	800315c <_scanf_float+0x3b0>
 80031b8:	4630      	mov	r0, r6
 80031ba:	4639      	mov	r1, r7
 80031bc:	f7fd fd1c 	bl	8000bf8 <__aeabi_d2f>
 80031c0:	6028      	str	r0, [r5, #0]
 80031c2:	e7cb      	b.n	800315c <_scanf_float+0x3b0>
 80031c4:	f04f 0900 	mov.w	r9, #0
 80031c8:	e629      	b.n	8002e1e <_scanf_float+0x72>
 80031ca:	bf00      	nop
 80031cc:	08007468 	.word	0x08007468
 80031d0:	0800785b 	.word	0x0800785b

080031d4 <siprintf>:
 80031d4:	b40e      	push	{r1, r2, r3}
 80031d6:	b500      	push	{lr}
 80031d8:	b09c      	sub	sp, #112	@ 0x70
 80031da:	ab1d      	add	r3, sp, #116	@ 0x74
 80031dc:	9002      	str	r0, [sp, #8]
 80031de:	9006      	str	r0, [sp, #24]
 80031e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80031e4:	4809      	ldr	r0, [pc, #36]	@ (800320c <siprintf+0x38>)
 80031e6:	9107      	str	r1, [sp, #28]
 80031e8:	9104      	str	r1, [sp, #16]
 80031ea:	4909      	ldr	r1, [pc, #36]	@ (8003210 <siprintf+0x3c>)
 80031ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80031f0:	9105      	str	r1, [sp, #20]
 80031f2:	6800      	ldr	r0, [r0, #0]
 80031f4:	9301      	str	r3, [sp, #4]
 80031f6:	a902      	add	r1, sp, #8
 80031f8:	f002 f9ae 	bl	8005558 <_svfiprintf_r>
 80031fc:	9b02      	ldr	r3, [sp, #8]
 80031fe:	2200      	movs	r2, #0
 8003200:	701a      	strb	r2, [r3, #0]
 8003202:	b01c      	add	sp, #112	@ 0x70
 8003204:	f85d eb04 	ldr.w	lr, [sp], #4
 8003208:	b003      	add	sp, #12
 800320a:	4770      	bx	lr
 800320c:	20000184 	.word	0x20000184
 8003210:	ffff0208 	.word	0xffff0208

08003214 <std>:
 8003214:	2300      	movs	r3, #0
 8003216:	b510      	push	{r4, lr}
 8003218:	4604      	mov	r4, r0
 800321a:	e9c0 3300 	strd	r3, r3, [r0]
 800321e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003222:	6083      	str	r3, [r0, #8]
 8003224:	8181      	strh	r1, [r0, #12]
 8003226:	6643      	str	r3, [r0, #100]	@ 0x64
 8003228:	81c2      	strh	r2, [r0, #14]
 800322a:	6183      	str	r3, [r0, #24]
 800322c:	4619      	mov	r1, r3
 800322e:	2208      	movs	r2, #8
 8003230:	305c      	adds	r0, #92	@ 0x5c
 8003232:	f000 ff59 	bl	80040e8 <memset>
 8003236:	4b0d      	ldr	r3, [pc, #52]	@ (800326c <std+0x58>)
 8003238:	6263      	str	r3, [r4, #36]	@ 0x24
 800323a:	4b0d      	ldr	r3, [pc, #52]	@ (8003270 <std+0x5c>)
 800323c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800323e:	4b0d      	ldr	r3, [pc, #52]	@ (8003274 <std+0x60>)
 8003240:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003242:	4b0d      	ldr	r3, [pc, #52]	@ (8003278 <std+0x64>)
 8003244:	6323      	str	r3, [r4, #48]	@ 0x30
 8003246:	4b0d      	ldr	r3, [pc, #52]	@ (800327c <std+0x68>)
 8003248:	6224      	str	r4, [r4, #32]
 800324a:	429c      	cmp	r4, r3
 800324c:	d006      	beq.n	800325c <std+0x48>
 800324e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003252:	4294      	cmp	r4, r2
 8003254:	d002      	beq.n	800325c <std+0x48>
 8003256:	33d0      	adds	r3, #208	@ 0xd0
 8003258:	429c      	cmp	r4, r3
 800325a:	d105      	bne.n	8003268 <std+0x54>
 800325c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003264:	f000 bf76 	b.w	8004154 <__retarget_lock_init_recursive>
 8003268:	bd10      	pop	{r4, pc}
 800326a:	bf00      	nop
 800326c:	08006621 	.word	0x08006621
 8003270:	08006643 	.word	0x08006643
 8003274:	0800667b 	.word	0x0800667b
 8003278:	0800669f 	.word	0x0800669f
 800327c:	20003f90 	.word	0x20003f90

08003280 <stdio_exit_handler>:
 8003280:	4a02      	ldr	r2, [pc, #8]	@ (800328c <stdio_exit_handler+0xc>)
 8003282:	4903      	ldr	r1, [pc, #12]	@ (8003290 <stdio_exit_handler+0x10>)
 8003284:	4803      	ldr	r0, [pc, #12]	@ (8003294 <stdio_exit_handler+0x14>)
 8003286:	f000 beed 	b.w	8004064 <_fwalk_sglue>
 800328a:	bf00      	nop
 800328c:	2000000c 	.word	0x2000000c
 8003290:	08005c55 	.word	0x08005c55
 8003294:	20000188 	.word	0x20000188

08003298 <cleanup_stdio>:
 8003298:	6841      	ldr	r1, [r0, #4]
 800329a:	4b0c      	ldr	r3, [pc, #48]	@ (80032cc <cleanup_stdio+0x34>)
 800329c:	4299      	cmp	r1, r3
 800329e:	b510      	push	{r4, lr}
 80032a0:	4604      	mov	r4, r0
 80032a2:	d001      	beq.n	80032a8 <cleanup_stdio+0x10>
 80032a4:	f002 fcd6 	bl	8005c54 <_fflush_r>
 80032a8:	68a1      	ldr	r1, [r4, #8]
 80032aa:	4b09      	ldr	r3, [pc, #36]	@ (80032d0 <cleanup_stdio+0x38>)
 80032ac:	4299      	cmp	r1, r3
 80032ae:	d002      	beq.n	80032b6 <cleanup_stdio+0x1e>
 80032b0:	4620      	mov	r0, r4
 80032b2:	f002 fccf 	bl	8005c54 <_fflush_r>
 80032b6:	68e1      	ldr	r1, [r4, #12]
 80032b8:	4b06      	ldr	r3, [pc, #24]	@ (80032d4 <cleanup_stdio+0x3c>)
 80032ba:	4299      	cmp	r1, r3
 80032bc:	d004      	beq.n	80032c8 <cleanup_stdio+0x30>
 80032be:	4620      	mov	r0, r4
 80032c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032c4:	f002 bcc6 	b.w	8005c54 <_fflush_r>
 80032c8:	bd10      	pop	{r4, pc}
 80032ca:	bf00      	nop
 80032cc:	20003f90 	.word	0x20003f90
 80032d0:	20003ff8 	.word	0x20003ff8
 80032d4:	20004060 	.word	0x20004060

080032d8 <global_stdio_init.part.0>:
 80032d8:	b510      	push	{r4, lr}
 80032da:	4b0b      	ldr	r3, [pc, #44]	@ (8003308 <global_stdio_init.part.0+0x30>)
 80032dc:	4c0b      	ldr	r4, [pc, #44]	@ (800330c <global_stdio_init.part.0+0x34>)
 80032de:	4a0c      	ldr	r2, [pc, #48]	@ (8003310 <global_stdio_init.part.0+0x38>)
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	4620      	mov	r0, r4
 80032e4:	2200      	movs	r2, #0
 80032e6:	2104      	movs	r1, #4
 80032e8:	f7ff ff94 	bl	8003214 <std>
 80032ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80032f0:	2201      	movs	r2, #1
 80032f2:	2109      	movs	r1, #9
 80032f4:	f7ff ff8e 	bl	8003214 <std>
 80032f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80032fc:	2202      	movs	r2, #2
 80032fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003302:	2112      	movs	r1, #18
 8003304:	f7ff bf86 	b.w	8003214 <std>
 8003308:	200040c8 	.word	0x200040c8
 800330c:	20003f90 	.word	0x20003f90
 8003310:	08003281 	.word	0x08003281

08003314 <__sfp_lock_acquire>:
 8003314:	4801      	ldr	r0, [pc, #4]	@ (800331c <__sfp_lock_acquire+0x8>)
 8003316:	f000 bf1e 	b.w	8004156 <__retarget_lock_acquire_recursive>
 800331a:	bf00      	nop
 800331c:	200040cd 	.word	0x200040cd

08003320 <__sfp_lock_release>:
 8003320:	4801      	ldr	r0, [pc, #4]	@ (8003328 <__sfp_lock_release+0x8>)
 8003322:	f000 bf19 	b.w	8004158 <__retarget_lock_release_recursive>
 8003326:	bf00      	nop
 8003328:	200040cd 	.word	0x200040cd

0800332c <__sinit>:
 800332c:	b510      	push	{r4, lr}
 800332e:	4604      	mov	r4, r0
 8003330:	f7ff fff0 	bl	8003314 <__sfp_lock_acquire>
 8003334:	6a23      	ldr	r3, [r4, #32]
 8003336:	b11b      	cbz	r3, 8003340 <__sinit+0x14>
 8003338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800333c:	f7ff bff0 	b.w	8003320 <__sfp_lock_release>
 8003340:	4b04      	ldr	r3, [pc, #16]	@ (8003354 <__sinit+0x28>)
 8003342:	6223      	str	r3, [r4, #32]
 8003344:	4b04      	ldr	r3, [pc, #16]	@ (8003358 <__sinit+0x2c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1f5      	bne.n	8003338 <__sinit+0xc>
 800334c:	f7ff ffc4 	bl	80032d8 <global_stdio_init.part.0>
 8003350:	e7f2      	b.n	8003338 <__sinit+0xc>
 8003352:	bf00      	nop
 8003354:	08003299 	.word	0x08003299
 8003358:	200040c8 	.word	0x200040c8

0800335c <sulp>:
 800335c:	b570      	push	{r4, r5, r6, lr}
 800335e:	4604      	mov	r4, r0
 8003360:	460d      	mov	r5, r1
 8003362:	ec45 4b10 	vmov	d0, r4, r5
 8003366:	4616      	mov	r6, r2
 8003368:	f003 f81c 	bl	80063a4 <__ulp>
 800336c:	ec51 0b10 	vmov	r0, r1, d0
 8003370:	b17e      	cbz	r6, 8003392 <sulp+0x36>
 8003372:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8003376:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800337a:	2b00      	cmp	r3, #0
 800337c:	dd09      	ble.n	8003392 <sulp+0x36>
 800337e:	051b      	lsls	r3, r3, #20
 8003380:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8003384:	2400      	movs	r4, #0
 8003386:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800338a:	4622      	mov	r2, r4
 800338c:	462b      	mov	r3, r5
 800338e:	f7fd f93b 	bl	8000608 <__aeabi_dmul>
 8003392:	ec41 0b10 	vmov	d0, r0, r1
 8003396:	bd70      	pop	{r4, r5, r6, pc}

08003398 <_strtod_l>:
 8003398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800339c:	b09f      	sub	sp, #124	@ 0x7c
 800339e:	460c      	mov	r4, r1
 80033a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80033a2:	2200      	movs	r2, #0
 80033a4:	921a      	str	r2, [sp, #104]	@ 0x68
 80033a6:	9005      	str	r0, [sp, #20]
 80033a8:	f04f 0a00 	mov.w	sl, #0
 80033ac:	f04f 0b00 	mov.w	fp, #0
 80033b0:	460a      	mov	r2, r1
 80033b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80033b4:	7811      	ldrb	r1, [r2, #0]
 80033b6:	292b      	cmp	r1, #43	@ 0x2b
 80033b8:	d04a      	beq.n	8003450 <_strtod_l+0xb8>
 80033ba:	d838      	bhi.n	800342e <_strtod_l+0x96>
 80033bc:	290d      	cmp	r1, #13
 80033be:	d832      	bhi.n	8003426 <_strtod_l+0x8e>
 80033c0:	2908      	cmp	r1, #8
 80033c2:	d832      	bhi.n	800342a <_strtod_l+0x92>
 80033c4:	2900      	cmp	r1, #0
 80033c6:	d03b      	beq.n	8003440 <_strtod_l+0xa8>
 80033c8:	2200      	movs	r2, #0
 80033ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 80033cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80033ce:	782a      	ldrb	r2, [r5, #0]
 80033d0:	2a30      	cmp	r2, #48	@ 0x30
 80033d2:	f040 80b3 	bne.w	800353c <_strtod_l+0x1a4>
 80033d6:	786a      	ldrb	r2, [r5, #1]
 80033d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80033dc:	2a58      	cmp	r2, #88	@ 0x58
 80033de:	d16e      	bne.n	80034be <_strtod_l+0x126>
 80033e0:	9302      	str	r3, [sp, #8]
 80033e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80033e4:	9301      	str	r3, [sp, #4]
 80033e6:	ab1a      	add	r3, sp, #104	@ 0x68
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	4a8e      	ldr	r2, [pc, #568]	@ (8003624 <_strtod_l+0x28c>)
 80033ec:	9805      	ldr	r0, [sp, #20]
 80033ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 80033f0:	a919      	add	r1, sp, #100	@ 0x64
 80033f2:	f001 fd85 	bl	8004f00 <__gethex>
 80033f6:	f010 060f 	ands.w	r6, r0, #15
 80033fa:	4604      	mov	r4, r0
 80033fc:	d005      	beq.n	800340a <_strtod_l+0x72>
 80033fe:	2e06      	cmp	r6, #6
 8003400:	d128      	bne.n	8003454 <_strtod_l+0xbc>
 8003402:	3501      	adds	r5, #1
 8003404:	2300      	movs	r3, #0
 8003406:	9519      	str	r5, [sp, #100]	@ 0x64
 8003408:	930b      	str	r3, [sp, #44]	@ 0x2c
 800340a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800340c:	2b00      	cmp	r3, #0
 800340e:	f040 858e 	bne.w	8003f2e <_strtod_l+0xb96>
 8003412:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003414:	b1cb      	cbz	r3, 800344a <_strtod_l+0xb2>
 8003416:	4652      	mov	r2, sl
 8003418:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800341c:	ec43 2b10 	vmov	d0, r2, r3
 8003420:	b01f      	add	sp, #124	@ 0x7c
 8003422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003426:	2920      	cmp	r1, #32
 8003428:	d1ce      	bne.n	80033c8 <_strtod_l+0x30>
 800342a:	3201      	adds	r2, #1
 800342c:	e7c1      	b.n	80033b2 <_strtod_l+0x1a>
 800342e:	292d      	cmp	r1, #45	@ 0x2d
 8003430:	d1ca      	bne.n	80033c8 <_strtod_l+0x30>
 8003432:	2101      	movs	r1, #1
 8003434:	910b      	str	r1, [sp, #44]	@ 0x2c
 8003436:	1c51      	adds	r1, r2, #1
 8003438:	9119      	str	r1, [sp, #100]	@ 0x64
 800343a:	7852      	ldrb	r2, [r2, #1]
 800343c:	2a00      	cmp	r2, #0
 800343e:	d1c5      	bne.n	80033cc <_strtod_l+0x34>
 8003440:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8003442:	9419      	str	r4, [sp, #100]	@ 0x64
 8003444:	2b00      	cmp	r3, #0
 8003446:	f040 8570 	bne.w	8003f2a <_strtod_l+0xb92>
 800344a:	4652      	mov	r2, sl
 800344c:	465b      	mov	r3, fp
 800344e:	e7e5      	b.n	800341c <_strtod_l+0x84>
 8003450:	2100      	movs	r1, #0
 8003452:	e7ef      	b.n	8003434 <_strtod_l+0x9c>
 8003454:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8003456:	b13a      	cbz	r2, 8003468 <_strtod_l+0xd0>
 8003458:	2135      	movs	r1, #53	@ 0x35
 800345a:	a81c      	add	r0, sp, #112	@ 0x70
 800345c:	f003 f89c 	bl	8006598 <__copybits>
 8003460:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003462:	9805      	ldr	r0, [sp, #20]
 8003464:	f002 fc6a 	bl	8005d3c <_Bfree>
 8003468:	3e01      	subs	r6, #1
 800346a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800346c:	2e04      	cmp	r6, #4
 800346e:	d806      	bhi.n	800347e <_strtod_l+0xe6>
 8003470:	e8df f006 	tbb	[pc, r6]
 8003474:	201d0314 	.word	0x201d0314
 8003478:	14          	.byte	0x14
 8003479:	00          	.byte	0x00
 800347a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800347e:	05e1      	lsls	r1, r4, #23
 8003480:	bf48      	it	mi
 8003482:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8003486:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800348a:	0d1b      	lsrs	r3, r3, #20
 800348c:	051b      	lsls	r3, r3, #20
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1bb      	bne.n	800340a <_strtod_l+0x72>
 8003492:	f000 fe35 	bl	8004100 <__errno>
 8003496:	2322      	movs	r3, #34	@ 0x22
 8003498:	6003      	str	r3, [r0, #0]
 800349a:	e7b6      	b.n	800340a <_strtod_l+0x72>
 800349c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80034a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80034a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80034a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80034ac:	e7e7      	b.n	800347e <_strtod_l+0xe6>
 80034ae:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800362c <_strtod_l+0x294>
 80034b2:	e7e4      	b.n	800347e <_strtod_l+0xe6>
 80034b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80034b8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80034bc:	e7df      	b.n	800347e <_strtod_l+0xe6>
 80034be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80034c4:	785b      	ldrb	r3, [r3, #1]
 80034c6:	2b30      	cmp	r3, #48	@ 0x30
 80034c8:	d0f9      	beq.n	80034be <_strtod_l+0x126>
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d09d      	beq.n	800340a <_strtod_l+0x72>
 80034ce:	2301      	movs	r3, #1
 80034d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80034d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80034d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80034d6:	2300      	movs	r3, #0
 80034d8:	9308      	str	r3, [sp, #32]
 80034da:	930a      	str	r3, [sp, #40]	@ 0x28
 80034dc:	461f      	mov	r7, r3
 80034de:	220a      	movs	r2, #10
 80034e0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80034e2:	7805      	ldrb	r5, [r0, #0]
 80034e4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80034e8:	b2d9      	uxtb	r1, r3
 80034ea:	2909      	cmp	r1, #9
 80034ec:	d928      	bls.n	8003540 <_strtod_l+0x1a8>
 80034ee:	494e      	ldr	r1, [pc, #312]	@ (8003628 <_strtod_l+0x290>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	f000 fde7 	bl	80040c4 <strncmp>
 80034f6:	2800      	cmp	r0, #0
 80034f8:	d032      	beq.n	8003560 <_strtod_l+0x1c8>
 80034fa:	2000      	movs	r0, #0
 80034fc:	462a      	mov	r2, r5
 80034fe:	4681      	mov	r9, r0
 8003500:	463d      	mov	r5, r7
 8003502:	4603      	mov	r3, r0
 8003504:	2a65      	cmp	r2, #101	@ 0x65
 8003506:	d001      	beq.n	800350c <_strtod_l+0x174>
 8003508:	2a45      	cmp	r2, #69	@ 0x45
 800350a:	d114      	bne.n	8003536 <_strtod_l+0x19e>
 800350c:	b91d      	cbnz	r5, 8003516 <_strtod_l+0x17e>
 800350e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003510:	4302      	orrs	r2, r0
 8003512:	d095      	beq.n	8003440 <_strtod_l+0xa8>
 8003514:	2500      	movs	r5, #0
 8003516:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8003518:	1c62      	adds	r2, r4, #1
 800351a:	9219      	str	r2, [sp, #100]	@ 0x64
 800351c:	7862      	ldrb	r2, [r4, #1]
 800351e:	2a2b      	cmp	r2, #43	@ 0x2b
 8003520:	d077      	beq.n	8003612 <_strtod_l+0x27a>
 8003522:	2a2d      	cmp	r2, #45	@ 0x2d
 8003524:	d07b      	beq.n	800361e <_strtod_l+0x286>
 8003526:	f04f 0c00 	mov.w	ip, #0
 800352a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800352e:	2909      	cmp	r1, #9
 8003530:	f240 8082 	bls.w	8003638 <_strtod_l+0x2a0>
 8003534:	9419      	str	r4, [sp, #100]	@ 0x64
 8003536:	f04f 0800 	mov.w	r8, #0
 800353a:	e0a2      	b.n	8003682 <_strtod_l+0x2ea>
 800353c:	2300      	movs	r3, #0
 800353e:	e7c7      	b.n	80034d0 <_strtod_l+0x138>
 8003540:	2f08      	cmp	r7, #8
 8003542:	bfd5      	itete	le
 8003544:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8003546:	9908      	ldrgt	r1, [sp, #32]
 8003548:	fb02 3301 	mlale	r3, r2, r1, r3
 800354c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8003550:	f100 0001 	add.w	r0, r0, #1
 8003554:	bfd4      	ite	le
 8003556:	930a      	strle	r3, [sp, #40]	@ 0x28
 8003558:	9308      	strgt	r3, [sp, #32]
 800355a:	3701      	adds	r7, #1
 800355c:	9019      	str	r0, [sp, #100]	@ 0x64
 800355e:	e7bf      	b.n	80034e0 <_strtod_l+0x148>
 8003560:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	9219      	str	r2, [sp, #100]	@ 0x64
 8003566:	785a      	ldrb	r2, [r3, #1]
 8003568:	b37f      	cbz	r7, 80035ca <_strtod_l+0x232>
 800356a:	4681      	mov	r9, r0
 800356c:	463d      	mov	r5, r7
 800356e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8003572:	2b09      	cmp	r3, #9
 8003574:	d912      	bls.n	800359c <_strtod_l+0x204>
 8003576:	2301      	movs	r3, #1
 8003578:	e7c4      	b.n	8003504 <_strtod_l+0x16c>
 800357a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	9219      	str	r2, [sp, #100]	@ 0x64
 8003580:	785a      	ldrb	r2, [r3, #1]
 8003582:	3001      	adds	r0, #1
 8003584:	2a30      	cmp	r2, #48	@ 0x30
 8003586:	d0f8      	beq.n	800357a <_strtod_l+0x1e2>
 8003588:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800358c:	2b08      	cmp	r3, #8
 800358e:	f200 84d3 	bhi.w	8003f38 <_strtod_l+0xba0>
 8003592:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003594:	930c      	str	r3, [sp, #48]	@ 0x30
 8003596:	4681      	mov	r9, r0
 8003598:	2000      	movs	r0, #0
 800359a:	4605      	mov	r5, r0
 800359c:	3a30      	subs	r2, #48	@ 0x30
 800359e:	f100 0301 	add.w	r3, r0, #1
 80035a2:	d02a      	beq.n	80035fa <_strtod_l+0x262>
 80035a4:	4499      	add	r9, r3
 80035a6:	eb00 0c05 	add.w	ip, r0, r5
 80035aa:	462b      	mov	r3, r5
 80035ac:	210a      	movs	r1, #10
 80035ae:	4563      	cmp	r3, ip
 80035b0:	d10d      	bne.n	80035ce <_strtod_l+0x236>
 80035b2:	1c69      	adds	r1, r5, #1
 80035b4:	4401      	add	r1, r0
 80035b6:	4428      	add	r0, r5
 80035b8:	2808      	cmp	r0, #8
 80035ba:	dc16      	bgt.n	80035ea <_strtod_l+0x252>
 80035bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80035be:	230a      	movs	r3, #10
 80035c0:	fb03 2300 	mla	r3, r3, r0, r2
 80035c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80035c6:	2300      	movs	r3, #0
 80035c8:	e018      	b.n	80035fc <_strtod_l+0x264>
 80035ca:	4638      	mov	r0, r7
 80035cc:	e7da      	b.n	8003584 <_strtod_l+0x1ec>
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	f103 0301 	add.w	r3, r3, #1
 80035d4:	dc03      	bgt.n	80035de <_strtod_l+0x246>
 80035d6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80035d8:	434e      	muls	r6, r1
 80035da:	960a      	str	r6, [sp, #40]	@ 0x28
 80035dc:	e7e7      	b.n	80035ae <_strtod_l+0x216>
 80035de:	2b10      	cmp	r3, #16
 80035e0:	bfde      	ittt	le
 80035e2:	9e08      	ldrle	r6, [sp, #32]
 80035e4:	434e      	mulle	r6, r1
 80035e6:	9608      	strle	r6, [sp, #32]
 80035e8:	e7e1      	b.n	80035ae <_strtod_l+0x216>
 80035ea:	280f      	cmp	r0, #15
 80035ec:	dceb      	bgt.n	80035c6 <_strtod_l+0x22e>
 80035ee:	9808      	ldr	r0, [sp, #32]
 80035f0:	230a      	movs	r3, #10
 80035f2:	fb03 2300 	mla	r3, r3, r0, r2
 80035f6:	9308      	str	r3, [sp, #32]
 80035f8:	e7e5      	b.n	80035c6 <_strtod_l+0x22e>
 80035fa:	4629      	mov	r1, r5
 80035fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80035fe:	1c50      	adds	r0, r2, #1
 8003600:	9019      	str	r0, [sp, #100]	@ 0x64
 8003602:	7852      	ldrb	r2, [r2, #1]
 8003604:	4618      	mov	r0, r3
 8003606:	460d      	mov	r5, r1
 8003608:	e7b1      	b.n	800356e <_strtod_l+0x1d6>
 800360a:	f04f 0900 	mov.w	r9, #0
 800360e:	2301      	movs	r3, #1
 8003610:	e77d      	b.n	800350e <_strtod_l+0x176>
 8003612:	f04f 0c00 	mov.w	ip, #0
 8003616:	1ca2      	adds	r2, r4, #2
 8003618:	9219      	str	r2, [sp, #100]	@ 0x64
 800361a:	78a2      	ldrb	r2, [r4, #2]
 800361c:	e785      	b.n	800352a <_strtod_l+0x192>
 800361e:	f04f 0c01 	mov.w	ip, #1
 8003622:	e7f8      	b.n	8003616 <_strtod_l+0x27e>
 8003624:	08007484 	.word	0x08007484
 8003628:	0800746d 	.word	0x0800746d
 800362c:	7ff00000 	.word	0x7ff00000
 8003630:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8003632:	1c51      	adds	r1, r2, #1
 8003634:	9119      	str	r1, [sp, #100]	@ 0x64
 8003636:	7852      	ldrb	r2, [r2, #1]
 8003638:	2a30      	cmp	r2, #48	@ 0x30
 800363a:	d0f9      	beq.n	8003630 <_strtod_l+0x298>
 800363c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8003640:	2908      	cmp	r1, #8
 8003642:	f63f af78 	bhi.w	8003536 <_strtod_l+0x19e>
 8003646:	3a30      	subs	r2, #48	@ 0x30
 8003648:	920e      	str	r2, [sp, #56]	@ 0x38
 800364a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800364c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800364e:	f04f 080a 	mov.w	r8, #10
 8003652:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8003654:	1c56      	adds	r6, r2, #1
 8003656:	9619      	str	r6, [sp, #100]	@ 0x64
 8003658:	7852      	ldrb	r2, [r2, #1]
 800365a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800365e:	f1be 0f09 	cmp.w	lr, #9
 8003662:	d939      	bls.n	80036d8 <_strtod_l+0x340>
 8003664:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003666:	1a76      	subs	r6, r6, r1
 8003668:	2e08      	cmp	r6, #8
 800366a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800366e:	dc03      	bgt.n	8003678 <_strtod_l+0x2e0>
 8003670:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003672:	4588      	cmp	r8, r1
 8003674:	bfa8      	it	ge
 8003676:	4688      	movge	r8, r1
 8003678:	f1bc 0f00 	cmp.w	ip, #0
 800367c:	d001      	beq.n	8003682 <_strtod_l+0x2ea>
 800367e:	f1c8 0800 	rsb	r8, r8, #0
 8003682:	2d00      	cmp	r5, #0
 8003684:	d14e      	bne.n	8003724 <_strtod_l+0x38c>
 8003686:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003688:	4308      	orrs	r0, r1
 800368a:	f47f aebe 	bne.w	800340a <_strtod_l+0x72>
 800368e:	2b00      	cmp	r3, #0
 8003690:	f47f aed6 	bne.w	8003440 <_strtod_l+0xa8>
 8003694:	2a69      	cmp	r2, #105	@ 0x69
 8003696:	d028      	beq.n	80036ea <_strtod_l+0x352>
 8003698:	dc25      	bgt.n	80036e6 <_strtod_l+0x34e>
 800369a:	2a49      	cmp	r2, #73	@ 0x49
 800369c:	d025      	beq.n	80036ea <_strtod_l+0x352>
 800369e:	2a4e      	cmp	r2, #78	@ 0x4e
 80036a0:	f47f aece 	bne.w	8003440 <_strtod_l+0xa8>
 80036a4:	499b      	ldr	r1, [pc, #620]	@ (8003914 <_strtod_l+0x57c>)
 80036a6:	a819      	add	r0, sp, #100	@ 0x64
 80036a8:	f001 fe4c 	bl	8005344 <__match>
 80036ac:	2800      	cmp	r0, #0
 80036ae:	f43f aec7 	beq.w	8003440 <_strtod_l+0xa8>
 80036b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b28      	cmp	r3, #40	@ 0x28
 80036b8:	d12e      	bne.n	8003718 <_strtod_l+0x380>
 80036ba:	4997      	ldr	r1, [pc, #604]	@ (8003918 <_strtod_l+0x580>)
 80036bc:	aa1c      	add	r2, sp, #112	@ 0x70
 80036be:	a819      	add	r0, sp, #100	@ 0x64
 80036c0:	f001 fe54 	bl	800536c <__hexnan>
 80036c4:	2805      	cmp	r0, #5
 80036c6:	d127      	bne.n	8003718 <_strtod_l+0x380>
 80036c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80036ca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80036ce:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80036d2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80036d6:	e698      	b.n	800340a <_strtod_l+0x72>
 80036d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80036da:	fb08 2101 	mla	r1, r8, r1, r2
 80036de:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80036e2:	920e      	str	r2, [sp, #56]	@ 0x38
 80036e4:	e7b5      	b.n	8003652 <_strtod_l+0x2ba>
 80036e6:	2a6e      	cmp	r2, #110	@ 0x6e
 80036e8:	e7da      	b.n	80036a0 <_strtod_l+0x308>
 80036ea:	498c      	ldr	r1, [pc, #560]	@ (800391c <_strtod_l+0x584>)
 80036ec:	a819      	add	r0, sp, #100	@ 0x64
 80036ee:	f001 fe29 	bl	8005344 <__match>
 80036f2:	2800      	cmp	r0, #0
 80036f4:	f43f aea4 	beq.w	8003440 <_strtod_l+0xa8>
 80036f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80036fa:	4989      	ldr	r1, [pc, #548]	@ (8003920 <_strtod_l+0x588>)
 80036fc:	3b01      	subs	r3, #1
 80036fe:	a819      	add	r0, sp, #100	@ 0x64
 8003700:	9319      	str	r3, [sp, #100]	@ 0x64
 8003702:	f001 fe1f 	bl	8005344 <__match>
 8003706:	b910      	cbnz	r0, 800370e <_strtod_l+0x376>
 8003708:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800370a:	3301      	adds	r3, #1
 800370c:	9319      	str	r3, [sp, #100]	@ 0x64
 800370e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8003930 <_strtod_l+0x598>
 8003712:	f04f 0a00 	mov.w	sl, #0
 8003716:	e678      	b.n	800340a <_strtod_l+0x72>
 8003718:	4882      	ldr	r0, [pc, #520]	@ (8003924 <_strtod_l+0x58c>)
 800371a:	f000 fd2d 	bl	8004178 <nan>
 800371e:	ec5b ab10 	vmov	sl, fp, d0
 8003722:	e672      	b.n	800340a <_strtod_l+0x72>
 8003724:	eba8 0309 	sub.w	r3, r8, r9
 8003728:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800372a:	9309      	str	r3, [sp, #36]	@ 0x24
 800372c:	2f00      	cmp	r7, #0
 800372e:	bf08      	it	eq
 8003730:	462f      	moveq	r7, r5
 8003732:	2d10      	cmp	r5, #16
 8003734:	462c      	mov	r4, r5
 8003736:	bfa8      	it	ge
 8003738:	2410      	movge	r4, #16
 800373a:	f7fc feeb 	bl	8000514 <__aeabi_ui2d>
 800373e:	2d09      	cmp	r5, #9
 8003740:	4682      	mov	sl, r0
 8003742:	468b      	mov	fp, r1
 8003744:	dc13      	bgt.n	800376e <_strtod_l+0x3d6>
 8003746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003748:	2b00      	cmp	r3, #0
 800374a:	f43f ae5e 	beq.w	800340a <_strtod_l+0x72>
 800374e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003750:	dd78      	ble.n	8003844 <_strtod_l+0x4ac>
 8003752:	2b16      	cmp	r3, #22
 8003754:	dc5f      	bgt.n	8003816 <_strtod_l+0x47e>
 8003756:	4974      	ldr	r1, [pc, #464]	@ (8003928 <_strtod_l+0x590>)
 8003758:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800375c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003760:	4652      	mov	r2, sl
 8003762:	465b      	mov	r3, fp
 8003764:	f7fc ff50 	bl	8000608 <__aeabi_dmul>
 8003768:	4682      	mov	sl, r0
 800376a:	468b      	mov	fp, r1
 800376c:	e64d      	b.n	800340a <_strtod_l+0x72>
 800376e:	4b6e      	ldr	r3, [pc, #440]	@ (8003928 <_strtod_l+0x590>)
 8003770:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003774:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8003778:	f7fc ff46 	bl	8000608 <__aeabi_dmul>
 800377c:	4682      	mov	sl, r0
 800377e:	9808      	ldr	r0, [sp, #32]
 8003780:	468b      	mov	fp, r1
 8003782:	f7fc fec7 	bl	8000514 <__aeabi_ui2d>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	4650      	mov	r0, sl
 800378c:	4659      	mov	r1, fp
 800378e:	f7fc fd85 	bl	800029c <__adddf3>
 8003792:	2d0f      	cmp	r5, #15
 8003794:	4682      	mov	sl, r0
 8003796:	468b      	mov	fp, r1
 8003798:	ddd5      	ble.n	8003746 <_strtod_l+0x3ae>
 800379a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800379c:	1b2c      	subs	r4, r5, r4
 800379e:	441c      	add	r4, r3
 80037a0:	2c00      	cmp	r4, #0
 80037a2:	f340 8096 	ble.w	80038d2 <_strtod_l+0x53a>
 80037a6:	f014 030f 	ands.w	r3, r4, #15
 80037aa:	d00a      	beq.n	80037c2 <_strtod_l+0x42a>
 80037ac:	495e      	ldr	r1, [pc, #376]	@ (8003928 <_strtod_l+0x590>)
 80037ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80037b2:	4652      	mov	r2, sl
 80037b4:	465b      	mov	r3, fp
 80037b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037ba:	f7fc ff25 	bl	8000608 <__aeabi_dmul>
 80037be:	4682      	mov	sl, r0
 80037c0:	468b      	mov	fp, r1
 80037c2:	f034 040f 	bics.w	r4, r4, #15
 80037c6:	d073      	beq.n	80038b0 <_strtod_l+0x518>
 80037c8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80037cc:	dd48      	ble.n	8003860 <_strtod_l+0x4c8>
 80037ce:	2400      	movs	r4, #0
 80037d0:	46a0      	mov	r8, r4
 80037d2:	940a      	str	r4, [sp, #40]	@ 0x28
 80037d4:	46a1      	mov	r9, r4
 80037d6:	9a05      	ldr	r2, [sp, #20]
 80037d8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8003930 <_strtod_l+0x598>
 80037dc:	2322      	movs	r3, #34	@ 0x22
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	f04f 0a00 	mov.w	sl, #0
 80037e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f43f ae0f 	beq.w	800340a <_strtod_l+0x72>
 80037ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80037ee:	9805      	ldr	r0, [sp, #20]
 80037f0:	f002 faa4 	bl	8005d3c <_Bfree>
 80037f4:	9805      	ldr	r0, [sp, #20]
 80037f6:	4649      	mov	r1, r9
 80037f8:	f002 faa0 	bl	8005d3c <_Bfree>
 80037fc:	9805      	ldr	r0, [sp, #20]
 80037fe:	4641      	mov	r1, r8
 8003800:	f002 fa9c 	bl	8005d3c <_Bfree>
 8003804:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003806:	9805      	ldr	r0, [sp, #20]
 8003808:	f002 fa98 	bl	8005d3c <_Bfree>
 800380c:	9805      	ldr	r0, [sp, #20]
 800380e:	4621      	mov	r1, r4
 8003810:	f002 fa94 	bl	8005d3c <_Bfree>
 8003814:	e5f9      	b.n	800340a <_strtod_l+0x72>
 8003816:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003818:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800381c:	4293      	cmp	r3, r2
 800381e:	dbbc      	blt.n	800379a <_strtod_l+0x402>
 8003820:	4c41      	ldr	r4, [pc, #260]	@ (8003928 <_strtod_l+0x590>)
 8003822:	f1c5 050f 	rsb	r5, r5, #15
 8003826:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800382a:	4652      	mov	r2, sl
 800382c:	465b      	mov	r3, fp
 800382e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003832:	f7fc fee9 	bl	8000608 <__aeabi_dmul>
 8003836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003838:	1b5d      	subs	r5, r3, r5
 800383a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800383e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003842:	e78f      	b.n	8003764 <_strtod_l+0x3cc>
 8003844:	3316      	adds	r3, #22
 8003846:	dba8      	blt.n	800379a <_strtod_l+0x402>
 8003848:	4b37      	ldr	r3, [pc, #220]	@ (8003928 <_strtod_l+0x590>)
 800384a:	eba9 0808 	sub.w	r8, r9, r8
 800384e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8003852:	e9d8 2300 	ldrd	r2, r3, [r8]
 8003856:	4650      	mov	r0, sl
 8003858:	4659      	mov	r1, fp
 800385a:	f7fc ffff 	bl	800085c <__aeabi_ddiv>
 800385e:	e783      	b.n	8003768 <_strtod_l+0x3d0>
 8003860:	4b32      	ldr	r3, [pc, #200]	@ (800392c <_strtod_l+0x594>)
 8003862:	9308      	str	r3, [sp, #32]
 8003864:	2300      	movs	r3, #0
 8003866:	1124      	asrs	r4, r4, #4
 8003868:	4650      	mov	r0, sl
 800386a:	4659      	mov	r1, fp
 800386c:	461e      	mov	r6, r3
 800386e:	2c01      	cmp	r4, #1
 8003870:	dc21      	bgt.n	80038b6 <_strtod_l+0x51e>
 8003872:	b10b      	cbz	r3, 8003878 <_strtod_l+0x4e0>
 8003874:	4682      	mov	sl, r0
 8003876:	468b      	mov	fp, r1
 8003878:	492c      	ldr	r1, [pc, #176]	@ (800392c <_strtod_l+0x594>)
 800387a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800387e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8003882:	4652      	mov	r2, sl
 8003884:	465b      	mov	r3, fp
 8003886:	e9d1 0100 	ldrd	r0, r1, [r1]
 800388a:	f7fc febd 	bl	8000608 <__aeabi_dmul>
 800388e:	4b28      	ldr	r3, [pc, #160]	@ (8003930 <_strtod_l+0x598>)
 8003890:	460a      	mov	r2, r1
 8003892:	400b      	ands	r3, r1
 8003894:	4927      	ldr	r1, [pc, #156]	@ (8003934 <_strtod_l+0x59c>)
 8003896:	428b      	cmp	r3, r1
 8003898:	4682      	mov	sl, r0
 800389a:	d898      	bhi.n	80037ce <_strtod_l+0x436>
 800389c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80038a0:	428b      	cmp	r3, r1
 80038a2:	bf86      	itte	hi
 80038a4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8003938 <_strtod_l+0x5a0>
 80038a8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 80038ac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80038b0:	2300      	movs	r3, #0
 80038b2:	9308      	str	r3, [sp, #32]
 80038b4:	e07a      	b.n	80039ac <_strtod_l+0x614>
 80038b6:	07e2      	lsls	r2, r4, #31
 80038b8:	d505      	bpl.n	80038c6 <_strtod_l+0x52e>
 80038ba:	9b08      	ldr	r3, [sp, #32]
 80038bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c0:	f7fc fea2 	bl	8000608 <__aeabi_dmul>
 80038c4:	2301      	movs	r3, #1
 80038c6:	9a08      	ldr	r2, [sp, #32]
 80038c8:	3208      	adds	r2, #8
 80038ca:	3601      	adds	r6, #1
 80038cc:	1064      	asrs	r4, r4, #1
 80038ce:	9208      	str	r2, [sp, #32]
 80038d0:	e7cd      	b.n	800386e <_strtod_l+0x4d6>
 80038d2:	d0ed      	beq.n	80038b0 <_strtod_l+0x518>
 80038d4:	4264      	negs	r4, r4
 80038d6:	f014 020f 	ands.w	r2, r4, #15
 80038da:	d00a      	beq.n	80038f2 <_strtod_l+0x55a>
 80038dc:	4b12      	ldr	r3, [pc, #72]	@ (8003928 <_strtod_l+0x590>)
 80038de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80038e2:	4650      	mov	r0, sl
 80038e4:	4659      	mov	r1, fp
 80038e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ea:	f7fc ffb7 	bl	800085c <__aeabi_ddiv>
 80038ee:	4682      	mov	sl, r0
 80038f0:	468b      	mov	fp, r1
 80038f2:	1124      	asrs	r4, r4, #4
 80038f4:	d0dc      	beq.n	80038b0 <_strtod_l+0x518>
 80038f6:	2c1f      	cmp	r4, #31
 80038f8:	dd20      	ble.n	800393c <_strtod_l+0x5a4>
 80038fa:	2400      	movs	r4, #0
 80038fc:	46a0      	mov	r8, r4
 80038fe:	940a      	str	r4, [sp, #40]	@ 0x28
 8003900:	46a1      	mov	r9, r4
 8003902:	9a05      	ldr	r2, [sp, #20]
 8003904:	2322      	movs	r3, #34	@ 0x22
 8003906:	f04f 0a00 	mov.w	sl, #0
 800390a:	f04f 0b00 	mov.w	fp, #0
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	e768      	b.n	80037e4 <_strtod_l+0x44c>
 8003912:	bf00      	nop
 8003914:	08007441 	.word	0x08007441
 8003918:	08007470 	.word	0x08007470
 800391c:	08007439 	.word	0x08007439
 8003920:	080075cc 	.word	0x080075cc
 8003924:	0800785b 	.word	0x0800785b
 8003928:	08007758 	.word	0x08007758
 800392c:	08007730 	.word	0x08007730
 8003930:	7ff00000 	.word	0x7ff00000
 8003934:	7ca00000 	.word	0x7ca00000
 8003938:	7fefffff 	.word	0x7fefffff
 800393c:	f014 0310 	ands.w	r3, r4, #16
 8003940:	bf18      	it	ne
 8003942:	236a      	movne	r3, #106	@ 0x6a
 8003944:	4ea9      	ldr	r6, [pc, #676]	@ (8003bec <_strtod_l+0x854>)
 8003946:	9308      	str	r3, [sp, #32]
 8003948:	4650      	mov	r0, sl
 800394a:	4659      	mov	r1, fp
 800394c:	2300      	movs	r3, #0
 800394e:	07e2      	lsls	r2, r4, #31
 8003950:	d504      	bpl.n	800395c <_strtod_l+0x5c4>
 8003952:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003956:	f7fc fe57 	bl	8000608 <__aeabi_dmul>
 800395a:	2301      	movs	r3, #1
 800395c:	1064      	asrs	r4, r4, #1
 800395e:	f106 0608 	add.w	r6, r6, #8
 8003962:	d1f4      	bne.n	800394e <_strtod_l+0x5b6>
 8003964:	b10b      	cbz	r3, 800396a <_strtod_l+0x5d2>
 8003966:	4682      	mov	sl, r0
 8003968:	468b      	mov	fp, r1
 800396a:	9b08      	ldr	r3, [sp, #32]
 800396c:	b1b3      	cbz	r3, 800399c <_strtod_l+0x604>
 800396e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8003972:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8003976:	2b00      	cmp	r3, #0
 8003978:	4659      	mov	r1, fp
 800397a:	dd0f      	ble.n	800399c <_strtod_l+0x604>
 800397c:	2b1f      	cmp	r3, #31
 800397e:	dd55      	ble.n	8003a2c <_strtod_l+0x694>
 8003980:	2b34      	cmp	r3, #52	@ 0x34
 8003982:	bfde      	ittt	le
 8003984:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8003988:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800398c:	4093      	lslle	r3, r2
 800398e:	f04f 0a00 	mov.w	sl, #0
 8003992:	bfcc      	ite	gt
 8003994:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8003998:	ea03 0b01 	andle.w	fp, r3, r1
 800399c:	2200      	movs	r2, #0
 800399e:	2300      	movs	r3, #0
 80039a0:	4650      	mov	r0, sl
 80039a2:	4659      	mov	r1, fp
 80039a4:	f7fd f898 	bl	8000ad8 <__aeabi_dcmpeq>
 80039a8:	2800      	cmp	r0, #0
 80039aa:	d1a6      	bne.n	80038fa <_strtod_l+0x562>
 80039ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80039b2:	9805      	ldr	r0, [sp, #20]
 80039b4:	462b      	mov	r3, r5
 80039b6:	463a      	mov	r2, r7
 80039b8:	f002 fa28 	bl	8005e0c <__s2b>
 80039bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80039be:	2800      	cmp	r0, #0
 80039c0:	f43f af05 	beq.w	80037ce <_strtod_l+0x436>
 80039c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80039c6:	2a00      	cmp	r2, #0
 80039c8:	eba9 0308 	sub.w	r3, r9, r8
 80039cc:	bfa8      	it	ge
 80039ce:	2300      	movge	r3, #0
 80039d0:	9312      	str	r3, [sp, #72]	@ 0x48
 80039d2:	2400      	movs	r4, #0
 80039d4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80039d8:	9316      	str	r3, [sp, #88]	@ 0x58
 80039da:	46a0      	mov	r8, r4
 80039dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80039de:	9805      	ldr	r0, [sp, #20]
 80039e0:	6859      	ldr	r1, [r3, #4]
 80039e2:	f002 f96b 	bl	8005cbc <_Balloc>
 80039e6:	4681      	mov	r9, r0
 80039e8:	2800      	cmp	r0, #0
 80039ea:	f43f aef4 	beq.w	80037d6 <_strtod_l+0x43e>
 80039ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80039f0:	691a      	ldr	r2, [r3, #16]
 80039f2:	3202      	adds	r2, #2
 80039f4:	f103 010c 	add.w	r1, r3, #12
 80039f8:	0092      	lsls	r2, r2, #2
 80039fa:	300c      	adds	r0, #12
 80039fc:	f000 fbad 	bl	800415a <memcpy>
 8003a00:	ec4b ab10 	vmov	d0, sl, fp
 8003a04:	9805      	ldr	r0, [sp, #20]
 8003a06:	aa1c      	add	r2, sp, #112	@ 0x70
 8003a08:	a91b      	add	r1, sp, #108	@ 0x6c
 8003a0a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8003a0e:	f002 fd39 	bl	8006484 <__d2b>
 8003a12:	901a      	str	r0, [sp, #104]	@ 0x68
 8003a14:	2800      	cmp	r0, #0
 8003a16:	f43f aede 	beq.w	80037d6 <_strtod_l+0x43e>
 8003a1a:	9805      	ldr	r0, [sp, #20]
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	f002 fa8b 	bl	8005f38 <__i2b>
 8003a22:	4680      	mov	r8, r0
 8003a24:	b948      	cbnz	r0, 8003a3a <_strtod_l+0x6a2>
 8003a26:	f04f 0800 	mov.w	r8, #0
 8003a2a:	e6d4      	b.n	80037d6 <_strtod_l+0x43e>
 8003a2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	ea03 0a0a 	and.w	sl, r3, sl
 8003a38:	e7b0      	b.n	800399c <_strtod_l+0x604>
 8003a3a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8003a3c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8003a3e:	2d00      	cmp	r5, #0
 8003a40:	bfab      	itete	ge
 8003a42:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8003a44:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8003a46:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8003a48:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8003a4a:	bfac      	ite	ge
 8003a4c:	18ef      	addge	r7, r5, r3
 8003a4e:	1b5e      	sublt	r6, r3, r5
 8003a50:	9b08      	ldr	r3, [sp, #32]
 8003a52:	1aed      	subs	r5, r5, r3
 8003a54:	4415      	add	r5, r2
 8003a56:	4b66      	ldr	r3, [pc, #408]	@ (8003bf0 <_strtod_l+0x858>)
 8003a58:	3d01      	subs	r5, #1
 8003a5a:	429d      	cmp	r5, r3
 8003a5c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8003a60:	da50      	bge.n	8003b04 <_strtod_l+0x76c>
 8003a62:	1b5b      	subs	r3, r3, r5
 8003a64:	2b1f      	cmp	r3, #31
 8003a66:	eba2 0203 	sub.w	r2, r2, r3
 8003a6a:	f04f 0101 	mov.w	r1, #1
 8003a6e:	dc3d      	bgt.n	8003aec <_strtod_l+0x754>
 8003a70:	fa01 f303 	lsl.w	r3, r1, r3
 8003a74:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003a76:	2300      	movs	r3, #0
 8003a78:	9310      	str	r3, [sp, #64]	@ 0x40
 8003a7a:	18bd      	adds	r5, r7, r2
 8003a7c:	9b08      	ldr	r3, [sp, #32]
 8003a7e:	42af      	cmp	r7, r5
 8003a80:	4416      	add	r6, r2
 8003a82:	441e      	add	r6, r3
 8003a84:	463b      	mov	r3, r7
 8003a86:	bfa8      	it	ge
 8003a88:	462b      	movge	r3, r5
 8003a8a:	42b3      	cmp	r3, r6
 8003a8c:	bfa8      	it	ge
 8003a8e:	4633      	movge	r3, r6
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	bfc2      	ittt	gt
 8003a94:	1aed      	subgt	r5, r5, r3
 8003a96:	1af6      	subgt	r6, r6, r3
 8003a98:	1aff      	subgt	r7, r7, r3
 8003a9a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	dd16      	ble.n	8003ace <_strtod_l+0x736>
 8003aa0:	4641      	mov	r1, r8
 8003aa2:	9805      	ldr	r0, [sp, #20]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	f002 fb07 	bl	80060b8 <__pow5mult>
 8003aaa:	4680      	mov	r8, r0
 8003aac:	2800      	cmp	r0, #0
 8003aae:	d0ba      	beq.n	8003a26 <_strtod_l+0x68e>
 8003ab0:	4601      	mov	r1, r0
 8003ab2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8003ab4:	9805      	ldr	r0, [sp, #20]
 8003ab6:	f002 fa55 	bl	8005f64 <__multiply>
 8003aba:	900e      	str	r0, [sp, #56]	@ 0x38
 8003abc:	2800      	cmp	r0, #0
 8003abe:	f43f ae8a 	beq.w	80037d6 <_strtod_l+0x43e>
 8003ac2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003ac4:	9805      	ldr	r0, [sp, #20]
 8003ac6:	f002 f939 	bl	8005d3c <_Bfree>
 8003aca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003acc:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ace:	2d00      	cmp	r5, #0
 8003ad0:	dc1d      	bgt.n	8003b0e <_strtod_l+0x776>
 8003ad2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	dd23      	ble.n	8003b20 <_strtod_l+0x788>
 8003ad8:	4649      	mov	r1, r9
 8003ada:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8003adc:	9805      	ldr	r0, [sp, #20]
 8003ade:	f002 faeb 	bl	80060b8 <__pow5mult>
 8003ae2:	4681      	mov	r9, r0
 8003ae4:	b9e0      	cbnz	r0, 8003b20 <_strtod_l+0x788>
 8003ae6:	f04f 0900 	mov.w	r9, #0
 8003aea:	e674      	b.n	80037d6 <_strtod_l+0x43e>
 8003aec:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8003af0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8003af4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8003af8:	35e2      	adds	r5, #226	@ 0xe2
 8003afa:	fa01 f305 	lsl.w	r3, r1, r5
 8003afe:	9310      	str	r3, [sp, #64]	@ 0x40
 8003b00:	9113      	str	r1, [sp, #76]	@ 0x4c
 8003b02:	e7ba      	b.n	8003a7a <_strtod_l+0x6e2>
 8003b04:	2300      	movs	r3, #0
 8003b06:	9310      	str	r3, [sp, #64]	@ 0x40
 8003b08:	2301      	movs	r3, #1
 8003b0a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003b0c:	e7b5      	b.n	8003a7a <_strtod_l+0x6e2>
 8003b0e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003b10:	9805      	ldr	r0, [sp, #20]
 8003b12:	462a      	mov	r2, r5
 8003b14:	f002 fb2a 	bl	800616c <__lshift>
 8003b18:	901a      	str	r0, [sp, #104]	@ 0x68
 8003b1a:	2800      	cmp	r0, #0
 8003b1c:	d1d9      	bne.n	8003ad2 <_strtod_l+0x73a>
 8003b1e:	e65a      	b.n	80037d6 <_strtod_l+0x43e>
 8003b20:	2e00      	cmp	r6, #0
 8003b22:	dd07      	ble.n	8003b34 <_strtod_l+0x79c>
 8003b24:	4649      	mov	r1, r9
 8003b26:	9805      	ldr	r0, [sp, #20]
 8003b28:	4632      	mov	r2, r6
 8003b2a:	f002 fb1f 	bl	800616c <__lshift>
 8003b2e:	4681      	mov	r9, r0
 8003b30:	2800      	cmp	r0, #0
 8003b32:	d0d8      	beq.n	8003ae6 <_strtod_l+0x74e>
 8003b34:	2f00      	cmp	r7, #0
 8003b36:	dd08      	ble.n	8003b4a <_strtod_l+0x7b2>
 8003b38:	4641      	mov	r1, r8
 8003b3a:	9805      	ldr	r0, [sp, #20]
 8003b3c:	463a      	mov	r2, r7
 8003b3e:	f002 fb15 	bl	800616c <__lshift>
 8003b42:	4680      	mov	r8, r0
 8003b44:	2800      	cmp	r0, #0
 8003b46:	f43f ae46 	beq.w	80037d6 <_strtod_l+0x43e>
 8003b4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003b4c:	9805      	ldr	r0, [sp, #20]
 8003b4e:	464a      	mov	r2, r9
 8003b50:	f002 fb94 	bl	800627c <__mdiff>
 8003b54:	4604      	mov	r4, r0
 8003b56:	2800      	cmp	r0, #0
 8003b58:	f43f ae3d 	beq.w	80037d6 <_strtod_l+0x43e>
 8003b5c:	68c3      	ldr	r3, [r0, #12]
 8003b5e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003b60:	2300      	movs	r3, #0
 8003b62:	60c3      	str	r3, [r0, #12]
 8003b64:	4641      	mov	r1, r8
 8003b66:	f002 fb6d 	bl	8006244 <__mcmp>
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	da46      	bge.n	8003bfc <_strtod_l+0x864>
 8003b6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003b70:	ea53 030a 	orrs.w	r3, r3, sl
 8003b74:	d16c      	bne.n	8003c50 <_strtod_l+0x8b8>
 8003b76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d168      	bne.n	8003c50 <_strtod_l+0x8b8>
 8003b7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8003b82:	0d1b      	lsrs	r3, r3, #20
 8003b84:	051b      	lsls	r3, r3, #20
 8003b86:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8003b8a:	d961      	bls.n	8003c50 <_strtod_l+0x8b8>
 8003b8c:	6963      	ldr	r3, [r4, #20]
 8003b8e:	b913      	cbnz	r3, 8003b96 <_strtod_l+0x7fe>
 8003b90:	6923      	ldr	r3, [r4, #16]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	dd5c      	ble.n	8003c50 <_strtod_l+0x8b8>
 8003b96:	4621      	mov	r1, r4
 8003b98:	2201      	movs	r2, #1
 8003b9a:	9805      	ldr	r0, [sp, #20]
 8003b9c:	f002 fae6 	bl	800616c <__lshift>
 8003ba0:	4641      	mov	r1, r8
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	f002 fb4e 	bl	8006244 <__mcmp>
 8003ba8:	2800      	cmp	r0, #0
 8003baa:	dd51      	ble.n	8003c50 <_strtod_l+0x8b8>
 8003bac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8003bb0:	9a08      	ldr	r2, [sp, #32]
 8003bb2:	0d1b      	lsrs	r3, r3, #20
 8003bb4:	051b      	lsls	r3, r3, #20
 8003bb6:	2a00      	cmp	r2, #0
 8003bb8:	d06b      	beq.n	8003c92 <_strtod_l+0x8fa>
 8003bba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8003bbe:	d868      	bhi.n	8003c92 <_strtod_l+0x8fa>
 8003bc0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8003bc4:	f67f ae9d 	bls.w	8003902 <_strtod_l+0x56a>
 8003bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf4 <_strtod_l+0x85c>)
 8003bca:	4650      	mov	r0, sl
 8003bcc:	4659      	mov	r1, fp
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f7fc fd1a 	bl	8000608 <__aeabi_dmul>
 8003bd4:	4b08      	ldr	r3, [pc, #32]	@ (8003bf8 <_strtod_l+0x860>)
 8003bd6:	400b      	ands	r3, r1
 8003bd8:	4682      	mov	sl, r0
 8003bda:	468b      	mov	fp, r1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f47f ae05 	bne.w	80037ec <_strtod_l+0x454>
 8003be2:	9a05      	ldr	r2, [sp, #20]
 8003be4:	2322      	movs	r3, #34	@ 0x22
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	e600      	b.n	80037ec <_strtod_l+0x454>
 8003bea:	bf00      	nop
 8003bec:	08007498 	.word	0x08007498
 8003bf0:	fffffc02 	.word	0xfffffc02
 8003bf4:	39500000 	.word	0x39500000
 8003bf8:	7ff00000 	.word	0x7ff00000
 8003bfc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8003c00:	d165      	bne.n	8003cce <_strtod_l+0x936>
 8003c02:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8003c04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003c08:	b35a      	cbz	r2, 8003c62 <_strtod_l+0x8ca>
 8003c0a:	4a9f      	ldr	r2, [pc, #636]	@ (8003e88 <_strtod_l+0xaf0>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d12b      	bne.n	8003c68 <_strtod_l+0x8d0>
 8003c10:	9b08      	ldr	r3, [sp, #32]
 8003c12:	4651      	mov	r1, sl
 8003c14:	b303      	cbz	r3, 8003c58 <_strtod_l+0x8c0>
 8003c16:	4b9d      	ldr	r3, [pc, #628]	@ (8003e8c <_strtod_l+0xaf4>)
 8003c18:	465a      	mov	r2, fp
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8003c20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003c24:	d81b      	bhi.n	8003c5e <_strtod_l+0x8c6>
 8003c26:	0d1b      	lsrs	r3, r3, #20
 8003c28:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	4299      	cmp	r1, r3
 8003c32:	d119      	bne.n	8003c68 <_strtod_l+0x8d0>
 8003c34:	4b96      	ldr	r3, [pc, #600]	@ (8003e90 <_strtod_l+0xaf8>)
 8003c36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d102      	bne.n	8003c42 <_strtod_l+0x8aa>
 8003c3c:	3101      	adds	r1, #1
 8003c3e:	f43f adca 	beq.w	80037d6 <_strtod_l+0x43e>
 8003c42:	4b92      	ldr	r3, [pc, #584]	@ (8003e8c <_strtod_l+0xaf4>)
 8003c44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003c46:	401a      	ands	r2, r3
 8003c48:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8003c4c:	f04f 0a00 	mov.w	sl, #0
 8003c50:	9b08      	ldr	r3, [sp, #32]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1b8      	bne.n	8003bc8 <_strtod_l+0x830>
 8003c56:	e5c9      	b.n	80037ec <_strtod_l+0x454>
 8003c58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c5c:	e7e8      	b.n	8003c30 <_strtod_l+0x898>
 8003c5e:	4613      	mov	r3, r2
 8003c60:	e7e6      	b.n	8003c30 <_strtod_l+0x898>
 8003c62:	ea53 030a 	orrs.w	r3, r3, sl
 8003c66:	d0a1      	beq.n	8003bac <_strtod_l+0x814>
 8003c68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003c6a:	b1db      	cbz	r3, 8003ca4 <_strtod_l+0x90c>
 8003c6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003c6e:	4213      	tst	r3, r2
 8003c70:	d0ee      	beq.n	8003c50 <_strtod_l+0x8b8>
 8003c72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003c74:	9a08      	ldr	r2, [sp, #32]
 8003c76:	4650      	mov	r0, sl
 8003c78:	4659      	mov	r1, fp
 8003c7a:	b1bb      	cbz	r3, 8003cac <_strtod_l+0x914>
 8003c7c:	f7ff fb6e 	bl	800335c <sulp>
 8003c80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003c84:	ec53 2b10 	vmov	r2, r3, d0
 8003c88:	f7fc fb08 	bl	800029c <__adddf3>
 8003c8c:	4682      	mov	sl, r0
 8003c8e:	468b      	mov	fp, r1
 8003c90:	e7de      	b.n	8003c50 <_strtod_l+0x8b8>
 8003c92:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8003c96:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8003c9a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8003c9e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8003ca2:	e7d5      	b.n	8003c50 <_strtod_l+0x8b8>
 8003ca4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8003ca6:	ea13 0f0a 	tst.w	r3, sl
 8003caa:	e7e1      	b.n	8003c70 <_strtod_l+0x8d8>
 8003cac:	f7ff fb56 	bl	800335c <sulp>
 8003cb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003cb4:	ec53 2b10 	vmov	r2, r3, d0
 8003cb8:	f7fc faee 	bl	8000298 <__aeabi_dsub>
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	4682      	mov	sl, r0
 8003cc2:	468b      	mov	fp, r1
 8003cc4:	f7fc ff08 	bl	8000ad8 <__aeabi_dcmpeq>
 8003cc8:	2800      	cmp	r0, #0
 8003cca:	d0c1      	beq.n	8003c50 <_strtod_l+0x8b8>
 8003ccc:	e619      	b.n	8003902 <_strtod_l+0x56a>
 8003cce:	4641      	mov	r1, r8
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	f002 fc2f 	bl	8006534 <__ratio>
 8003cd6:	ec57 6b10 	vmov	r6, r7, d0
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	4639      	mov	r1, r7
 8003ce4:	f7fc ff0c 	bl	8000b00 <__aeabi_dcmple>
 8003ce8:	2800      	cmp	r0, #0
 8003cea:	d06f      	beq.n	8003dcc <_strtod_l+0xa34>
 8003cec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d17a      	bne.n	8003de8 <_strtod_l+0xa50>
 8003cf2:	f1ba 0f00 	cmp.w	sl, #0
 8003cf6:	d158      	bne.n	8003daa <_strtod_l+0xa12>
 8003cf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003cfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d15a      	bne.n	8003db8 <_strtod_l+0xa20>
 8003d02:	4b64      	ldr	r3, [pc, #400]	@ (8003e94 <_strtod_l+0xafc>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	4630      	mov	r0, r6
 8003d08:	4639      	mov	r1, r7
 8003d0a:	f7fc feef 	bl	8000aec <__aeabi_dcmplt>
 8003d0e:	2800      	cmp	r0, #0
 8003d10:	d159      	bne.n	8003dc6 <_strtod_l+0xa2e>
 8003d12:	4630      	mov	r0, r6
 8003d14:	4639      	mov	r1, r7
 8003d16:	4b60      	ldr	r3, [pc, #384]	@ (8003e98 <_strtod_l+0xb00>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f7fc fc75 	bl	8000608 <__aeabi_dmul>
 8003d1e:	4606      	mov	r6, r0
 8003d20:	460f      	mov	r7, r1
 8003d22:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8003d26:	9606      	str	r6, [sp, #24]
 8003d28:	9307      	str	r3, [sp, #28]
 8003d2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003d2e:	4d57      	ldr	r5, [pc, #348]	@ (8003e8c <_strtod_l+0xaf4>)
 8003d30:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8003d34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003d36:	401d      	ands	r5, r3
 8003d38:	4b58      	ldr	r3, [pc, #352]	@ (8003e9c <_strtod_l+0xb04>)
 8003d3a:	429d      	cmp	r5, r3
 8003d3c:	f040 80b2 	bne.w	8003ea4 <_strtod_l+0xb0c>
 8003d40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003d42:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8003d46:	ec4b ab10 	vmov	d0, sl, fp
 8003d4a:	f002 fb2b 	bl	80063a4 <__ulp>
 8003d4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003d52:	ec51 0b10 	vmov	r0, r1, d0
 8003d56:	f7fc fc57 	bl	8000608 <__aeabi_dmul>
 8003d5a:	4652      	mov	r2, sl
 8003d5c:	465b      	mov	r3, fp
 8003d5e:	f7fc fa9d 	bl	800029c <__adddf3>
 8003d62:	460b      	mov	r3, r1
 8003d64:	4949      	ldr	r1, [pc, #292]	@ (8003e8c <_strtod_l+0xaf4>)
 8003d66:	4a4e      	ldr	r2, [pc, #312]	@ (8003ea0 <_strtod_l+0xb08>)
 8003d68:	4019      	ands	r1, r3
 8003d6a:	4291      	cmp	r1, r2
 8003d6c:	4682      	mov	sl, r0
 8003d6e:	d942      	bls.n	8003df6 <_strtod_l+0xa5e>
 8003d70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8003d72:	4b47      	ldr	r3, [pc, #284]	@ (8003e90 <_strtod_l+0xaf8>)
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d103      	bne.n	8003d80 <_strtod_l+0x9e8>
 8003d78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	f43f ad2b 	beq.w	80037d6 <_strtod_l+0x43e>
 8003d80:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8003e90 <_strtod_l+0xaf8>
 8003d84:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8003d88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003d8a:	9805      	ldr	r0, [sp, #20]
 8003d8c:	f001 ffd6 	bl	8005d3c <_Bfree>
 8003d90:	9805      	ldr	r0, [sp, #20]
 8003d92:	4649      	mov	r1, r9
 8003d94:	f001 ffd2 	bl	8005d3c <_Bfree>
 8003d98:	9805      	ldr	r0, [sp, #20]
 8003d9a:	4641      	mov	r1, r8
 8003d9c:	f001 ffce 	bl	8005d3c <_Bfree>
 8003da0:	9805      	ldr	r0, [sp, #20]
 8003da2:	4621      	mov	r1, r4
 8003da4:	f001 ffca 	bl	8005d3c <_Bfree>
 8003da8:	e618      	b.n	80039dc <_strtod_l+0x644>
 8003daa:	f1ba 0f01 	cmp.w	sl, #1
 8003dae:	d103      	bne.n	8003db8 <_strtod_l+0xa20>
 8003db0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f43f ada5 	beq.w	8003902 <_strtod_l+0x56a>
 8003db8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8003e68 <_strtod_l+0xad0>
 8003dbc:	4f35      	ldr	r7, [pc, #212]	@ (8003e94 <_strtod_l+0xafc>)
 8003dbe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003dc2:	2600      	movs	r6, #0
 8003dc4:	e7b1      	b.n	8003d2a <_strtod_l+0x992>
 8003dc6:	4f34      	ldr	r7, [pc, #208]	@ (8003e98 <_strtod_l+0xb00>)
 8003dc8:	2600      	movs	r6, #0
 8003dca:	e7aa      	b.n	8003d22 <_strtod_l+0x98a>
 8003dcc:	4b32      	ldr	r3, [pc, #200]	@ (8003e98 <_strtod_l+0xb00>)
 8003dce:	4630      	mov	r0, r6
 8003dd0:	4639      	mov	r1, r7
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f7fc fc18 	bl	8000608 <__aeabi_dmul>
 8003dd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003dda:	4606      	mov	r6, r0
 8003ddc:	460f      	mov	r7, r1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d09f      	beq.n	8003d22 <_strtod_l+0x98a>
 8003de2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8003de6:	e7a0      	b.n	8003d2a <_strtod_l+0x992>
 8003de8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8003e70 <_strtod_l+0xad8>
 8003dec:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003df0:	ec57 6b17 	vmov	r6, r7, d7
 8003df4:	e799      	b.n	8003d2a <_strtod_l+0x992>
 8003df6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8003dfa:	9b08      	ldr	r3, [sp, #32]
 8003dfc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1c1      	bne.n	8003d88 <_strtod_l+0x9f0>
 8003e04:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8003e08:	0d1b      	lsrs	r3, r3, #20
 8003e0a:	051b      	lsls	r3, r3, #20
 8003e0c:	429d      	cmp	r5, r3
 8003e0e:	d1bb      	bne.n	8003d88 <_strtod_l+0x9f0>
 8003e10:	4630      	mov	r0, r6
 8003e12:	4639      	mov	r1, r7
 8003e14:	f7fc ff40 	bl	8000c98 <__aeabi_d2lz>
 8003e18:	f7fc fbc8 	bl	80005ac <__aeabi_l2d>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4630      	mov	r0, r6
 8003e22:	4639      	mov	r1, r7
 8003e24:	f7fc fa38 	bl	8000298 <__aeabi_dsub>
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003e30:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8003e34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003e36:	ea46 060a 	orr.w	r6, r6, sl
 8003e3a:	431e      	orrs	r6, r3
 8003e3c:	d06f      	beq.n	8003f1e <_strtod_l+0xb86>
 8003e3e:	a30e      	add	r3, pc, #56	@ (adr r3, 8003e78 <_strtod_l+0xae0>)
 8003e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e44:	f7fc fe52 	bl	8000aec <__aeabi_dcmplt>
 8003e48:	2800      	cmp	r0, #0
 8003e4a:	f47f accf 	bne.w	80037ec <_strtod_l+0x454>
 8003e4e:	a30c      	add	r3, pc, #48	@ (adr r3, 8003e80 <_strtod_l+0xae8>)
 8003e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003e58:	f7fc fe66 	bl	8000b28 <__aeabi_dcmpgt>
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	d093      	beq.n	8003d88 <_strtod_l+0x9f0>
 8003e60:	e4c4      	b.n	80037ec <_strtod_l+0x454>
 8003e62:	bf00      	nop
 8003e64:	f3af 8000 	nop.w
 8003e68:	00000000 	.word	0x00000000
 8003e6c:	bff00000 	.word	0xbff00000
 8003e70:	00000000 	.word	0x00000000
 8003e74:	3ff00000 	.word	0x3ff00000
 8003e78:	94a03595 	.word	0x94a03595
 8003e7c:	3fdfffff 	.word	0x3fdfffff
 8003e80:	35afe535 	.word	0x35afe535
 8003e84:	3fe00000 	.word	0x3fe00000
 8003e88:	000fffff 	.word	0x000fffff
 8003e8c:	7ff00000 	.word	0x7ff00000
 8003e90:	7fefffff 	.word	0x7fefffff
 8003e94:	3ff00000 	.word	0x3ff00000
 8003e98:	3fe00000 	.word	0x3fe00000
 8003e9c:	7fe00000 	.word	0x7fe00000
 8003ea0:	7c9fffff 	.word	0x7c9fffff
 8003ea4:	9b08      	ldr	r3, [sp, #32]
 8003ea6:	b323      	cbz	r3, 8003ef2 <_strtod_l+0xb5a>
 8003ea8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8003eac:	d821      	bhi.n	8003ef2 <_strtod_l+0xb5a>
 8003eae:	a328      	add	r3, pc, #160	@ (adr r3, 8003f50 <_strtod_l+0xbb8>)
 8003eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb4:	4630      	mov	r0, r6
 8003eb6:	4639      	mov	r1, r7
 8003eb8:	f7fc fe22 	bl	8000b00 <__aeabi_dcmple>
 8003ebc:	b1a0      	cbz	r0, 8003ee8 <_strtod_l+0xb50>
 8003ebe:	4639      	mov	r1, r7
 8003ec0:	4630      	mov	r0, r6
 8003ec2:	f7fc fe79 	bl	8000bb8 <__aeabi_d2uiz>
 8003ec6:	2801      	cmp	r0, #1
 8003ec8:	bf38      	it	cc
 8003eca:	2001      	movcc	r0, #1
 8003ecc:	f7fc fb22 	bl	8000514 <__aeabi_ui2d>
 8003ed0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003ed2:	4606      	mov	r6, r0
 8003ed4:	460f      	mov	r7, r1
 8003ed6:	b9fb      	cbnz	r3, 8003f18 <_strtod_l+0xb80>
 8003ed8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003edc:	9014      	str	r0, [sp, #80]	@ 0x50
 8003ede:	9315      	str	r3, [sp, #84]	@ 0x54
 8003ee0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8003ee4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8003ee8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003eea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8003eee:	1b5b      	subs	r3, r3, r5
 8003ef0:	9311      	str	r3, [sp, #68]	@ 0x44
 8003ef2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8003ef6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8003efa:	f002 fa53 	bl	80063a4 <__ulp>
 8003efe:	4650      	mov	r0, sl
 8003f00:	ec53 2b10 	vmov	r2, r3, d0
 8003f04:	4659      	mov	r1, fp
 8003f06:	f7fc fb7f 	bl	8000608 <__aeabi_dmul>
 8003f0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003f0e:	f7fc f9c5 	bl	800029c <__adddf3>
 8003f12:	4682      	mov	sl, r0
 8003f14:	468b      	mov	fp, r1
 8003f16:	e770      	b.n	8003dfa <_strtod_l+0xa62>
 8003f18:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8003f1c:	e7e0      	b.n	8003ee0 <_strtod_l+0xb48>
 8003f1e:	a30e      	add	r3, pc, #56	@ (adr r3, 8003f58 <_strtod_l+0xbc0>)
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	f7fc fde2 	bl	8000aec <__aeabi_dcmplt>
 8003f28:	e798      	b.n	8003e5c <_strtod_l+0xac4>
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f2e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8003f30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003f32:	6013      	str	r3, [r2, #0]
 8003f34:	f7ff ba6d 	b.w	8003412 <_strtod_l+0x7a>
 8003f38:	2a65      	cmp	r2, #101	@ 0x65
 8003f3a:	f43f ab66 	beq.w	800360a <_strtod_l+0x272>
 8003f3e:	2a45      	cmp	r2, #69	@ 0x45
 8003f40:	f43f ab63 	beq.w	800360a <_strtod_l+0x272>
 8003f44:	2301      	movs	r3, #1
 8003f46:	f7ff bb9e 	b.w	8003686 <_strtod_l+0x2ee>
 8003f4a:	bf00      	nop
 8003f4c:	f3af 8000 	nop.w
 8003f50:	ffc00000 	.word	0xffc00000
 8003f54:	41dfffff 	.word	0x41dfffff
 8003f58:	94a03595 	.word	0x94a03595
 8003f5c:	3fcfffff 	.word	0x3fcfffff

08003f60 <_strtod_r>:
 8003f60:	4b01      	ldr	r3, [pc, #4]	@ (8003f68 <_strtod_r+0x8>)
 8003f62:	f7ff ba19 	b.w	8003398 <_strtod_l>
 8003f66:	bf00      	nop
 8003f68:	20000018 	.word	0x20000018

08003f6c <_strtol_l.constprop.0>:
 8003f6c:	2b24      	cmp	r3, #36	@ 0x24
 8003f6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f72:	4686      	mov	lr, r0
 8003f74:	4690      	mov	r8, r2
 8003f76:	d801      	bhi.n	8003f7c <_strtol_l.constprop.0+0x10>
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d106      	bne.n	8003f8a <_strtol_l.constprop.0+0x1e>
 8003f7c:	f000 f8c0 	bl	8004100 <__errno>
 8003f80:	2316      	movs	r3, #22
 8003f82:	6003      	str	r3, [r0, #0]
 8003f84:	2000      	movs	r0, #0
 8003f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f8a:	4834      	ldr	r0, [pc, #208]	@ (800405c <_strtol_l.constprop.0+0xf0>)
 8003f8c:	460d      	mov	r5, r1
 8003f8e:	462a      	mov	r2, r5
 8003f90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f94:	5d06      	ldrb	r6, [r0, r4]
 8003f96:	f016 0608 	ands.w	r6, r6, #8
 8003f9a:	d1f8      	bne.n	8003f8e <_strtol_l.constprop.0+0x22>
 8003f9c:	2c2d      	cmp	r4, #45	@ 0x2d
 8003f9e:	d12d      	bne.n	8003ffc <_strtol_l.constprop.0+0x90>
 8003fa0:	782c      	ldrb	r4, [r5, #0]
 8003fa2:	2601      	movs	r6, #1
 8003fa4:	1c95      	adds	r5, r2, #2
 8003fa6:	f033 0210 	bics.w	r2, r3, #16
 8003faa:	d109      	bne.n	8003fc0 <_strtol_l.constprop.0+0x54>
 8003fac:	2c30      	cmp	r4, #48	@ 0x30
 8003fae:	d12a      	bne.n	8004006 <_strtol_l.constprop.0+0x9a>
 8003fb0:	782a      	ldrb	r2, [r5, #0]
 8003fb2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003fb6:	2a58      	cmp	r2, #88	@ 0x58
 8003fb8:	d125      	bne.n	8004006 <_strtol_l.constprop.0+0x9a>
 8003fba:	786c      	ldrb	r4, [r5, #1]
 8003fbc:	2310      	movs	r3, #16
 8003fbe:	3502      	adds	r5, #2
 8003fc0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003fc4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8003fc8:	2200      	movs	r2, #0
 8003fca:	fbbc f9f3 	udiv	r9, ip, r3
 8003fce:	4610      	mov	r0, r2
 8003fd0:	fb03 ca19 	mls	sl, r3, r9, ip
 8003fd4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003fd8:	2f09      	cmp	r7, #9
 8003fda:	d81b      	bhi.n	8004014 <_strtol_l.constprop.0+0xa8>
 8003fdc:	463c      	mov	r4, r7
 8003fde:	42a3      	cmp	r3, r4
 8003fe0:	dd27      	ble.n	8004032 <_strtol_l.constprop.0+0xc6>
 8003fe2:	1c57      	adds	r7, r2, #1
 8003fe4:	d007      	beq.n	8003ff6 <_strtol_l.constprop.0+0x8a>
 8003fe6:	4581      	cmp	r9, r0
 8003fe8:	d320      	bcc.n	800402c <_strtol_l.constprop.0+0xc0>
 8003fea:	d101      	bne.n	8003ff0 <_strtol_l.constprop.0+0x84>
 8003fec:	45a2      	cmp	sl, r4
 8003fee:	db1d      	blt.n	800402c <_strtol_l.constprop.0+0xc0>
 8003ff0:	fb00 4003 	mla	r0, r0, r3, r4
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ffa:	e7eb      	b.n	8003fd4 <_strtol_l.constprop.0+0x68>
 8003ffc:	2c2b      	cmp	r4, #43	@ 0x2b
 8003ffe:	bf04      	itt	eq
 8004000:	782c      	ldrbeq	r4, [r5, #0]
 8004002:	1c95      	addeq	r5, r2, #2
 8004004:	e7cf      	b.n	8003fa6 <_strtol_l.constprop.0+0x3a>
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1da      	bne.n	8003fc0 <_strtol_l.constprop.0+0x54>
 800400a:	2c30      	cmp	r4, #48	@ 0x30
 800400c:	bf0c      	ite	eq
 800400e:	2308      	moveq	r3, #8
 8004010:	230a      	movne	r3, #10
 8004012:	e7d5      	b.n	8003fc0 <_strtol_l.constprop.0+0x54>
 8004014:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004018:	2f19      	cmp	r7, #25
 800401a:	d801      	bhi.n	8004020 <_strtol_l.constprop.0+0xb4>
 800401c:	3c37      	subs	r4, #55	@ 0x37
 800401e:	e7de      	b.n	8003fde <_strtol_l.constprop.0+0x72>
 8004020:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004024:	2f19      	cmp	r7, #25
 8004026:	d804      	bhi.n	8004032 <_strtol_l.constprop.0+0xc6>
 8004028:	3c57      	subs	r4, #87	@ 0x57
 800402a:	e7d8      	b.n	8003fde <_strtol_l.constprop.0+0x72>
 800402c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004030:	e7e1      	b.n	8003ff6 <_strtol_l.constprop.0+0x8a>
 8004032:	1c53      	adds	r3, r2, #1
 8004034:	d108      	bne.n	8004048 <_strtol_l.constprop.0+0xdc>
 8004036:	2322      	movs	r3, #34	@ 0x22
 8004038:	f8ce 3000 	str.w	r3, [lr]
 800403c:	4660      	mov	r0, ip
 800403e:	f1b8 0f00 	cmp.w	r8, #0
 8004042:	d0a0      	beq.n	8003f86 <_strtol_l.constprop.0+0x1a>
 8004044:	1e69      	subs	r1, r5, #1
 8004046:	e006      	b.n	8004056 <_strtol_l.constprop.0+0xea>
 8004048:	b106      	cbz	r6, 800404c <_strtol_l.constprop.0+0xe0>
 800404a:	4240      	negs	r0, r0
 800404c:	f1b8 0f00 	cmp.w	r8, #0
 8004050:	d099      	beq.n	8003f86 <_strtol_l.constprop.0+0x1a>
 8004052:	2a00      	cmp	r2, #0
 8004054:	d1f6      	bne.n	8004044 <_strtol_l.constprop.0+0xd8>
 8004056:	f8c8 1000 	str.w	r1, [r8]
 800405a:	e794      	b.n	8003f86 <_strtol_l.constprop.0+0x1a>
 800405c:	080074c9 	.word	0x080074c9

08004060 <_strtol_r>:
 8004060:	f7ff bf84 	b.w	8003f6c <_strtol_l.constprop.0>

08004064 <_fwalk_sglue>:
 8004064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004068:	4607      	mov	r7, r0
 800406a:	4688      	mov	r8, r1
 800406c:	4614      	mov	r4, r2
 800406e:	2600      	movs	r6, #0
 8004070:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004074:	f1b9 0901 	subs.w	r9, r9, #1
 8004078:	d505      	bpl.n	8004086 <_fwalk_sglue+0x22>
 800407a:	6824      	ldr	r4, [r4, #0]
 800407c:	2c00      	cmp	r4, #0
 800407e:	d1f7      	bne.n	8004070 <_fwalk_sglue+0xc>
 8004080:	4630      	mov	r0, r6
 8004082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004086:	89ab      	ldrh	r3, [r5, #12]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d907      	bls.n	800409c <_fwalk_sglue+0x38>
 800408c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004090:	3301      	adds	r3, #1
 8004092:	d003      	beq.n	800409c <_fwalk_sglue+0x38>
 8004094:	4629      	mov	r1, r5
 8004096:	4638      	mov	r0, r7
 8004098:	47c0      	blx	r8
 800409a:	4306      	orrs	r6, r0
 800409c:	3568      	adds	r5, #104	@ 0x68
 800409e:	e7e9      	b.n	8004074 <_fwalk_sglue+0x10>

080040a0 <iprintf>:
 80040a0:	b40f      	push	{r0, r1, r2, r3}
 80040a2:	b507      	push	{r0, r1, r2, lr}
 80040a4:	4906      	ldr	r1, [pc, #24]	@ (80040c0 <iprintf+0x20>)
 80040a6:	ab04      	add	r3, sp, #16
 80040a8:	6808      	ldr	r0, [r1, #0]
 80040aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80040ae:	6881      	ldr	r1, [r0, #8]
 80040b0:	9301      	str	r3, [sp, #4]
 80040b2:	f001 fb77 	bl	80057a4 <_vfiprintf_r>
 80040b6:	b003      	add	sp, #12
 80040b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80040bc:	b004      	add	sp, #16
 80040be:	4770      	bx	lr
 80040c0:	20000184 	.word	0x20000184

080040c4 <strncmp>:
 80040c4:	b510      	push	{r4, lr}
 80040c6:	b16a      	cbz	r2, 80040e4 <strncmp+0x20>
 80040c8:	3901      	subs	r1, #1
 80040ca:	1884      	adds	r4, r0, r2
 80040cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040d0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d103      	bne.n	80040e0 <strncmp+0x1c>
 80040d8:	42a0      	cmp	r0, r4
 80040da:	d001      	beq.n	80040e0 <strncmp+0x1c>
 80040dc:	2a00      	cmp	r2, #0
 80040de:	d1f5      	bne.n	80040cc <strncmp+0x8>
 80040e0:	1ad0      	subs	r0, r2, r3
 80040e2:	bd10      	pop	{r4, pc}
 80040e4:	4610      	mov	r0, r2
 80040e6:	e7fc      	b.n	80040e2 <strncmp+0x1e>

080040e8 <memset>:
 80040e8:	4402      	add	r2, r0
 80040ea:	4603      	mov	r3, r0
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d100      	bne.n	80040f2 <memset+0xa>
 80040f0:	4770      	bx	lr
 80040f2:	f803 1b01 	strb.w	r1, [r3], #1
 80040f6:	e7f9      	b.n	80040ec <memset+0x4>

080040f8 <_localeconv_r>:
 80040f8:	4800      	ldr	r0, [pc, #0]	@ (80040fc <_localeconv_r+0x4>)
 80040fa:	4770      	bx	lr
 80040fc:	20000108 	.word	0x20000108

08004100 <__errno>:
 8004100:	4b01      	ldr	r3, [pc, #4]	@ (8004108 <__errno+0x8>)
 8004102:	6818      	ldr	r0, [r3, #0]
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	20000184 	.word	0x20000184

0800410c <__libc_init_array>:
 800410c:	b570      	push	{r4, r5, r6, lr}
 800410e:	4d0d      	ldr	r5, [pc, #52]	@ (8004144 <__libc_init_array+0x38>)
 8004110:	4c0d      	ldr	r4, [pc, #52]	@ (8004148 <__libc_init_array+0x3c>)
 8004112:	1b64      	subs	r4, r4, r5
 8004114:	10a4      	asrs	r4, r4, #2
 8004116:	2600      	movs	r6, #0
 8004118:	42a6      	cmp	r6, r4
 800411a:	d109      	bne.n	8004130 <__libc_init_array+0x24>
 800411c:	4d0b      	ldr	r5, [pc, #44]	@ (800414c <__libc_init_array+0x40>)
 800411e:	4c0c      	ldr	r4, [pc, #48]	@ (8004150 <__libc_init_array+0x44>)
 8004120:	f002 fd68 	bl	8006bf4 <_init>
 8004124:	1b64      	subs	r4, r4, r5
 8004126:	10a4      	asrs	r4, r4, #2
 8004128:	2600      	movs	r6, #0
 800412a:	42a6      	cmp	r6, r4
 800412c:	d105      	bne.n	800413a <__libc_init_array+0x2e>
 800412e:	bd70      	pop	{r4, r5, r6, pc}
 8004130:	f855 3b04 	ldr.w	r3, [r5], #4
 8004134:	4798      	blx	r3
 8004136:	3601      	adds	r6, #1
 8004138:	e7ee      	b.n	8004118 <__libc_init_array+0xc>
 800413a:	f855 3b04 	ldr.w	r3, [r5], #4
 800413e:	4798      	blx	r3
 8004140:	3601      	adds	r6, #1
 8004142:	e7f2      	b.n	800412a <__libc_init_array+0x1e>
 8004144:	08007864 	.word	0x08007864
 8004148:	08007864 	.word	0x08007864
 800414c:	08007864 	.word	0x08007864
 8004150:	08007868 	.word	0x08007868

08004154 <__retarget_lock_init_recursive>:
 8004154:	4770      	bx	lr

08004156 <__retarget_lock_acquire_recursive>:
 8004156:	4770      	bx	lr

08004158 <__retarget_lock_release_recursive>:
 8004158:	4770      	bx	lr

0800415a <memcpy>:
 800415a:	440a      	add	r2, r1
 800415c:	4291      	cmp	r1, r2
 800415e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004162:	d100      	bne.n	8004166 <memcpy+0xc>
 8004164:	4770      	bx	lr
 8004166:	b510      	push	{r4, lr}
 8004168:	f811 4b01 	ldrb.w	r4, [r1], #1
 800416c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004170:	4291      	cmp	r1, r2
 8004172:	d1f9      	bne.n	8004168 <memcpy+0xe>
 8004174:	bd10      	pop	{r4, pc}
	...

08004178 <nan>:
 8004178:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8004180 <nan+0x8>
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	00000000 	.word	0x00000000
 8004184:	7ff80000 	.word	0x7ff80000

08004188 <nanf>:
 8004188:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004190 <nanf+0x8>
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	7fc00000 	.word	0x7fc00000

08004194 <quorem>:
 8004194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004198:	6903      	ldr	r3, [r0, #16]
 800419a:	690c      	ldr	r4, [r1, #16]
 800419c:	42a3      	cmp	r3, r4
 800419e:	4607      	mov	r7, r0
 80041a0:	db7e      	blt.n	80042a0 <quorem+0x10c>
 80041a2:	3c01      	subs	r4, #1
 80041a4:	f101 0814 	add.w	r8, r1, #20
 80041a8:	00a3      	lsls	r3, r4, #2
 80041aa:	f100 0514 	add.w	r5, r0, #20
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80041b4:	9301      	str	r3, [sp, #4]
 80041b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80041ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80041be:	3301      	adds	r3, #1
 80041c0:	429a      	cmp	r2, r3
 80041c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80041c6:	fbb2 f6f3 	udiv	r6, r2, r3
 80041ca:	d32e      	bcc.n	800422a <quorem+0x96>
 80041cc:	f04f 0a00 	mov.w	sl, #0
 80041d0:	46c4      	mov	ip, r8
 80041d2:	46ae      	mov	lr, r5
 80041d4:	46d3      	mov	fp, sl
 80041d6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80041da:	b298      	uxth	r0, r3
 80041dc:	fb06 a000 	mla	r0, r6, r0, sl
 80041e0:	0c02      	lsrs	r2, r0, #16
 80041e2:	0c1b      	lsrs	r3, r3, #16
 80041e4:	fb06 2303 	mla	r3, r6, r3, r2
 80041e8:	f8de 2000 	ldr.w	r2, [lr]
 80041ec:	b280      	uxth	r0, r0
 80041ee:	b292      	uxth	r2, r2
 80041f0:	1a12      	subs	r2, r2, r0
 80041f2:	445a      	add	r2, fp
 80041f4:	f8de 0000 	ldr.w	r0, [lr]
 80041f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004202:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004206:	b292      	uxth	r2, r2
 8004208:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800420c:	45e1      	cmp	r9, ip
 800420e:	f84e 2b04 	str.w	r2, [lr], #4
 8004212:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004216:	d2de      	bcs.n	80041d6 <quorem+0x42>
 8004218:	9b00      	ldr	r3, [sp, #0]
 800421a:	58eb      	ldr	r3, [r5, r3]
 800421c:	b92b      	cbnz	r3, 800422a <quorem+0x96>
 800421e:	9b01      	ldr	r3, [sp, #4]
 8004220:	3b04      	subs	r3, #4
 8004222:	429d      	cmp	r5, r3
 8004224:	461a      	mov	r2, r3
 8004226:	d32f      	bcc.n	8004288 <quorem+0xf4>
 8004228:	613c      	str	r4, [r7, #16]
 800422a:	4638      	mov	r0, r7
 800422c:	f002 f80a 	bl	8006244 <__mcmp>
 8004230:	2800      	cmp	r0, #0
 8004232:	db25      	blt.n	8004280 <quorem+0xec>
 8004234:	4629      	mov	r1, r5
 8004236:	2000      	movs	r0, #0
 8004238:	f858 2b04 	ldr.w	r2, [r8], #4
 800423c:	f8d1 c000 	ldr.w	ip, [r1]
 8004240:	fa1f fe82 	uxth.w	lr, r2
 8004244:	fa1f f38c 	uxth.w	r3, ip
 8004248:	eba3 030e 	sub.w	r3, r3, lr
 800424c:	4403      	add	r3, r0
 800424e:	0c12      	lsrs	r2, r2, #16
 8004250:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004254:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004258:	b29b      	uxth	r3, r3
 800425a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800425e:	45c1      	cmp	r9, r8
 8004260:	f841 3b04 	str.w	r3, [r1], #4
 8004264:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004268:	d2e6      	bcs.n	8004238 <quorem+0xa4>
 800426a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800426e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004272:	b922      	cbnz	r2, 800427e <quorem+0xea>
 8004274:	3b04      	subs	r3, #4
 8004276:	429d      	cmp	r5, r3
 8004278:	461a      	mov	r2, r3
 800427a:	d30b      	bcc.n	8004294 <quorem+0x100>
 800427c:	613c      	str	r4, [r7, #16]
 800427e:	3601      	adds	r6, #1
 8004280:	4630      	mov	r0, r6
 8004282:	b003      	add	sp, #12
 8004284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004288:	6812      	ldr	r2, [r2, #0]
 800428a:	3b04      	subs	r3, #4
 800428c:	2a00      	cmp	r2, #0
 800428e:	d1cb      	bne.n	8004228 <quorem+0x94>
 8004290:	3c01      	subs	r4, #1
 8004292:	e7c6      	b.n	8004222 <quorem+0x8e>
 8004294:	6812      	ldr	r2, [r2, #0]
 8004296:	3b04      	subs	r3, #4
 8004298:	2a00      	cmp	r2, #0
 800429a:	d1ef      	bne.n	800427c <quorem+0xe8>
 800429c:	3c01      	subs	r4, #1
 800429e:	e7ea      	b.n	8004276 <quorem+0xe2>
 80042a0:	2000      	movs	r0, #0
 80042a2:	e7ee      	b.n	8004282 <quorem+0xee>
 80042a4:	0000      	movs	r0, r0
	...

080042a8 <_dtoa_r>:
 80042a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ac:	69c7      	ldr	r7, [r0, #28]
 80042ae:	b099      	sub	sp, #100	@ 0x64
 80042b0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80042b4:	ec55 4b10 	vmov	r4, r5, d0
 80042b8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80042ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80042bc:	4683      	mov	fp, r0
 80042be:	920e      	str	r2, [sp, #56]	@ 0x38
 80042c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80042c2:	b97f      	cbnz	r7, 80042e4 <_dtoa_r+0x3c>
 80042c4:	2010      	movs	r0, #16
 80042c6:	f001 fb85 	bl	80059d4 <malloc>
 80042ca:	4602      	mov	r2, r0
 80042cc:	f8cb 001c 	str.w	r0, [fp, #28]
 80042d0:	b920      	cbnz	r0, 80042dc <_dtoa_r+0x34>
 80042d2:	4ba7      	ldr	r3, [pc, #668]	@ (8004570 <_dtoa_r+0x2c8>)
 80042d4:	21ef      	movs	r1, #239	@ 0xef
 80042d6:	48a7      	ldr	r0, [pc, #668]	@ (8004574 <_dtoa_r+0x2cc>)
 80042d8:	f002 fbaa 	bl	8006a30 <__assert_func>
 80042dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80042e0:	6007      	str	r7, [r0, #0]
 80042e2:	60c7      	str	r7, [r0, #12]
 80042e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80042e8:	6819      	ldr	r1, [r3, #0]
 80042ea:	b159      	cbz	r1, 8004304 <_dtoa_r+0x5c>
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	604a      	str	r2, [r1, #4]
 80042f0:	2301      	movs	r3, #1
 80042f2:	4093      	lsls	r3, r2
 80042f4:	608b      	str	r3, [r1, #8]
 80042f6:	4658      	mov	r0, fp
 80042f8:	f001 fd20 	bl	8005d3c <_Bfree>
 80042fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004300:	2200      	movs	r2, #0
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	1e2b      	subs	r3, r5, #0
 8004306:	bfb9      	ittee	lt
 8004308:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800430c:	9303      	strlt	r3, [sp, #12]
 800430e:	2300      	movge	r3, #0
 8004310:	6033      	strge	r3, [r6, #0]
 8004312:	9f03      	ldr	r7, [sp, #12]
 8004314:	4b98      	ldr	r3, [pc, #608]	@ (8004578 <_dtoa_r+0x2d0>)
 8004316:	bfbc      	itt	lt
 8004318:	2201      	movlt	r2, #1
 800431a:	6032      	strlt	r2, [r6, #0]
 800431c:	43bb      	bics	r3, r7
 800431e:	d112      	bne.n	8004346 <_dtoa_r+0x9e>
 8004320:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004322:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004326:	6013      	str	r3, [r2, #0]
 8004328:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800432c:	4323      	orrs	r3, r4
 800432e:	f000 854d 	beq.w	8004dcc <_dtoa_r+0xb24>
 8004332:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004334:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800458c <_dtoa_r+0x2e4>
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 854f 	beq.w	8004ddc <_dtoa_r+0xb34>
 800433e:	f10a 0303 	add.w	r3, sl, #3
 8004342:	f000 bd49 	b.w	8004dd8 <_dtoa_r+0xb30>
 8004346:	ed9d 7b02 	vldr	d7, [sp, #8]
 800434a:	2200      	movs	r2, #0
 800434c:	ec51 0b17 	vmov	r0, r1, d7
 8004350:	2300      	movs	r3, #0
 8004352:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8004356:	f7fc fbbf 	bl	8000ad8 <__aeabi_dcmpeq>
 800435a:	4680      	mov	r8, r0
 800435c:	b158      	cbz	r0, 8004376 <_dtoa_r+0xce>
 800435e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004360:	2301      	movs	r3, #1
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004366:	b113      	cbz	r3, 800436e <_dtoa_r+0xc6>
 8004368:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800436a:	4b84      	ldr	r3, [pc, #528]	@ (800457c <_dtoa_r+0x2d4>)
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004590 <_dtoa_r+0x2e8>
 8004372:	f000 bd33 	b.w	8004ddc <_dtoa_r+0xb34>
 8004376:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800437a:	aa16      	add	r2, sp, #88	@ 0x58
 800437c:	a917      	add	r1, sp, #92	@ 0x5c
 800437e:	4658      	mov	r0, fp
 8004380:	f002 f880 	bl	8006484 <__d2b>
 8004384:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004388:	4681      	mov	r9, r0
 800438a:	2e00      	cmp	r6, #0
 800438c:	d077      	beq.n	800447e <_dtoa_r+0x1d6>
 800438e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004390:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004398:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800439c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80043a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80043a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80043a8:	4619      	mov	r1, r3
 80043aa:	2200      	movs	r2, #0
 80043ac:	4b74      	ldr	r3, [pc, #464]	@ (8004580 <_dtoa_r+0x2d8>)
 80043ae:	f7fb ff73 	bl	8000298 <__aeabi_dsub>
 80043b2:	a369      	add	r3, pc, #420	@ (adr r3, 8004558 <_dtoa_r+0x2b0>)
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	f7fc f926 	bl	8000608 <__aeabi_dmul>
 80043bc:	a368      	add	r3, pc, #416	@ (adr r3, 8004560 <_dtoa_r+0x2b8>)
 80043be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c2:	f7fb ff6b 	bl	800029c <__adddf3>
 80043c6:	4604      	mov	r4, r0
 80043c8:	4630      	mov	r0, r6
 80043ca:	460d      	mov	r5, r1
 80043cc:	f7fc f8b2 	bl	8000534 <__aeabi_i2d>
 80043d0:	a365      	add	r3, pc, #404	@ (adr r3, 8004568 <_dtoa_r+0x2c0>)
 80043d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d6:	f7fc f917 	bl	8000608 <__aeabi_dmul>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4620      	mov	r0, r4
 80043e0:	4629      	mov	r1, r5
 80043e2:	f7fb ff5b 	bl	800029c <__adddf3>
 80043e6:	4604      	mov	r4, r0
 80043e8:	460d      	mov	r5, r1
 80043ea:	f7fc fbbd 	bl	8000b68 <__aeabi_d2iz>
 80043ee:	2200      	movs	r2, #0
 80043f0:	4607      	mov	r7, r0
 80043f2:	2300      	movs	r3, #0
 80043f4:	4620      	mov	r0, r4
 80043f6:	4629      	mov	r1, r5
 80043f8:	f7fc fb78 	bl	8000aec <__aeabi_dcmplt>
 80043fc:	b140      	cbz	r0, 8004410 <_dtoa_r+0x168>
 80043fe:	4638      	mov	r0, r7
 8004400:	f7fc f898 	bl	8000534 <__aeabi_i2d>
 8004404:	4622      	mov	r2, r4
 8004406:	462b      	mov	r3, r5
 8004408:	f7fc fb66 	bl	8000ad8 <__aeabi_dcmpeq>
 800440c:	b900      	cbnz	r0, 8004410 <_dtoa_r+0x168>
 800440e:	3f01      	subs	r7, #1
 8004410:	2f16      	cmp	r7, #22
 8004412:	d851      	bhi.n	80044b8 <_dtoa_r+0x210>
 8004414:	4b5b      	ldr	r3, [pc, #364]	@ (8004584 <_dtoa_r+0x2dc>)
 8004416:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800441a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004422:	f7fc fb63 	bl	8000aec <__aeabi_dcmplt>
 8004426:	2800      	cmp	r0, #0
 8004428:	d048      	beq.n	80044bc <_dtoa_r+0x214>
 800442a:	3f01      	subs	r7, #1
 800442c:	2300      	movs	r3, #0
 800442e:	9312      	str	r3, [sp, #72]	@ 0x48
 8004430:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004432:	1b9b      	subs	r3, r3, r6
 8004434:	1e5a      	subs	r2, r3, #1
 8004436:	bf44      	itt	mi
 8004438:	f1c3 0801 	rsbmi	r8, r3, #1
 800443c:	2300      	movmi	r3, #0
 800443e:	9208      	str	r2, [sp, #32]
 8004440:	bf54      	ite	pl
 8004442:	f04f 0800 	movpl.w	r8, #0
 8004446:	9308      	strmi	r3, [sp, #32]
 8004448:	2f00      	cmp	r7, #0
 800444a:	db39      	blt.n	80044c0 <_dtoa_r+0x218>
 800444c:	9b08      	ldr	r3, [sp, #32]
 800444e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004450:	443b      	add	r3, r7
 8004452:	9308      	str	r3, [sp, #32]
 8004454:	2300      	movs	r3, #0
 8004456:	930a      	str	r3, [sp, #40]	@ 0x28
 8004458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800445a:	2b09      	cmp	r3, #9
 800445c:	d864      	bhi.n	8004528 <_dtoa_r+0x280>
 800445e:	2b05      	cmp	r3, #5
 8004460:	bfc4      	itt	gt
 8004462:	3b04      	subgt	r3, #4
 8004464:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004468:	f1a3 0302 	sub.w	r3, r3, #2
 800446c:	bfcc      	ite	gt
 800446e:	2400      	movgt	r4, #0
 8004470:	2401      	movle	r4, #1
 8004472:	2b03      	cmp	r3, #3
 8004474:	d863      	bhi.n	800453e <_dtoa_r+0x296>
 8004476:	e8df f003 	tbb	[pc, r3]
 800447a:	372a      	.short	0x372a
 800447c:	5535      	.short	0x5535
 800447e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004482:	441e      	add	r6, r3
 8004484:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004488:	2b20      	cmp	r3, #32
 800448a:	bfc1      	itttt	gt
 800448c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004490:	409f      	lslgt	r7, r3
 8004492:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004496:	fa24 f303 	lsrgt.w	r3, r4, r3
 800449a:	bfd6      	itet	le
 800449c:	f1c3 0320 	rsble	r3, r3, #32
 80044a0:	ea47 0003 	orrgt.w	r0, r7, r3
 80044a4:	fa04 f003 	lslle.w	r0, r4, r3
 80044a8:	f7fc f834 	bl	8000514 <__aeabi_ui2d>
 80044ac:	2201      	movs	r2, #1
 80044ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80044b2:	3e01      	subs	r6, #1
 80044b4:	9214      	str	r2, [sp, #80]	@ 0x50
 80044b6:	e777      	b.n	80043a8 <_dtoa_r+0x100>
 80044b8:	2301      	movs	r3, #1
 80044ba:	e7b8      	b.n	800442e <_dtoa_r+0x186>
 80044bc:	9012      	str	r0, [sp, #72]	@ 0x48
 80044be:	e7b7      	b.n	8004430 <_dtoa_r+0x188>
 80044c0:	427b      	negs	r3, r7
 80044c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80044c4:	2300      	movs	r3, #0
 80044c6:	eba8 0807 	sub.w	r8, r8, r7
 80044ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80044cc:	e7c4      	b.n	8004458 <_dtoa_r+0x1b0>
 80044ce:	2300      	movs	r3, #0
 80044d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80044d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	dc35      	bgt.n	8004544 <_dtoa_r+0x29c>
 80044d8:	2301      	movs	r3, #1
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	9307      	str	r3, [sp, #28]
 80044de:	461a      	mov	r2, r3
 80044e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80044e2:	e00b      	b.n	80044fc <_dtoa_r+0x254>
 80044e4:	2301      	movs	r3, #1
 80044e6:	e7f3      	b.n	80044d0 <_dtoa_r+0x228>
 80044e8:	2300      	movs	r3, #0
 80044ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80044ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80044ee:	18fb      	adds	r3, r7, r3
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	3301      	adds	r3, #1
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	9307      	str	r3, [sp, #28]
 80044f8:	bfb8      	it	lt
 80044fa:	2301      	movlt	r3, #1
 80044fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004500:	2100      	movs	r1, #0
 8004502:	2204      	movs	r2, #4
 8004504:	f102 0514 	add.w	r5, r2, #20
 8004508:	429d      	cmp	r5, r3
 800450a:	d91f      	bls.n	800454c <_dtoa_r+0x2a4>
 800450c:	6041      	str	r1, [r0, #4]
 800450e:	4658      	mov	r0, fp
 8004510:	f001 fbd4 	bl	8005cbc <_Balloc>
 8004514:	4682      	mov	sl, r0
 8004516:	2800      	cmp	r0, #0
 8004518:	d13c      	bne.n	8004594 <_dtoa_r+0x2ec>
 800451a:	4b1b      	ldr	r3, [pc, #108]	@ (8004588 <_dtoa_r+0x2e0>)
 800451c:	4602      	mov	r2, r0
 800451e:	f240 11af 	movw	r1, #431	@ 0x1af
 8004522:	e6d8      	b.n	80042d6 <_dtoa_r+0x2e>
 8004524:	2301      	movs	r3, #1
 8004526:	e7e0      	b.n	80044ea <_dtoa_r+0x242>
 8004528:	2401      	movs	r4, #1
 800452a:	2300      	movs	r3, #0
 800452c:	9309      	str	r3, [sp, #36]	@ 0x24
 800452e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004530:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	9307      	str	r3, [sp, #28]
 8004538:	2200      	movs	r2, #0
 800453a:	2312      	movs	r3, #18
 800453c:	e7d0      	b.n	80044e0 <_dtoa_r+0x238>
 800453e:	2301      	movs	r3, #1
 8004540:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004542:	e7f5      	b.n	8004530 <_dtoa_r+0x288>
 8004544:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	9307      	str	r3, [sp, #28]
 800454a:	e7d7      	b.n	80044fc <_dtoa_r+0x254>
 800454c:	3101      	adds	r1, #1
 800454e:	0052      	lsls	r2, r2, #1
 8004550:	e7d8      	b.n	8004504 <_dtoa_r+0x25c>
 8004552:	bf00      	nop
 8004554:	f3af 8000 	nop.w
 8004558:	636f4361 	.word	0x636f4361
 800455c:	3fd287a7 	.word	0x3fd287a7
 8004560:	8b60c8b3 	.word	0x8b60c8b3
 8004564:	3fc68a28 	.word	0x3fc68a28
 8004568:	509f79fb 	.word	0x509f79fb
 800456c:	3fd34413 	.word	0x3fd34413
 8004570:	080075d6 	.word	0x080075d6
 8004574:	080075ed 	.word	0x080075ed
 8004578:	7ff00000 	.word	0x7ff00000
 800457c:	08007445 	.word	0x08007445
 8004580:	3ff80000 	.word	0x3ff80000
 8004584:	08007758 	.word	0x08007758
 8004588:	08007645 	.word	0x08007645
 800458c:	080075d2 	.word	0x080075d2
 8004590:	08007444 	.word	0x08007444
 8004594:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004598:	6018      	str	r0, [r3, #0]
 800459a:	9b07      	ldr	r3, [sp, #28]
 800459c:	2b0e      	cmp	r3, #14
 800459e:	f200 80a4 	bhi.w	80046ea <_dtoa_r+0x442>
 80045a2:	2c00      	cmp	r4, #0
 80045a4:	f000 80a1 	beq.w	80046ea <_dtoa_r+0x442>
 80045a8:	2f00      	cmp	r7, #0
 80045aa:	dd33      	ble.n	8004614 <_dtoa_r+0x36c>
 80045ac:	4bad      	ldr	r3, [pc, #692]	@ (8004864 <_dtoa_r+0x5bc>)
 80045ae:	f007 020f 	and.w	r2, r7, #15
 80045b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045b6:	ed93 7b00 	vldr	d7, [r3]
 80045ba:	05f8      	lsls	r0, r7, #23
 80045bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80045c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80045c4:	d516      	bpl.n	80045f4 <_dtoa_r+0x34c>
 80045c6:	4ba8      	ldr	r3, [pc, #672]	@ (8004868 <_dtoa_r+0x5c0>)
 80045c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80045cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80045d0:	f7fc f944 	bl	800085c <__aeabi_ddiv>
 80045d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045d8:	f004 040f 	and.w	r4, r4, #15
 80045dc:	2603      	movs	r6, #3
 80045de:	4da2      	ldr	r5, [pc, #648]	@ (8004868 <_dtoa_r+0x5c0>)
 80045e0:	b954      	cbnz	r4, 80045f8 <_dtoa_r+0x350>
 80045e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045ea:	f7fc f937 	bl	800085c <__aeabi_ddiv>
 80045ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045f2:	e028      	b.n	8004646 <_dtoa_r+0x39e>
 80045f4:	2602      	movs	r6, #2
 80045f6:	e7f2      	b.n	80045de <_dtoa_r+0x336>
 80045f8:	07e1      	lsls	r1, r4, #31
 80045fa:	d508      	bpl.n	800460e <_dtoa_r+0x366>
 80045fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004600:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004604:	f7fc f800 	bl	8000608 <__aeabi_dmul>
 8004608:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800460c:	3601      	adds	r6, #1
 800460e:	1064      	asrs	r4, r4, #1
 8004610:	3508      	adds	r5, #8
 8004612:	e7e5      	b.n	80045e0 <_dtoa_r+0x338>
 8004614:	f000 80d2 	beq.w	80047bc <_dtoa_r+0x514>
 8004618:	427c      	negs	r4, r7
 800461a:	4b92      	ldr	r3, [pc, #584]	@ (8004864 <_dtoa_r+0x5bc>)
 800461c:	4d92      	ldr	r5, [pc, #584]	@ (8004868 <_dtoa_r+0x5c0>)
 800461e:	f004 020f 	and.w	r2, r4, #15
 8004622:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800462e:	f7fb ffeb 	bl	8000608 <__aeabi_dmul>
 8004632:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004636:	1124      	asrs	r4, r4, #4
 8004638:	2300      	movs	r3, #0
 800463a:	2602      	movs	r6, #2
 800463c:	2c00      	cmp	r4, #0
 800463e:	f040 80b2 	bne.w	80047a6 <_dtoa_r+0x4fe>
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1d3      	bne.n	80045ee <_dtoa_r+0x346>
 8004646:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004648:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 80b7 	beq.w	80047c0 <_dtoa_r+0x518>
 8004652:	4b86      	ldr	r3, [pc, #536]	@ (800486c <_dtoa_r+0x5c4>)
 8004654:	2200      	movs	r2, #0
 8004656:	4620      	mov	r0, r4
 8004658:	4629      	mov	r1, r5
 800465a:	f7fc fa47 	bl	8000aec <__aeabi_dcmplt>
 800465e:	2800      	cmp	r0, #0
 8004660:	f000 80ae 	beq.w	80047c0 <_dtoa_r+0x518>
 8004664:	9b07      	ldr	r3, [sp, #28]
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 80aa 	beq.w	80047c0 <_dtoa_r+0x518>
 800466c:	9b00      	ldr	r3, [sp, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	dd37      	ble.n	80046e2 <_dtoa_r+0x43a>
 8004672:	1e7b      	subs	r3, r7, #1
 8004674:	9304      	str	r3, [sp, #16]
 8004676:	4620      	mov	r0, r4
 8004678:	4b7d      	ldr	r3, [pc, #500]	@ (8004870 <_dtoa_r+0x5c8>)
 800467a:	2200      	movs	r2, #0
 800467c:	4629      	mov	r1, r5
 800467e:	f7fb ffc3 	bl	8000608 <__aeabi_dmul>
 8004682:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004686:	9c00      	ldr	r4, [sp, #0]
 8004688:	3601      	adds	r6, #1
 800468a:	4630      	mov	r0, r6
 800468c:	f7fb ff52 	bl	8000534 <__aeabi_i2d>
 8004690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004694:	f7fb ffb8 	bl	8000608 <__aeabi_dmul>
 8004698:	4b76      	ldr	r3, [pc, #472]	@ (8004874 <_dtoa_r+0x5cc>)
 800469a:	2200      	movs	r2, #0
 800469c:	f7fb fdfe 	bl	800029c <__adddf3>
 80046a0:	4605      	mov	r5, r0
 80046a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80046a6:	2c00      	cmp	r4, #0
 80046a8:	f040 808d 	bne.w	80047c6 <_dtoa_r+0x51e>
 80046ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046b0:	4b71      	ldr	r3, [pc, #452]	@ (8004878 <_dtoa_r+0x5d0>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	f7fb fdf0 	bl	8000298 <__aeabi_dsub>
 80046b8:	4602      	mov	r2, r0
 80046ba:	460b      	mov	r3, r1
 80046bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80046c0:	462a      	mov	r2, r5
 80046c2:	4633      	mov	r3, r6
 80046c4:	f7fc fa30 	bl	8000b28 <__aeabi_dcmpgt>
 80046c8:	2800      	cmp	r0, #0
 80046ca:	f040 828b 	bne.w	8004be4 <_dtoa_r+0x93c>
 80046ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046d2:	462a      	mov	r2, r5
 80046d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80046d8:	f7fc fa08 	bl	8000aec <__aeabi_dcmplt>
 80046dc:	2800      	cmp	r0, #0
 80046de:	f040 8128 	bne.w	8004932 <_dtoa_r+0x68a>
 80046e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80046e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80046ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f2c0 815a 	blt.w	80049a6 <_dtoa_r+0x6fe>
 80046f2:	2f0e      	cmp	r7, #14
 80046f4:	f300 8157 	bgt.w	80049a6 <_dtoa_r+0x6fe>
 80046f8:	4b5a      	ldr	r3, [pc, #360]	@ (8004864 <_dtoa_r+0x5bc>)
 80046fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80046fe:	ed93 7b00 	vldr	d7, [r3]
 8004702:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004704:	2b00      	cmp	r3, #0
 8004706:	ed8d 7b00 	vstr	d7, [sp]
 800470a:	da03      	bge.n	8004714 <_dtoa_r+0x46c>
 800470c:	9b07      	ldr	r3, [sp, #28]
 800470e:	2b00      	cmp	r3, #0
 8004710:	f340 8101 	ble.w	8004916 <_dtoa_r+0x66e>
 8004714:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004718:	4656      	mov	r6, sl
 800471a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800471e:	4620      	mov	r0, r4
 8004720:	4629      	mov	r1, r5
 8004722:	f7fc f89b 	bl	800085c <__aeabi_ddiv>
 8004726:	f7fc fa1f 	bl	8000b68 <__aeabi_d2iz>
 800472a:	4680      	mov	r8, r0
 800472c:	f7fb ff02 	bl	8000534 <__aeabi_i2d>
 8004730:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004734:	f7fb ff68 	bl	8000608 <__aeabi_dmul>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4620      	mov	r0, r4
 800473e:	4629      	mov	r1, r5
 8004740:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004744:	f7fb fda8 	bl	8000298 <__aeabi_dsub>
 8004748:	f806 4b01 	strb.w	r4, [r6], #1
 800474c:	9d07      	ldr	r5, [sp, #28]
 800474e:	eba6 040a 	sub.w	r4, r6, sl
 8004752:	42a5      	cmp	r5, r4
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	f040 8117 	bne.w	800498a <_dtoa_r+0x6e2>
 800475c:	f7fb fd9e 	bl	800029c <__adddf3>
 8004760:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004764:	4604      	mov	r4, r0
 8004766:	460d      	mov	r5, r1
 8004768:	f7fc f9de 	bl	8000b28 <__aeabi_dcmpgt>
 800476c:	2800      	cmp	r0, #0
 800476e:	f040 80f9 	bne.w	8004964 <_dtoa_r+0x6bc>
 8004772:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004776:	4620      	mov	r0, r4
 8004778:	4629      	mov	r1, r5
 800477a:	f7fc f9ad 	bl	8000ad8 <__aeabi_dcmpeq>
 800477e:	b118      	cbz	r0, 8004788 <_dtoa_r+0x4e0>
 8004780:	f018 0f01 	tst.w	r8, #1
 8004784:	f040 80ee 	bne.w	8004964 <_dtoa_r+0x6bc>
 8004788:	4649      	mov	r1, r9
 800478a:	4658      	mov	r0, fp
 800478c:	f001 fad6 	bl	8005d3c <_Bfree>
 8004790:	2300      	movs	r3, #0
 8004792:	7033      	strb	r3, [r6, #0]
 8004794:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004796:	3701      	adds	r7, #1
 8004798:	601f      	str	r7, [r3, #0]
 800479a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 831d 	beq.w	8004ddc <_dtoa_r+0xb34>
 80047a2:	601e      	str	r6, [r3, #0]
 80047a4:	e31a      	b.n	8004ddc <_dtoa_r+0xb34>
 80047a6:	07e2      	lsls	r2, r4, #31
 80047a8:	d505      	bpl.n	80047b6 <_dtoa_r+0x50e>
 80047aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80047ae:	f7fb ff2b 	bl	8000608 <__aeabi_dmul>
 80047b2:	3601      	adds	r6, #1
 80047b4:	2301      	movs	r3, #1
 80047b6:	1064      	asrs	r4, r4, #1
 80047b8:	3508      	adds	r5, #8
 80047ba:	e73f      	b.n	800463c <_dtoa_r+0x394>
 80047bc:	2602      	movs	r6, #2
 80047be:	e742      	b.n	8004646 <_dtoa_r+0x39e>
 80047c0:	9c07      	ldr	r4, [sp, #28]
 80047c2:	9704      	str	r7, [sp, #16]
 80047c4:	e761      	b.n	800468a <_dtoa_r+0x3e2>
 80047c6:	4b27      	ldr	r3, [pc, #156]	@ (8004864 <_dtoa_r+0x5bc>)
 80047c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80047ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80047ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80047d2:	4454      	add	r4, sl
 80047d4:	2900      	cmp	r1, #0
 80047d6:	d053      	beq.n	8004880 <_dtoa_r+0x5d8>
 80047d8:	4928      	ldr	r1, [pc, #160]	@ (800487c <_dtoa_r+0x5d4>)
 80047da:	2000      	movs	r0, #0
 80047dc:	f7fc f83e 	bl	800085c <__aeabi_ddiv>
 80047e0:	4633      	mov	r3, r6
 80047e2:	462a      	mov	r2, r5
 80047e4:	f7fb fd58 	bl	8000298 <__aeabi_dsub>
 80047e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80047ec:	4656      	mov	r6, sl
 80047ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047f2:	f7fc f9b9 	bl	8000b68 <__aeabi_d2iz>
 80047f6:	4605      	mov	r5, r0
 80047f8:	f7fb fe9c 	bl	8000534 <__aeabi_i2d>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004804:	f7fb fd48 	bl	8000298 <__aeabi_dsub>
 8004808:	3530      	adds	r5, #48	@ 0x30
 800480a:	4602      	mov	r2, r0
 800480c:	460b      	mov	r3, r1
 800480e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004812:	f806 5b01 	strb.w	r5, [r6], #1
 8004816:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800481a:	f7fc f967 	bl	8000aec <__aeabi_dcmplt>
 800481e:	2800      	cmp	r0, #0
 8004820:	d171      	bne.n	8004906 <_dtoa_r+0x65e>
 8004822:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004826:	4911      	ldr	r1, [pc, #68]	@ (800486c <_dtoa_r+0x5c4>)
 8004828:	2000      	movs	r0, #0
 800482a:	f7fb fd35 	bl	8000298 <__aeabi_dsub>
 800482e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004832:	f7fc f95b 	bl	8000aec <__aeabi_dcmplt>
 8004836:	2800      	cmp	r0, #0
 8004838:	f040 8095 	bne.w	8004966 <_dtoa_r+0x6be>
 800483c:	42a6      	cmp	r6, r4
 800483e:	f43f af50 	beq.w	80046e2 <_dtoa_r+0x43a>
 8004842:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004846:	4b0a      	ldr	r3, [pc, #40]	@ (8004870 <_dtoa_r+0x5c8>)
 8004848:	2200      	movs	r2, #0
 800484a:	f7fb fedd 	bl	8000608 <__aeabi_dmul>
 800484e:	4b08      	ldr	r3, [pc, #32]	@ (8004870 <_dtoa_r+0x5c8>)
 8004850:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004854:	2200      	movs	r2, #0
 8004856:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800485a:	f7fb fed5 	bl	8000608 <__aeabi_dmul>
 800485e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004862:	e7c4      	b.n	80047ee <_dtoa_r+0x546>
 8004864:	08007758 	.word	0x08007758
 8004868:	08007730 	.word	0x08007730
 800486c:	3ff00000 	.word	0x3ff00000
 8004870:	40240000 	.word	0x40240000
 8004874:	401c0000 	.word	0x401c0000
 8004878:	40140000 	.word	0x40140000
 800487c:	3fe00000 	.word	0x3fe00000
 8004880:	4631      	mov	r1, r6
 8004882:	4628      	mov	r0, r5
 8004884:	f7fb fec0 	bl	8000608 <__aeabi_dmul>
 8004888:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800488c:	9415      	str	r4, [sp, #84]	@ 0x54
 800488e:	4656      	mov	r6, sl
 8004890:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004894:	f7fc f968 	bl	8000b68 <__aeabi_d2iz>
 8004898:	4605      	mov	r5, r0
 800489a:	f7fb fe4b 	bl	8000534 <__aeabi_i2d>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048a6:	f7fb fcf7 	bl	8000298 <__aeabi_dsub>
 80048aa:	3530      	adds	r5, #48	@ 0x30
 80048ac:	f806 5b01 	strb.w	r5, [r6], #1
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	42a6      	cmp	r6, r4
 80048b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80048ba:	f04f 0200 	mov.w	r2, #0
 80048be:	d124      	bne.n	800490a <_dtoa_r+0x662>
 80048c0:	4bac      	ldr	r3, [pc, #688]	@ (8004b74 <_dtoa_r+0x8cc>)
 80048c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80048c6:	f7fb fce9 	bl	800029c <__adddf3>
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048d2:	f7fc f929 	bl	8000b28 <__aeabi_dcmpgt>
 80048d6:	2800      	cmp	r0, #0
 80048d8:	d145      	bne.n	8004966 <_dtoa_r+0x6be>
 80048da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80048de:	49a5      	ldr	r1, [pc, #660]	@ (8004b74 <_dtoa_r+0x8cc>)
 80048e0:	2000      	movs	r0, #0
 80048e2:	f7fb fcd9 	bl	8000298 <__aeabi_dsub>
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048ee:	f7fc f8fd 	bl	8000aec <__aeabi_dcmplt>
 80048f2:	2800      	cmp	r0, #0
 80048f4:	f43f aef5 	beq.w	80046e2 <_dtoa_r+0x43a>
 80048f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80048fa:	1e73      	subs	r3, r6, #1
 80048fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80048fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004902:	2b30      	cmp	r3, #48	@ 0x30
 8004904:	d0f8      	beq.n	80048f8 <_dtoa_r+0x650>
 8004906:	9f04      	ldr	r7, [sp, #16]
 8004908:	e73e      	b.n	8004788 <_dtoa_r+0x4e0>
 800490a:	4b9b      	ldr	r3, [pc, #620]	@ (8004b78 <_dtoa_r+0x8d0>)
 800490c:	f7fb fe7c 	bl	8000608 <__aeabi_dmul>
 8004910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004914:	e7bc      	b.n	8004890 <_dtoa_r+0x5e8>
 8004916:	d10c      	bne.n	8004932 <_dtoa_r+0x68a>
 8004918:	4b98      	ldr	r3, [pc, #608]	@ (8004b7c <_dtoa_r+0x8d4>)
 800491a:	2200      	movs	r2, #0
 800491c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004920:	f7fb fe72 	bl	8000608 <__aeabi_dmul>
 8004924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004928:	f7fc f8f4 	bl	8000b14 <__aeabi_dcmpge>
 800492c:	2800      	cmp	r0, #0
 800492e:	f000 8157 	beq.w	8004be0 <_dtoa_r+0x938>
 8004932:	2400      	movs	r4, #0
 8004934:	4625      	mov	r5, r4
 8004936:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004938:	43db      	mvns	r3, r3
 800493a:	9304      	str	r3, [sp, #16]
 800493c:	4656      	mov	r6, sl
 800493e:	2700      	movs	r7, #0
 8004940:	4621      	mov	r1, r4
 8004942:	4658      	mov	r0, fp
 8004944:	f001 f9fa 	bl	8005d3c <_Bfree>
 8004948:	2d00      	cmp	r5, #0
 800494a:	d0dc      	beq.n	8004906 <_dtoa_r+0x65e>
 800494c:	b12f      	cbz	r7, 800495a <_dtoa_r+0x6b2>
 800494e:	42af      	cmp	r7, r5
 8004950:	d003      	beq.n	800495a <_dtoa_r+0x6b2>
 8004952:	4639      	mov	r1, r7
 8004954:	4658      	mov	r0, fp
 8004956:	f001 f9f1 	bl	8005d3c <_Bfree>
 800495a:	4629      	mov	r1, r5
 800495c:	4658      	mov	r0, fp
 800495e:	f001 f9ed 	bl	8005d3c <_Bfree>
 8004962:	e7d0      	b.n	8004906 <_dtoa_r+0x65e>
 8004964:	9704      	str	r7, [sp, #16]
 8004966:	4633      	mov	r3, r6
 8004968:	461e      	mov	r6, r3
 800496a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800496e:	2a39      	cmp	r2, #57	@ 0x39
 8004970:	d107      	bne.n	8004982 <_dtoa_r+0x6da>
 8004972:	459a      	cmp	sl, r3
 8004974:	d1f8      	bne.n	8004968 <_dtoa_r+0x6c0>
 8004976:	9a04      	ldr	r2, [sp, #16]
 8004978:	3201      	adds	r2, #1
 800497a:	9204      	str	r2, [sp, #16]
 800497c:	2230      	movs	r2, #48	@ 0x30
 800497e:	f88a 2000 	strb.w	r2, [sl]
 8004982:	781a      	ldrb	r2, [r3, #0]
 8004984:	3201      	adds	r2, #1
 8004986:	701a      	strb	r2, [r3, #0]
 8004988:	e7bd      	b.n	8004906 <_dtoa_r+0x65e>
 800498a:	4b7b      	ldr	r3, [pc, #492]	@ (8004b78 <_dtoa_r+0x8d0>)
 800498c:	2200      	movs	r2, #0
 800498e:	f7fb fe3b 	bl	8000608 <__aeabi_dmul>
 8004992:	2200      	movs	r2, #0
 8004994:	2300      	movs	r3, #0
 8004996:	4604      	mov	r4, r0
 8004998:	460d      	mov	r5, r1
 800499a:	f7fc f89d 	bl	8000ad8 <__aeabi_dcmpeq>
 800499e:	2800      	cmp	r0, #0
 80049a0:	f43f aebb 	beq.w	800471a <_dtoa_r+0x472>
 80049a4:	e6f0      	b.n	8004788 <_dtoa_r+0x4e0>
 80049a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80049a8:	2a00      	cmp	r2, #0
 80049aa:	f000 80db 	beq.w	8004b64 <_dtoa_r+0x8bc>
 80049ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049b0:	2a01      	cmp	r2, #1
 80049b2:	f300 80bf 	bgt.w	8004b34 <_dtoa_r+0x88c>
 80049b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80049b8:	2a00      	cmp	r2, #0
 80049ba:	f000 80b7 	beq.w	8004b2c <_dtoa_r+0x884>
 80049be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80049c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80049c4:	4646      	mov	r6, r8
 80049c6:	9a08      	ldr	r2, [sp, #32]
 80049c8:	2101      	movs	r1, #1
 80049ca:	441a      	add	r2, r3
 80049cc:	4658      	mov	r0, fp
 80049ce:	4498      	add	r8, r3
 80049d0:	9208      	str	r2, [sp, #32]
 80049d2:	f001 fab1 	bl	8005f38 <__i2b>
 80049d6:	4605      	mov	r5, r0
 80049d8:	b15e      	cbz	r6, 80049f2 <_dtoa_r+0x74a>
 80049da:	9b08      	ldr	r3, [sp, #32]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	dd08      	ble.n	80049f2 <_dtoa_r+0x74a>
 80049e0:	42b3      	cmp	r3, r6
 80049e2:	9a08      	ldr	r2, [sp, #32]
 80049e4:	bfa8      	it	ge
 80049e6:	4633      	movge	r3, r6
 80049e8:	eba8 0803 	sub.w	r8, r8, r3
 80049ec:	1af6      	subs	r6, r6, r3
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	9308      	str	r3, [sp, #32]
 80049f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049f4:	b1f3      	cbz	r3, 8004a34 <_dtoa_r+0x78c>
 80049f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 80b7 	beq.w	8004b6c <_dtoa_r+0x8c4>
 80049fe:	b18c      	cbz	r4, 8004a24 <_dtoa_r+0x77c>
 8004a00:	4629      	mov	r1, r5
 8004a02:	4622      	mov	r2, r4
 8004a04:	4658      	mov	r0, fp
 8004a06:	f001 fb57 	bl	80060b8 <__pow5mult>
 8004a0a:	464a      	mov	r2, r9
 8004a0c:	4601      	mov	r1, r0
 8004a0e:	4605      	mov	r5, r0
 8004a10:	4658      	mov	r0, fp
 8004a12:	f001 faa7 	bl	8005f64 <__multiply>
 8004a16:	4649      	mov	r1, r9
 8004a18:	9004      	str	r0, [sp, #16]
 8004a1a:	4658      	mov	r0, fp
 8004a1c:	f001 f98e 	bl	8005d3c <_Bfree>
 8004a20:	9b04      	ldr	r3, [sp, #16]
 8004a22:	4699      	mov	r9, r3
 8004a24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a26:	1b1a      	subs	r2, r3, r4
 8004a28:	d004      	beq.n	8004a34 <_dtoa_r+0x78c>
 8004a2a:	4649      	mov	r1, r9
 8004a2c:	4658      	mov	r0, fp
 8004a2e:	f001 fb43 	bl	80060b8 <__pow5mult>
 8004a32:	4681      	mov	r9, r0
 8004a34:	2101      	movs	r1, #1
 8004a36:	4658      	mov	r0, fp
 8004a38:	f001 fa7e 	bl	8005f38 <__i2b>
 8004a3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004a3e:	4604      	mov	r4, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 81cf 	beq.w	8004de4 <_dtoa_r+0xb3c>
 8004a46:	461a      	mov	r2, r3
 8004a48:	4601      	mov	r1, r0
 8004a4a:	4658      	mov	r0, fp
 8004a4c:	f001 fb34 	bl	80060b8 <__pow5mult>
 8004a50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	4604      	mov	r4, r0
 8004a56:	f300 8095 	bgt.w	8004b84 <_dtoa_r+0x8dc>
 8004a5a:	9b02      	ldr	r3, [sp, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f040 8087 	bne.w	8004b70 <_dtoa_r+0x8c8>
 8004a62:	9b03      	ldr	r3, [sp, #12]
 8004a64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f040 8089 	bne.w	8004b80 <_dtoa_r+0x8d8>
 8004a6e:	9b03      	ldr	r3, [sp, #12]
 8004a70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a74:	0d1b      	lsrs	r3, r3, #20
 8004a76:	051b      	lsls	r3, r3, #20
 8004a78:	b12b      	cbz	r3, 8004a86 <_dtoa_r+0x7de>
 8004a7a:	9b08      	ldr	r3, [sp, #32]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	9308      	str	r3, [sp, #32]
 8004a80:	f108 0801 	add.w	r8, r8, #1
 8004a84:	2301      	movs	r3, #1
 8004a86:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 81b0 	beq.w	8004df0 <_dtoa_r+0xb48>
 8004a90:	6923      	ldr	r3, [r4, #16]
 8004a92:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004a96:	6918      	ldr	r0, [r3, #16]
 8004a98:	f001 fa02 	bl	8005ea0 <__hi0bits>
 8004a9c:	f1c0 0020 	rsb	r0, r0, #32
 8004aa0:	9b08      	ldr	r3, [sp, #32]
 8004aa2:	4418      	add	r0, r3
 8004aa4:	f010 001f 	ands.w	r0, r0, #31
 8004aa8:	d077      	beq.n	8004b9a <_dtoa_r+0x8f2>
 8004aaa:	f1c0 0320 	rsb	r3, r0, #32
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	dd6b      	ble.n	8004b8a <_dtoa_r+0x8e2>
 8004ab2:	9b08      	ldr	r3, [sp, #32]
 8004ab4:	f1c0 001c 	rsb	r0, r0, #28
 8004ab8:	4403      	add	r3, r0
 8004aba:	4480      	add	r8, r0
 8004abc:	4406      	add	r6, r0
 8004abe:	9308      	str	r3, [sp, #32]
 8004ac0:	f1b8 0f00 	cmp.w	r8, #0
 8004ac4:	dd05      	ble.n	8004ad2 <_dtoa_r+0x82a>
 8004ac6:	4649      	mov	r1, r9
 8004ac8:	4642      	mov	r2, r8
 8004aca:	4658      	mov	r0, fp
 8004acc:	f001 fb4e 	bl	800616c <__lshift>
 8004ad0:	4681      	mov	r9, r0
 8004ad2:	9b08      	ldr	r3, [sp, #32]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	dd05      	ble.n	8004ae4 <_dtoa_r+0x83c>
 8004ad8:	4621      	mov	r1, r4
 8004ada:	461a      	mov	r2, r3
 8004adc:	4658      	mov	r0, fp
 8004ade:	f001 fb45 	bl	800616c <__lshift>
 8004ae2:	4604      	mov	r4, r0
 8004ae4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d059      	beq.n	8004b9e <_dtoa_r+0x8f6>
 8004aea:	4621      	mov	r1, r4
 8004aec:	4648      	mov	r0, r9
 8004aee:	f001 fba9 	bl	8006244 <__mcmp>
 8004af2:	2800      	cmp	r0, #0
 8004af4:	da53      	bge.n	8004b9e <_dtoa_r+0x8f6>
 8004af6:	1e7b      	subs	r3, r7, #1
 8004af8:	9304      	str	r3, [sp, #16]
 8004afa:	4649      	mov	r1, r9
 8004afc:	2300      	movs	r3, #0
 8004afe:	220a      	movs	r2, #10
 8004b00:	4658      	mov	r0, fp
 8004b02:	f001 f93d 	bl	8005d80 <__multadd>
 8004b06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b08:	4681      	mov	r9, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 8172 	beq.w	8004df4 <_dtoa_r+0xb4c>
 8004b10:	2300      	movs	r3, #0
 8004b12:	4629      	mov	r1, r5
 8004b14:	220a      	movs	r2, #10
 8004b16:	4658      	mov	r0, fp
 8004b18:	f001 f932 	bl	8005d80 <__multadd>
 8004b1c:	9b00      	ldr	r3, [sp, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	4605      	mov	r5, r0
 8004b22:	dc67      	bgt.n	8004bf4 <_dtoa_r+0x94c>
 8004b24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	dc41      	bgt.n	8004bae <_dtoa_r+0x906>
 8004b2a:	e063      	b.n	8004bf4 <_dtoa_r+0x94c>
 8004b2c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004b2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004b32:	e746      	b.n	80049c2 <_dtoa_r+0x71a>
 8004b34:	9b07      	ldr	r3, [sp, #28]
 8004b36:	1e5c      	subs	r4, r3, #1
 8004b38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b3a:	42a3      	cmp	r3, r4
 8004b3c:	bfbf      	itttt	lt
 8004b3e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004b40:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004b42:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004b44:	1ae3      	sublt	r3, r4, r3
 8004b46:	bfb4      	ite	lt
 8004b48:	18d2      	addlt	r2, r2, r3
 8004b4a:	1b1c      	subge	r4, r3, r4
 8004b4c:	9b07      	ldr	r3, [sp, #28]
 8004b4e:	bfbc      	itt	lt
 8004b50:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004b52:	2400      	movlt	r4, #0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	bfb5      	itete	lt
 8004b58:	eba8 0603 	sublt.w	r6, r8, r3
 8004b5c:	9b07      	ldrge	r3, [sp, #28]
 8004b5e:	2300      	movlt	r3, #0
 8004b60:	4646      	movge	r6, r8
 8004b62:	e730      	b.n	80049c6 <_dtoa_r+0x71e>
 8004b64:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004b66:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004b68:	4646      	mov	r6, r8
 8004b6a:	e735      	b.n	80049d8 <_dtoa_r+0x730>
 8004b6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004b6e:	e75c      	b.n	8004a2a <_dtoa_r+0x782>
 8004b70:	2300      	movs	r3, #0
 8004b72:	e788      	b.n	8004a86 <_dtoa_r+0x7de>
 8004b74:	3fe00000 	.word	0x3fe00000
 8004b78:	40240000 	.word	0x40240000
 8004b7c:	40140000 	.word	0x40140000
 8004b80:	9b02      	ldr	r3, [sp, #8]
 8004b82:	e780      	b.n	8004a86 <_dtoa_r+0x7de>
 8004b84:	2300      	movs	r3, #0
 8004b86:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b88:	e782      	b.n	8004a90 <_dtoa_r+0x7e8>
 8004b8a:	d099      	beq.n	8004ac0 <_dtoa_r+0x818>
 8004b8c:	9a08      	ldr	r2, [sp, #32]
 8004b8e:	331c      	adds	r3, #28
 8004b90:	441a      	add	r2, r3
 8004b92:	4498      	add	r8, r3
 8004b94:	441e      	add	r6, r3
 8004b96:	9208      	str	r2, [sp, #32]
 8004b98:	e792      	b.n	8004ac0 <_dtoa_r+0x818>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	e7f6      	b.n	8004b8c <_dtoa_r+0x8e4>
 8004b9e:	9b07      	ldr	r3, [sp, #28]
 8004ba0:	9704      	str	r7, [sp, #16]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	dc20      	bgt.n	8004be8 <_dtoa_r+0x940>
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	dd1e      	ble.n	8004bec <_dtoa_r+0x944>
 8004bae:	9b00      	ldr	r3, [sp, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f47f aec0 	bne.w	8004936 <_dtoa_r+0x68e>
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	2205      	movs	r2, #5
 8004bba:	4658      	mov	r0, fp
 8004bbc:	f001 f8e0 	bl	8005d80 <__multadd>
 8004bc0:	4601      	mov	r1, r0
 8004bc2:	4604      	mov	r4, r0
 8004bc4:	4648      	mov	r0, r9
 8004bc6:	f001 fb3d 	bl	8006244 <__mcmp>
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	f77f aeb3 	ble.w	8004936 <_dtoa_r+0x68e>
 8004bd0:	4656      	mov	r6, sl
 8004bd2:	2331      	movs	r3, #49	@ 0x31
 8004bd4:	f806 3b01 	strb.w	r3, [r6], #1
 8004bd8:	9b04      	ldr	r3, [sp, #16]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	9304      	str	r3, [sp, #16]
 8004bde:	e6ae      	b.n	800493e <_dtoa_r+0x696>
 8004be0:	9c07      	ldr	r4, [sp, #28]
 8004be2:	9704      	str	r7, [sp, #16]
 8004be4:	4625      	mov	r5, r4
 8004be6:	e7f3      	b.n	8004bd0 <_dtoa_r+0x928>
 8004be8:	9b07      	ldr	r3, [sp, #28]
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 8104 	beq.w	8004dfc <_dtoa_r+0xb54>
 8004bf4:	2e00      	cmp	r6, #0
 8004bf6:	dd05      	ble.n	8004c04 <_dtoa_r+0x95c>
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	4632      	mov	r2, r6
 8004bfc:	4658      	mov	r0, fp
 8004bfe:	f001 fab5 	bl	800616c <__lshift>
 8004c02:	4605      	mov	r5, r0
 8004c04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d05a      	beq.n	8004cc0 <_dtoa_r+0xa18>
 8004c0a:	6869      	ldr	r1, [r5, #4]
 8004c0c:	4658      	mov	r0, fp
 8004c0e:	f001 f855 	bl	8005cbc <_Balloc>
 8004c12:	4606      	mov	r6, r0
 8004c14:	b928      	cbnz	r0, 8004c22 <_dtoa_r+0x97a>
 8004c16:	4b84      	ldr	r3, [pc, #528]	@ (8004e28 <_dtoa_r+0xb80>)
 8004c18:	4602      	mov	r2, r0
 8004c1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004c1e:	f7ff bb5a 	b.w	80042d6 <_dtoa_r+0x2e>
 8004c22:	692a      	ldr	r2, [r5, #16]
 8004c24:	3202      	adds	r2, #2
 8004c26:	0092      	lsls	r2, r2, #2
 8004c28:	f105 010c 	add.w	r1, r5, #12
 8004c2c:	300c      	adds	r0, #12
 8004c2e:	f7ff fa94 	bl	800415a <memcpy>
 8004c32:	2201      	movs	r2, #1
 8004c34:	4631      	mov	r1, r6
 8004c36:	4658      	mov	r0, fp
 8004c38:	f001 fa98 	bl	800616c <__lshift>
 8004c3c:	f10a 0301 	add.w	r3, sl, #1
 8004c40:	9307      	str	r3, [sp, #28]
 8004c42:	9b00      	ldr	r3, [sp, #0]
 8004c44:	4453      	add	r3, sl
 8004c46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c48:	9b02      	ldr	r3, [sp, #8]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	462f      	mov	r7, r5
 8004c50:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c52:	4605      	mov	r5, r0
 8004c54:	9b07      	ldr	r3, [sp, #28]
 8004c56:	4621      	mov	r1, r4
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	4648      	mov	r0, r9
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	f7ff fa99 	bl	8004194 <quorem>
 8004c62:	4639      	mov	r1, r7
 8004c64:	9002      	str	r0, [sp, #8]
 8004c66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004c6a:	4648      	mov	r0, r9
 8004c6c:	f001 faea 	bl	8006244 <__mcmp>
 8004c70:	462a      	mov	r2, r5
 8004c72:	9008      	str	r0, [sp, #32]
 8004c74:	4621      	mov	r1, r4
 8004c76:	4658      	mov	r0, fp
 8004c78:	f001 fb00 	bl	800627c <__mdiff>
 8004c7c:	68c2      	ldr	r2, [r0, #12]
 8004c7e:	4606      	mov	r6, r0
 8004c80:	bb02      	cbnz	r2, 8004cc4 <_dtoa_r+0xa1c>
 8004c82:	4601      	mov	r1, r0
 8004c84:	4648      	mov	r0, r9
 8004c86:	f001 fadd 	bl	8006244 <__mcmp>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	4631      	mov	r1, r6
 8004c8e:	4658      	mov	r0, fp
 8004c90:	920e      	str	r2, [sp, #56]	@ 0x38
 8004c92:	f001 f853 	bl	8005d3c <_Bfree>
 8004c96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004c9a:	9e07      	ldr	r6, [sp, #28]
 8004c9c:	ea43 0102 	orr.w	r1, r3, r2
 8004ca0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ca2:	4319      	orrs	r1, r3
 8004ca4:	d110      	bne.n	8004cc8 <_dtoa_r+0xa20>
 8004ca6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004caa:	d029      	beq.n	8004d00 <_dtoa_r+0xa58>
 8004cac:	9b08      	ldr	r3, [sp, #32]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	dd02      	ble.n	8004cb8 <_dtoa_r+0xa10>
 8004cb2:	9b02      	ldr	r3, [sp, #8]
 8004cb4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004cb8:	9b00      	ldr	r3, [sp, #0]
 8004cba:	f883 8000 	strb.w	r8, [r3]
 8004cbe:	e63f      	b.n	8004940 <_dtoa_r+0x698>
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	e7bb      	b.n	8004c3c <_dtoa_r+0x994>
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	e7e1      	b.n	8004c8c <_dtoa_r+0x9e4>
 8004cc8:	9b08      	ldr	r3, [sp, #32]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	db04      	blt.n	8004cd8 <_dtoa_r+0xa30>
 8004cce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004cd0:	430b      	orrs	r3, r1
 8004cd2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	d120      	bne.n	8004d1a <_dtoa_r+0xa72>
 8004cd8:	2a00      	cmp	r2, #0
 8004cda:	dded      	ble.n	8004cb8 <_dtoa_r+0xa10>
 8004cdc:	4649      	mov	r1, r9
 8004cde:	2201      	movs	r2, #1
 8004ce0:	4658      	mov	r0, fp
 8004ce2:	f001 fa43 	bl	800616c <__lshift>
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	4681      	mov	r9, r0
 8004cea:	f001 faab 	bl	8006244 <__mcmp>
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	dc03      	bgt.n	8004cfa <_dtoa_r+0xa52>
 8004cf2:	d1e1      	bne.n	8004cb8 <_dtoa_r+0xa10>
 8004cf4:	f018 0f01 	tst.w	r8, #1
 8004cf8:	d0de      	beq.n	8004cb8 <_dtoa_r+0xa10>
 8004cfa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004cfe:	d1d8      	bne.n	8004cb2 <_dtoa_r+0xa0a>
 8004d00:	9a00      	ldr	r2, [sp, #0]
 8004d02:	2339      	movs	r3, #57	@ 0x39
 8004d04:	7013      	strb	r3, [r2, #0]
 8004d06:	4633      	mov	r3, r6
 8004d08:	461e      	mov	r6, r3
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004d10:	2a39      	cmp	r2, #57	@ 0x39
 8004d12:	d052      	beq.n	8004dba <_dtoa_r+0xb12>
 8004d14:	3201      	adds	r2, #1
 8004d16:	701a      	strb	r2, [r3, #0]
 8004d18:	e612      	b.n	8004940 <_dtoa_r+0x698>
 8004d1a:	2a00      	cmp	r2, #0
 8004d1c:	dd07      	ble.n	8004d2e <_dtoa_r+0xa86>
 8004d1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004d22:	d0ed      	beq.n	8004d00 <_dtoa_r+0xa58>
 8004d24:	9a00      	ldr	r2, [sp, #0]
 8004d26:	f108 0301 	add.w	r3, r8, #1
 8004d2a:	7013      	strb	r3, [r2, #0]
 8004d2c:	e608      	b.n	8004940 <_dtoa_r+0x698>
 8004d2e:	9b07      	ldr	r3, [sp, #28]
 8004d30:	9a07      	ldr	r2, [sp, #28]
 8004d32:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004d36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d028      	beq.n	8004d8e <_dtoa_r+0xae6>
 8004d3c:	4649      	mov	r1, r9
 8004d3e:	2300      	movs	r3, #0
 8004d40:	220a      	movs	r2, #10
 8004d42:	4658      	mov	r0, fp
 8004d44:	f001 f81c 	bl	8005d80 <__multadd>
 8004d48:	42af      	cmp	r7, r5
 8004d4a:	4681      	mov	r9, r0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	f04f 020a 	mov.w	r2, #10
 8004d54:	4639      	mov	r1, r7
 8004d56:	4658      	mov	r0, fp
 8004d58:	d107      	bne.n	8004d6a <_dtoa_r+0xac2>
 8004d5a:	f001 f811 	bl	8005d80 <__multadd>
 8004d5e:	4607      	mov	r7, r0
 8004d60:	4605      	mov	r5, r0
 8004d62:	9b07      	ldr	r3, [sp, #28]
 8004d64:	3301      	adds	r3, #1
 8004d66:	9307      	str	r3, [sp, #28]
 8004d68:	e774      	b.n	8004c54 <_dtoa_r+0x9ac>
 8004d6a:	f001 f809 	bl	8005d80 <__multadd>
 8004d6e:	4629      	mov	r1, r5
 8004d70:	4607      	mov	r7, r0
 8004d72:	2300      	movs	r3, #0
 8004d74:	220a      	movs	r2, #10
 8004d76:	4658      	mov	r0, fp
 8004d78:	f001 f802 	bl	8005d80 <__multadd>
 8004d7c:	4605      	mov	r5, r0
 8004d7e:	e7f0      	b.n	8004d62 <_dtoa_r+0xaba>
 8004d80:	9b00      	ldr	r3, [sp, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	bfcc      	ite	gt
 8004d86:	461e      	movgt	r6, r3
 8004d88:	2601      	movle	r6, #1
 8004d8a:	4456      	add	r6, sl
 8004d8c:	2700      	movs	r7, #0
 8004d8e:	4649      	mov	r1, r9
 8004d90:	2201      	movs	r2, #1
 8004d92:	4658      	mov	r0, fp
 8004d94:	f001 f9ea 	bl	800616c <__lshift>
 8004d98:	4621      	mov	r1, r4
 8004d9a:	4681      	mov	r9, r0
 8004d9c:	f001 fa52 	bl	8006244 <__mcmp>
 8004da0:	2800      	cmp	r0, #0
 8004da2:	dcb0      	bgt.n	8004d06 <_dtoa_r+0xa5e>
 8004da4:	d102      	bne.n	8004dac <_dtoa_r+0xb04>
 8004da6:	f018 0f01 	tst.w	r8, #1
 8004daa:	d1ac      	bne.n	8004d06 <_dtoa_r+0xa5e>
 8004dac:	4633      	mov	r3, r6
 8004dae:	461e      	mov	r6, r3
 8004db0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004db4:	2a30      	cmp	r2, #48	@ 0x30
 8004db6:	d0fa      	beq.n	8004dae <_dtoa_r+0xb06>
 8004db8:	e5c2      	b.n	8004940 <_dtoa_r+0x698>
 8004dba:	459a      	cmp	sl, r3
 8004dbc:	d1a4      	bne.n	8004d08 <_dtoa_r+0xa60>
 8004dbe:	9b04      	ldr	r3, [sp, #16]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	9304      	str	r3, [sp, #16]
 8004dc4:	2331      	movs	r3, #49	@ 0x31
 8004dc6:	f88a 3000 	strb.w	r3, [sl]
 8004dca:	e5b9      	b.n	8004940 <_dtoa_r+0x698>
 8004dcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004dce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004e2c <_dtoa_r+0xb84>
 8004dd2:	b11b      	cbz	r3, 8004ddc <_dtoa_r+0xb34>
 8004dd4:	f10a 0308 	add.w	r3, sl, #8
 8004dd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004dda:	6013      	str	r3, [r2, #0]
 8004ddc:	4650      	mov	r0, sl
 8004dde:	b019      	add	sp, #100	@ 0x64
 8004de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	f77f ae37 	ble.w	8004a5a <_dtoa_r+0x7b2>
 8004dec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004dee:	930a      	str	r3, [sp, #40]	@ 0x28
 8004df0:	2001      	movs	r0, #1
 8004df2:	e655      	b.n	8004aa0 <_dtoa_r+0x7f8>
 8004df4:	9b00      	ldr	r3, [sp, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f77f aed6 	ble.w	8004ba8 <_dtoa_r+0x900>
 8004dfc:	4656      	mov	r6, sl
 8004dfe:	4621      	mov	r1, r4
 8004e00:	4648      	mov	r0, r9
 8004e02:	f7ff f9c7 	bl	8004194 <quorem>
 8004e06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004e0a:	f806 8b01 	strb.w	r8, [r6], #1
 8004e0e:	9b00      	ldr	r3, [sp, #0]
 8004e10:	eba6 020a 	sub.w	r2, r6, sl
 8004e14:	4293      	cmp	r3, r2
 8004e16:	ddb3      	ble.n	8004d80 <_dtoa_r+0xad8>
 8004e18:	4649      	mov	r1, r9
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	220a      	movs	r2, #10
 8004e1e:	4658      	mov	r0, fp
 8004e20:	f000 ffae 	bl	8005d80 <__multadd>
 8004e24:	4681      	mov	r9, r0
 8004e26:	e7ea      	b.n	8004dfe <_dtoa_r+0xb56>
 8004e28:	08007645 	.word	0x08007645
 8004e2c:	080075c9 	.word	0x080075c9

08004e30 <rshift>:
 8004e30:	6903      	ldr	r3, [r0, #16]
 8004e32:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8004e36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e3a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8004e3e:	f100 0414 	add.w	r4, r0, #20
 8004e42:	dd45      	ble.n	8004ed0 <rshift+0xa0>
 8004e44:	f011 011f 	ands.w	r1, r1, #31
 8004e48:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8004e4c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8004e50:	d10c      	bne.n	8004e6c <rshift+0x3c>
 8004e52:	f100 0710 	add.w	r7, r0, #16
 8004e56:	4629      	mov	r1, r5
 8004e58:	42b1      	cmp	r1, r6
 8004e5a:	d334      	bcc.n	8004ec6 <rshift+0x96>
 8004e5c:	1a9b      	subs	r3, r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	1eea      	subs	r2, r5, #3
 8004e62:	4296      	cmp	r6, r2
 8004e64:	bf38      	it	cc
 8004e66:	2300      	movcc	r3, #0
 8004e68:	4423      	add	r3, r4
 8004e6a:	e015      	b.n	8004e98 <rshift+0x68>
 8004e6c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8004e70:	f1c1 0820 	rsb	r8, r1, #32
 8004e74:	40cf      	lsrs	r7, r1
 8004e76:	f105 0e04 	add.w	lr, r5, #4
 8004e7a:	46a1      	mov	r9, r4
 8004e7c:	4576      	cmp	r6, lr
 8004e7e:	46f4      	mov	ip, lr
 8004e80:	d815      	bhi.n	8004eae <rshift+0x7e>
 8004e82:	1a9a      	subs	r2, r3, r2
 8004e84:	0092      	lsls	r2, r2, #2
 8004e86:	3a04      	subs	r2, #4
 8004e88:	3501      	adds	r5, #1
 8004e8a:	42ae      	cmp	r6, r5
 8004e8c:	bf38      	it	cc
 8004e8e:	2200      	movcc	r2, #0
 8004e90:	18a3      	adds	r3, r4, r2
 8004e92:	50a7      	str	r7, [r4, r2]
 8004e94:	b107      	cbz	r7, 8004e98 <rshift+0x68>
 8004e96:	3304      	adds	r3, #4
 8004e98:	1b1a      	subs	r2, r3, r4
 8004e9a:	42a3      	cmp	r3, r4
 8004e9c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8004ea0:	bf08      	it	eq
 8004ea2:	2300      	moveq	r3, #0
 8004ea4:	6102      	str	r2, [r0, #16]
 8004ea6:	bf08      	it	eq
 8004ea8:	6143      	streq	r3, [r0, #20]
 8004eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004eae:	f8dc c000 	ldr.w	ip, [ip]
 8004eb2:	fa0c fc08 	lsl.w	ip, ip, r8
 8004eb6:	ea4c 0707 	orr.w	r7, ip, r7
 8004eba:	f849 7b04 	str.w	r7, [r9], #4
 8004ebe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004ec2:	40cf      	lsrs	r7, r1
 8004ec4:	e7da      	b.n	8004e7c <rshift+0x4c>
 8004ec6:	f851 cb04 	ldr.w	ip, [r1], #4
 8004eca:	f847 cf04 	str.w	ip, [r7, #4]!
 8004ece:	e7c3      	b.n	8004e58 <rshift+0x28>
 8004ed0:	4623      	mov	r3, r4
 8004ed2:	e7e1      	b.n	8004e98 <rshift+0x68>

08004ed4 <__hexdig_fun>:
 8004ed4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8004ed8:	2b09      	cmp	r3, #9
 8004eda:	d802      	bhi.n	8004ee2 <__hexdig_fun+0xe>
 8004edc:	3820      	subs	r0, #32
 8004ede:	b2c0      	uxtb	r0, r0
 8004ee0:	4770      	bx	lr
 8004ee2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8004ee6:	2b05      	cmp	r3, #5
 8004ee8:	d801      	bhi.n	8004eee <__hexdig_fun+0x1a>
 8004eea:	3847      	subs	r0, #71	@ 0x47
 8004eec:	e7f7      	b.n	8004ede <__hexdig_fun+0xa>
 8004eee:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8004ef2:	2b05      	cmp	r3, #5
 8004ef4:	d801      	bhi.n	8004efa <__hexdig_fun+0x26>
 8004ef6:	3827      	subs	r0, #39	@ 0x27
 8004ef8:	e7f1      	b.n	8004ede <__hexdig_fun+0xa>
 8004efa:	2000      	movs	r0, #0
 8004efc:	4770      	bx	lr
	...

08004f00 <__gethex>:
 8004f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f04:	b085      	sub	sp, #20
 8004f06:	468a      	mov	sl, r1
 8004f08:	9302      	str	r3, [sp, #8]
 8004f0a:	680b      	ldr	r3, [r1, #0]
 8004f0c:	9001      	str	r0, [sp, #4]
 8004f0e:	4690      	mov	r8, r2
 8004f10:	1c9c      	adds	r4, r3, #2
 8004f12:	46a1      	mov	r9, r4
 8004f14:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004f18:	2830      	cmp	r0, #48	@ 0x30
 8004f1a:	d0fa      	beq.n	8004f12 <__gethex+0x12>
 8004f1c:	eba9 0303 	sub.w	r3, r9, r3
 8004f20:	f1a3 0b02 	sub.w	fp, r3, #2
 8004f24:	f7ff ffd6 	bl	8004ed4 <__hexdig_fun>
 8004f28:	4605      	mov	r5, r0
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	d168      	bne.n	8005000 <__gethex+0x100>
 8004f2e:	49a0      	ldr	r1, [pc, #640]	@ (80051b0 <__gethex+0x2b0>)
 8004f30:	2201      	movs	r2, #1
 8004f32:	4648      	mov	r0, r9
 8004f34:	f7ff f8c6 	bl	80040c4 <strncmp>
 8004f38:	4607      	mov	r7, r0
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	d167      	bne.n	800500e <__gethex+0x10e>
 8004f3e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8004f42:	4626      	mov	r6, r4
 8004f44:	f7ff ffc6 	bl	8004ed4 <__hexdig_fun>
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	d062      	beq.n	8005012 <__gethex+0x112>
 8004f4c:	4623      	mov	r3, r4
 8004f4e:	7818      	ldrb	r0, [r3, #0]
 8004f50:	2830      	cmp	r0, #48	@ 0x30
 8004f52:	4699      	mov	r9, r3
 8004f54:	f103 0301 	add.w	r3, r3, #1
 8004f58:	d0f9      	beq.n	8004f4e <__gethex+0x4e>
 8004f5a:	f7ff ffbb 	bl	8004ed4 <__hexdig_fun>
 8004f5e:	fab0 f580 	clz	r5, r0
 8004f62:	096d      	lsrs	r5, r5, #5
 8004f64:	f04f 0b01 	mov.w	fp, #1
 8004f68:	464a      	mov	r2, r9
 8004f6a:	4616      	mov	r6, r2
 8004f6c:	3201      	adds	r2, #1
 8004f6e:	7830      	ldrb	r0, [r6, #0]
 8004f70:	f7ff ffb0 	bl	8004ed4 <__hexdig_fun>
 8004f74:	2800      	cmp	r0, #0
 8004f76:	d1f8      	bne.n	8004f6a <__gethex+0x6a>
 8004f78:	498d      	ldr	r1, [pc, #564]	@ (80051b0 <__gethex+0x2b0>)
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	f7ff f8a1 	bl	80040c4 <strncmp>
 8004f82:	2800      	cmp	r0, #0
 8004f84:	d13f      	bne.n	8005006 <__gethex+0x106>
 8004f86:	b944      	cbnz	r4, 8004f9a <__gethex+0x9a>
 8004f88:	1c74      	adds	r4, r6, #1
 8004f8a:	4622      	mov	r2, r4
 8004f8c:	4616      	mov	r6, r2
 8004f8e:	3201      	adds	r2, #1
 8004f90:	7830      	ldrb	r0, [r6, #0]
 8004f92:	f7ff ff9f 	bl	8004ed4 <__hexdig_fun>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d1f8      	bne.n	8004f8c <__gethex+0x8c>
 8004f9a:	1ba4      	subs	r4, r4, r6
 8004f9c:	00a7      	lsls	r7, r4, #2
 8004f9e:	7833      	ldrb	r3, [r6, #0]
 8004fa0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8004fa4:	2b50      	cmp	r3, #80	@ 0x50
 8004fa6:	d13e      	bne.n	8005026 <__gethex+0x126>
 8004fa8:	7873      	ldrb	r3, [r6, #1]
 8004faa:	2b2b      	cmp	r3, #43	@ 0x2b
 8004fac:	d033      	beq.n	8005016 <__gethex+0x116>
 8004fae:	2b2d      	cmp	r3, #45	@ 0x2d
 8004fb0:	d034      	beq.n	800501c <__gethex+0x11c>
 8004fb2:	1c71      	adds	r1, r6, #1
 8004fb4:	2400      	movs	r4, #0
 8004fb6:	7808      	ldrb	r0, [r1, #0]
 8004fb8:	f7ff ff8c 	bl	8004ed4 <__hexdig_fun>
 8004fbc:	1e43      	subs	r3, r0, #1
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b18      	cmp	r3, #24
 8004fc2:	d830      	bhi.n	8005026 <__gethex+0x126>
 8004fc4:	f1a0 0210 	sub.w	r2, r0, #16
 8004fc8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004fcc:	f7ff ff82 	bl	8004ed4 <__hexdig_fun>
 8004fd0:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8004fd4:	fa5f fc8c 	uxtb.w	ip, ip
 8004fd8:	f1bc 0f18 	cmp.w	ip, #24
 8004fdc:	f04f 030a 	mov.w	r3, #10
 8004fe0:	d91e      	bls.n	8005020 <__gethex+0x120>
 8004fe2:	b104      	cbz	r4, 8004fe6 <__gethex+0xe6>
 8004fe4:	4252      	negs	r2, r2
 8004fe6:	4417      	add	r7, r2
 8004fe8:	f8ca 1000 	str.w	r1, [sl]
 8004fec:	b1ed      	cbz	r5, 800502a <__gethex+0x12a>
 8004fee:	f1bb 0f00 	cmp.w	fp, #0
 8004ff2:	bf0c      	ite	eq
 8004ff4:	2506      	moveq	r5, #6
 8004ff6:	2500      	movne	r5, #0
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	b005      	add	sp, #20
 8004ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005000:	2500      	movs	r5, #0
 8005002:	462c      	mov	r4, r5
 8005004:	e7b0      	b.n	8004f68 <__gethex+0x68>
 8005006:	2c00      	cmp	r4, #0
 8005008:	d1c7      	bne.n	8004f9a <__gethex+0x9a>
 800500a:	4627      	mov	r7, r4
 800500c:	e7c7      	b.n	8004f9e <__gethex+0x9e>
 800500e:	464e      	mov	r6, r9
 8005010:	462f      	mov	r7, r5
 8005012:	2501      	movs	r5, #1
 8005014:	e7c3      	b.n	8004f9e <__gethex+0x9e>
 8005016:	2400      	movs	r4, #0
 8005018:	1cb1      	adds	r1, r6, #2
 800501a:	e7cc      	b.n	8004fb6 <__gethex+0xb6>
 800501c:	2401      	movs	r4, #1
 800501e:	e7fb      	b.n	8005018 <__gethex+0x118>
 8005020:	fb03 0002 	mla	r0, r3, r2, r0
 8005024:	e7ce      	b.n	8004fc4 <__gethex+0xc4>
 8005026:	4631      	mov	r1, r6
 8005028:	e7de      	b.n	8004fe8 <__gethex+0xe8>
 800502a:	eba6 0309 	sub.w	r3, r6, r9
 800502e:	3b01      	subs	r3, #1
 8005030:	4629      	mov	r1, r5
 8005032:	2b07      	cmp	r3, #7
 8005034:	dc0a      	bgt.n	800504c <__gethex+0x14c>
 8005036:	9801      	ldr	r0, [sp, #4]
 8005038:	f000 fe40 	bl	8005cbc <_Balloc>
 800503c:	4604      	mov	r4, r0
 800503e:	b940      	cbnz	r0, 8005052 <__gethex+0x152>
 8005040:	4b5c      	ldr	r3, [pc, #368]	@ (80051b4 <__gethex+0x2b4>)
 8005042:	4602      	mov	r2, r0
 8005044:	21e4      	movs	r1, #228	@ 0xe4
 8005046:	485c      	ldr	r0, [pc, #368]	@ (80051b8 <__gethex+0x2b8>)
 8005048:	f001 fcf2 	bl	8006a30 <__assert_func>
 800504c:	3101      	adds	r1, #1
 800504e:	105b      	asrs	r3, r3, #1
 8005050:	e7ef      	b.n	8005032 <__gethex+0x132>
 8005052:	f100 0a14 	add.w	sl, r0, #20
 8005056:	2300      	movs	r3, #0
 8005058:	4655      	mov	r5, sl
 800505a:	469b      	mov	fp, r3
 800505c:	45b1      	cmp	r9, r6
 800505e:	d337      	bcc.n	80050d0 <__gethex+0x1d0>
 8005060:	f845 bb04 	str.w	fp, [r5], #4
 8005064:	eba5 050a 	sub.w	r5, r5, sl
 8005068:	10ad      	asrs	r5, r5, #2
 800506a:	6125      	str	r5, [r4, #16]
 800506c:	4658      	mov	r0, fp
 800506e:	f000 ff17 	bl	8005ea0 <__hi0bits>
 8005072:	016d      	lsls	r5, r5, #5
 8005074:	f8d8 6000 	ldr.w	r6, [r8]
 8005078:	1a2d      	subs	r5, r5, r0
 800507a:	42b5      	cmp	r5, r6
 800507c:	dd54      	ble.n	8005128 <__gethex+0x228>
 800507e:	1bad      	subs	r5, r5, r6
 8005080:	4629      	mov	r1, r5
 8005082:	4620      	mov	r0, r4
 8005084:	f001 faab 	bl	80065de <__any_on>
 8005088:	4681      	mov	r9, r0
 800508a:	b178      	cbz	r0, 80050ac <__gethex+0x1ac>
 800508c:	1e6b      	subs	r3, r5, #1
 800508e:	1159      	asrs	r1, r3, #5
 8005090:	f003 021f 	and.w	r2, r3, #31
 8005094:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8005098:	f04f 0901 	mov.w	r9, #1
 800509c:	fa09 f202 	lsl.w	r2, r9, r2
 80050a0:	420a      	tst	r2, r1
 80050a2:	d003      	beq.n	80050ac <__gethex+0x1ac>
 80050a4:	454b      	cmp	r3, r9
 80050a6:	dc36      	bgt.n	8005116 <__gethex+0x216>
 80050a8:	f04f 0902 	mov.w	r9, #2
 80050ac:	4629      	mov	r1, r5
 80050ae:	4620      	mov	r0, r4
 80050b0:	f7ff febe 	bl	8004e30 <rshift>
 80050b4:	442f      	add	r7, r5
 80050b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80050ba:	42bb      	cmp	r3, r7
 80050bc:	da42      	bge.n	8005144 <__gethex+0x244>
 80050be:	9801      	ldr	r0, [sp, #4]
 80050c0:	4621      	mov	r1, r4
 80050c2:	f000 fe3b 	bl	8005d3c <_Bfree>
 80050c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80050c8:	2300      	movs	r3, #0
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	25a3      	movs	r5, #163	@ 0xa3
 80050ce:	e793      	b.n	8004ff8 <__gethex+0xf8>
 80050d0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80050d4:	2a2e      	cmp	r2, #46	@ 0x2e
 80050d6:	d012      	beq.n	80050fe <__gethex+0x1fe>
 80050d8:	2b20      	cmp	r3, #32
 80050da:	d104      	bne.n	80050e6 <__gethex+0x1e6>
 80050dc:	f845 bb04 	str.w	fp, [r5], #4
 80050e0:	f04f 0b00 	mov.w	fp, #0
 80050e4:	465b      	mov	r3, fp
 80050e6:	7830      	ldrb	r0, [r6, #0]
 80050e8:	9303      	str	r3, [sp, #12]
 80050ea:	f7ff fef3 	bl	8004ed4 <__hexdig_fun>
 80050ee:	9b03      	ldr	r3, [sp, #12]
 80050f0:	f000 000f 	and.w	r0, r0, #15
 80050f4:	4098      	lsls	r0, r3
 80050f6:	ea4b 0b00 	orr.w	fp, fp, r0
 80050fa:	3304      	adds	r3, #4
 80050fc:	e7ae      	b.n	800505c <__gethex+0x15c>
 80050fe:	45b1      	cmp	r9, r6
 8005100:	d8ea      	bhi.n	80050d8 <__gethex+0x1d8>
 8005102:	492b      	ldr	r1, [pc, #172]	@ (80051b0 <__gethex+0x2b0>)
 8005104:	9303      	str	r3, [sp, #12]
 8005106:	2201      	movs	r2, #1
 8005108:	4630      	mov	r0, r6
 800510a:	f7fe ffdb 	bl	80040c4 <strncmp>
 800510e:	9b03      	ldr	r3, [sp, #12]
 8005110:	2800      	cmp	r0, #0
 8005112:	d1e1      	bne.n	80050d8 <__gethex+0x1d8>
 8005114:	e7a2      	b.n	800505c <__gethex+0x15c>
 8005116:	1ea9      	subs	r1, r5, #2
 8005118:	4620      	mov	r0, r4
 800511a:	f001 fa60 	bl	80065de <__any_on>
 800511e:	2800      	cmp	r0, #0
 8005120:	d0c2      	beq.n	80050a8 <__gethex+0x1a8>
 8005122:	f04f 0903 	mov.w	r9, #3
 8005126:	e7c1      	b.n	80050ac <__gethex+0x1ac>
 8005128:	da09      	bge.n	800513e <__gethex+0x23e>
 800512a:	1b75      	subs	r5, r6, r5
 800512c:	4621      	mov	r1, r4
 800512e:	9801      	ldr	r0, [sp, #4]
 8005130:	462a      	mov	r2, r5
 8005132:	f001 f81b 	bl	800616c <__lshift>
 8005136:	1b7f      	subs	r7, r7, r5
 8005138:	4604      	mov	r4, r0
 800513a:	f100 0a14 	add.w	sl, r0, #20
 800513e:	f04f 0900 	mov.w	r9, #0
 8005142:	e7b8      	b.n	80050b6 <__gethex+0x1b6>
 8005144:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005148:	42bd      	cmp	r5, r7
 800514a:	dd6f      	ble.n	800522c <__gethex+0x32c>
 800514c:	1bed      	subs	r5, r5, r7
 800514e:	42ae      	cmp	r6, r5
 8005150:	dc34      	bgt.n	80051bc <__gethex+0x2bc>
 8005152:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005156:	2b02      	cmp	r3, #2
 8005158:	d022      	beq.n	80051a0 <__gethex+0x2a0>
 800515a:	2b03      	cmp	r3, #3
 800515c:	d024      	beq.n	80051a8 <__gethex+0x2a8>
 800515e:	2b01      	cmp	r3, #1
 8005160:	d115      	bne.n	800518e <__gethex+0x28e>
 8005162:	42ae      	cmp	r6, r5
 8005164:	d113      	bne.n	800518e <__gethex+0x28e>
 8005166:	2e01      	cmp	r6, #1
 8005168:	d10b      	bne.n	8005182 <__gethex+0x282>
 800516a:	9a02      	ldr	r2, [sp, #8]
 800516c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005170:	6013      	str	r3, [r2, #0]
 8005172:	2301      	movs	r3, #1
 8005174:	6123      	str	r3, [r4, #16]
 8005176:	f8ca 3000 	str.w	r3, [sl]
 800517a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800517c:	2562      	movs	r5, #98	@ 0x62
 800517e:	601c      	str	r4, [r3, #0]
 8005180:	e73a      	b.n	8004ff8 <__gethex+0xf8>
 8005182:	1e71      	subs	r1, r6, #1
 8005184:	4620      	mov	r0, r4
 8005186:	f001 fa2a 	bl	80065de <__any_on>
 800518a:	2800      	cmp	r0, #0
 800518c:	d1ed      	bne.n	800516a <__gethex+0x26a>
 800518e:	9801      	ldr	r0, [sp, #4]
 8005190:	4621      	mov	r1, r4
 8005192:	f000 fdd3 	bl	8005d3c <_Bfree>
 8005196:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005198:	2300      	movs	r3, #0
 800519a:	6013      	str	r3, [r2, #0]
 800519c:	2550      	movs	r5, #80	@ 0x50
 800519e:	e72b      	b.n	8004ff8 <__gethex+0xf8>
 80051a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f3      	bne.n	800518e <__gethex+0x28e>
 80051a6:	e7e0      	b.n	800516a <__gethex+0x26a>
 80051a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1dd      	bne.n	800516a <__gethex+0x26a>
 80051ae:	e7ee      	b.n	800518e <__gethex+0x28e>
 80051b0:	0800746d 	.word	0x0800746d
 80051b4:	08007645 	.word	0x08007645
 80051b8:	08007656 	.word	0x08007656
 80051bc:	1e6f      	subs	r7, r5, #1
 80051be:	f1b9 0f00 	cmp.w	r9, #0
 80051c2:	d130      	bne.n	8005226 <__gethex+0x326>
 80051c4:	b127      	cbz	r7, 80051d0 <__gethex+0x2d0>
 80051c6:	4639      	mov	r1, r7
 80051c8:	4620      	mov	r0, r4
 80051ca:	f001 fa08 	bl	80065de <__any_on>
 80051ce:	4681      	mov	r9, r0
 80051d0:	117a      	asrs	r2, r7, #5
 80051d2:	2301      	movs	r3, #1
 80051d4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80051d8:	f007 071f 	and.w	r7, r7, #31
 80051dc:	40bb      	lsls	r3, r7
 80051de:	4213      	tst	r3, r2
 80051e0:	4629      	mov	r1, r5
 80051e2:	4620      	mov	r0, r4
 80051e4:	bf18      	it	ne
 80051e6:	f049 0902 	orrne.w	r9, r9, #2
 80051ea:	f7ff fe21 	bl	8004e30 <rshift>
 80051ee:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80051f2:	1b76      	subs	r6, r6, r5
 80051f4:	2502      	movs	r5, #2
 80051f6:	f1b9 0f00 	cmp.w	r9, #0
 80051fa:	d047      	beq.n	800528c <__gethex+0x38c>
 80051fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005200:	2b02      	cmp	r3, #2
 8005202:	d015      	beq.n	8005230 <__gethex+0x330>
 8005204:	2b03      	cmp	r3, #3
 8005206:	d017      	beq.n	8005238 <__gethex+0x338>
 8005208:	2b01      	cmp	r3, #1
 800520a:	d109      	bne.n	8005220 <__gethex+0x320>
 800520c:	f019 0f02 	tst.w	r9, #2
 8005210:	d006      	beq.n	8005220 <__gethex+0x320>
 8005212:	f8da 3000 	ldr.w	r3, [sl]
 8005216:	ea49 0903 	orr.w	r9, r9, r3
 800521a:	f019 0f01 	tst.w	r9, #1
 800521e:	d10e      	bne.n	800523e <__gethex+0x33e>
 8005220:	f045 0510 	orr.w	r5, r5, #16
 8005224:	e032      	b.n	800528c <__gethex+0x38c>
 8005226:	f04f 0901 	mov.w	r9, #1
 800522a:	e7d1      	b.n	80051d0 <__gethex+0x2d0>
 800522c:	2501      	movs	r5, #1
 800522e:	e7e2      	b.n	80051f6 <__gethex+0x2f6>
 8005230:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005232:	f1c3 0301 	rsb	r3, r3, #1
 8005236:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005238:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0f0      	beq.n	8005220 <__gethex+0x320>
 800523e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005242:	f104 0314 	add.w	r3, r4, #20
 8005246:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800524a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800524e:	f04f 0c00 	mov.w	ip, #0
 8005252:	4618      	mov	r0, r3
 8005254:	f853 2b04 	ldr.w	r2, [r3], #4
 8005258:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800525c:	d01b      	beq.n	8005296 <__gethex+0x396>
 800525e:	3201      	adds	r2, #1
 8005260:	6002      	str	r2, [r0, #0]
 8005262:	2d02      	cmp	r5, #2
 8005264:	f104 0314 	add.w	r3, r4, #20
 8005268:	d13c      	bne.n	80052e4 <__gethex+0x3e4>
 800526a:	f8d8 2000 	ldr.w	r2, [r8]
 800526e:	3a01      	subs	r2, #1
 8005270:	42b2      	cmp	r2, r6
 8005272:	d109      	bne.n	8005288 <__gethex+0x388>
 8005274:	1171      	asrs	r1, r6, #5
 8005276:	2201      	movs	r2, #1
 8005278:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800527c:	f006 061f 	and.w	r6, r6, #31
 8005280:	fa02 f606 	lsl.w	r6, r2, r6
 8005284:	421e      	tst	r6, r3
 8005286:	d13a      	bne.n	80052fe <__gethex+0x3fe>
 8005288:	f045 0520 	orr.w	r5, r5, #32
 800528c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800528e:	601c      	str	r4, [r3, #0]
 8005290:	9b02      	ldr	r3, [sp, #8]
 8005292:	601f      	str	r7, [r3, #0]
 8005294:	e6b0      	b.n	8004ff8 <__gethex+0xf8>
 8005296:	4299      	cmp	r1, r3
 8005298:	f843 cc04 	str.w	ip, [r3, #-4]
 800529c:	d8d9      	bhi.n	8005252 <__gethex+0x352>
 800529e:	68a3      	ldr	r3, [r4, #8]
 80052a0:	459b      	cmp	fp, r3
 80052a2:	db17      	blt.n	80052d4 <__gethex+0x3d4>
 80052a4:	6861      	ldr	r1, [r4, #4]
 80052a6:	9801      	ldr	r0, [sp, #4]
 80052a8:	3101      	adds	r1, #1
 80052aa:	f000 fd07 	bl	8005cbc <_Balloc>
 80052ae:	4681      	mov	r9, r0
 80052b0:	b918      	cbnz	r0, 80052ba <__gethex+0x3ba>
 80052b2:	4b1a      	ldr	r3, [pc, #104]	@ (800531c <__gethex+0x41c>)
 80052b4:	4602      	mov	r2, r0
 80052b6:	2184      	movs	r1, #132	@ 0x84
 80052b8:	e6c5      	b.n	8005046 <__gethex+0x146>
 80052ba:	6922      	ldr	r2, [r4, #16]
 80052bc:	3202      	adds	r2, #2
 80052be:	f104 010c 	add.w	r1, r4, #12
 80052c2:	0092      	lsls	r2, r2, #2
 80052c4:	300c      	adds	r0, #12
 80052c6:	f7fe ff48 	bl	800415a <memcpy>
 80052ca:	4621      	mov	r1, r4
 80052cc:	9801      	ldr	r0, [sp, #4]
 80052ce:	f000 fd35 	bl	8005d3c <_Bfree>
 80052d2:	464c      	mov	r4, r9
 80052d4:	6923      	ldr	r3, [r4, #16]
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80052dc:	6122      	str	r2, [r4, #16]
 80052de:	2201      	movs	r2, #1
 80052e0:	615a      	str	r2, [r3, #20]
 80052e2:	e7be      	b.n	8005262 <__gethex+0x362>
 80052e4:	6922      	ldr	r2, [r4, #16]
 80052e6:	455a      	cmp	r2, fp
 80052e8:	dd0b      	ble.n	8005302 <__gethex+0x402>
 80052ea:	2101      	movs	r1, #1
 80052ec:	4620      	mov	r0, r4
 80052ee:	f7ff fd9f 	bl	8004e30 <rshift>
 80052f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80052f6:	3701      	adds	r7, #1
 80052f8:	42bb      	cmp	r3, r7
 80052fa:	f6ff aee0 	blt.w	80050be <__gethex+0x1be>
 80052fe:	2501      	movs	r5, #1
 8005300:	e7c2      	b.n	8005288 <__gethex+0x388>
 8005302:	f016 061f 	ands.w	r6, r6, #31
 8005306:	d0fa      	beq.n	80052fe <__gethex+0x3fe>
 8005308:	4453      	add	r3, sl
 800530a:	f1c6 0620 	rsb	r6, r6, #32
 800530e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005312:	f000 fdc5 	bl	8005ea0 <__hi0bits>
 8005316:	42b0      	cmp	r0, r6
 8005318:	dbe7      	blt.n	80052ea <__gethex+0x3ea>
 800531a:	e7f0      	b.n	80052fe <__gethex+0x3fe>
 800531c:	08007645 	.word	0x08007645

08005320 <L_shift>:
 8005320:	f1c2 0208 	rsb	r2, r2, #8
 8005324:	0092      	lsls	r2, r2, #2
 8005326:	b570      	push	{r4, r5, r6, lr}
 8005328:	f1c2 0620 	rsb	r6, r2, #32
 800532c:	6843      	ldr	r3, [r0, #4]
 800532e:	6804      	ldr	r4, [r0, #0]
 8005330:	fa03 f506 	lsl.w	r5, r3, r6
 8005334:	432c      	orrs	r4, r5
 8005336:	40d3      	lsrs	r3, r2
 8005338:	6004      	str	r4, [r0, #0]
 800533a:	f840 3f04 	str.w	r3, [r0, #4]!
 800533e:	4288      	cmp	r0, r1
 8005340:	d3f4      	bcc.n	800532c <L_shift+0xc>
 8005342:	bd70      	pop	{r4, r5, r6, pc}

08005344 <__match>:
 8005344:	b530      	push	{r4, r5, lr}
 8005346:	6803      	ldr	r3, [r0, #0]
 8005348:	3301      	adds	r3, #1
 800534a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800534e:	b914      	cbnz	r4, 8005356 <__match+0x12>
 8005350:	6003      	str	r3, [r0, #0]
 8005352:	2001      	movs	r0, #1
 8005354:	bd30      	pop	{r4, r5, pc}
 8005356:	f813 2b01 	ldrb.w	r2, [r3], #1
 800535a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800535e:	2d19      	cmp	r5, #25
 8005360:	bf98      	it	ls
 8005362:	3220      	addls	r2, #32
 8005364:	42a2      	cmp	r2, r4
 8005366:	d0f0      	beq.n	800534a <__match+0x6>
 8005368:	2000      	movs	r0, #0
 800536a:	e7f3      	b.n	8005354 <__match+0x10>

0800536c <__hexnan>:
 800536c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005370:	680b      	ldr	r3, [r1, #0]
 8005372:	6801      	ldr	r1, [r0, #0]
 8005374:	115e      	asrs	r6, r3, #5
 8005376:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800537a:	f013 031f 	ands.w	r3, r3, #31
 800537e:	b087      	sub	sp, #28
 8005380:	bf18      	it	ne
 8005382:	3604      	addne	r6, #4
 8005384:	2500      	movs	r5, #0
 8005386:	1f37      	subs	r7, r6, #4
 8005388:	4682      	mov	sl, r0
 800538a:	4690      	mov	r8, r2
 800538c:	9301      	str	r3, [sp, #4]
 800538e:	f846 5c04 	str.w	r5, [r6, #-4]
 8005392:	46b9      	mov	r9, r7
 8005394:	463c      	mov	r4, r7
 8005396:	9502      	str	r5, [sp, #8]
 8005398:	46ab      	mov	fp, r5
 800539a:	784a      	ldrb	r2, [r1, #1]
 800539c:	1c4b      	adds	r3, r1, #1
 800539e:	9303      	str	r3, [sp, #12]
 80053a0:	b342      	cbz	r2, 80053f4 <__hexnan+0x88>
 80053a2:	4610      	mov	r0, r2
 80053a4:	9105      	str	r1, [sp, #20]
 80053a6:	9204      	str	r2, [sp, #16]
 80053a8:	f7ff fd94 	bl	8004ed4 <__hexdig_fun>
 80053ac:	2800      	cmp	r0, #0
 80053ae:	d151      	bne.n	8005454 <__hexnan+0xe8>
 80053b0:	9a04      	ldr	r2, [sp, #16]
 80053b2:	9905      	ldr	r1, [sp, #20]
 80053b4:	2a20      	cmp	r2, #32
 80053b6:	d818      	bhi.n	80053ea <__hexnan+0x7e>
 80053b8:	9b02      	ldr	r3, [sp, #8]
 80053ba:	459b      	cmp	fp, r3
 80053bc:	dd13      	ble.n	80053e6 <__hexnan+0x7a>
 80053be:	454c      	cmp	r4, r9
 80053c0:	d206      	bcs.n	80053d0 <__hexnan+0x64>
 80053c2:	2d07      	cmp	r5, #7
 80053c4:	dc04      	bgt.n	80053d0 <__hexnan+0x64>
 80053c6:	462a      	mov	r2, r5
 80053c8:	4649      	mov	r1, r9
 80053ca:	4620      	mov	r0, r4
 80053cc:	f7ff ffa8 	bl	8005320 <L_shift>
 80053d0:	4544      	cmp	r4, r8
 80053d2:	d952      	bls.n	800547a <__hexnan+0x10e>
 80053d4:	2300      	movs	r3, #0
 80053d6:	f1a4 0904 	sub.w	r9, r4, #4
 80053da:	f844 3c04 	str.w	r3, [r4, #-4]
 80053de:	f8cd b008 	str.w	fp, [sp, #8]
 80053e2:	464c      	mov	r4, r9
 80053e4:	461d      	mov	r5, r3
 80053e6:	9903      	ldr	r1, [sp, #12]
 80053e8:	e7d7      	b.n	800539a <__hexnan+0x2e>
 80053ea:	2a29      	cmp	r2, #41	@ 0x29
 80053ec:	d157      	bne.n	800549e <__hexnan+0x132>
 80053ee:	3102      	adds	r1, #2
 80053f0:	f8ca 1000 	str.w	r1, [sl]
 80053f4:	f1bb 0f00 	cmp.w	fp, #0
 80053f8:	d051      	beq.n	800549e <__hexnan+0x132>
 80053fa:	454c      	cmp	r4, r9
 80053fc:	d206      	bcs.n	800540c <__hexnan+0xa0>
 80053fe:	2d07      	cmp	r5, #7
 8005400:	dc04      	bgt.n	800540c <__hexnan+0xa0>
 8005402:	462a      	mov	r2, r5
 8005404:	4649      	mov	r1, r9
 8005406:	4620      	mov	r0, r4
 8005408:	f7ff ff8a 	bl	8005320 <L_shift>
 800540c:	4544      	cmp	r4, r8
 800540e:	d936      	bls.n	800547e <__hexnan+0x112>
 8005410:	f1a8 0204 	sub.w	r2, r8, #4
 8005414:	4623      	mov	r3, r4
 8005416:	f853 1b04 	ldr.w	r1, [r3], #4
 800541a:	f842 1f04 	str.w	r1, [r2, #4]!
 800541e:	429f      	cmp	r7, r3
 8005420:	d2f9      	bcs.n	8005416 <__hexnan+0xaa>
 8005422:	1b3b      	subs	r3, r7, r4
 8005424:	f023 0303 	bic.w	r3, r3, #3
 8005428:	3304      	adds	r3, #4
 800542a:	3401      	adds	r4, #1
 800542c:	3e03      	subs	r6, #3
 800542e:	42b4      	cmp	r4, r6
 8005430:	bf88      	it	hi
 8005432:	2304      	movhi	r3, #4
 8005434:	4443      	add	r3, r8
 8005436:	2200      	movs	r2, #0
 8005438:	f843 2b04 	str.w	r2, [r3], #4
 800543c:	429f      	cmp	r7, r3
 800543e:	d2fb      	bcs.n	8005438 <__hexnan+0xcc>
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	b91b      	cbnz	r3, 800544c <__hexnan+0xe0>
 8005444:	4547      	cmp	r7, r8
 8005446:	d128      	bne.n	800549a <__hexnan+0x12e>
 8005448:	2301      	movs	r3, #1
 800544a:	603b      	str	r3, [r7, #0]
 800544c:	2005      	movs	r0, #5
 800544e:	b007      	add	sp, #28
 8005450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005454:	3501      	adds	r5, #1
 8005456:	2d08      	cmp	r5, #8
 8005458:	f10b 0b01 	add.w	fp, fp, #1
 800545c:	dd06      	ble.n	800546c <__hexnan+0x100>
 800545e:	4544      	cmp	r4, r8
 8005460:	d9c1      	bls.n	80053e6 <__hexnan+0x7a>
 8005462:	2300      	movs	r3, #0
 8005464:	f844 3c04 	str.w	r3, [r4, #-4]
 8005468:	2501      	movs	r5, #1
 800546a:	3c04      	subs	r4, #4
 800546c:	6822      	ldr	r2, [r4, #0]
 800546e:	f000 000f 	and.w	r0, r0, #15
 8005472:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005476:	6020      	str	r0, [r4, #0]
 8005478:	e7b5      	b.n	80053e6 <__hexnan+0x7a>
 800547a:	2508      	movs	r5, #8
 800547c:	e7b3      	b.n	80053e6 <__hexnan+0x7a>
 800547e:	9b01      	ldr	r3, [sp, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0dd      	beq.n	8005440 <__hexnan+0xd4>
 8005484:	f1c3 0320 	rsb	r3, r3, #32
 8005488:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800548c:	40da      	lsrs	r2, r3
 800548e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005492:	4013      	ands	r3, r2
 8005494:	f846 3c04 	str.w	r3, [r6, #-4]
 8005498:	e7d2      	b.n	8005440 <__hexnan+0xd4>
 800549a:	3f04      	subs	r7, #4
 800549c:	e7d0      	b.n	8005440 <__hexnan+0xd4>
 800549e:	2004      	movs	r0, #4
 80054a0:	e7d5      	b.n	800544e <__hexnan+0xe2>

080054a2 <__ssputs_r>:
 80054a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054a6:	688e      	ldr	r6, [r1, #8]
 80054a8:	461f      	mov	r7, r3
 80054aa:	42be      	cmp	r6, r7
 80054ac:	680b      	ldr	r3, [r1, #0]
 80054ae:	4682      	mov	sl, r0
 80054b0:	460c      	mov	r4, r1
 80054b2:	4690      	mov	r8, r2
 80054b4:	d82d      	bhi.n	8005512 <__ssputs_r+0x70>
 80054b6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80054ba:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80054be:	d026      	beq.n	800550e <__ssputs_r+0x6c>
 80054c0:	6965      	ldr	r5, [r4, #20]
 80054c2:	6909      	ldr	r1, [r1, #16]
 80054c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054c8:	eba3 0901 	sub.w	r9, r3, r1
 80054cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054d0:	1c7b      	adds	r3, r7, #1
 80054d2:	444b      	add	r3, r9
 80054d4:	106d      	asrs	r5, r5, #1
 80054d6:	429d      	cmp	r5, r3
 80054d8:	bf38      	it	cc
 80054da:	461d      	movcc	r5, r3
 80054dc:	0553      	lsls	r3, r2, #21
 80054de:	d527      	bpl.n	8005530 <__ssputs_r+0x8e>
 80054e0:	4629      	mov	r1, r5
 80054e2:	f000 faa1 	bl	8005a28 <_malloc_r>
 80054e6:	4606      	mov	r6, r0
 80054e8:	b360      	cbz	r0, 8005544 <__ssputs_r+0xa2>
 80054ea:	6921      	ldr	r1, [r4, #16]
 80054ec:	464a      	mov	r2, r9
 80054ee:	f7fe fe34 	bl	800415a <memcpy>
 80054f2:	89a3      	ldrh	r3, [r4, #12]
 80054f4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80054f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054fc:	81a3      	strh	r3, [r4, #12]
 80054fe:	6126      	str	r6, [r4, #16]
 8005500:	6165      	str	r5, [r4, #20]
 8005502:	444e      	add	r6, r9
 8005504:	eba5 0509 	sub.w	r5, r5, r9
 8005508:	6026      	str	r6, [r4, #0]
 800550a:	60a5      	str	r5, [r4, #8]
 800550c:	463e      	mov	r6, r7
 800550e:	42be      	cmp	r6, r7
 8005510:	d900      	bls.n	8005514 <__ssputs_r+0x72>
 8005512:	463e      	mov	r6, r7
 8005514:	6820      	ldr	r0, [r4, #0]
 8005516:	4632      	mov	r2, r6
 8005518:	4641      	mov	r1, r8
 800551a:	f001 f9f6 	bl	800690a <memmove>
 800551e:	68a3      	ldr	r3, [r4, #8]
 8005520:	1b9b      	subs	r3, r3, r6
 8005522:	60a3      	str	r3, [r4, #8]
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	4433      	add	r3, r6
 8005528:	6023      	str	r3, [r4, #0]
 800552a:	2000      	movs	r0, #0
 800552c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005530:	462a      	mov	r2, r5
 8005532:	f001 f8b8 	bl	80066a6 <_realloc_r>
 8005536:	4606      	mov	r6, r0
 8005538:	2800      	cmp	r0, #0
 800553a:	d1e0      	bne.n	80054fe <__ssputs_r+0x5c>
 800553c:	6921      	ldr	r1, [r4, #16]
 800553e:	4650      	mov	r0, sl
 8005540:	f001 faa8 	bl	8006a94 <_free_r>
 8005544:	230c      	movs	r3, #12
 8005546:	f8ca 3000 	str.w	r3, [sl]
 800554a:	89a3      	ldrh	r3, [r4, #12]
 800554c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005550:	81a3      	strh	r3, [r4, #12]
 8005552:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005556:	e7e9      	b.n	800552c <__ssputs_r+0x8a>

08005558 <_svfiprintf_r>:
 8005558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800555c:	4698      	mov	r8, r3
 800555e:	898b      	ldrh	r3, [r1, #12]
 8005560:	061b      	lsls	r3, r3, #24
 8005562:	b09d      	sub	sp, #116	@ 0x74
 8005564:	4607      	mov	r7, r0
 8005566:	460d      	mov	r5, r1
 8005568:	4614      	mov	r4, r2
 800556a:	d510      	bpl.n	800558e <_svfiprintf_r+0x36>
 800556c:	690b      	ldr	r3, [r1, #16]
 800556e:	b973      	cbnz	r3, 800558e <_svfiprintf_r+0x36>
 8005570:	2140      	movs	r1, #64	@ 0x40
 8005572:	f000 fa59 	bl	8005a28 <_malloc_r>
 8005576:	6028      	str	r0, [r5, #0]
 8005578:	6128      	str	r0, [r5, #16]
 800557a:	b930      	cbnz	r0, 800558a <_svfiprintf_r+0x32>
 800557c:	230c      	movs	r3, #12
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005584:	b01d      	add	sp, #116	@ 0x74
 8005586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800558a:	2340      	movs	r3, #64	@ 0x40
 800558c:	616b      	str	r3, [r5, #20]
 800558e:	2300      	movs	r3, #0
 8005590:	9309      	str	r3, [sp, #36]	@ 0x24
 8005592:	2320      	movs	r3, #32
 8005594:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005598:	f8cd 800c 	str.w	r8, [sp, #12]
 800559c:	2330      	movs	r3, #48	@ 0x30
 800559e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800573c <_svfiprintf_r+0x1e4>
 80055a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80055a6:	f04f 0901 	mov.w	r9, #1
 80055aa:	4623      	mov	r3, r4
 80055ac:	469a      	mov	sl, r3
 80055ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055b2:	b10a      	cbz	r2, 80055b8 <_svfiprintf_r+0x60>
 80055b4:	2a25      	cmp	r2, #37	@ 0x25
 80055b6:	d1f9      	bne.n	80055ac <_svfiprintf_r+0x54>
 80055b8:	ebba 0b04 	subs.w	fp, sl, r4
 80055bc:	d00b      	beq.n	80055d6 <_svfiprintf_r+0x7e>
 80055be:	465b      	mov	r3, fp
 80055c0:	4622      	mov	r2, r4
 80055c2:	4629      	mov	r1, r5
 80055c4:	4638      	mov	r0, r7
 80055c6:	f7ff ff6c 	bl	80054a2 <__ssputs_r>
 80055ca:	3001      	adds	r0, #1
 80055cc:	f000 80a7 	beq.w	800571e <_svfiprintf_r+0x1c6>
 80055d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055d2:	445a      	add	r2, fp
 80055d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80055d6:	f89a 3000 	ldrb.w	r3, [sl]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 809f 	beq.w	800571e <_svfiprintf_r+0x1c6>
 80055e0:	2300      	movs	r3, #0
 80055e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80055e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055ea:	f10a 0a01 	add.w	sl, sl, #1
 80055ee:	9304      	str	r3, [sp, #16]
 80055f0:	9307      	str	r3, [sp, #28]
 80055f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80055f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80055f8:	4654      	mov	r4, sl
 80055fa:	2205      	movs	r2, #5
 80055fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005600:	484e      	ldr	r0, [pc, #312]	@ (800573c <_svfiprintf_r+0x1e4>)
 8005602:	f7fa fded 	bl	80001e0 <memchr>
 8005606:	9a04      	ldr	r2, [sp, #16]
 8005608:	b9d8      	cbnz	r0, 8005642 <_svfiprintf_r+0xea>
 800560a:	06d0      	lsls	r0, r2, #27
 800560c:	bf44      	itt	mi
 800560e:	2320      	movmi	r3, #32
 8005610:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005614:	0711      	lsls	r1, r2, #28
 8005616:	bf44      	itt	mi
 8005618:	232b      	movmi	r3, #43	@ 0x2b
 800561a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800561e:	f89a 3000 	ldrb.w	r3, [sl]
 8005622:	2b2a      	cmp	r3, #42	@ 0x2a
 8005624:	d015      	beq.n	8005652 <_svfiprintf_r+0xfa>
 8005626:	9a07      	ldr	r2, [sp, #28]
 8005628:	4654      	mov	r4, sl
 800562a:	2000      	movs	r0, #0
 800562c:	f04f 0c0a 	mov.w	ip, #10
 8005630:	4621      	mov	r1, r4
 8005632:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005636:	3b30      	subs	r3, #48	@ 0x30
 8005638:	2b09      	cmp	r3, #9
 800563a:	d94b      	bls.n	80056d4 <_svfiprintf_r+0x17c>
 800563c:	b1b0      	cbz	r0, 800566c <_svfiprintf_r+0x114>
 800563e:	9207      	str	r2, [sp, #28]
 8005640:	e014      	b.n	800566c <_svfiprintf_r+0x114>
 8005642:	eba0 0308 	sub.w	r3, r0, r8
 8005646:	fa09 f303 	lsl.w	r3, r9, r3
 800564a:	4313      	orrs	r3, r2
 800564c:	9304      	str	r3, [sp, #16]
 800564e:	46a2      	mov	sl, r4
 8005650:	e7d2      	b.n	80055f8 <_svfiprintf_r+0xa0>
 8005652:	9b03      	ldr	r3, [sp, #12]
 8005654:	1d19      	adds	r1, r3, #4
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	9103      	str	r1, [sp, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	bfbb      	ittet	lt
 800565e:	425b      	neglt	r3, r3
 8005660:	f042 0202 	orrlt.w	r2, r2, #2
 8005664:	9307      	strge	r3, [sp, #28]
 8005666:	9307      	strlt	r3, [sp, #28]
 8005668:	bfb8      	it	lt
 800566a:	9204      	strlt	r2, [sp, #16]
 800566c:	7823      	ldrb	r3, [r4, #0]
 800566e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005670:	d10a      	bne.n	8005688 <_svfiprintf_r+0x130>
 8005672:	7863      	ldrb	r3, [r4, #1]
 8005674:	2b2a      	cmp	r3, #42	@ 0x2a
 8005676:	d132      	bne.n	80056de <_svfiprintf_r+0x186>
 8005678:	9b03      	ldr	r3, [sp, #12]
 800567a:	1d1a      	adds	r2, r3, #4
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	9203      	str	r2, [sp, #12]
 8005680:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005684:	3402      	adds	r4, #2
 8005686:	9305      	str	r3, [sp, #20]
 8005688:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800574c <_svfiprintf_r+0x1f4>
 800568c:	7821      	ldrb	r1, [r4, #0]
 800568e:	2203      	movs	r2, #3
 8005690:	4650      	mov	r0, sl
 8005692:	f7fa fda5 	bl	80001e0 <memchr>
 8005696:	b138      	cbz	r0, 80056a8 <_svfiprintf_r+0x150>
 8005698:	9b04      	ldr	r3, [sp, #16]
 800569a:	eba0 000a 	sub.w	r0, r0, sl
 800569e:	2240      	movs	r2, #64	@ 0x40
 80056a0:	4082      	lsls	r2, r0
 80056a2:	4313      	orrs	r3, r2
 80056a4:	3401      	adds	r4, #1
 80056a6:	9304      	str	r3, [sp, #16]
 80056a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056ac:	4824      	ldr	r0, [pc, #144]	@ (8005740 <_svfiprintf_r+0x1e8>)
 80056ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056b2:	2206      	movs	r2, #6
 80056b4:	f7fa fd94 	bl	80001e0 <memchr>
 80056b8:	2800      	cmp	r0, #0
 80056ba:	d036      	beq.n	800572a <_svfiprintf_r+0x1d2>
 80056bc:	4b21      	ldr	r3, [pc, #132]	@ (8005744 <_svfiprintf_r+0x1ec>)
 80056be:	bb1b      	cbnz	r3, 8005708 <_svfiprintf_r+0x1b0>
 80056c0:	9b03      	ldr	r3, [sp, #12]
 80056c2:	3307      	adds	r3, #7
 80056c4:	f023 0307 	bic.w	r3, r3, #7
 80056c8:	3308      	adds	r3, #8
 80056ca:	9303      	str	r3, [sp, #12]
 80056cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056ce:	4433      	add	r3, r6
 80056d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80056d2:	e76a      	b.n	80055aa <_svfiprintf_r+0x52>
 80056d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80056d8:	460c      	mov	r4, r1
 80056da:	2001      	movs	r0, #1
 80056dc:	e7a8      	b.n	8005630 <_svfiprintf_r+0xd8>
 80056de:	2300      	movs	r3, #0
 80056e0:	3401      	adds	r4, #1
 80056e2:	9305      	str	r3, [sp, #20]
 80056e4:	4619      	mov	r1, r3
 80056e6:	f04f 0c0a 	mov.w	ip, #10
 80056ea:	4620      	mov	r0, r4
 80056ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056f0:	3a30      	subs	r2, #48	@ 0x30
 80056f2:	2a09      	cmp	r2, #9
 80056f4:	d903      	bls.n	80056fe <_svfiprintf_r+0x1a6>
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0c6      	beq.n	8005688 <_svfiprintf_r+0x130>
 80056fa:	9105      	str	r1, [sp, #20]
 80056fc:	e7c4      	b.n	8005688 <_svfiprintf_r+0x130>
 80056fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8005702:	4604      	mov	r4, r0
 8005704:	2301      	movs	r3, #1
 8005706:	e7f0      	b.n	80056ea <_svfiprintf_r+0x192>
 8005708:	ab03      	add	r3, sp, #12
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	462a      	mov	r2, r5
 800570e:	4b0e      	ldr	r3, [pc, #56]	@ (8005748 <_svfiprintf_r+0x1f0>)
 8005710:	a904      	add	r1, sp, #16
 8005712:	4638      	mov	r0, r7
 8005714:	f7fc ff92 	bl	800263c <_printf_float>
 8005718:	1c42      	adds	r2, r0, #1
 800571a:	4606      	mov	r6, r0
 800571c:	d1d6      	bne.n	80056cc <_svfiprintf_r+0x174>
 800571e:	89ab      	ldrh	r3, [r5, #12]
 8005720:	065b      	lsls	r3, r3, #25
 8005722:	f53f af2d 	bmi.w	8005580 <_svfiprintf_r+0x28>
 8005726:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005728:	e72c      	b.n	8005584 <_svfiprintf_r+0x2c>
 800572a:	ab03      	add	r3, sp, #12
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	462a      	mov	r2, r5
 8005730:	4b05      	ldr	r3, [pc, #20]	@ (8005748 <_svfiprintf_r+0x1f0>)
 8005732:	a904      	add	r1, sp, #16
 8005734:	4638      	mov	r0, r7
 8005736:	f7fd fa19 	bl	8002b6c <_printf_i>
 800573a:	e7ed      	b.n	8005718 <_svfiprintf_r+0x1c0>
 800573c:	080076b6 	.word	0x080076b6
 8005740:	080076c0 	.word	0x080076c0
 8005744:	0800263d 	.word	0x0800263d
 8005748:	080054a3 	.word	0x080054a3
 800574c:	080076bc 	.word	0x080076bc

08005750 <__sfputc_r>:
 8005750:	6893      	ldr	r3, [r2, #8]
 8005752:	3b01      	subs	r3, #1
 8005754:	2b00      	cmp	r3, #0
 8005756:	b410      	push	{r4}
 8005758:	6093      	str	r3, [r2, #8]
 800575a:	da08      	bge.n	800576e <__sfputc_r+0x1e>
 800575c:	6994      	ldr	r4, [r2, #24]
 800575e:	42a3      	cmp	r3, r4
 8005760:	db01      	blt.n	8005766 <__sfputc_r+0x16>
 8005762:	290a      	cmp	r1, #10
 8005764:	d103      	bne.n	800576e <__sfputc_r+0x1e>
 8005766:	f85d 4b04 	ldr.w	r4, [sp], #4
 800576a:	f000 bfca 	b.w	8006702 <__swbuf_r>
 800576e:	6813      	ldr	r3, [r2, #0]
 8005770:	1c58      	adds	r0, r3, #1
 8005772:	6010      	str	r0, [r2, #0]
 8005774:	7019      	strb	r1, [r3, #0]
 8005776:	4608      	mov	r0, r1
 8005778:	f85d 4b04 	ldr.w	r4, [sp], #4
 800577c:	4770      	bx	lr

0800577e <__sfputs_r>:
 800577e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005780:	4606      	mov	r6, r0
 8005782:	460f      	mov	r7, r1
 8005784:	4614      	mov	r4, r2
 8005786:	18d5      	adds	r5, r2, r3
 8005788:	42ac      	cmp	r4, r5
 800578a:	d101      	bne.n	8005790 <__sfputs_r+0x12>
 800578c:	2000      	movs	r0, #0
 800578e:	e007      	b.n	80057a0 <__sfputs_r+0x22>
 8005790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005794:	463a      	mov	r2, r7
 8005796:	4630      	mov	r0, r6
 8005798:	f7ff ffda 	bl	8005750 <__sfputc_r>
 800579c:	1c43      	adds	r3, r0, #1
 800579e:	d1f3      	bne.n	8005788 <__sfputs_r+0xa>
 80057a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080057a4 <_vfiprintf_r>:
 80057a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a8:	460d      	mov	r5, r1
 80057aa:	b09d      	sub	sp, #116	@ 0x74
 80057ac:	4614      	mov	r4, r2
 80057ae:	4698      	mov	r8, r3
 80057b0:	4606      	mov	r6, r0
 80057b2:	b118      	cbz	r0, 80057bc <_vfiprintf_r+0x18>
 80057b4:	6a03      	ldr	r3, [r0, #32]
 80057b6:	b90b      	cbnz	r3, 80057bc <_vfiprintf_r+0x18>
 80057b8:	f7fd fdb8 	bl	800332c <__sinit>
 80057bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80057be:	07d9      	lsls	r1, r3, #31
 80057c0:	d405      	bmi.n	80057ce <_vfiprintf_r+0x2a>
 80057c2:	89ab      	ldrh	r3, [r5, #12]
 80057c4:	059a      	lsls	r2, r3, #22
 80057c6:	d402      	bmi.n	80057ce <_vfiprintf_r+0x2a>
 80057c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80057ca:	f7fe fcc4 	bl	8004156 <__retarget_lock_acquire_recursive>
 80057ce:	89ab      	ldrh	r3, [r5, #12]
 80057d0:	071b      	lsls	r3, r3, #28
 80057d2:	d501      	bpl.n	80057d8 <_vfiprintf_r+0x34>
 80057d4:	692b      	ldr	r3, [r5, #16]
 80057d6:	b99b      	cbnz	r3, 8005800 <_vfiprintf_r+0x5c>
 80057d8:	4629      	mov	r1, r5
 80057da:	4630      	mov	r0, r6
 80057dc:	f000 ffd0 	bl	8006780 <__swsetup_r>
 80057e0:	b170      	cbz	r0, 8005800 <_vfiprintf_r+0x5c>
 80057e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80057e4:	07dc      	lsls	r4, r3, #31
 80057e6:	d504      	bpl.n	80057f2 <_vfiprintf_r+0x4e>
 80057e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80057ec:	b01d      	add	sp, #116	@ 0x74
 80057ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057f2:	89ab      	ldrh	r3, [r5, #12]
 80057f4:	0598      	lsls	r0, r3, #22
 80057f6:	d4f7      	bmi.n	80057e8 <_vfiprintf_r+0x44>
 80057f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80057fa:	f7fe fcad 	bl	8004158 <__retarget_lock_release_recursive>
 80057fe:	e7f3      	b.n	80057e8 <_vfiprintf_r+0x44>
 8005800:	2300      	movs	r3, #0
 8005802:	9309      	str	r3, [sp, #36]	@ 0x24
 8005804:	2320      	movs	r3, #32
 8005806:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800580a:	f8cd 800c 	str.w	r8, [sp, #12]
 800580e:	2330      	movs	r3, #48	@ 0x30
 8005810:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80059c0 <_vfiprintf_r+0x21c>
 8005814:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005818:	f04f 0901 	mov.w	r9, #1
 800581c:	4623      	mov	r3, r4
 800581e:	469a      	mov	sl, r3
 8005820:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005824:	b10a      	cbz	r2, 800582a <_vfiprintf_r+0x86>
 8005826:	2a25      	cmp	r2, #37	@ 0x25
 8005828:	d1f9      	bne.n	800581e <_vfiprintf_r+0x7a>
 800582a:	ebba 0b04 	subs.w	fp, sl, r4
 800582e:	d00b      	beq.n	8005848 <_vfiprintf_r+0xa4>
 8005830:	465b      	mov	r3, fp
 8005832:	4622      	mov	r2, r4
 8005834:	4629      	mov	r1, r5
 8005836:	4630      	mov	r0, r6
 8005838:	f7ff ffa1 	bl	800577e <__sfputs_r>
 800583c:	3001      	adds	r0, #1
 800583e:	f000 80a7 	beq.w	8005990 <_vfiprintf_r+0x1ec>
 8005842:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005844:	445a      	add	r2, fp
 8005846:	9209      	str	r2, [sp, #36]	@ 0x24
 8005848:	f89a 3000 	ldrb.w	r3, [sl]
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 809f 	beq.w	8005990 <_vfiprintf_r+0x1ec>
 8005852:	2300      	movs	r3, #0
 8005854:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005858:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800585c:	f10a 0a01 	add.w	sl, sl, #1
 8005860:	9304      	str	r3, [sp, #16]
 8005862:	9307      	str	r3, [sp, #28]
 8005864:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005868:	931a      	str	r3, [sp, #104]	@ 0x68
 800586a:	4654      	mov	r4, sl
 800586c:	2205      	movs	r2, #5
 800586e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005872:	4853      	ldr	r0, [pc, #332]	@ (80059c0 <_vfiprintf_r+0x21c>)
 8005874:	f7fa fcb4 	bl	80001e0 <memchr>
 8005878:	9a04      	ldr	r2, [sp, #16]
 800587a:	b9d8      	cbnz	r0, 80058b4 <_vfiprintf_r+0x110>
 800587c:	06d1      	lsls	r1, r2, #27
 800587e:	bf44      	itt	mi
 8005880:	2320      	movmi	r3, #32
 8005882:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005886:	0713      	lsls	r3, r2, #28
 8005888:	bf44      	itt	mi
 800588a:	232b      	movmi	r3, #43	@ 0x2b
 800588c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005890:	f89a 3000 	ldrb.w	r3, [sl]
 8005894:	2b2a      	cmp	r3, #42	@ 0x2a
 8005896:	d015      	beq.n	80058c4 <_vfiprintf_r+0x120>
 8005898:	9a07      	ldr	r2, [sp, #28]
 800589a:	4654      	mov	r4, sl
 800589c:	2000      	movs	r0, #0
 800589e:	f04f 0c0a 	mov.w	ip, #10
 80058a2:	4621      	mov	r1, r4
 80058a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058a8:	3b30      	subs	r3, #48	@ 0x30
 80058aa:	2b09      	cmp	r3, #9
 80058ac:	d94b      	bls.n	8005946 <_vfiprintf_r+0x1a2>
 80058ae:	b1b0      	cbz	r0, 80058de <_vfiprintf_r+0x13a>
 80058b0:	9207      	str	r2, [sp, #28]
 80058b2:	e014      	b.n	80058de <_vfiprintf_r+0x13a>
 80058b4:	eba0 0308 	sub.w	r3, r0, r8
 80058b8:	fa09 f303 	lsl.w	r3, r9, r3
 80058bc:	4313      	orrs	r3, r2
 80058be:	9304      	str	r3, [sp, #16]
 80058c0:	46a2      	mov	sl, r4
 80058c2:	e7d2      	b.n	800586a <_vfiprintf_r+0xc6>
 80058c4:	9b03      	ldr	r3, [sp, #12]
 80058c6:	1d19      	adds	r1, r3, #4
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	9103      	str	r1, [sp, #12]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	bfbb      	ittet	lt
 80058d0:	425b      	neglt	r3, r3
 80058d2:	f042 0202 	orrlt.w	r2, r2, #2
 80058d6:	9307      	strge	r3, [sp, #28]
 80058d8:	9307      	strlt	r3, [sp, #28]
 80058da:	bfb8      	it	lt
 80058dc:	9204      	strlt	r2, [sp, #16]
 80058de:	7823      	ldrb	r3, [r4, #0]
 80058e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80058e2:	d10a      	bne.n	80058fa <_vfiprintf_r+0x156>
 80058e4:	7863      	ldrb	r3, [r4, #1]
 80058e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80058e8:	d132      	bne.n	8005950 <_vfiprintf_r+0x1ac>
 80058ea:	9b03      	ldr	r3, [sp, #12]
 80058ec:	1d1a      	adds	r2, r3, #4
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	9203      	str	r2, [sp, #12]
 80058f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80058f6:	3402      	adds	r4, #2
 80058f8:	9305      	str	r3, [sp, #20]
 80058fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80059d0 <_vfiprintf_r+0x22c>
 80058fe:	7821      	ldrb	r1, [r4, #0]
 8005900:	2203      	movs	r2, #3
 8005902:	4650      	mov	r0, sl
 8005904:	f7fa fc6c 	bl	80001e0 <memchr>
 8005908:	b138      	cbz	r0, 800591a <_vfiprintf_r+0x176>
 800590a:	9b04      	ldr	r3, [sp, #16]
 800590c:	eba0 000a 	sub.w	r0, r0, sl
 8005910:	2240      	movs	r2, #64	@ 0x40
 8005912:	4082      	lsls	r2, r0
 8005914:	4313      	orrs	r3, r2
 8005916:	3401      	adds	r4, #1
 8005918:	9304      	str	r3, [sp, #16]
 800591a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800591e:	4829      	ldr	r0, [pc, #164]	@ (80059c4 <_vfiprintf_r+0x220>)
 8005920:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005924:	2206      	movs	r2, #6
 8005926:	f7fa fc5b 	bl	80001e0 <memchr>
 800592a:	2800      	cmp	r0, #0
 800592c:	d03f      	beq.n	80059ae <_vfiprintf_r+0x20a>
 800592e:	4b26      	ldr	r3, [pc, #152]	@ (80059c8 <_vfiprintf_r+0x224>)
 8005930:	bb1b      	cbnz	r3, 800597a <_vfiprintf_r+0x1d6>
 8005932:	9b03      	ldr	r3, [sp, #12]
 8005934:	3307      	adds	r3, #7
 8005936:	f023 0307 	bic.w	r3, r3, #7
 800593a:	3308      	adds	r3, #8
 800593c:	9303      	str	r3, [sp, #12]
 800593e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005940:	443b      	add	r3, r7
 8005942:	9309      	str	r3, [sp, #36]	@ 0x24
 8005944:	e76a      	b.n	800581c <_vfiprintf_r+0x78>
 8005946:	fb0c 3202 	mla	r2, ip, r2, r3
 800594a:	460c      	mov	r4, r1
 800594c:	2001      	movs	r0, #1
 800594e:	e7a8      	b.n	80058a2 <_vfiprintf_r+0xfe>
 8005950:	2300      	movs	r3, #0
 8005952:	3401      	adds	r4, #1
 8005954:	9305      	str	r3, [sp, #20]
 8005956:	4619      	mov	r1, r3
 8005958:	f04f 0c0a 	mov.w	ip, #10
 800595c:	4620      	mov	r0, r4
 800595e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005962:	3a30      	subs	r2, #48	@ 0x30
 8005964:	2a09      	cmp	r2, #9
 8005966:	d903      	bls.n	8005970 <_vfiprintf_r+0x1cc>
 8005968:	2b00      	cmp	r3, #0
 800596a:	d0c6      	beq.n	80058fa <_vfiprintf_r+0x156>
 800596c:	9105      	str	r1, [sp, #20]
 800596e:	e7c4      	b.n	80058fa <_vfiprintf_r+0x156>
 8005970:	fb0c 2101 	mla	r1, ip, r1, r2
 8005974:	4604      	mov	r4, r0
 8005976:	2301      	movs	r3, #1
 8005978:	e7f0      	b.n	800595c <_vfiprintf_r+0x1b8>
 800597a:	ab03      	add	r3, sp, #12
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	462a      	mov	r2, r5
 8005980:	4b12      	ldr	r3, [pc, #72]	@ (80059cc <_vfiprintf_r+0x228>)
 8005982:	a904      	add	r1, sp, #16
 8005984:	4630      	mov	r0, r6
 8005986:	f7fc fe59 	bl	800263c <_printf_float>
 800598a:	4607      	mov	r7, r0
 800598c:	1c78      	adds	r0, r7, #1
 800598e:	d1d6      	bne.n	800593e <_vfiprintf_r+0x19a>
 8005990:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005992:	07d9      	lsls	r1, r3, #31
 8005994:	d405      	bmi.n	80059a2 <_vfiprintf_r+0x1fe>
 8005996:	89ab      	ldrh	r3, [r5, #12]
 8005998:	059a      	lsls	r2, r3, #22
 800599a:	d402      	bmi.n	80059a2 <_vfiprintf_r+0x1fe>
 800599c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800599e:	f7fe fbdb 	bl	8004158 <__retarget_lock_release_recursive>
 80059a2:	89ab      	ldrh	r3, [r5, #12]
 80059a4:	065b      	lsls	r3, r3, #25
 80059a6:	f53f af1f 	bmi.w	80057e8 <_vfiprintf_r+0x44>
 80059aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80059ac:	e71e      	b.n	80057ec <_vfiprintf_r+0x48>
 80059ae:	ab03      	add	r3, sp, #12
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	462a      	mov	r2, r5
 80059b4:	4b05      	ldr	r3, [pc, #20]	@ (80059cc <_vfiprintf_r+0x228>)
 80059b6:	a904      	add	r1, sp, #16
 80059b8:	4630      	mov	r0, r6
 80059ba:	f7fd f8d7 	bl	8002b6c <_printf_i>
 80059be:	e7e4      	b.n	800598a <_vfiprintf_r+0x1e6>
 80059c0:	080076b6 	.word	0x080076b6
 80059c4:	080076c0 	.word	0x080076c0
 80059c8:	0800263d 	.word	0x0800263d
 80059cc:	0800577f 	.word	0x0800577f
 80059d0:	080076bc 	.word	0x080076bc

080059d4 <malloc>:
 80059d4:	4b02      	ldr	r3, [pc, #8]	@ (80059e0 <malloc+0xc>)
 80059d6:	4601      	mov	r1, r0
 80059d8:	6818      	ldr	r0, [r3, #0]
 80059da:	f000 b825 	b.w	8005a28 <_malloc_r>
 80059de:	bf00      	nop
 80059e0:	20000184 	.word	0x20000184

080059e4 <sbrk_aligned>:
 80059e4:	b570      	push	{r4, r5, r6, lr}
 80059e6:	4e0f      	ldr	r6, [pc, #60]	@ (8005a24 <sbrk_aligned+0x40>)
 80059e8:	460c      	mov	r4, r1
 80059ea:	6831      	ldr	r1, [r6, #0]
 80059ec:	4605      	mov	r5, r0
 80059ee:	b911      	cbnz	r1, 80059f6 <sbrk_aligned+0x12>
 80059f0:	f000 fffc 	bl	80069ec <_sbrk_r>
 80059f4:	6030      	str	r0, [r6, #0]
 80059f6:	4621      	mov	r1, r4
 80059f8:	4628      	mov	r0, r5
 80059fa:	f000 fff7 	bl	80069ec <_sbrk_r>
 80059fe:	1c43      	adds	r3, r0, #1
 8005a00:	d103      	bne.n	8005a0a <sbrk_aligned+0x26>
 8005a02:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005a06:	4620      	mov	r0, r4
 8005a08:	bd70      	pop	{r4, r5, r6, pc}
 8005a0a:	1cc4      	adds	r4, r0, #3
 8005a0c:	f024 0403 	bic.w	r4, r4, #3
 8005a10:	42a0      	cmp	r0, r4
 8005a12:	d0f8      	beq.n	8005a06 <sbrk_aligned+0x22>
 8005a14:	1a21      	subs	r1, r4, r0
 8005a16:	4628      	mov	r0, r5
 8005a18:	f000 ffe8 	bl	80069ec <_sbrk_r>
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	d1f2      	bne.n	8005a06 <sbrk_aligned+0x22>
 8005a20:	e7ef      	b.n	8005a02 <sbrk_aligned+0x1e>
 8005a22:	bf00      	nop
 8005a24:	200040d0 	.word	0x200040d0

08005a28 <_malloc_r>:
 8005a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a2c:	1ccd      	adds	r5, r1, #3
 8005a2e:	f025 0503 	bic.w	r5, r5, #3
 8005a32:	3508      	adds	r5, #8
 8005a34:	2d0c      	cmp	r5, #12
 8005a36:	bf38      	it	cc
 8005a38:	250c      	movcc	r5, #12
 8005a3a:	2d00      	cmp	r5, #0
 8005a3c:	4606      	mov	r6, r0
 8005a3e:	db01      	blt.n	8005a44 <_malloc_r+0x1c>
 8005a40:	42a9      	cmp	r1, r5
 8005a42:	d904      	bls.n	8005a4e <_malloc_r+0x26>
 8005a44:	230c      	movs	r3, #12
 8005a46:	6033      	str	r3, [r6, #0]
 8005a48:	2000      	movs	r0, #0
 8005a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b24 <_malloc_r+0xfc>
 8005a52:	f000 f927 	bl	8005ca4 <__malloc_lock>
 8005a56:	f8d8 3000 	ldr.w	r3, [r8]
 8005a5a:	461c      	mov	r4, r3
 8005a5c:	bb44      	cbnz	r4, 8005ab0 <_malloc_r+0x88>
 8005a5e:	4629      	mov	r1, r5
 8005a60:	4630      	mov	r0, r6
 8005a62:	f7ff ffbf 	bl	80059e4 <sbrk_aligned>
 8005a66:	1c43      	adds	r3, r0, #1
 8005a68:	4604      	mov	r4, r0
 8005a6a:	d158      	bne.n	8005b1e <_malloc_r+0xf6>
 8005a6c:	f8d8 4000 	ldr.w	r4, [r8]
 8005a70:	4627      	mov	r7, r4
 8005a72:	2f00      	cmp	r7, #0
 8005a74:	d143      	bne.n	8005afe <_malloc_r+0xd6>
 8005a76:	2c00      	cmp	r4, #0
 8005a78:	d04b      	beq.n	8005b12 <_malloc_r+0xea>
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	4639      	mov	r1, r7
 8005a7e:	4630      	mov	r0, r6
 8005a80:	eb04 0903 	add.w	r9, r4, r3
 8005a84:	f000 ffb2 	bl	80069ec <_sbrk_r>
 8005a88:	4581      	cmp	r9, r0
 8005a8a:	d142      	bne.n	8005b12 <_malloc_r+0xea>
 8005a8c:	6821      	ldr	r1, [r4, #0]
 8005a8e:	1a6d      	subs	r5, r5, r1
 8005a90:	4629      	mov	r1, r5
 8005a92:	4630      	mov	r0, r6
 8005a94:	f7ff ffa6 	bl	80059e4 <sbrk_aligned>
 8005a98:	3001      	adds	r0, #1
 8005a9a:	d03a      	beq.n	8005b12 <_malloc_r+0xea>
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	442b      	add	r3, r5
 8005aa0:	6023      	str	r3, [r4, #0]
 8005aa2:	f8d8 3000 	ldr.w	r3, [r8]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	bb62      	cbnz	r2, 8005b04 <_malloc_r+0xdc>
 8005aaa:	f8c8 7000 	str.w	r7, [r8]
 8005aae:	e00f      	b.n	8005ad0 <_malloc_r+0xa8>
 8005ab0:	6822      	ldr	r2, [r4, #0]
 8005ab2:	1b52      	subs	r2, r2, r5
 8005ab4:	d420      	bmi.n	8005af8 <_malloc_r+0xd0>
 8005ab6:	2a0b      	cmp	r2, #11
 8005ab8:	d917      	bls.n	8005aea <_malloc_r+0xc2>
 8005aba:	1961      	adds	r1, r4, r5
 8005abc:	42a3      	cmp	r3, r4
 8005abe:	6025      	str	r5, [r4, #0]
 8005ac0:	bf18      	it	ne
 8005ac2:	6059      	strne	r1, [r3, #4]
 8005ac4:	6863      	ldr	r3, [r4, #4]
 8005ac6:	bf08      	it	eq
 8005ac8:	f8c8 1000 	streq.w	r1, [r8]
 8005acc:	5162      	str	r2, [r4, r5]
 8005ace:	604b      	str	r3, [r1, #4]
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	f000 f8ed 	bl	8005cb0 <__malloc_unlock>
 8005ad6:	f104 000b 	add.w	r0, r4, #11
 8005ada:	1d23      	adds	r3, r4, #4
 8005adc:	f020 0007 	bic.w	r0, r0, #7
 8005ae0:	1ac2      	subs	r2, r0, r3
 8005ae2:	bf1c      	itt	ne
 8005ae4:	1a1b      	subne	r3, r3, r0
 8005ae6:	50a3      	strne	r3, [r4, r2]
 8005ae8:	e7af      	b.n	8005a4a <_malloc_r+0x22>
 8005aea:	6862      	ldr	r2, [r4, #4]
 8005aec:	42a3      	cmp	r3, r4
 8005aee:	bf0c      	ite	eq
 8005af0:	f8c8 2000 	streq.w	r2, [r8]
 8005af4:	605a      	strne	r2, [r3, #4]
 8005af6:	e7eb      	b.n	8005ad0 <_malloc_r+0xa8>
 8005af8:	4623      	mov	r3, r4
 8005afa:	6864      	ldr	r4, [r4, #4]
 8005afc:	e7ae      	b.n	8005a5c <_malloc_r+0x34>
 8005afe:	463c      	mov	r4, r7
 8005b00:	687f      	ldr	r7, [r7, #4]
 8005b02:	e7b6      	b.n	8005a72 <_malloc_r+0x4a>
 8005b04:	461a      	mov	r2, r3
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	42a3      	cmp	r3, r4
 8005b0a:	d1fb      	bne.n	8005b04 <_malloc_r+0xdc>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	6053      	str	r3, [r2, #4]
 8005b10:	e7de      	b.n	8005ad0 <_malloc_r+0xa8>
 8005b12:	230c      	movs	r3, #12
 8005b14:	6033      	str	r3, [r6, #0]
 8005b16:	4630      	mov	r0, r6
 8005b18:	f000 f8ca 	bl	8005cb0 <__malloc_unlock>
 8005b1c:	e794      	b.n	8005a48 <_malloc_r+0x20>
 8005b1e:	6005      	str	r5, [r0, #0]
 8005b20:	e7d6      	b.n	8005ad0 <_malloc_r+0xa8>
 8005b22:	bf00      	nop
 8005b24:	200040d4 	.word	0x200040d4

08005b28 <__ascii_mbtowc>:
 8005b28:	b082      	sub	sp, #8
 8005b2a:	b901      	cbnz	r1, 8005b2e <__ascii_mbtowc+0x6>
 8005b2c:	a901      	add	r1, sp, #4
 8005b2e:	b142      	cbz	r2, 8005b42 <__ascii_mbtowc+0x1a>
 8005b30:	b14b      	cbz	r3, 8005b46 <__ascii_mbtowc+0x1e>
 8005b32:	7813      	ldrb	r3, [r2, #0]
 8005b34:	600b      	str	r3, [r1, #0]
 8005b36:	7812      	ldrb	r2, [r2, #0]
 8005b38:	1e10      	subs	r0, r2, #0
 8005b3a:	bf18      	it	ne
 8005b3c:	2001      	movne	r0, #1
 8005b3e:	b002      	add	sp, #8
 8005b40:	4770      	bx	lr
 8005b42:	4610      	mov	r0, r2
 8005b44:	e7fb      	b.n	8005b3e <__ascii_mbtowc+0x16>
 8005b46:	f06f 0001 	mvn.w	r0, #1
 8005b4a:	e7f8      	b.n	8005b3e <__ascii_mbtowc+0x16>

08005b4c <__sflush_r>:
 8005b4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b54:	0716      	lsls	r6, r2, #28
 8005b56:	4605      	mov	r5, r0
 8005b58:	460c      	mov	r4, r1
 8005b5a:	d454      	bmi.n	8005c06 <__sflush_r+0xba>
 8005b5c:	684b      	ldr	r3, [r1, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	dc02      	bgt.n	8005b68 <__sflush_r+0x1c>
 8005b62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	dd48      	ble.n	8005bfa <__sflush_r+0xae>
 8005b68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b6a:	2e00      	cmp	r6, #0
 8005b6c:	d045      	beq.n	8005bfa <__sflush_r+0xae>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005b74:	682f      	ldr	r7, [r5, #0]
 8005b76:	6a21      	ldr	r1, [r4, #32]
 8005b78:	602b      	str	r3, [r5, #0]
 8005b7a:	d030      	beq.n	8005bde <__sflush_r+0x92>
 8005b7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005b7e:	89a3      	ldrh	r3, [r4, #12]
 8005b80:	0759      	lsls	r1, r3, #29
 8005b82:	d505      	bpl.n	8005b90 <__sflush_r+0x44>
 8005b84:	6863      	ldr	r3, [r4, #4]
 8005b86:	1ad2      	subs	r2, r2, r3
 8005b88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005b8a:	b10b      	cbz	r3, 8005b90 <__sflush_r+0x44>
 8005b8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005b8e:	1ad2      	subs	r2, r2, r3
 8005b90:	2300      	movs	r3, #0
 8005b92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b94:	6a21      	ldr	r1, [r4, #32]
 8005b96:	4628      	mov	r0, r5
 8005b98:	47b0      	blx	r6
 8005b9a:	1c43      	adds	r3, r0, #1
 8005b9c:	89a3      	ldrh	r3, [r4, #12]
 8005b9e:	d106      	bne.n	8005bae <__sflush_r+0x62>
 8005ba0:	6829      	ldr	r1, [r5, #0]
 8005ba2:	291d      	cmp	r1, #29
 8005ba4:	d82b      	bhi.n	8005bfe <__sflush_r+0xb2>
 8005ba6:	4a2a      	ldr	r2, [pc, #168]	@ (8005c50 <__sflush_r+0x104>)
 8005ba8:	410a      	asrs	r2, r1
 8005baa:	07d6      	lsls	r6, r2, #31
 8005bac:	d427      	bmi.n	8005bfe <__sflush_r+0xb2>
 8005bae:	2200      	movs	r2, #0
 8005bb0:	6062      	str	r2, [r4, #4]
 8005bb2:	04d9      	lsls	r1, r3, #19
 8005bb4:	6922      	ldr	r2, [r4, #16]
 8005bb6:	6022      	str	r2, [r4, #0]
 8005bb8:	d504      	bpl.n	8005bc4 <__sflush_r+0x78>
 8005bba:	1c42      	adds	r2, r0, #1
 8005bbc:	d101      	bne.n	8005bc2 <__sflush_r+0x76>
 8005bbe:	682b      	ldr	r3, [r5, #0]
 8005bc0:	b903      	cbnz	r3, 8005bc4 <__sflush_r+0x78>
 8005bc2:	6560      	str	r0, [r4, #84]	@ 0x54
 8005bc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005bc6:	602f      	str	r7, [r5, #0]
 8005bc8:	b1b9      	cbz	r1, 8005bfa <__sflush_r+0xae>
 8005bca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bce:	4299      	cmp	r1, r3
 8005bd0:	d002      	beq.n	8005bd8 <__sflush_r+0x8c>
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	f000 ff5e 	bl	8006a94 <_free_r>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	6363      	str	r3, [r4, #52]	@ 0x34
 8005bdc:	e00d      	b.n	8005bfa <__sflush_r+0xae>
 8005bde:	2301      	movs	r3, #1
 8005be0:	4628      	mov	r0, r5
 8005be2:	47b0      	blx	r6
 8005be4:	4602      	mov	r2, r0
 8005be6:	1c50      	adds	r0, r2, #1
 8005be8:	d1c9      	bne.n	8005b7e <__sflush_r+0x32>
 8005bea:	682b      	ldr	r3, [r5, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d0c6      	beq.n	8005b7e <__sflush_r+0x32>
 8005bf0:	2b1d      	cmp	r3, #29
 8005bf2:	d001      	beq.n	8005bf8 <__sflush_r+0xac>
 8005bf4:	2b16      	cmp	r3, #22
 8005bf6:	d11e      	bne.n	8005c36 <__sflush_r+0xea>
 8005bf8:	602f      	str	r7, [r5, #0]
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	e022      	b.n	8005c44 <__sflush_r+0xf8>
 8005bfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c02:	b21b      	sxth	r3, r3
 8005c04:	e01b      	b.n	8005c3e <__sflush_r+0xf2>
 8005c06:	690f      	ldr	r7, [r1, #16]
 8005c08:	2f00      	cmp	r7, #0
 8005c0a:	d0f6      	beq.n	8005bfa <__sflush_r+0xae>
 8005c0c:	0793      	lsls	r3, r2, #30
 8005c0e:	680e      	ldr	r6, [r1, #0]
 8005c10:	bf08      	it	eq
 8005c12:	694b      	ldreq	r3, [r1, #20]
 8005c14:	600f      	str	r7, [r1, #0]
 8005c16:	bf18      	it	ne
 8005c18:	2300      	movne	r3, #0
 8005c1a:	eba6 0807 	sub.w	r8, r6, r7
 8005c1e:	608b      	str	r3, [r1, #8]
 8005c20:	f1b8 0f00 	cmp.w	r8, #0
 8005c24:	dde9      	ble.n	8005bfa <__sflush_r+0xae>
 8005c26:	6a21      	ldr	r1, [r4, #32]
 8005c28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005c2a:	4643      	mov	r3, r8
 8005c2c:	463a      	mov	r2, r7
 8005c2e:	4628      	mov	r0, r5
 8005c30:	47b0      	blx	r6
 8005c32:	2800      	cmp	r0, #0
 8005c34:	dc08      	bgt.n	8005c48 <__sflush_r+0xfc>
 8005c36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c3e:	81a3      	strh	r3, [r4, #12]
 8005c40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c48:	4407      	add	r7, r0
 8005c4a:	eba8 0800 	sub.w	r8, r8, r0
 8005c4e:	e7e7      	b.n	8005c20 <__sflush_r+0xd4>
 8005c50:	dfbffffe 	.word	0xdfbffffe

08005c54 <_fflush_r>:
 8005c54:	b538      	push	{r3, r4, r5, lr}
 8005c56:	690b      	ldr	r3, [r1, #16]
 8005c58:	4605      	mov	r5, r0
 8005c5a:	460c      	mov	r4, r1
 8005c5c:	b913      	cbnz	r3, 8005c64 <_fflush_r+0x10>
 8005c5e:	2500      	movs	r5, #0
 8005c60:	4628      	mov	r0, r5
 8005c62:	bd38      	pop	{r3, r4, r5, pc}
 8005c64:	b118      	cbz	r0, 8005c6e <_fflush_r+0x1a>
 8005c66:	6a03      	ldr	r3, [r0, #32]
 8005c68:	b90b      	cbnz	r3, 8005c6e <_fflush_r+0x1a>
 8005c6a:	f7fd fb5f 	bl	800332c <__sinit>
 8005c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0f3      	beq.n	8005c5e <_fflush_r+0xa>
 8005c76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005c78:	07d0      	lsls	r0, r2, #31
 8005c7a:	d404      	bmi.n	8005c86 <_fflush_r+0x32>
 8005c7c:	0599      	lsls	r1, r3, #22
 8005c7e:	d402      	bmi.n	8005c86 <_fflush_r+0x32>
 8005c80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c82:	f7fe fa68 	bl	8004156 <__retarget_lock_acquire_recursive>
 8005c86:	4628      	mov	r0, r5
 8005c88:	4621      	mov	r1, r4
 8005c8a:	f7ff ff5f 	bl	8005b4c <__sflush_r>
 8005c8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c90:	07da      	lsls	r2, r3, #31
 8005c92:	4605      	mov	r5, r0
 8005c94:	d4e4      	bmi.n	8005c60 <_fflush_r+0xc>
 8005c96:	89a3      	ldrh	r3, [r4, #12]
 8005c98:	059b      	lsls	r3, r3, #22
 8005c9a:	d4e1      	bmi.n	8005c60 <_fflush_r+0xc>
 8005c9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c9e:	f7fe fa5b 	bl	8004158 <__retarget_lock_release_recursive>
 8005ca2:	e7dd      	b.n	8005c60 <_fflush_r+0xc>

08005ca4 <__malloc_lock>:
 8005ca4:	4801      	ldr	r0, [pc, #4]	@ (8005cac <__malloc_lock+0x8>)
 8005ca6:	f7fe ba56 	b.w	8004156 <__retarget_lock_acquire_recursive>
 8005caa:	bf00      	nop
 8005cac:	200040cc 	.word	0x200040cc

08005cb0 <__malloc_unlock>:
 8005cb0:	4801      	ldr	r0, [pc, #4]	@ (8005cb8 <__malloc_unlock+0x8>)
 8005cb2:	f7fe ba51 	b.w	8004158 <__retarget_lock_release_recursive>
 8005cb6:	bf00      	nop
 8005cb8:	200040cc 	.word	0x200040cc

08005cbc <_Balloc>:
 8005cbc:	b570      	push	{r4, r5, r6, lr}
 8005cbe:	69c6      	ldr	r6, [r0, #28]
 8005cc0:	4604      	mov	r4, r0
 8005cc2:	460d      	mov	r5, r1
 8005cc4:	b976      	cbnz	r6, 8005ce4 <_Balloc+0x28>
 8005cc6:	2010      	movs	r0, #16
 8005cc8:	f7ff fe84 	bl	80059d4 <malloc>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	61e0      	str	r0, [r4, #28]
 8005cd0:	b920      	cbnz	r0, 8005cdc <_Balloc+0x20>
 8005cd2:	4b18      	ldr	r3, [pc, #96]	@ (8005d34 <_Balloc+0x78>)
 8005cd4:	4818      	ldr	r0, [pc, #96]	@ (8005d38 <_Balloc+0x7c>)
 8005cd6:	216b      	movs	r1, #107	@ 0x6b
 8005cd8:	f000 feaa 	bl	8006a30 <__assert_func>
 8005cdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ce0:	6006      	str	r6, [r0, #0]
 8005ce2:	60c6      	str	r6, [r0, #12]
 8005ce4:	69e6      	ldr	r6, [r4, #28]
 8005ce6:	68f3      	ldr	r3, [r6, #12]
 8005ce8:	b183      	cbz	r3, 8005d0c <_Balloc+0x50>
 8005cea:	69e3      	ldr	r3, [r4, #28]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005cf2:	b9b8      	cbnz	r0, 8005d24 <_Balloc+0x68>
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	fa01 f605 	lsl.w	r6, r1, r5
 8005cfa:	1d72      	adds	r2, r6, #5
 8005cfc:	0092      	lsls	r2, r2, #2
 8005cfe:	4620      	mov	r0, r4
 8005d00:	f000 feb4 	bl	8006a6c <_calloc_r>
 8005d04:	b160      	cbz	r0, 8005d20 <_Balloc+0x64>
 8005d06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d0a:	e00e      	b.n	8005d2a <_Balloc+0x6e>
 8005d0c:	2221      	movs	r2, #33	@ 0x21
 8005d0e:	2104      	movs	r1, #4
 8005d10:	4620      	mov	r0, r4
 8005d12:	f000 feab 	bl	8006a6c <_calloc_r>
 8005d16:	69e3      	ldr	r3, [r4, #28]
 8005d18:	60f0      	str	r0, [r6, #12]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1e4      	bne.n	8005cea <_Balloc+0x2e>
 8005d20:	2000      	movs	r0, #0
 8005d22:	bd70      	pop	{r4, r5, r6, pc}
 8005d24:	6802      	ldr	r2, [r0, #0]
 8005d26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d30:	e7f7      	b.n	8005d22 <_Balloc+0x66>
 8005d32:	bf00      	nop
 8005d34:	080075d6 	.word	0x080075d6
 8005d38:	080076c7 	.word	0x080076c7

08005d3c <_Bfree>:
 8005d3c:	b570      	push	{r4, r5, r6, lr}
 8005d3e:	69c6      	ldr	r6, [r0, #28]
 8005d40:	4605      	mov	r5, r0
 8005d42:	460c      	mov	r4, r1
 8005d44:	b976      	cbnz	r6, 8005d64 <_Bfree+0x28>
 8005d46:	2010      	movs	r0, #16
 8005d48:	f7ff fe44 	bl	80059d4 <malloc>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	61e8      	str	r0, [r5, #28]
 8005d50:	b920      	cbnz	r0, 8005d5c <_Bfree+0x20>
 8005d52:	4b09      	ldr	r3, [pc, #36]	@ (8005d78 <_Bfree+0x3c>)
 8005d54:	4809      	ldr	r0, [pc, #36]	@ (8005d7c <_Bfree+0x40>)
 8005d56:	218f      	movs	r1, #143	@ 0x8f
 8005d58:	f000 fe6a 	bl	8006a30 <__assert_func>
 8005d5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d60:	6006      	str	r6, [r0, #0]
 8005d62:	60c6      	str	r6, [r0, #12]
 8005d64:	b13c      	cbz	r4, 8005d76 <_Bfree+0x3a>
 8005d66:	69eb      	ldr	r3, [r5, #28]
 8005d68:	6862      	ldr	r2, [r4, #4]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d70:	6021      	str	r1, [r4, #0]
 8005d72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d76:	bd70      	pop	{r4, r5, r6, pc}
 8005d78:	080075d6 	.word	0x080075d6
 8005d7c:	080076c7 	.word	0x080076c7

08005d80 <__multadd>:
 8005d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d84:	690d      	ldr	r5, [r1, #16]
 8005d86:	4607      	mov	r7, r0
 8005d88:	460c      	mov	r4, r1
 8005d8a:	461e      	mov	r6, r3
 8005d8c:	f101 0c14 	add.w	ip, r1, #20
 8005d90:	2000      	movs	r0, #0
 8005d92:	f8dc 3000 	ldr.w	r3, [ip]
 8005d96:	b299      	uxth	r1, r3
 8005d98:	fb02 6101 	mla	r1, r2, r1, r6
 8005d9c:	0c1e      	lsrs	r6, r3, #16
 8005d9e:	0c0b      	lsrs	r3, r1, #16
 8005da0:	fb02 3306 	mla	r3, r2, r6, r3
 8005da4:	b289      	uxth	r1, r1
 8005da6:	3001      	adds	r0, #1
 8005da8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005dac:	4285      	cmp	r5, r0
 8005dae:	f84c 1b04 	str.w	r1, [ip], #4
 8005db2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005db6:	dcec      	bgt.n	8005d92 <__multadd+0x12>
 8005db8:	b30e      	cbz	r6, 8005dfe <__multadd+0x7e>
 8005dba:	68a3      	ldr	r3, [r4, #8]
 8005dbc:	42ab      	cmp	r3, r5
 8005dbe:	dc19      	bgt.n	8005df4 <__multadd+0x74>
 8005dc0:	6861      	ldr	r1, [r4, #4]
 8005dc2:	4638      	mov	r0, r7
 8005dc4:	3101      	adds	r1, #1
 8005dc6:	f7ff ff79 	bl	8005cbc <_Balloc>
 8005dca:	4680      	mov	r8, r0
 8005dcc:	b928      	cbnz	r0, 8005dda <__multadd+0x5a>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8005e04 <__multadd+0x84>)
 8005dd2:	480d      	ldr	r0, [pc, #52]	@ (8005e08 <__multadd+0x88>)
 8005dd4:	21ba      	movs	r1, #186	@ 0xba
 8005dd6:	f000 fe2b 	bl	8006a30 <__assert_func>
 8005dda:	6922      	ldr	r2, [r4, #16]
 8005ddc:	3202      	adds	r2, #2
 8005dde:	f104 010c 	add.w	r1, r4, #12
 8005de2:	0092      	lsls	r2, r2, #2
 8005de4:	300c      	adds	r0, #12
 8005de6:	f7fe f9b8 	bl	800415a <memcpy>
 8005dea:	4621      	mov	r1, r4
 8005dec:	4638      	mov	r0, r7
 8005dee:	f7ff ffa5 	bl	8005d3c <_Bfree>
 8005df2:	4644      	mov	r4, r8
 8005df4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005df8:	3501      	adds	r5, #1
 8005dfa:	615e      	str	r6, [r3, #20]
 8005dfc:	6125      	str	r5, [r4, #16]
 8005dfe:	4620      	mov	r0, r4
 8005e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e04:	08007645 	.word	0x08007645
 8005e08:	080076c7 	.word	0x080076c7

08005e0c <__s2b>:
 8005e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e10:	460c      	mov	r4, r1
 8005e12:	4615      	mov	r5, r2
 8005e14:	461f      	mov	r7, r3
 8005e16:	2209      	movs	r2, #9
 8005e18:	3308      	adds	r3, #8
 8005e1a:	4606      	mov	r6, r0
 8005e1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e20:	2100      	movs	r1, #0
 8005e22:	2201      	movs	r2, #1
 8005e24:	429a      	cmp	r2, r3
 8005e26:	db09      	blt.n	8005e3c <__s2b+0x30>
 8005e28:	4630      	mov	r0, r6
 8005e2a:	f7ff ff47 	bl	8005cbc <_Balloc>
 8005e2e:	b940      	cbnz	r0, 8005e42 <__s2b+0x36>
 8005e30:	4602      	mov	r2, r0
 8005e32:	4b19      	ldr	r3, [pc, #100]	@ (8005e98 <__s2b+0x8c>)
 8005e34:	4819      	ldr	r0, [pc, #100]	@ (8005e9c <__s2b+0x90>)
 8005e36:	21d3      	movs	r1, #211	@ 0xd3
 8005e38:	f000 fdfa 	bl	8006a30 <__assert_func>
 8005e3c:	0052      	lsls	r2, r2, #1
 8005e3e:	3101      	adds	r1, #1
 8005e40:	e7f0      	b.n	8005e24 <__s2b+0x18>
 8005e42:	9b08      	ldr	r3, [sp, #32]
 8005e44:	6143      	str	r3, [r0, #20]
 8005e46:	2d09      	cmp	r5, #9
 8005e48:	f04f 0301 	mov.w	r3, #1
 8005e4c:	6103      	str	r3, [r0, #16]
 8005e4e:	dd16      	ble.n	8005e7e <__s2b+0x72>
 8005e50:	f104 0909 	add.w	r9, r4, #9
 8005e54:	46c8      	mov	r8, r9
 8005e56:	442c      	add	r4, r5
 8005e58:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005e5c:	4601      	mov	r1, r0
 8005e5e:	3b30      	subs	r3, #48	@ 0x30
 8005e60:	220a      	movs	r2, #10
 8005e62:	4630      	mov	r0, r6
 8005e64:	f7ff ff8c 	bl	8005d80 <__multadd>
 8005e68:	45a0      	cmp	r8, r4
 8005e6a:	d1f5      	bne.n	8005e58 <__s2b+0x4c>
 8005e6c:	f1a5 0408 	sub.w	r4, r5, #8
 8005e70:	444c      	add	r4, r9
 8005e72:	1b2d      	subs	r5, r5, r4
 8005e74:	1963      	adds	r3, r4, r5
 8005e76:	42bb      	cmp	r3, r7
 8005e78:	db04      	blt.n	8005e84 <__s2b+0x78>
 8005e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e7e:	340a      	adds	r4, #10
 8005e80:	2509      	movs	r5, #9
 8005e82:	e7f6      	b.n	8005e72 <__s2b+0x66>
 8005e84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005e88:	4601      	mov	r1, r0
 8005e8a:	3b30      	subs	r3, #48	@ 0x30
 8005e8c:	220a      	movs	r2, #10
 8005e8e:	4630      	mov	r0, r6
 8005e90:	f7ff ff76 	bl	8005d80 <__multadd>
 8005e94:	e7ee      	b.n	8005e74 <__s2b+0x68>
 8005e96:	bf00      	nop
 8005e98:	08007645 	.word	0x08007645
 8005e9c:	080076c7 	.word	0x080076c7

08005ea0 <__hi0bits>:
 8005ea0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	bf36      	itet	cc
 8005ea8:	0403      	lslcc	r3, r0, #16
 8005eaa:	2000      	movcs	r0, #0
 8005eac:	2010      	movcc	r0, #16
 8005eae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005eb2:	bf3c      	itt	cc
 8005eb4:	021b      	lslcc	r3, r3, #8
 8005eb6:	3008      	addcc	r0, #8
 8005eb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ebc:	bf3c      	itt	cc
 8005ebe:	011b      	lslcc	r3, r3, #4
 8005ec0:	3004      	addcc	r0, #4
 8005ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ec6:	bf3c      	itt	cc
 8005ec8:	009b      	lslcc	r3, r3, #2
 8005eca:	3002      	addcc	r0, #2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	db05      	blt.n	8005edc <__hi0bits+0x3c>
 8005ed0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005ed4:	f100 0001 	add.w	r0, r0, #1
 8005ed8:	bf08      	it	eq
 8005eda:	2020      	moveq	r0, #32
 8005edc:	4770      	bx	lr

08005ede <__lo0bits>:
 8005ede:	6803      	ldr	r3, [r0, #0]
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	f013 0007 	ands.w	r0, r3, #7
 8005ee6:	d00b      	beq.n	8005f00 <__lo0bits+0x22>
 8005ee8:	07d9      	lsls	r1, r3, #31
 8005eea:	d421      	bmi.n	8005f30 <__lo0bits+0x52>
 8005eec:	0798      	lsls	r0, r3, #30
 8005eee:	bf49      	itett	mi
 8005ef0:	085b      	lsrmi	r3, r3, #1
 8005ef2:	089b      	lsrpl	r3, r3, #2
 8005ef4:	2001      	movmi	r0, #1
 8005ef6:	6013      	strmi	r3, [r2, #0]
 8005ef8:	bf5c      	itt	pl
 8005efa:	6013      	strpl	r3, [r2, #0]
 8005efc:	2002      	movpl	r0, #2
 8005efe:	4770      	bx	lr
 8005f00:	b299      	uxth	r1, r3
 8005f02:	b909      	cbnz	r1, 8005f08 <__lo0bits+0x2a>
 8005f04:	0c1b      	lsrs	r3, r3, #16
 8005f06:	2010      	movs	r0, #16
 8005f08:	b2d9      	uxtb	r1, r3
 8005f0a:	b909      	cbnz	r1, 8005f10 <__lo0bits+0x32>
 8005f0c:	3008      	adds	r0, #8
 8005f0e:	0a1b      	lsrs	r3, r3, #8
 8005f10:	0719      	lsls	r1, r3, #28
 8005f12:	bf04      	itt	eq
 8005f14:	091b      	lsreq	r3, r3, #4
 8005f16:	3004      	addeq	r0, #4
 8005f18:	0799      	lsls	r1, r3, #30
 8005f1a:	bf04      	itt	eq
 8005f1c:	089b      	lsreq	r3, r3, #2
 8005f1e:	3002      	addeq	r0, #2
 8005f20:	07d9      	lsls	r1, r3, #31
 8005f22:	d403      	bmi.n	8005f2c <__lo0bits+0x4e>
 8005f24:	085b      	lsrs	r3, r3, #1
 8005f26:	f100 0001 	add.w	r0, r0, #1
 8005f2a:	d003      	beq.n	8005f34 <__lo0bits+0x56>
 8005f2c:	6013      	str	r3, [r2, #0]
 8005f2e:	4770      	bx	lr
 8005f30:	2000      	movs	r0, #0
 8005f32:	4770      	bx	lr
 8005f34:	2020      	movs	r0, #32
 8005f36:	4770      	bx	lr

08005f38 <__i2b>:
 8005f38:	b510      	push	{r4, lr}
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	2101      	movs	r1, #1
 8005f3e:	f7ff febd 	bl	8005cbc <_Balloc>
 8005f42:	4602      	mov	r2, r0
 8005f44:	b928      	cbnz	r0, 8005f52 <__i2b+0x1a>
 8005f46:	4b05      	ldr	r3, [pc, #20]	@ (8005f5c <__i2b+0x24>)
 8005f48:	4805      	ldr	r0, [pc, #20]	@ (8005f60 <__i2b+0x28>)
 8005f4a:	f240 1145 	movw	r1, #325	@ 0x145
 8005f4e:	f000 fd6f 	bl	8006a30 <__assert_func>
 8005f52:	2301      	movs	r3, #1
 8005f54:	6144      	str	r4, [r0, #20]
 8005f56:	6103      	str	r3, [r0, #16]
 8005f58:	bd10      	pop	{r4, pc}
 8005f5a:	bf00      	nop
 8005f5c:	08007645 	.word	0x08007645
 8005f60:	080076c7 	.word	0x080076c7

08005f64 <__multiply>:
 8005f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f68:	4614      	mov	r4, r2
 8005f6a:	690a      	ldr	r2, [r1, #16]
 8005f6c:	6923      	ldr	r3, [r4, #16]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	bfa8      	it	ge
 8005f72:	4623      	movge	r3, r4
 8005f74:	460f      	mov	r7, r1
 8005f76:	bfa4      	itt	ge
 8005f78:	460c      	movge	r4, r1
 8005f7a:	461f      	movge	r7, r3
 8005f7c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005f80:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005f84:	68a3      	ldr	r3, [r4, #8]
 8005f86:	6861      	ldr	r1, [r4, #4]
 8005f88:	eb0a 0609 	add.w	r6, sl, r9
 8005f8c:	42b3      	cmp	r3, r6
 8005f8e:	b085      	sub	sp, #20
 8005f90:	bfb8      	it	lt
 8005f92:	3101      	addlt	r1, #1
 8005f94:	f7ff fe92 	bl	8005cbc <_Balloc>
 8005f98:	b930      	cbnz	r0, 8005fa8 <__multiply+0x44>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	4b44      	ldr	r3, [pc, #272]	@ (80060b0 <__multiply+0x14c>)
 8005f9e:	4845      	ldr	r0, [pc, #276]	@ (80060b4 <__multiply+0x150>)
 8005fa0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005fa4:	f000 fd44 	bl	8006a30 <__assert_func>
 8005fa8:	f100 0514 	add.w	r5, r0, #20
 8005fac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005fb0:	462b      	mov	r3, r5
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	4543      	cmp	r3, r8
 8005fb6:	d321      	bcc.n	8005ffc <__multiply+0x98>
 8005fb8:	f107 0114 	add.w	r1, r7, #20
 8005fbc:	f104 0214 	add.w	r2, r4, #20
 8005fc0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005fc4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005fc8:	9302      	str	r3, [sp, #8]
 8005fca:	1b13      	subs	r3, r2, r4
 8005fcc:	3b15      	subs	r3, #21
 8005fce:	f023 0303 	bic.w	r3, r3, #3
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	f104 0715 	add.w	r7, r4, #21
 8005fd8:	42ba      	cmp	r2, r7
 8005fda:	bf38      	it	cc
 8005fdc:	2304      	movcc	r3, #4
 8005fde:	9301      	str	r3, [sp, #4]
 8005fe0:	9b02      	ldr	r3, [sp, #8]
 8005fe2:	9103      	str	r1, [sp, #12]
 8005fe4:	428b      	cmp	r3, r1
 8005fe6:	d80c      	bhi.n	8006002 <__multiply+0x9e>
 8005fe8:	2e00      	cmp	r6, #0
 8005fea:	dd03      	ble.n	8005ff4 <__multiply+0x90>
 8005fec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d05b      	beq.n	80060ac <__multiply+0x148>
 8005ff4:	6106      	str	r6, [r0, #16]
 8005ff6:	b005      	add	sp, #20
 8005ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ffc:	f843 2b04 	str.w	r2, [r3], #4
 8006000:	e7d8      	b.n	8005fb4 <__multiply+0x50>
 8006002:	f8b1 a000 	ldrh.w	sl, [r1]
 8006006:	f1ba 0f00 	cmp.w	sl, #0
 800600a:	d024      	beq.n	8006056 <__multiply+0xf2>
 800600c:	f104 0e14 	add.w	lr, r4, #20
 8006010:	46a9      	mov	r9, r5
 8006012:	f04f 0c00 	mov.w	ip, #0
 8006016:	f85e 7b04 	ldr.w	r7, [lr], #4
 800601a:	f8d9 3000 	ldr.w	r3, [r9]
 800601e:	fa1f fb87 	uxth.w	fp, r7
 8006022:	b29b      	uxth	r3, r3
 8006024:	fb0a 330b 	mla	r3, sl, fp, r3
 8006028:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800602c:	f8d9 7000 	ldr.w	r7, [r9]
 8006030:	4463      	add	r3, ip
 8006032:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006036:	fb0a c70b 	mla	r7, sl, fp, ip
 800603a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800603e:	b29b      	uxth	r3, r3
 8006040:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006044:	4572      	cmp	r2, lr
 8006046:	f849 3b04 	str.w	r3, [r9], #4
 800604a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800604e:	d8e2      	bhi.n	8006016 <__multiply+0xb2>
 8006050:	9b01      	ldr	r3, [sp, #4]
 8006052:	f845 c003 	str.w	ip, [r5, r3]
 8006056:	9b03      	ldr	r3, [sp, #12]
 8006058:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800605c:	3104      	adds	r1, #4
 800605e:	f1b9 0f00 	cmp.w	r9, #0
 8006062:	d021      	beq.n	80060a8 <__multiply+0x144>
 8006064:	682b      	ldr	r3, [r5, #0]
 8006066:	f104 0c14 	add.w	ip, r4, #20
 800606a:	46ae      	mov	lr, r5
 800606c:	f04f 0a00 	mov.w	sl, #0
 8006070:	f8bc b000 	ldrh.w	fp, [ip]
 8006074:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006078:	fb09 770b 	mla	r7, r9, fp, r7
 800607c:	4457      	add	r7, sl
 800607e:	b29b      	uxth	r3, r3
 8006080:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006084:	f84e 3b04 	str.w	r3, [lr], #4
 8006088:	f85c 3b04 	ldr.w	r3, [ip], #4
 800608c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006090:	f8be 3000 	ldrh.w	r3, [lr]
 8006094:	fb09 330a 	mla	r3, r9, sl, r3
 8006098:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800609c:	4562      	cmp	r2, ip
 800609e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060a2:	d8e5      	bhi.n	8006070 <__multiply+0x10c>
 80060a4:	9f01      	ldr	r7, [sp, #4]
 80060a6:	51eb      	str	r3, [r5, r7]
 80060a8:	3504      	adds	r5, #4
 80060aa:	e799      	b.n	8005fe0 <__multiply+0x7c>
 80060ac:	3e01      	subs	r6, #1
 80060ae:	e79b      	b.n	8005fe8 <__multiply+0x84>
 80060b0:	08007645 	.word	0x08007645
 80060b4:	080076c7 	.word	0x080076c7

080060b8 <__pow5mult>:
 80060b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060bc:	4615      	mov	r5, r2
 80060be:	f012 0203 	ands.w	r2, r2, #3
 80060c2:	4607      	mov	r7, r0
 80060c4:	460e      	mov	r6, r1
 80060c6:	d007      	beq.n	80060d8 <__pow5mult+0x20>
 80060c8:	4c25      	ldr	r4, [pc, #148]	@ (8006160 <__pow5mult+0xa8>)
 80060ca:	3a01      	subs	r2, #1
 80060cc:	2300      	movs	r3, #0
 80060ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80060d2:	f7ff fe55 	bl	8005d80 <__multadd>
 80060d6:	4606      	mov	r6, r0
 80060d8:	10ad      	asrs	r5, r5, #2
 80060da:	d03d      	beq.n	8006158 <__pow5mult+0xa0>
 80060dc:	69fc      	ldr	r4, [r7, #28]
 80060de:	b97c      	cbnz	r4, 8006100 <__pow5mult+0x48>
 80060e0:	2010      	movs	r0, #16
 80060e2:	f7ff fc77 	bl	80059d4 <malloc>
 80060e6:	4602      	mov	r2, r0
 80060e8:	61f8      	str	r0, [r7, #28]
 80060ea:	b928      	cbnz	r0, 80060f8 <__pow5mult+0x40>
 80060ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006164 <__pow5mult+0xac>)
 80060ee:	481e      	ldr	r0, [pc, #120]	@ (8006168 <__pow5mult+0xb0>)
 80060f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80060f4:	f000 fc9c 	bl	8006a30 <__assert_func>
 80060f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060fc:	6004      	str	r4, [r0, #0]
 80060fe:	60c4      	str	r4, [r0, #12]
 8006100:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006104:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006108:	b94c      	cbnz	r4, 800611e <__pow5mult+0x66>
 800610a:	f240 2171 	movw	r1, #625	@ 0x271
 800610e:	4638      	mov	r0, r7
 8006110:	f7ff ff12 	bl	8005f38 <__i2b>
 8006114:	2300      	movs	r3, #0
 8006116:	f8c8 0008 	str.w	r0, [r8, #8]
 800611a:	4604      	mov	r4, r0
 800611c:	6003      	str	r3, [r0, #0]
 800611e:	f04f 0900 	mov.w	r9, #0
 8006122:	07eb      	lsls	r3, r5, #31
 8006124:	d50a      	bpl.n	800613c <__pow5mult+0x84>
 8006126:	4631      	mov	r1, r6
 8006128:	4622      	mov	r2, r4
 800612a:	4638      	mov	r0, r7
 800612c:	f7ff ff1a 	bl	8005f64 <__multiply>
 8006130:	4631      	mov	r1, r6
 8006132:	4680      	mov	r8, r0
 8006134:	4638      	mov	r0, r7
 8006136:	f7ff fe01 	bl	8005d3c <_Bfree>
 800613a:	4646      	mov	r6, r8
 800613c:	106d      	asrs	r5, r5, #1
 800613e:	d00b      	beq.n	8006158 <__pow5mult+0xa0>
 8006140:	6820      	ldr	r0, [r4, #0]
 8006142:	b938      	cbnz	r0, 8006154 <__pow5mult+0x9c>
 8006144:	4622      	mov	r2, r4
 8006146:	4621      	mov	r1, r4
 8006148:	4638      	mov	r0, r7
 800614a:	f7ff ff0b 	bl	8005f64 <__multiply>
 800614e:	6020      	str	r0, [r4, #0]
 8006150:	f8c0 9000 	str.w	r9, [r0]
 8006154:	4604      	mov	r4, r0
 8006156:	e7e4      	b.n	8006122 <__pow5mult+0x6a>
 8006158:	4630      	mov	r0, r6
 800615a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800615e:	bf00      	nop
 8006160:	08007720 	.word	0x08007720
 8006164:	080075d6 	.word	0x080075d6
 8006168:	080076c7 	.word	0x080076c7

0800616c <__lshift>:
 800616c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006170:	460c      	mov	r4, r1
 8006172:	6849      	ldr	r1, [r1, #4]
 8006174:	6923      	ldr	r3, [r4, #16]
 8006176:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800617a:	68a3      	ldr	r3, [r4, #8]
 800617c:	4607      	mov	r7, r0
 800617e:	4691      	mov	r9, r2
 8006180:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006184:	f108 0601 	add.w	r6, r8, #1
 8006188:	42b3      	cmp	r3, r6
 800618a:	db0b      	blt.n	80061a4 <__lshift+0x38>
 800618c:	4638      	mov	r0, r7
 800618e:	f7ff fd95 	bl	8005cbc <_Balloc>
 8006192:	4605      	mov	r5, r0
 8006194:	b948      	cbnz	r0, 80061aa <__lshift+0x3e>
 8006196:	4602      	mov	r2, r0
 8006198:	4b28      	ldr	r3, [pc, #160]	@ (800623c <__lshift+0xd0>)
 800619a:	4829      	ldr	r0, [pc, #164]	@ (8006240 <__lshift+0xd4>)
 800619c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80061a0:	f000 fc46 	bl	8006a30 <__assert_func>
 80061a4:	3101      	adds	r1, #1
 80061a6:	005b      	lsls	r3, r3, #1
 80061a8:	e7ee      	b.n	8006188 <__lshift+0x1c>
 80061aa:	2300      	movs	r3, #0
 80061ac:	f100 0114 	add.w	r1, r0, #20
 80061b0:	f100 0210 	add.w	r2, r0, #16
 80061b4:	4618      	mov	r0, r3
 80061b6:	4553      	cmp	r3, sl
 80061b8:	db33      	blt.n	8006222 <__lshift+0xb6>
 80061ba:	6920      	ldr	r0, [r4, #16]
 80061bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80061c0:	f104 0314 	add.w	r3, r4, #20
 80061c4:	f019 091f 	ands.w	r9, r9, #31
 80061c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80061cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80061d0:	d02b      	beq.n	800622a <__lshift+0xbe>
 80061d2:	f1c9 0e20 	rsb	lr, r9, #32
 80061d6:	468a      	mov	sl, r1
 80061d8:	2200      	movs	r2, #0
 80061da:	6818      	ldr	r0, [r3, #0]
 80061dc:	fa00 f009 	lsl.w	r0, r0, r9
 80061e0:	4310      	orrs	r0, r2
 80061e2:	f84a 0b04 	str.w	r0, [sl], #4
 80061e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80061ea:	459c      	cmp	ip, r3
 80061ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80061f0:	d8f3      	bhi.n	80061da <__lshift+0x6e>
 80061f2:	ebac 0304 	sub.w	r3, ip, r4
 80061f6:	3b15      	subs	r3, #21
 80061f8:	f023 0303 	bic.w	r3, r3, #3
 80061fc:	3304      	adds	r3, #4
 80061fe:	f104 0015 	add.w	r0, r4, #21
 8006202:	4584      	cmp	ip, r0
 8006204:	bf38      	it	cc
 8006206:	2304      	movcc	r3, #4
 8006208:	50ca      	str	r2, [r1, r3]
 800620a:	b10a      	cbz	r2, 8006210 <__lshift+0xa4>
 800620c:	f108 0602 	add.w	r6, r8, #2
 8006210:	3e01      	subs	r6, #1
 8006212:	4638      	mov	r0, r7
 8006214:	612e      	str	r6, [r5, #16]
 8006216:	4621      	mov	r1, r4
 8006218:	f7ff fd90 	bl	8005d3c <_Bfree>
 800621c:	4628      	mov	r0, r5
 800621e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006222:	f842 0f04 	str.w	r0, [r2, #4]!
 8006226:	3301      	adds	r3, #1
 8006228:	e7c5      	b.n	80061b6 <__lshift+0x4a>
 800622a:	3904      	subs	r1, #4
 800622c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006230:	f841 2f04 	str.w	r2, [r1, #4]!
 8006234:	459c      	cmp	ip, r3
 8006236:	d8f9      	bhi.n	800622c <__lshift+0xc0>
 8006238:	e7ea      	b.n	8006210 <__lshift+0xa4>
 800623a:	bf00      	nop
 800623c:	08007645 	.word	0x08007645
 8006240:	080076c7 	.word	0x080076c7

08006244 <__mcmp>:
 8006244:	690a      	ldr	r2, [r1, #16]
 8006246:	4603      	mov	r3, r0
 8006248:	6900      	ldr	r0, [r0, #16]
 800624a:	1a80      	subs	r0, r0, r2
 800624c:	b530      	push	{r4, r5, lr}
 800624e:	d10e      	bne.n	800626e <__mcmp+0x2a>
 8006250:	3314      	adds	r3, #20
 8006252:	3114      	adds	r1, #20
 8006254:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006258:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800625c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006260:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006264:	4295      	cmp	r5, r2
 8006266:	d003      	beq.n	8006270 <__mcmp+0x2c>
 8006268:	d205      	bcs.n	8006276 <__mcmp+0x32>
 800626a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800626e:	bd30      	pop	{r4, r5, pc}
 8006270:	42a3      	cmp	r3, r4
 8006272:	d3f3      	bcc.n	800625c <__mcmp+0x18>
 8006274:	e7fb      	b.n	800626e <__mcmp+0x2a>
 8006276:	2001      	movs	r0, #1
 8006278:	e7f9      	b.n	800626e <__mcmp+0x2a>
	...

0800627c <__mdiff>:
 800627c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006280:	4689      	mov	r9, r1
 8006282:	4606      	mov	r6, r0
 8006284:	4611      	mov	r1, r2
 8006286:	4648      	mov	r0, r9
 8006288:	4614      	mov	r4, r2
 800628a:	f7ff ffdb 	bl	8006244 <__mcmp>
 800628e:	1e05      	subs	r5, r0, #0
 8006290:	d112      	bne.n	80062b8 <__mdiff+0x3c>
 8006292:	4629      	mov	r1, r5
 8006294:	4630      	mov	r0, r6
 8006296:	f7ff fd11 	bl	8005cbc <_Balloc>
 800629a:	4602      	mov	r2, r0
 800629c:	b928      	cbnz	r0, 80062aa <__mdiff+0x2e>
 800629e:	4b3f      	ldr	r3, [pc, #252]	@ (800639c <__mdiff+0x120>)
 80062a0:	f240 2137 	movw	r1, #567	@ 0x237
 80062a4:	483e      	ldr	r0, [pc, #248]	@ (80063a0 <__mdiff+0x124>)
 80062a6:	f000 fbc3 	bl	8006a30 <__assert_func>
 80062aa:	2301      	movs	r3, #1
 80062ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80062b0:	4610      	mov	r0, r2
 80062b2:	b003      	add	sp, #12
 80062b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b8:	bfbc      	itt	lt
 80062ba:	464b      	movlt	r3, r9
 80062bc:	46a1      	movlt	r9, r4
 80062be:	4630      	mov	r0, r6
 80062c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80062c4:	bfba      	itte	lt
 80062c6:	461c      	movlt	r4, r3
 80062c8:	2501      	movlt	r5, #1
 80062ca:	2500      	movge	r5, #0
 80062cc:	f7ff fcf6 	bl	8005cbc <_Balloc>
 80062d0:	4602      	mov	r2, r0
 80062d2:	b918      	cbnz	r0, 80062dc <__mdiff+0x60>
 80062d4:	4b31      	ldr	r3, [pc, #196]	@ (800639c <__mdiff+0x120>)
 80062d6:	f240 2145 	movw	r1, #581	@ 0x245
 80062da:	e7e3      	b.n	80062a4 <__mdiff+0x28>
 80062dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80062e0:	6926      	ldr	r6, [r4, #16]
 80062e2:	60c5      	str	r5, [r0, #12]
 80062e4:	f109 0310 	add.w	r3, r9, #16
 80062e8:	f109 0514 	add.w	r5, r9, #20
 80062ec:	f104 0e14 	add.w	lr, r4, #20
 80062f0:	f100 0b14 	add.w	fp, r0, #20
 80062f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80062f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80062fc:	9301      	str	r3, [sp, #4]
 80062fe:	46d9      	mov	r9, fp
 8006300:	f04f 0c00 	mov.w	ip, #0
 8006304:	9b01      	ldr	r3, [sp, #4]
 8006306:	f85e 0b04 	ldr.w	r0, [lr], #4
 800630a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800630e:	9301      	str	r3, [sp, #4]
 8006310:	fa1f f38a 	uxth.w	r3, sl
 8006314:	4619      	mov	r1, r3
 8006316:	b283      	uxth	r3, r0
 8006318:	1acb      	subs	r3, r1, r3
 800631a:	0c00      	lsrs	r0, r0, #16
 800631c:	4463      	add	r3, ip
 800631e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006322:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006326:	b29b      	uxth	r3, r3
 8006328:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800632c:	4576      	cmp	r6, lr
 800632e:	f849 3b04 	str.w	r3, [r9], #4
 8006332:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006336:	d8e5      	bhi.n	8006304 <__mdiff+0x88>
 8006338:	1b33      	subs	r3, r6, r4
 800633a:	3b15      	subs	r3, #21
 800633c:	f023 0303 	bic.w	r3, r3, #3
 8006340:	3415      	adds	r4, #21
 8006342:	3304      	adds	r3, #4
 8006344:	42a6      	cmp	r6, r4
 8006346:	bf38      	it	cc
 8006348:	2304      	movcc	r3, #4
 800634a:	441d      	add	r5, r3
 800634c:	445b      	add	r3, fp
 800634e:	461e      	mov	r6, r3
 8006350:	462c      	mov	r4, r5
 8006352:	4544      	cmp	r4, r8
 8006354:	d30e      	bcc.n	8006374 <__mdiff+0xf8>
 8006356:	f108 0103 	add.w	r1, r8, #3
 800635a:	1b49      	subs	r1, r1, r5
 800635c:	f021 0103 	bic.w	r1, r1, #3
 8006360:	3d03      	subs	r5, #3
 8006362:	45a8      	cmp	r8, r5
 8006364:	bf38      	it	cc
 8006366:	2100      	movcc	r1, #0
 8006368:	440b      	add	r3, r1
 800636a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800636e:	b191      	cbz	r1, 8006396 <__mdiff+0x11a>
 8006370:	6117      	str	r7, [r2, #16]
 8006372:	e79d      	b.n	80062b0 <__mdiff+0x34>
 8006374:	f854 1b04 	ldr.w	r1, [r4], #4
 8006378:	46e6      	mov	lr, ip
 800637a:	0c08      	lsrs	r0, r1, #16
 800637c:	fa1c fc81 	uxtah	ip, ip, r1
 8006380:	4471      	add	r1, lr
 8006382:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006386:	b289      	uxth	r1, r1
 8006388:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800638c:	f846 1b04 	str.w	r1, [r6], #4
 8006390:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006394:	e7dd      	b.n	8006352 <__mdiff+0xd6>
 8006396:	3f01      	subs	r7, #1
 8006398:	e7e7      	b.n	800636a <__mdiff+0xee>
 800639a:	bf00      	nop
 800639c:	08007645 	.word	0x08007645
 80063a0:	080076c7 	.word	0x080076c7

080063a4 <__ulp>:
 80063a4:	b082      	sub	sp, #8
 80063a6:	ed8d 0b00 	vstr	d0, [sp]
 80063aa:	9a01      	ldr	r2, [sp, #4]
 80063ac:	4b0f      	ldr	r3, [pc, #60]	@ (80063ec <__ulp+0x48>)
 80063ae:	4013      	ands	r3, r2
 80063b0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	dc08      	bgt.n	80063ca <__ulp+0x26>
 80063b8:	425b      	negs	r3, r3
 80063ba:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80063be:	ea4f 5223 	mov.w	r2, r3, asr #20
 80063c2:	da04      	bge.n	80063ce <__ulp+0x2a>
 80063c4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80063c8:	4113      	asrs	r3, r2
 80063ca:	2200      	movs	r2, #0
 80063cc:	e008      	b.n	80063e0 <__ulp+0x3c>
 80063ce:	f1a2 0314 	sub.w	r3, r2, #20
 80063d2:	2b1e      	cmp	r3, #30
 80063d4:	bfda      	itte	le
 80063d6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80063da:	40da      	lsrle	r2, r3
 80063dc:	2201      	movgt	r2, #1
 80063de:	2300      	movs	r3, #0
 80063e0:	4619      	mov	r1, r3
 80063e2:	4610      	mov	r0, r2
 80063e4:	ec41 0b10 	vmov	d0, r0, r1
 80063e8:	b002      	add	sp, #8
 80063ea:	4770      	bx	lr
 80063ec:	7ff00000 	.word	0x7ff00000

080063f0 <__b2d>:
 80063f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063f4:	6906      	ldr	r6, [r0, #16]
 80063f6:	f100 0814 	add.w	r8, r0, #20
 80063fa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80063fe:	1f37      	subs	r7, r6, #4
 8006400:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006404:	4610      	mov	r0, r2
 8006406:	f7ff fd4b 	bl	8005ea0 <__hi0bits>
 800640a:	f1c0 0320 	rsb	r3, r0, #32
 800640e:	280a      	cmp	r0, #10
 8006410:	600b      	str	r3, [r1, #0]
 8006412:	491b      	ldr	r1, [pc, #108]	@ (8006480 <__b2d+0x90>)
 8006414:	dc15      	bgt.n	8006442 <__b2d+0x52>
 8006416:	f1c0 0c0b 	rsb	ip, r0, #11
 800641a:	fa22 f30c 	lsr.w	r3, r2, ip
 800641e:	45b8      	cmp	r8, r7
 8006420:	ea43 0501 	orr.w	r5, r3, r1
 8006424:	bf34      	ite	cc
 8006426:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800642a:	2300      	movcs	r3, #0
 800642c:	3015      	adds	r0, #21
 800642e:	fa02 f000 	lsl.w	r0, r2, r0
 8006432:	fa23 f30c 	lsr.w	r3, r3, ip
 8006436:	4303      	orrs	r3, r0
 8006438:	461c      	mov	r4, r3
 800643a:	ec45 4b10 	vmov	d0, r4, r5
 800643e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006442:	45b8      	cmp	r8, r7
 8006444:	bf3a      	itte	cc
 8006446:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800644a:	f1a6 0708 	subcc.w	r7, r6, #8
 800644e:	2300      	movcs	r3, #0
 8006450:	380b      	subs	r0, #11
 8006452:	d012      	beq.n	800647a <__b2d+0x8a>
 8006454:	f1c0 0120 	rsb	r1, r0, #32
 8006458:	fa23 f401 	lsr.w	r4, r3, r1
 800645c:	4082      	lsls	r2, r0
 800645e:	4322      	orrs	r2, r4
 8006460:	4547      	cmp	r7, r8
 8006462:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006466:	bf8c      	ite	hi
 8006468:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800646c:	2200      	movls	r2, #0
 800646e:	4083      	lsls	r3, r0
 8006470:	40ca      	lsrs	r2, r1
 8006472:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006476:	4313      	orrs	r3, r2
 8006478:	e7de      	b.n	8006438 <__b2d+0x48>
 800647a:	ea42 0501 	orr.w	r5, r2, r1
 800647e:	e7db      	b.n	8006438 <__b2d+0x48>
 8006480:	3ff00000 	.word	0x3ff00000

08006484 <__d2b>:
 8006484:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006488:	460f      	mov	r7, r1
 800648a:	2101      	movs	r1, #1
 800648c:	ec59 8b10 	vmov	r8, r9, d0
 8006490:	4616      	mov	r6, r2
 8006492:	f7ff fc13 	bl	8005cbc <_Balloc>
 8006496:	4604      	mov	r4, r0
 8006498:	b930      	cbnz	r0, 80064a8 <__d2b+0x24>
 800649a:	4602      	mov	r2, r0
 800649c:	4b23      	ldr	r3, [pc, #140]	@ (800652c <__d2b+0xa8>)
 800649e:	4824      	ldr	r0, [pc, #144]	@ (8006530 <__d2b+0xac>)
 80064a0:	f240 310f 	movw	r1, #783	@ 0x30f
 80064a4:	f000 fac4 	bl	8006a30 <__assert_func>
 80064a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80064ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80064b0:	b10d      	cbz	r5, 80064b6 <__d2b+0x32>
 80064b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064b6:	9301      	str	r3, [sp, #4]
 80064b8:	f1b8 0300 	subs.w	r3, r8, #0
 80064bc:	d023      	beq.n	8006506 <__d2b+0x82>
 80064be:	4668      	mov	r0, sp
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	f7ff fd0c 	bl	8005ede <__lo0bits>
 80064c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80064ca:	b1d0      	cbz	r0, 8006502 <__d2b+0x7e>
 80064cc:	f1c0 0320 	rsb	r3, r0, #32
 80064d0:	fa02 f303 	lsl.w	r3, r2, r3
 80064d4:	430b      	orrs	r3, r1
 80064d6:	40c2      	lsrs	r2, r0
 80064d8:	6163      	str	r3, [r4, #20]
 80064da:	9201      	str	r2, [sp, #4]
 80064dc:	9b01      	ldr	r3, [sp, #4]
 80064de:	61a3      	str	r3, [r4, #24]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	bf0c      	ite	eq
 80064e4:	2201      	moveq	r2, #1
 80064e6:	2202      	movne	r2, #2
 80064e8:	6122      	str	r2, [r4, #16]
 80064ea:	b1a5      	cbz	r5, 8006516 <__d2b+0x92>
 80064ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80064f0:	4405      	add	r5, r0
 80064f2:	603d      	str	r5, [r7, #0]
 80064f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80064f8:	6030      	str	r0, [r6, #0]
 80064fa:	4620      	mov	r0, r4
 80064fc:	b003      	add	sp, #12
 80064fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006502:	6161      	str	r1, [r4, #20]
 8006504:	e7ea      	b.n	80064dc <__d2b+0x58>
 8006506:	a801      	add	r0, sp, #4
 8006508:	f7ff fce9 	bl	8005ede <__lo0bits>
 800650c:	9b01      	ldr	r3, [sp, #4]
 800650e:	6163      	str	r3, [r4, #20]
 8006510:	3020      	adds	r0, #32
 8006512:	2201      	movs	r2, #1
 8006514:	e7e8      	b.n	80064e8 <__d2b+0x64>
 8006516:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800651a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800651e:	6038      	str	r0, [r7, #0]
 8006520:	6918      	ldr	r0, [r3, #16]
 8006522:	f7ff fcbd 	bl	8005ea0 <__hi0bits>
 8006526:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800652a:	e7e5      	b.n	80064f8 <__d2b+0x74>
 800652c:	08007645 	.word	0x08007645
 8006530:	080076c7 	.word	0x080076c7

08006534 <__ratio>:
 8006534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006538:	b085      	sub	sp, #20
 800653a:	e9cd 1000 	strd	r1, r0, [sp]
 800653e:	a902      	add	r1, sp, #8
 8006540:	f7ff ff56 	bl	80063f0 <__b2d>
 8006544:	9800      	ldr	r0, [sp, #0]
 8006546:	a903      	add	r1, sp, #12
 8006548:	ec55 4b10 	vmov	r4, r5, d0
 800654c:	f7ff ff50 	bl	80063f0 <__b2d>
 8006550:	9b01      	ldr	r3, [sp, #4]
 8006552:	6919      	ldr	r1, [r3, #16]
 8006554:	9b00      	ldr	r3, [sp, #0]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	1ac9      	subs	r1, r1, r3
 800655a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800655e:	1a9b      	subs	r3, r3, r2
 8006560:	ec5b ab10 	vmov	sl, fp, d0
 8006564:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006568:	2b00      	cmp	r3, #0
 800656a:	bfce      	itee	gt
 800656c:	462a      	movgt	r2, r5
 800656e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006572:	465a      	movle	r2, fp
 8006574:	462f      	mov	r7, r5
 8006576:	46d9      	mov	r9, fp
 8006578:	bfcc      	ite	gt
 800657a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800657e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006582:	464b      	mov	r3, r9
 8006584:	4652      	mov	r2, sl
 8006586:	4620      	mov	r0, r4
 8006588:	4639      	mov	r1, r7
 800658a:	f7fa f967 	bl	800085c <__aeabi_ddiv>
 800658e:	ec41 0b10 	vmov	d0, r0, r1
 8006592:	b005      	add	sp, #20
 8006594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006598 <__copybits>:
 8006598:	3901      	subs	r1, #1
 800659a:	b570      	push	{r4, r5, r6, lr}
 800659c:	1149      	asrs	r1, r1, #5
 800659e:	6914      	ldr	r4, [r2, #16]
 80065a0:	3101      	adds	r1, #1
 80065a2:	f102 0314 	add.w	r3, r2, #20
 80065a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80065aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80065ae:	1f05      	subs	r5, r0, #4
 80065b0:	42a3      	cmp	r3, r4
 80065b2:	d30c      	bcc.n	80065ce <__copybits+0x36>
 80065b4:	1aa3      	subs	r3, r4, r2
 80065b6:	3b11      	subs	r3, #17
 80065b8:	f023 0303 	bic.w	r3, r3, #3
 80065bc:	3211      	adds	r2, #17
 80065be:	42a2      	cmp	r2, r4
 80065c0:	bf88      	it	hi
 80065c2:	2300      	movhi	r3, #0
 80065c4:	4418      	add	r0, r3
 80065c6:	2300      	movs	r3, #0
 80065c8:	4288      	cmp	r0, r1
 80065ca:	d305      	bcc.n	80065d8 <__copybits+0x40>
 80065cc:	bd70      	pop	{r4, r5, r6, pc}
 80065ce:	f853 6b04 	ldr.w	r6, [r3], #4
 80065d2:	f845 6f04 	str.w	r6, [r5, #4]!
 80065d6:	e7eb      	b.n	80065b0 <__copybits+0x18>
 80065d8:	f840 3b04 	str.w	r3, [r0], #4
 80065dc:	e7f4      	b.n	80065c8 <__copybits+0x30>

080065de <__any_on>:
 80065de:	f100 0214 	add.w	r2, r0, #20
 80065e2:	6900      	ldr	r0, [r0, #16]
 80065e4:	114b      	asrs	r3, r1, #5
 80065e6:	4298      	cmp	r0, r3
 80065e8:	b510      	push	{r4, lr}
 80065ea:	db11      	blt.n	8006610 <__any_on+0x32>
 80065ec:	dd0a      	ble.n	8006604 <__any_on+0x26>
 80065ee:	f011 011f 	ands.w	r1, r1, #31
 80065f2:	d007      	beq.n	8006604 <__any_on+0x26>
 80065f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80065f8:	fa24 f001 	lsr.w	r0, r4, r1
 80065fc:	fa00 f101 	lsl.w	r1, r0, r1
 8006600:	428c      	cmp	r4, r1
 8006602:	d10b      	bne.n	800661c <__any_on+0x3e>
 8006604:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006608:	4293      	cmp	r3, r2
 800660a:	d803      	bhi.n	8006614 <__any_on+0x36>
 800660c:	2000      	movs	r0, #0
 800660e:	bd10      	pop	{r4, pc}
 8006610:	4603      	mov	r3, r0
 8006612:	e7f7      	b.n	8006604 <__any_on+0x26>
 8006614:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006618:	2900      	cmp	r1, #0
 800661a:	d0f5      	beq.n	8006608 <__any_on+0x2a>
 800661c:	2001      	movs	r0, #1
 800661e:	e7f6      	b.n	800660e <__any_on+0x30>

08006620 <__sread>:
 8006620:	b510      	push	{r4, lr}
 8006622:	460c      	mov	r4, r1
 8006624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006628:	f000 f9ce 	bl	80069c8 <_read_r>
 800662c:	2800      	cmp	r0, #0
 800662e:	bfab      	itete	ge
 8006630:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006632:	89a3      	ldrhlt	r3, [r4, #12]
 8006634:	181b      	addge	r3, r3, r0
 8006636:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800663a:	bfac      	ite	ge
 800663c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800663e:	81a3      	strhlt	r3, [r4, #12]
 8006640:	bd10      	pop	{r4, pc}

08006642 <__swrite>:
 8006642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006646:	461f      	mov	r7, r3
 8006648:	898b      	ldrh	r3, [r1, #12]
 800664a:	05db      	lsls	r3, r3, #23
 800664c:	4605      	mov	r5, r0
 800664e:	460c      	mov	r4, r1
 8006650:	4616      	mov	r6, r2
 8006652:	d505      	bpl.n	8006660 <__swrite+0x1e>
 8006654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006658:	2302      	movs	r3, #2
 800665a:	2200      	movs	r2, #0
 800665c:	f000 f9a2 	bl	80069a4 <_lseek_r>
 8006660:	89a3      	ldrh	r3, [r4, #12]
 8006662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006666:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800666a:	81a3      	strh	r3, [r4, #12]
 800666c:	4632      	mov	r2, r6
 800666e:	463b      	mov	r3, r7
 8006670:	4628      	mov	r0, r5
 8006672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006676:	f000 b9c9 	b.w	8006a0c <_write_r>

0800667a <__sseek>:
 800667a:	b510      	push	{r4, lr}
 800667c:	460c      	mov	r4, r1
 800667e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006682:	f000 f98f 	bl	80069a4 <_lseek_r>
 8006686:	1c43      	adds	r3, r0, #1
 8006688:	89a3      	ldrh	r3, [r4, #12]
 800668a:	bf15      	itete	ne
 800668c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800668e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006692:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006696:	81a3      	strheq	r3, [r4, #12]
 8006698:	bf18      	it	ne
 800669a:	81a3      	strhne	r3, [r4, #12]
 800669c:	bd10      	pop	{r4, pc}

0800669e <__sclose>:
 800669e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a2:	f000 b94d 	b.w	8006940 <_close_r>

080066a6 <_realloc_r>:
 80066a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066aa:	4680      	mov	r8, r0
 80066ac:	4615      	mov	r5, r2
 80066ae:	460c      	mov	r4, r1
 80066b0:	b921      	cbnz	r1, 80066bc <_realloc_r+0x16>
 80066b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066b6:	4611      	mov	r1, r2
 80066b8:	f7ff b9b6 	b.w	8005a28 <_malloc_r>
 80066bc:	b92a      	cbnz	r2, 80066ca <_realloc_r+0x24>
 80066be:	f000 f9e9 	bl	8006a94 <_free_r>
 80066c2:	2400      	movs	r4, #0
 80066c4:	4620      	mov	r0, r4
 80066c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066ca:	f000 fa2d 	bl	8006b28 <_malloc_usable_size_r>
 80066ce:	4285      	cmp	r5, r0
 80066d0:	4606      	mov	r6, r0
 80066d2:	d802      	bhi.n	80066da <_realloc_r+0x34>
 80066d4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80066d8:	d8f4      	bhi.n	80066c4 <_realloc_r+0x1e>
 80066da:	4629      	mov	r1, r5
 80066dc:	4640      	mov	r0, r8
 80066de:	f7ff f9a3 	bl	8005a28 <_malloc_r>
 80066e2:	4607      	mov	r7, r0
 80066e4:	2800      	cmp	r0, #0
 80066e6:	d0ec      	beq.n	80066c2 <_realloc_r+0x1c>
 80066e8:	42b5      	cmp	r5, r6
 80066ea:	462a      	mov	r2, r5
 80066ec:	4621      	mov	r1, r4
 80066ee:	bf28      	it	cs
 80066f0:	4632      	movcs	r2, r6
 80066f2:	f7fd fd32 	bl	800415a <memcpy>
 80066f6:	4621      	mov	r1, r4
 80066f8:	4640      	mov	r0, r8
 80066fa:	f000 f9cb 	bl	8006a94 <_free_r>
 80066fe:	463c      	mov	r4, r7
 8006700:	e7e0      	b.n	80066c4 <_realloc_r+0x1e>

08006702 <__swbuf_r>:
 8006702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006704:	460e      	mov	r6, r1
 8006706:	4614      	mov	r4, r2
 8006708:	4605      	mov	r5, r0
 800670a:	b118      	cbz	r0, 8006714 <__swbuf_r+0x12>
 800670c:	6a03      	ldr	r3, [r0, #32]
 800670e:	b90b      	cbnz	r3, 8006714 <__swbuf_r+0x12>
 8006710:	f7fc fe0c 	bl	800332c <__sinit>
 8006714:	69a3      	ldr	r3, [r4, #24]
 8006716:	60a3      	str	r3, [r4, #8]
 8006718:	89a3      	ldrh	r3, [r4, #12]
 800671a:	071a      	lsls	r2, r3, #28
 800671c:	d501      	bpl.n	8006722 <__swbuf_r+0x20>
 800671e:	6923      	ldr	r3, [r4, #16]
 8006720:	b943      	cbnz	r3, 8006734 <__swbuf_r+0x32>
 8006722:	4621      	mov	r1, r4
 8006724:	4628      	mov	r0, r5
 8006726:	f000 f82b 	bl	8006780 <__swsetup_r>
 800672a:	b118      	cbz	r0, 8006734 <__swbuf_r+0x32>
 800672c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006730:	4638      	mov	r0, r7
 8006732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006734:	6823      	ldr	r3, [r4, #0]
 8006736:	6922      	ldr	r2, [r4, #16]
 8006738:	1a98      	subs	r0, r3, r2
 800673a:	6963      	ldr	r3, [r4, #20]
 800673c:	b2f6      	uxtb	r6, r6
 800673e:	4283      	cmp	r3, r0
 8006740:	4637      	mov	r7, r6
 8006742:	dc05      	bgt.n	8006750 <__swbuf_r+0x4e>
 8006744:	4621      	mov	r1, r4
 8006746:	4628      	mov	r0, r5
 8006748:	f7ff fa84 	bl	8005c54 <_fflush_r>
 800674c:	2800      	cmp	r0, #0
 800674e:	d1ed      	bne.n	800672c <__swbuf_r+0x2a>
 8006750:	68a3      	ldr	r3, [r4, #8]
 8006752:	3b01      	subs	r3, #1
 8006754:	60a3      	str	r3, [r4, #8]
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	1c5a      	adds	r2, r3, #1
 800675a:	6022      	str	r2, [r4, #0]
 800675c:	701e      	strb	r6, [r3, #0]
 800675e:	6962      	ldr	r2, [r4, #20]
 8006760:	1c43      	adds	r3, r0, #1
 8006762:	429a      	cmp	r2, r3
 8006764:	d004      	beq.n	8006770 <__swbuf_r+0x6e>
 8006766:	89a3      	ldrh	r3, [r4, #12]
 8006768:	07db      	lsls	r3, r3, #31
 800676a:	d5e1      	bpl.n	8006730 <__swbuf_r+0x2e>
 800676c:	2e0a      	cmp	r6, #10
 800676e:	d1df      	bne.n	8006730 <__swbuf_r+0x2e>
 8006770:	4621      	mov	r1, r4
 8006772:	4628      	mov	r0, r5
 8006774:	f7ff fa6e 	bl	8005c54 <_fflush_r>
 8006778:	2800      	cmp	r0, #0
 800677a:	d0d9      	beq.n	8006730 <__swbuf_r+0x2e>
 800677c:	e7d6      	b.n	800672c <__swbuf_r+0x2a>
	...

08006780 <__swsetup_r>:
 8006780:	b538      	push	{r3, r4, r5, lr}
 8006782:	4b29      	ldr	r3, [pc, #164]	@ (8006828 <__swsetup_r+0xa8>)
 8006784:	4605      	mov	r5, r0
 8006786:	6818      	ldr	r0, [r3, #0]
 8006788:	460c      	mov	r4, r1
 800678a:	b118      	cbz	r0, 8006794 <__swsetup_r+0x14>
 800678c:	6a03      	ldr	r3, [r0, #32]
 800678e:	b90b      	cbnz	r3, 8006794 <__swsetup_r+0x14>
 8006790:	f7fc fdcc 	bl	800332c <__sinit>
 8006794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006798:	0719      	lsls	r1, r3, #28
 800679a:	d422      	bmi.n	80067e2 <__swsetup_r+0x62>
 800679c:	06da      	lsls	r2, r3, #27
 800679e:	d407      	bmi.n	80067b0 <__swsetup_r+0x30>
 80067a0:	2209      	movs	r2, #9
 80067a2:	602a      	str	r2, [r5, #0]
 80067a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067a8:	81a3      	strh	r3, [r4, #12]
 80067aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80067ae:	e033      	b.n	8006818 <__swsetup_r+0x98>
 80067b0:	0758      	lsls	r0, r3, #29
 80067b2:	d512      	bpl.n	80067da <__swsetup_r+0x5a>
 80067b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067b6:	b141      	cbz	r1, 80067ca <__swsetup_r+0x4a>
 80067b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067bc:	4299      	cmp	r1, r3
 80067be:	d002      	beq.n	80067c6 <__swsetup_r+0x46>
 80067c0:	4628      	mov	r0, r5
 80067c2:	f000 f967 	bl	8006a94 <_free_r>
 80067c6:	2300      	movs	r3, #0
 80067c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80067ca:	89a3      	ldrh	r3, [r4, #12]
 80067cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80067d0:	81a3      	strh	r3, [r4, #12]
 80067d2:	2300      	movs	r3, #0
 80067d4:	6063      	str	r3, [r4, #4]
 80067d6:	6923      	ldr	r3, [r4, #16]
 80067d8:	6023      	str	r3, [r4, #0]
 80067da:	89a3      	ldrh	r3, [r4, #12]
 80067dc:	f043 0308 	orr.w	r3, r3, #8
 80067e0:	81a3      	strh	r3, [r4, #12]
 80067e2:	6923      	ldr	r3, [r4, #16]
 80067e4:	b94b      	cbnz	r3, 80067fa <__swsetup_r+0x7a>
 80067e6:	89a3      	ldrh	r3, [r4, #12]
 80067e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80067ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067f0:	d003      	beq.n	80067fa <__swsetup_r+0x7a>
 80067f2:	4621      	mov	r1, r4
 80067f4:	4628      	mov	r0, r5
 80067f6:	f000 f84c 	bl	8006892 <__smakebuf_r>
 80067fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067fe:	f013 0201 	ands.w	r2, r3, #1
 8006802:	d00a      	beq.n	800681a <__swsetup_r+0x9a>
 8006804:	2200      	movs	r2, #0
 8006806:	60a2      	str	r2, [r4, #8]
 8006808:	6962      	ldr	r2, [r4, #20]
 800680a:	4252      	negs	r2, r2
 800680c:	61a2      	str	r2, [r4, #24]
 800680e:	6922      	ldr	r2, [r4, #16]
 8006810:	b942      	cbnz	r2, 8006824 <__swsetup_r+0xa4>
 8006812:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006816:	d1c5      	bne.n	80067a4 <__swsetup_r+0x24>
 8006818:	bd38      	pop	{r3, r4, r5, pc}
 800681a:	0799      	lsls	r1, r3, #30
 800681c:	bf58      	it	pl
 800681e:	6962      	ldrpl	r2, [r4, #20]
 8006820:	60a2      	str	r2, [r4, #8]
 8006822:	e7f4      	b.n	800680e <__swsetup_r+0x8e>
 8006824:	2000      	movs	r0, #0
 8006826:	e7f7      	b.n	8006818 <__swsetup_r+0x98>
 8006828:	20000184 	.word	0x20000184

0800682c <__ascii_wctomb>:
 800682c:	4603      	mov	r3, r0
 800682e:	4608      	mov	r0, r1
 8006830:	b141      	cbz	r1, 8006844 <__ascii_wctomb+0x18>
 8006832:	2aff      	cmp	r2, #255	@ 0xff
 8006834:	d904      	bls.n	8006840 <__ascii_wctomb+0x14>
 8006836:	228a      	movs	r2, #138	@ 0x8a
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800683e:	4770      	bx	lr
 8006840:	700a      	strb	r2, [r1, #0]
 8006842:	2001      	movs	r0, #1
 8006844:	4770      	bx	lr

08006846 <__swhatbuf_r>:
 8006846:	b570      	push	{r4, r5, r6, lr}
 8006848:	460c      	mov	r4, r1
 800684a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800684e:	2900      	cmp	r1, #0
 8006850:	b096      	sub	sp, #88	@ 0x58
 8006852:	4615      	mov	r5, r2
 8006854:	461e      	mov	r6, r3
 8006856:	da0d      	bge.n	8006874 <__swhatbuf_r+0x2e>
 8006858:	89a3      	ldrh	r3, [r4, #12]
 800685a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800685e:	f04f 0100 	mov.w	r1, #0
 8006862:	bf14      	ite	ne
 8006864:	2340      	movne	r3, #64	@ 0x40
 8006866:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800686a:	2000      	movs	r0, #0
 800686c:	6031      	str	r1, [r6, #0]
 800686e:	602b      	str	r3, [r5, #0]
 8006870:	b016      	add	sp, #88	@ 0x58
 8006872:	bd70      	pop	{r4, r5, r6, pc}
 8006874:	466a      	mov	r2, sp
 8006876:	f000 f873 	bl	8006960 <_fstat_r>
 800687a:	2800      	cmp	r0, #0
 800687c:	dbec      	blt.n	8006858 <__swhatbuf_r+0x12>
 800687e:	9901      	ldr	r1, [sp, #4]
 8006880:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006884:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006888:	4259      	negs	r1, r3
 800688a:	4159      	adcs	r1, r3
 800688c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006890:	e7eb      	b.n	800686a <__swhatbuf_r+0x24>

08006892 <__smakebuf_r>:
 8006892:	898b      	ldrh	r3, [r1, #12]
 8006894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006896:	079d      	lsls	r5, r3, #30
 8006898:	4606      	mov	r6, r0
 800689a:	460c      	mov	r4, r1
 800689c:	d507      	bpl.n	80068ae <__smakebuf_r+0x1c>
 800689e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80068a2:	6023      	str	r3, [r4, #0]
 80068a4:	6123      	str	r3, [r4, #16]
 80068a6:	2301      	movs	r3, #1
 80068a8:	6163      	str	r3, [r4, #20]
 80068aa:	b003      	add	sp, #12
 80068ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068ae:	ab01      	add	r3, sp, #4
 80068b0:	466a      	mov	r2, sp
 80068b2:	f7ff ffc8 	bl	8006846 <__swhatbuf_r>
 80068b6:	9f00      	ldr	r7, [sp, #0]
 80068b8:	4605      	mov	r5, r0
 80068ba:	4639      	mov	r1, r7
 80068bc:	4630      	mov	r0, r6
 80068be:	f7ff f8b3 	bl	8005a28 <_malloc_r>
 80068c2:	b948      	cbnz	r0, 80068d8 <__smakebuf_r+0x46>
 80068c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068c8:	059a      	lsls	r2, r3, #22
 80068ca:	d4ee      	bmi.n	80068aa <__smakebuf_r+0x18>
 80068cc:	f023 0303 	bic.w	r3, r3, #3
 80068d0:	f043 0302 	orr.w	r3, r3, #2
 80068d4:	81a3      	strh	r3, [r4, #12]
 80068d6:	e7e2      	b.n	800689e <__smakebuf_r+0xc>
 80068d8:	89a3      	ldrh	r3, [r4, #12]
 80068da:	6020      	str	r0, [r4, #0]
 80068dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068e0:	81a3      	strh	r3, [r4, #12]
 80068e2:	9b01      	ldr	r3, [sp, #4]
 80068e4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80068e8:	b15b      	cbz	r3, 8006902 <__smakebuf_r+0x70>
 80068ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068ee:	4630      	mov	r0, r6
 80068f0:	f000 f848 	bl	8006984 <_isatty_r>
 80068f4:	b128      	cbz	r0, 8006902 <__smakebuf_r+0x70>
 80068f6:	89a3      	ldrh	r3, [r4, #12]
 80068f8:	f023 0303 	bic.w	r3, r3, #3
 80068fc:	f043 0301 	orr.w	r3, r3, #1
 8006900:	81a3      	strh	r3, [r4, #12]
 8006902:	89a3      	ldrh	r3, [r4, #12]
 8006904:	431d      	orrs	r5, r3
 8006906:	81a5      	strh	r5, [r4, #12]
 8006908:	e7cf      	b.n	80068aa <__smakebuf_r+0x18>

0800690a <memmove>:
 800690a:	4288      	cmp	r0, r1
 800690c:	b510      	push	{r4, lr}
 800690e:	eb01 0402 	add.w	r4, r1, r2
 8006912:	d902      	bls.n	800691a <memmove+0x10>
 8006914:	4284      	cmp	r4, r0
 8006916:	4623      	mov	r3, r4
 8006918:	d807      	bhi.n	800692a <memmove+0x20>
 800691a:	1e43      	subs	r3, r0, #1
 800691c:	42a1      	cmp	r1, r4
 800691e:	d008      	beq.n	8006932 <memmove+0x28>
 8006920:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006924:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006928:	e7f8      	b.n	800691c <memmove+0x12>
 800692a:	4402      	add	r2, r0
 800692c:	4601      	mov	r1, r0
 800692e:	428a      	cmp	r2, r1
 8006930:	d100      	bne.n	8006934 <memmove+0x2a>
 8006932:	bd10      	pop	{r4, pc}
 8006934:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006938:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800693c:	e7f7      	b.n	800692e <memmove+0x24>
	...

08006940 <_close_r>:
 8006940:	b538      	push	{r3, r4, r5, lr}
 8006942:	4d06      	ldr	r5, [pc, #24]	@ (800695c <_close_r+0x1c>)
 8006944:	2300      	movs	r3, #0
 8006946:	4604      	mov	r4, r0
 8006948:	4608      	mov	r0, r1
 800694a:	602b      	str	r3, [r5, #0]
 800694c:	f7fb fafc 	bl	8001f48 <_close>
 8006950:	1c43      	adds	r3, r0, #1
 8006952:	d102      	bne.n	800695a <_close_r+0x1a>
 8006954:	682b      	ldr	r3, [r5, #0]
 8006956:	b103      	cbz	r3, 800695a <_close_r+0x1a>
 8006958:	6023      	str	r3, [r4, #0]
 800695a:	bd38      	pop	{r3, r4, r5, pc}
 800695c:	200040d8 	.word	0x200040d8

08006960 <_fstat_r>:
 8006960:	b538      	push	{r3, r4, r5, lr}
 8006962:	4d07      	ldr	r5, [pc, #28]	@ (8006980 <_fstat_r+0x20>)
 8006964:	2300      	movs	r3, #0
 8006966:	4604      	mov	r4, r0
 8006968:	4608      	mov	r0, r1
 800696a:	4611      	mov	r1, r2
 800696c:	602b      	str	r3, [r5, #0]
 800696e:	f7fb faf7 	bl	8001f60 <_fstat>
 8006972:	1c43      	adds	r3, r0, #1
 8006974:	d102      	bne.n	800697c <_fstat_r+0x1c>
 8006976:	682b      	ldr	r3, [r5, #0]
 8006978:	b103      	cbz	r3, 800697c <_fstat_r+0x1c>
 800697a:	6023      	str	r3, [r4, #0]
 800697c:	bd38      	pop	{r3, r4, r5, pc}
 800697e:	bf00      	nop
 8006980:	200040d8 	.word	0x200040d8

08006984 <_isatty_r>:
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	4d06      	ldr	r5, [pc, #24]	@ (80069a0 <_isatty_r+0x1c>)
 8006988:	2300      	movs	r3, #0
 800698a:	4604      	mov	r4, r0
 800698c:	4608      	mov	r0, r1
 800698e:	602b      	str	r3, [r5, #0]
 8006990:	f7fb faf6 	bl	8001f80 <_isatty>
 8006994:	1c43      	adds	r3, r0, #1
 8006996:	d102      	bne.n	800699e <_isatty_r+0x1a>
 8006998:	682b      	ldr	r3, [r5, #0]
 800699a:	b103      	cbz	r3, 800699e <_isatty_r+0x1a>
 800699c:	6023      	str	r3, [r4, #0]
 800699e:	bd38      	pop	{r3, r4, r5, pc}
 80069a0:	200040d8 	.word	0x200040d8

080069a4 <_lseek_r>:
 80069a4:	b538      	push	{r3, r4, r5, lr}
 80069a6:	4d07      	ldr	r5, [pc, #28]	@ (80069c4 <_lseek_r+0x20>)
 80069a8:	4604      	mov	r4, r0
 80069aa:	4608      	mov	r0, r1
 80069ac:	4611      	mov	r1, r2
 80069ae:	2200      	movs	r2, #0
 80069b0:	602a      	str	r2, [r5, #0]
 80069b2:	461a      	mov	r2, r3
 80069b4:	f7fb faef 	bl	8001f96 <_lseek>
 80069b8:	1c43      	adds	r3, r0, #1
 80069ba:	d102      	bne.n	80069c2 <_lseek_r+0x1e>
 80069bc:	682b      	ldr	r3, [r5, #0]
 80069be:	b103      	cbz	r3, 80069c2 <_lseek_r+0x1e>
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	bd38      	pop	{r3, r4, r5, pc}
 80069c4:	200040d8 	.word	0x200040d8

080069c8 <_read_r>:
 80069c8:	b538      	push	{r3, r4, r5, lr}
 80069ca:	4d07      	ldr	r5, [pc, #28]	@ (80069e8 <_read_r+0x20>)
 80069cc:	4604      	mov	r4, r0
 80069ce:	4608      	mov	r0, r1
 80069d0:	4611      	mov	r1, r2
 80069d2:	2200      	movs	r2, #0
 80069d4:	602a      	str	r2, [r5, #0]
 80069d6:	461a      	mov	r2, r3
 80069d8:	f7fb fa7d 	bl	8001ed6 <_read>
 80069dc:	1c43      	adds	r3, r0, #1
 80069de:	d102      	bne.n	80069e6 <_read_r+0x1e>
 80069e0:	682b      	ldr	r3, [r5, #0]
 80069e2:	b103      	cbz	r3, 80069e6 <_read_r+0x1e>
 80069e4:	6023      	str	r3, [r4, #0]
 80069e6:	bd38      	pop	{r3, r4, r5, pc}
 80069e8:	200040d8 	.word	0x200040d8

080069ec <_sbrk_r>:
 80069ec:	b538      	push	{r3, r4, r5, lr}
 80069ee:	4d06      	ldr	r5, [pc, #24]	@ (8006a08 <_sbrk_r+0x1c>)
 80069f0:	2300      	movs	r3, #0
 80069f2:	4604      	mov	r4, r0
 80069f4:	4608      	mov	r0, r1
 80069f6:	602b      	str	r3, [r5, #0]
 80069f8:	f7fb fada 	bl	8001fb0 <_sbrk>
 80069fc:	1c43      	adds	r3, r0, #1
 80069fe:	d102      	bne.n	8006a06 <_sbrk_r+0x1a>
 8006a00:	682b      	ldr	r3, [r5, #0]
 8006a02:	b103      	cbz	r3, 8006a06 <_sbrk_r+0x1a>
 8006a04:	6023      	str	r3, [r4, #0]
 8006a06:	bd38      	pop	{r3, r4, r5, pc}
 8006a08:	200040d8 	.word	0x200040d8

08006a0c <_write_r>:
 8006a0c:	b538      	push	{r3, r4, r5, lr}
 8006a0e:	4d07      	ldr	r5, [pc, #28]	@ (8006a2c <_write_r+0x20>)
 8006a10:	4604      	mov	r4, r0
 8006a12:	4608      	mov	r0, r1
 8006a14:	4611      	mov	r1, r2
 8006a16:	2200      	movs	r2, #0
 8006a18:	602a      	str	r2, [r5, #0]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	f7fb fa78 	bl	8001f10 <_write>
 8006a20:	1c43      	adds	r3, r0, #1
 8006a22:	d102      	bne.n	8006a2a <_write_r+0x1e>
 8006a24:	682b      	ldr	r3, [r5, #0]
 8006a26:	b103      	cbz	r3, 8006a2a <_write_r+0x1e>
 8006a28:	6023      	str	r3, [r4, #0]
 8006a2a:	bd38      	pop	{r3, r4, r5, pc}
 8006a2c:	200040d8 	.word	0x200040d8

08006a30 <__assert_func>:
 8006a30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a32:	4614      	mov	r4, r2
 8006a34:	461a      	mov	r2, r3
 8006a36:	4b09      	ldr	r3, [pc, #36]	@ (8006a5c <__assert_func+0x2c>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4605      	mov	r5, r0
 8006a3c:	68d8      	ldr	r0, [r3, #12]
 8006a3e:	b954      	cbnz	r4, 8006a56 <__assert_func+0x26>
 8006a40:	4b07      	ldr	r3, [pc, #28]	@ (8006a60 <__assert_func+0x30>)
 8006a42:	461c      	mov	r4, r3
 8006a44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a48:	9100      	str	r1, [sp, #0]
 8006a4a:	462b      	mov	r3, r5
 8006a4c:	4905      	ldr	r1, [pc, #20]	@ (8006a64 <__assert_func+0x34>)
 8006a4e:	f000 f873 	bl	8006b38 <fiprintf>
 8006a52:	f000 f883 	bl	8006b5c <abort>
 8006a56:	4b04      	ldr	r3, [pc, #16]	@ (8006a68 <__assert_func+0x38>)
 8006a58:	e7f4      	b.n	8006a44 <__assert_func+0x14>
 8006a5a:	bf00      	nop
 8006a5c:	20000184 	.word	0x20000184
 8006a60:	0800785b 	.word	0x0800785b
 8006a64:	0800782d 	.word	0x0800782d
 8006a68:	08007820 	.word	0x08007820

08006a6c <_calloc_r>:
 8006a6c:	b570      	push	{r4, r5, r6, lr}
 8006a6e:	fba1 5402 	umull	r5, r4, r1, r2
 8006a72:	b93c      	cbnz	r4, 8006a84 <_calloc_r+0x18>
 8006a74:	4629      	mov	r1, r5
 8006a76:	f7fe ffd7 	bl	8005a28 <_malloc_r>
 8006a7a:	4606      	mov	r6, r0
 8006a7c:	b928      	cbnz	r0, 8006a8a <_calloc_r+0x1e>
 8006a7e:	2600      	movs	r6, #0
 8006a80:	4630      	mov	r0, r6
 8006a82:	bd70      	pop	{r4, r5, r6, pc}
 8006a84:	220c      	movs	r2, #12
 8006a86:	6002      	str	r2, [r0, #0]
 8006a88:	e7f9      	b.n	8006a7e <_calloc_r+0x12>
 8006a8a:	462a      	mov	r2, r5
 8006a8c:	4621      	mov	r1, r4
 8006a8e:	f7fd fb2b 	bl	80040e8 <memset>
 8006a92:	e7f5      	b.n	8006a80 <_calloc_r+0x14>

08006a94 <_free_r>:
 8006a94:	b538      	push	{r3, r4, r5, lr}
 8006a96:	4605      	mov	r5, r0
 8006a98:	2900      	cmp	r1, #0
 8006a9a:	d041      	beq.n	8006b20 <_free_r+0x8c>
 8006a9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aa0:	1f0c      	subs	r4, r1, #4
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	bfb8      	it	lt
 8006aa6:	18e4      	addlt	r4, r4, r3
 8006aa8:	f7ff f8fc 	bl	8005ca4 <__malloc_lock>
 8006aac:	4a1d      	ldr	r2, [pc, #116]	@ (8006b24 <_free_r+0x90>)
 8006aae:	6813      	ldr	r3, [r2, #0]
 8006ab0:	b933      	cbnz	r3, 8006ac0 <_free_r+0x2c>
 8006ab2:	6063      	str	r3, [r4, #4]
 8006ab4:	6014      	str	r4, [r2, #0]
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006abc:	f7ff b8f8 	b.w	8005cb0 <__malloc_unlock>
 8006ac0:	42a3      	cmp	r3, r4
 8006ac2:	d908      	bls.n	8006ad6 <_free_r+0x42>
 8006ac4:	6820      	ldr	r0, [r4, #0]
 8006ac6:	1821      	adds	r1, r4, r0
 8006ac8:	428b      	cmp	r3, r1
 8006aca:	bf01      	itttt	eq
 8006acc:	6819      	ldreq	r1, [r3, #0]
 8006ace:	685b      	ldreq	r3, [r3, #4]
 8006ad0:	1809      	addeq	r1, r1, r0
 8006ad2:	6021      	streq	r1, [r4, #0]
 8006ad4:	e7ed      	b.n	8006ab2 <_free_r+0x1e>
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	b10b      	cbz	r3, 8006ae0 <_free_r+0x4c>
 8006adc:	42a3      	cmp	r3, r4
 8006ade:	d9fa      	bls.n	8006ad6 <_free_r+0x42>
 8006ae0:	6811      	ldr	r1, [r2, #0]
 8006ae2:	1850      	adds	r0, r2, r1
 8006ae4:	42a0      	cmp	r0, r4
 8006ae6:	d10b      	bne.n	8006b00 <_free_r+0x6c>
 8006ae8:	6820      	ldr	r0, [r4, #0]
 8006aea:	4401      	add	r1, r0
 8006aec:	1850      	adds	r0, r2, r1
 8006aee:	4283      	cmp	r3, r0
 8006af0:	6011      	str	r1, [r2, #0]
 8006af2:	d1e0      	bne.n	8006ab6 <_free_r+0x22>
 8006af4:	6818      	ldr	r0, [r3, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	6053      	str	r3, [r2, #4]
 8006afa:	4408      	add	r0, r1
 8006afc:	6010      	str	r0, [r2, #0]
 8006afe:	e7da      	b.n	8006ab6 <_free_r+0x22>
 8006b00:	d902      	bls.n	8006b08 <_free_r+0x74>
 8006b02:	230c      	movs	r3, #12
 8006b04:	602b      	str	r3, [r5, #0]
 8006b06:	e7d6      	b.n	8006ab6 <_free_r+0x22>
 8006b08:	6820      	ldr	r0, [r4, #0]
 8006b0a:	1821      	adds	r1, r4, r0
 8006b0c:	428b      	cmp	r3, r1
 8006b0e:	bf04      	itt	eq
 8006b10:	6819      	ldreq	r1, [r3, #0]
 8006b12:	685b      	ldreq	r3, [r3, #4]
 8006b14:	6063      	str	r3, [r4, #4]
 8006b16:	bf04      	itt	eq
 8006b18:	1809      	addeq	r1, r1, r0
 8006b1a:	6021      	streq	r1, [r4, #0]
 8006b1c:	6054      	str	r4, [r2, #4]
 8006b1e:	e7ca      	b.n	8006ab6 <_free_r+0x22>
 8006b20:	bd38      	pop	{r3, r4, r5, pc}
 8006b22:	bf00      	nop
 8006b24:	200040d4 	.word	0x200040d4

08006b28 <_malloc_usable_size_r>:
 8006b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b2c:	1f18      	subs	r0, r3, #4
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	bfbc      	itt	lt
 8006b32:	580b      	ldrlt	r3, [r1, r0]
 8006b34:	18c0      	addlt	r0, r0, r3
 8006b36:	4770      	bx	lr

08006b38 <fiprintf>:
 8006b38:	b40e      	push	{r1, r2, r3}
 8006b3a:	b503      	push	{r0, r1, lr}
 8006b3c:	4601      	mov	r1, r0
 8006b3e:	ab03      	add	r3, sp, #12
 8006b40:	4805      	ldr	r0, [pc, #20]	@ (8006b58 <fiprintf+0x20>)
 8006b42:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b46:	6800      	ldr	r0, [r0, #0]
 8006b48:	9301      	str	r3, [sp, #4]
 8006b4a:	f7fe fe2b 	bl	80057a4 <_vfiprintf_r>
 8006b4e:	b002      	add	sp, #8
 8006b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b54:	b003      	add	sp, #12
 8006b56:	4770      	bx	lr
 8006b58:	20000184 	.word	0x20000184

08006b5c <abort>:
 8006b5c:	b508      	push	{r3, lr}
 8006b5e:	2006      	movs	r0, #6
 8006b60:	f000 f82c 	bl	8006bbc <raise>
 8006b64:	2001      	movs	r0, #1
 8006b66:	f7fb f9ab 	bl	8001ec0 <_exit>

08006b6a <_raise_r>:
 8006b6a:	291f      	cmp	r1, #31
 8006b6c:	b538      	push	{r3, r4, r5, lr}
 8006b6e:	4605      	mov	r5, r0
 8006b70:	460c      	mov	r4, r1
 8006b72:	d904      	bls.n	8006b7e <_raise_r+0x14>
 8006b74:	2316      	movs	r3, #22
 8006b76:	6003      	str	r3, [r0, #0]
 8006b78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b7c:	bd38      	pop	{r3, r4, r5, pc}
 8006b7e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006b80:	b112      	cbz	r2, 8006b88 <_raise_r+0x1e>
 8006b82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b86:	b94b      	cbnz	r3, 8006b9c <_raise_r+0x32>
 8006b88:	4628      	mov	r0, r5
 8006b8a:	f000 f831 	bl	8006bf0 <_getpid_r>
 8006b8e:	4622      	mov	r2, r4
 8006b90:	4601      	mov	r1, r0
 8006b92:	4628      	mov	r0, r5
 8006b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b98:	f000 b818 	b.w	8006bcc <_kill_r>
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d00a      	beq.n	8006bb6 <_raise_r+0x4c>
 8006ba0:	1c59      	adds	r1, r3, #1
 8006ba2:	d103      	bne.n	8006bac <_raise_r+0x42>
 8006ba4:	2316      	movs	r3, #22
 8006ba6:	6003      	str	r3, [r0, #0]
 8006ba8:	2001      	movs	r0, #1
 8006baa:	e7e7      	b.n	8006b7c <_raise_r+0x12>
 8006bac:	2100      	movs	r1, #0
 8006bae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	4798      	blx	r3
 8006bb6:	2000      	movs	r0, #0
 8006bb8:	e7e0      	b.n	8006b7c <_raise_r+0x12>
	...

08006bbc <raise>:
 8006bbc:	4b02      	ldr	r3, [pc, #8]	@ (8006bc8 <raise+0xc>)
 8006bbe:	4601      	mov	r1, r0
 8006bc0:	6818      	ldr	r0, [r3, #0]
 8006bc2:	f7ff bfd2 	b.w	8006b6a <_raise_r>
 8006bc6:	bf00      	nop
 8006bc8:	20000184 	.word	0x20000184

08006bcc <_kill_r>:
 8006bcc:	b538      	push	{r3, r4, r5, lr}
 8006bce:	4d07      	ldr	r5, [pc, #28]	@ (8006bec <_kill_r+0x20>)
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	4604      	mov	r4, r0
 8006bd4:	4608      	mov	r0, r1
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	602b      	str	r3, [r5, #0]
 8006bda:	f7fb f961 	bl	8001ea0 <_kill>
 8006bde:	1c43      	adds	r3, r0, #1
 8006be0:	d102      	bne.n	8006be8 <_kill_r+0x1c>
 8006be2:	682b      	ldr	r3, [r5, #0]
 8006be4:	b103      	cbz	r3, 8006be8 <_kill_r+0x1c>
 8006be6:	6023      	str	r3, [r4, #0]
 8006be8:	bd38      	pop	{r3, r4, r5, pc}
 8006bea:	bf00      	nop
 8006bec:	200040d8 	.word	0x200040d8

08006bf0 <_getpid_r>:
 8006bf0:	f7fb b94e 	b.w	8001e90 <_getpid>

08006bf4 <_init>:
 8006bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf6:	bf00      	nop
 8006bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bfa:	bc08      	pop	{r3}
 8006bfc:	469e      	mov	lr, r3
 8006bfe:	4770      	bx	lr

08006c00 <_fini>:
 8006c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c02:	bf00      	nop
 8006c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c06:	bc08      	pop	{r3}
 8006c08:	469e      	mov	lr, r3
 8006c0a:	4770      	bx	lr
