
5_Semaphores.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076dc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  08007880  08007880  00008880  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cf8  08007cf8  000091e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007cf8  08007cf8  00008cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d00  08007d00  000091e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d00  08007d00  00008d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d04  08007d04  00008d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08007d08  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ed4  200001e0  08007ee8  000091e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040b4  08007ee8  0000a0b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000595a  00000000  00000000  00009210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012ff  00000000  00000000  0000eb6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d0  00000000  00000000  0000fe70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000457  00000000  00000000  00010440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ed97  00000000  00000000  00010897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006a7b  00000000  00000000  0001f62e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005e476  00000000  00000000  000260a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008451f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b70  00000000  00000000  00084564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000870d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007864 	.word	0x08007864

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08007864 	.word	0x08007864

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f103 0208 	add.w	r2, r3, #8
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f103 0208 	add.w	r2, r3, #8
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f103 0208 	add.w	r2, r3, #8
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b085      	sub	sp, #20
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
 8000d66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	68fa      	ldr	r2, [r7, #12]
 8000d72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	683a      	ldr	r2, [r7, #0]
 8000d82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	1c5a      	adds	r2, r3, #1
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	601a      	str	r2, [r3, #0]
}
 8000d9a:	bf00      	nop
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000da6:	b480      	push	{r7}
 8000da8:	b085      	sub	sp, #20
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
 8000dae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000dbc:	d103      	bne.n	8000dc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	691b      	ldr	r3, [r3, #16]
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	e00c      	b.n	8000de0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3308      	adds	r3, #8
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	e002      	b.n	8000dd4 <vListInsert+0x2e>
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d2f6      	bcs.n	8000dce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	683a      	ldr	r2, [r7, #0]
 8000dee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	1c5a      	adds	r2, r3, #1
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	601a      	str	r2, [r3, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	691b      	ldr	r3, [r3, #16]
 8000e24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	6892      	ldr	r2, [r2, #8]
 8000e2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	6852      	ldr	r2, [r2, #4]
 8000e38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d103      	bne.n	8000e4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	1e5a      	subs	r2, r3, #1
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d10b      	bne.n	8000e98 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e84:	f383 8811 	msr	BASEPRI, r3
 8000e88:	f3bf 8f6f 	isb	sy
 8000e8c:	f3bf 8f4f 	dsb	sy
 8000e90:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000e92:	bf00      	nop
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8000e98:	f001 fc26 	bl	80026e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ea4:	68f9      	ldr	r1, [r7, #12]
 8000ea6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000ea8:	fb01 f303 	mul.w	r3, r1, r3
 8000eac:	441a      	add	r2, r3
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	68f9      	ldr	r1, [r7, #12]
 8000ecc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000ece:	fb01 f303 	mul.w	r3, r1, r3
 8000ed2:	441a      	add	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	22ff      	movs	r2, #255	@ 0xff
 8000edc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	22ff      	movs	r2, #255	@ 0xff
 8000ee4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d114      	bne.n	8000f18 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	691b      	ldr	r3, [r3, #16]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d01a      	beq.n	8000f2c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	3310      	adds	r3, #16
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 fefe 	bl	8001cfc <xTaskRemoveFromEventList>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d012      	beq.n	8000f2c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000f06:	4b0d      	ldr	r3, [pc, #52]	@ (8000f3c <xQueueGenericReset+0xd0>)
 8000f08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	f3bf 8f4f 	dsb	sy
 8000f12:	f3bf 8f6f 	isb	sy
 8000f16:	e009      	b.n	8000f2c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	3310      	adds	r3, #16
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fef1 	bl	8000d04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	3324      	adds	r3, #36	@ 0x24
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff feec 	bl	8000d04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000f2c:	f001 fc0e 	bl	800274c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000f30:	2301      	movs	r3, #1
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	e000ed04 	.word	0xe000ed04

08000f40 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	@ 0x28
 8000f44:	af02      	add	r7, sp, #8
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d10b      	bne.n	8000f6c <xQueueGenericCreate+0x2c>
	__asm volatile
 8000f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f58:	f383 8811 	msr	BASEPRI, r3
 8000f5c:	f3bf 8f6f 	isb	sy
 8000f60:	f3bf 8f4f 	dsb	sy
 8000f64:	613b      	str	r3, [r7, #16]
}
 8000f66:	bf00      	nop
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	fb02 f303 	mul.w	r3, r2, r3
 8000f74:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3350      	adds	r3, #80	@ 0x50
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 fc94 	bl	80028a8 <pvPortMalloc>
 8000f80:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d00d      	beq.n	8000fa4 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3350      	adds	r3, #80	@ 0x50
 8000f90:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000f92:	79fa      	ldrb	r2, [r7, #7]
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	68f8      	ldr	r0, [r7, #12]
 8000fa0:	f000 f805 	bl	8000fae <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000fa4:	69bb      	ldr	r3, [r7, #24]
	}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3720      	adds	r7, #32
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b084      	sub	sp, #16
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
 8000fba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d103      	bne.n	8000fca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	e002      	b.n	8000fd0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	68ba      	ldr	r2, [r7, #8]
 8000fda:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000fdc:	2101      	movs	r1, #1
 8000fde:	69b8      	ldr	r0, [r7, #24]
 8000fe0:	f7ff ff44 	bl	8000e6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	78fa      	ldrb	r2, [r7, #3]
 8000fe8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000fec:	bf00      	nop
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08e      	sub	sp, #56	@ 0x38
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
 8001000:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001002:	2300      	movs	r3, #0
 8001004:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800100a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800100c:	2b00      	cmp	r3, #0
 800100e:	d10b      	bne.n	8001028 <xQueueGenericSend+0x34>
	__asm volatile
 8001010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001014:	f383 8811 	msr	BASEPRI, r3
 8001018:	f3bf 8f6f 	isb	sy
 800101c:	f3bf 8f4f 	dsb	sy
 8001020:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001022:	bf00      	nop
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d103      	bne.n	8001036 <xQueueGenericSend+0x42>
 800102e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <xQueueGenericSend+0x46>
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <xQueueGenericSend+0x48>
 800103a:	2300      	movs	r3, #0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d10b      	bne.n	8001058 <xQueueGenericSend+0x64>
	__asm volatile
 8001040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001044:	f383 8811 	msr	BASEPRI, r3
 8001048:	f3bf 8f6f 	isb	sy
 800104c:	f3bf 8f4f 	dsb	sy
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001052:	bf00      	nop
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	2b02      	cmp	r3, #2
 800105c:	d103      	bne.n	8001066 <xQueueGenericSend+0x72>
 800105e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001062:	2b01      	cmp	r3, #1
 8001064:	d101      	bne.n	800106a <xQueueGenericSend+0x76>
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <xQueueGenericSend+0x78>
 800106a:	2300      	movs	r3, #0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d10b      	bne.n	8001088 <xQueueGenericSend+0x94>
	__asm volatile
 8001070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001074:	f383 8811 	msr	BASEPRI, r3
 8001078:	f3bf 8f6f 	isb	sy
 800107c:	f3bf 8f4f 	dsb	sy
 8001080:	623b      	str	r3, [r7, #32]
}
 8001082:	bf00      	nop
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001088:	f000 ffd8 	bl	800203c <xTaskGetSchedulerState>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d102      	bne.n	8001098 <xQueueGenericSend+0xa4>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <xQueueGenericSend+0xa8>
 8001098:	2301      	movs	r3, #1
 800109a:	e000      	b.n	800109e <xQueueGenericSend+0xaa>
 800109c:	2300      	movs	r3, #0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10b      	bne.n	80010ba <xQueueGenericSend+0xc6>
	__asm volatile
 80010a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010a6:	f383 8811 	msr	BASEPRI, r3
 80010aa:	f3bf 8f6f 	isb	sy
 80010ae:	f3bf 8f4f 	dsb	sy
 80010b2:	61fb      	str	r3, [r7, #28]
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	e7fd      	b.n	80010b6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80010ba:	f001 fb15 	bl	80026e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80010be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80010c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d302      	bcc.n	80010d0 <xQueueGenericSend+0xdc>
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d129      	bne.n	8001124 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	68b9      	ldr	r1, [r7, #8]
 80010d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80010d6:	f000 f9b7 	bl	8001448 <prvCopyDataToQueue>
 80010da:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80010dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d010      	beq.n	8001106 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80010e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010e6:	3324      	adds	r3, #36	@ 0x24
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 fe07 	bl	8001cfc <xTaskRemoveFromEventList>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d013      	beq.n	800111c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80010f4:	4b3f      	ldr	r3, [pc, #252]	@ (80011f4 <xQueueGenericSend+0x200>)
 80010f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	f3bf 8f4f 	dsb	sy
 8001100:	f3bf 8f6f 	isb	sy
 8001104:	e00a      	b.n	800111c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001108:	2b00      	cmp	r3, #0
 800110a:	d007      	beq.n	800111c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800110c:	4b39      	ldr	r3, [pc, #228]	@ (80011f4 <xQueueGenericSend+0x200>)
 800110e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	f3bf 8f4f 	dsb	sy
 8001118:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800111c:	f001 fb16 	bl	800274c <vPortExitCritical>
				return pdPASS;
 8001120:	2301      	movs	r3, #1
 8001122:	e063      	b.n	80011ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d103      	bne.n	8001132 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800112a:	f001 fb0f 	bl	800274c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800112e:	2300      	movs	r3, #0
 8001130:	e05c      	b.n	80011ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001134:	2b00      	cmp	r3, #0
 8001136:	d106      	bne.n	8001146 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4618      	mov	r0, r3
 800113e:	f000 fe41 	bl	8001dc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001142:	2301      	movs	r3, #1
 8001144:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001146:	f001 fb01 	bl	800274c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800114a:	f000 fbef 	bl	800192c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800114e:	f001 facb 	bl	80026e8 <vPortEnterCritical>
 8001152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001154:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001158:	b25b      	sxtb	r3, r3
 800115a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800115e:	d103      	bne.n	8001168 <xQueueGenericSend+0x174>
 8001160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001162:	2200      	movs	r2, #0
 8001164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800116a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800116e:	b25b      	sxtb	r3, r3
 8001170:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001174:	d103      	bne.n	800117e <xQueueGenericSend+0x18a>
 8001176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800117e:	f001 fae5 	bl	800274c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001182:	1d3a      	adds	r2, r7, #4
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4611      	mov	r1, r2
 800118a:	4618      	mov	r0, r3
 800118c:	f000 fe30 	bl	8001df0 <xTaskCheckForTimeOut>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d124      	bne.n	80011e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001196:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001198:	f000 fa28 	bl	80015ec <prvIsQueueFull>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d018      	beq.n	80011d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80011a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011a4:	3310      	adds	r3, #16
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	4611      	mov	r1, r2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 fd80 	bl	8001cb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80011b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80011b2:	f000 f9b3 	bl	800151c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80011b6:	f000 fbc7 	bl	8001948 <xTaskResumeAll>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f47f af7c 	bne.w	80010ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80011c2:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <xQueueGenericSend+0x200>)
 80011c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	f3bf 8f4f 	dsb	sy
 80011ce:	f3bf 8f6f 	isb	sy
 80011d2:	e772      	b.n	80010ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80011d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80011d6:	f000 f9a1 	bl	800151c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80011da:	f000 fbb5 	bl	8001948 <xTaskResumeAll>
 80011de:	e76c      	b.n	80010ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80011e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80011e2:	f000 f99b 	bl	800151c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80011e6:	f000 fbaf 	bl	8001948 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80011ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3738      	adds	r7, #56	@ 0x38
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	e000ed04 	.word	0xe000ed04

080011f8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08e      	sub	sp, #56	@ 0x38
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8001202:	2300      	movs	r3, #0
 8001204:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800120a:	2300      	movs	r3, #0
 800120c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800120e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001210:	2b00      	cmp	r3, #0
 8001212:	d10b      	bne.n	800122c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8001214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001218:	f383 8811 	msr	BASEPRI, r3
 800121c:	f3bf 8f6f 	isb	sy
 8001220:	f3bf 8f4f 	dsb	sy
 8001224:	623b      	str	r3, [r7, #32]
}
 8001226:	bf00      	nop
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800122c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800122e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00b      	beq.n	800124c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8001234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001238:	f383 8811 	msr	BASEPRI, r3
 800123c:	f3bf 8f6f 	isb	sy
 8001240:	f3bf 8f4f 	dsb	sy
 8001244:	61fb      	str	r3, [r7, #28]
}
 8001246:	bf00      	nop
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800124c:	f000 fef6 	bl	800203c <xTaskGetSchedulerState>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d102      	bne.n	800125c <xQueueSemaphoreTake+0x64>
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d101      	bne.n	8001260 <xQueueSemaphoreTake+0x68>
 800125c:	2301      	movs	r3, #1
 800125e:	e000      	b.n	8001262 <xQueueSemaphoreTake+0x6a>
 8001260:	2300      	movs	r3, #0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10b      	bne.n	800127e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8001266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800126a:	f383 8811 	msr	BASEPRI, r3
 800126e:	f3bf 8f6f 	isb	sy
 8001272:	f3bf 8f4f 	dsb	sy
 8001276:	61bb      	str	r3, [r7, #24]
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	e7fd      	b.n	800127a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800127e:	f001 fa33 	bl	80026e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001286:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800128a:	2b00      	cmp	r3, #0
 800128c:	d024      	beq.n	80012d8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800128e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001290:	1e5a      	subs	r2, r3, #1
 8001292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001294:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d104      	bne.n	80012a8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800129e:	f001 f879 	bl	8002394 <pvTaskIncrementMutexHeldCount>
 80012a2:	4602      	mov	r2, r0
 80012a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012a6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80012a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00f      	beq.n	80012d0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80012b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012b2:	3310      	adds	r3, #16
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 fd21 	bl	8001cfc <xTaskRemoveFromEventList>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d007      	beq.n	80012d0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80012c0:	4b54      	ldr	r3, [pc, #336]	@ (8001414 <xQueueSemaphoreTake+0x21c>)
 80012c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	f3bf 8f4f 	dsb	sy
 80012cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80012d0:	f001 fa3c 	bl	800274c <vPortExitCritical>
				return pdPASS;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e098      	b.n	800140a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d112      	bne.n	8001304 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80012de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d00b      	beq.n	80012fc <xQueueSemaphoreTake+0x104>
	__asm volatile
 80012e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012e8:	f383 8811 	msr	BASEPRI, r3
 80012ec:	f3bf 8f6f 	isb	sy
 80012f0:	f3bf 8f4f 	dsb	sy
 80012f4:	617b      	str	r3, [r7, #20]
}
 80012f6:	bf00      	nop
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80012fc:	f001 fa26 	bl	800274c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001300:	2300      	movs	r3, #0
 8001302:	e082      	b.n	800140a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001306:	2b00      	cmp	r3, #0
 8001308:	d106      	bne.n	8001318 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	4618      	mov	r0, r3
 8001310:	f000 fd58 	bl	8001dc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001314:	2301      	movs	r3, #1
 8001316:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001318:	f001 fa18 	bl	800274c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800131c:	f000 fb06 	bl	800192c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001320:	f001 f9e2 	bl	80026e8 <vPortEnterCritical>
 8001324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001326:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800132a:	b25b      	sxtb	r3, r3
 800132c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001330:	d103      	bne.n	800133a <xQueueSemaphoreTake+0x142>
 8001332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800133a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800133c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001340:	b25b      	sxtb	r3, r3
 8001342:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001346:	d103      	bne.n	8001350 <xQueueSemaphoreTake+0x158>
 8001348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001350:	f001 f9fc 	bl	800274c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001354:	463a      	mov	r2, r7
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f000 fd47 	bl	8001df0 <xTaskCheckForTimeOut>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d132      	bne.n	80013ce <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001368:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800136a:	f000 f929 	bl	80015c0 <prvIsQueueEmpty>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d026      	beq.n	80013c2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d109      	bne.n	8001390 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800137c:	f001 f9b4 	bl	80026e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	4618      	mov	r0, r3
 8001386:	f000 fe77 	bl	8002078 <xTaskPriorityInherit>
 800138a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800138c:	f001 f9de 	bl	800274c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001392:	3324      	adds	r3, #36	@ 0x24
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f000 fc89 	bl	8001cb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800139e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013a0:	f000 f8bc 	bl	800151c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80013a4:	f000 fad0 	bl	8001948 <xTaskResumeAll>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f47f af67 	bne.w	800127e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80013b0:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <xQueueSemaphoreTake+0x21c>)
 80013b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	f3bf 8f4f 	dsb	sy
 80013bc:	f3bf 8f6f 	isb	sy
 80013c0:	e75d      	b.n	800127e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80013c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013c4:	f000 f8aa 	bl	800151c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80013c8:	f000 fabe 	bl	8001948 <xTaskResumeAll>
 80013cc:	e757      	b.n	800127e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80013ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013d0:	f000 f8a4 	bl	800151c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80013d4:	f000 fab8 	bl	8001948 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80013d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013da:	f000 f8f1 	bl	80015c0 <prvIsQueueEmpty>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f43f af4c 	beq.w	800127e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80013e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00d      	beq.n	8001408 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80013ec:	f001 f97c 	bl	80026e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80013f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013f2:	f000 f811 	bl	8001418 <prvGetDisinheritPriorityAfterTimeout>
 80013f6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80013f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 ff38 	bl	8002274 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8001404:	f001 f9a2 	bl	800274c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001408:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800140a:	4618      	mov	r0, r3
 800140c:	3738      	adds	r7, #56	@ 0x38
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	e000ed04 	.word	0xe000ed04

08001418 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001424:	2b00      	cmp	r3, #0
 8001426:	d006      	beq.n	8001436 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f1c3 0307 	rsb	r3, r3, #7
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	e001      	b.n	800143a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800143a:	68fb      	ldr	r3, [r7, #12]
	}
 800143c:	4618      	mov	r0, r3
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800145c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10d      	bne.n	8001482 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d14d      	bne.n	800150a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	4618      	mov	r0, r3
 8001474:	f000 fe76 	bl	8002164 <xTaskPriorityDisinherit>
 8001478:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	e043      	b.n	800150a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d119      	bne.n	80014bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6858      	ldr	r0, [r3, #4]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001490:	461a      	mov	r2, r3
 8001492:	68b9      	ldr	r1, [r7, #8]
 8001494:	f002 fe8f 	bl	80041b6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a0:	441a      	add	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d32b      	bcc.n	800150a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	e026      	b.n	800150a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	68d8      	ldr	r0, [r3, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c4:	461a      	mov	r2, r3
 80014c6:	68b9      	ldr	r1, [r7, #8]
 80014c8:	f002 fe75 	bl	80041b6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	68da      	ldr	r2, [r3, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d4:	425b      	negs	r3, r3
 80014d6:	441a      	add	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	68da      	ldr	r2, [r3, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d207      	bcs.n	80014f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f0:	425b      	negs	r3, r3
 80014f2:	441a      	add	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d105      	bne.n	800150a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d002      	beq.n	800150a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	3b01      	subs	r3, #1
 8001508:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8001512:	697b      	ldr	r3, [r7, #20]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001524:	f001 f8e0 	bl	80026e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800152e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001530:	e011      	b.n	8001556 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001536:	2b00      	cmp	r3, #0
 8001538:	d012      	beq.n	8001560 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3324      	adds	r3, #36	@ 0x24
 800153e:	4618      	mov	r0, r3
 8001540:	f000 fbdc 	bl	8001cfc <xTaskRemoveFromEventList>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800154a:	f000 fcb5 	bl	8001eb8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	3b01      	subs	r3, #1
 8001552:	b2db      	uxtb	r3, r3
 8001554:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155a:	2b00      	cmp	r3, #0
 800155c:	dce9      	bgt.n	8001532 <prvUnlockQueue+0x16>
 800155e:	e000      	b.n	8001562 <prvUnlockQueue+0x46>
					break;
 8001560:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	22ff      	movs	r2, #255	@ 0xff
 8001566:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800156a:	f001 f8ef 	bl	800274c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800156e:	f001 f8bb 	bl	80026e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001578:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800157a:	e011      	b.n	80015a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d012      	beq.n	80015aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3310      	adds	r3, #16
 8001588:	4618      	mov	r0, r3
 800158a:	f000 fbb7 	bl	8001cfc <xTaskRemoveFromEventList>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001594:	f000 fc90 	bl	8001eb8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001598:	7bbb      	ldrb	r3, [r7, #14]
 800159a:	3b01      	subs	r3, #1
 800159c:	b2db      	uxtb	r3, r3
 800159e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80015a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	dce9      	bgt.n	800157c <prvUnlockQueue+0x60>
 80015a8:	e000      	b.n	80015ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80015aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	22ff      	movs	r2, #255	@ 0xff
 80015b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80015b4:	f001 f8ca 	bl	800274c <vPortExitCritical>
}
 80015b8:	bf00      	nop
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80015c8:	f001 f88e 	bl	80026e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d102      	bne.n	80015da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80015d4:	2301      	movs	r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	e001      	b.n	80015de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80015de:	f001 f8b5 	bl	800274c <vPortExitCritical>

	return xReturn;
 80015e2:	68fb      	ldr	r3, [r7, #12]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80015f4:	f001 f878 	bl	80026e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001600:	429a      	cmp	r2, r3
 8001602:	d102      	bne.n	800160a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001604:	2301      	movs	r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	e001      	b.n	800160e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800160e:	f001 f89d 	bl	800274c <vPortExitCritical>

	return xReturn;
 8001612:	68fb      	ldr	r3, [r7, #12]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08c      	sub	sp, #48	@ 0x30
 8001620:	af04      	add	r7, sp, #16
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	4613      	mov	r3, r2
 800162a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4618      	mov	r0, r3
 8001632:	f001 f939 	bl	80028a8 <pvPortMalloc>
 8001636:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00e      	beq.n	800165c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800163e:	205c      	movs	r0, #92	@ 0x5c
 8001640:	f001 f932 	bl	80028a8 <pvPortMalloc>
 8001644:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	631a      	str	r2, [r3, #48]	@ 0x30
 8001652:	e005      	b.n	8001660 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001654:	6978      	ldr	r0, [r7, #20]
 8001656:	f001 f9f5 	bl	8002a44 <vPortFree>
 800165a:	e001      	b.n	8001660 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d013      	beq.n	800168e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001666:	88fa      	ldrh	r2, [r7, #6]
 8001668:	2300      	movs	r3, #0
 800166a:	9303      	str	r3, [sp, #12]
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	9302      	str	r3, [sp, #8]
 8001670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001672:	9301      	str	r3, [sp, #4]
 8001674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	68b9      	ldr	r1, [r7, #8]
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f000 f80e 	bl	800169e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001682:	69f8      	ldr	r0, [r7, #28]
 8001684:	f000 f89c 	bl	80017c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001688:	2301      	movs	r3, #1
 800168a:	61bb      	str	r3, [r7, #24]
 800168c:	e002      	b.n	8001694 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800168e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001692:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001694:	69bb      	ldr	r3, [r7, #24]
	}
 8001696:	4618      	mov	r0, r3
 8001698:	3720      	adds	r7, #32
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b088      	sub	sp, #32
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
 80016aa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80016ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016ae:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	461a      	mov	r2, r3
 80016b6:	21a5      	movs	r1, #165	@ 0xa5
 80016b8:	f002 fcfd 	bl	80040b6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80016bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80016c6:	3b01      	subs	r3, #1
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	f023 0307 	bic.w	r3, r3, #7
 80016d4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d00b      	beq.n	80016f8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80016e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016e4:	f383 8811 	msr	BASEPRI, r3
 80016e8:	f3bf 8f6f 	isb	sy
 80016ec:	f3bf 8f4f 	dsb	sy
 80016f0:	617b      	str	r3, [r7, #20]
}
 80016f2:	bf00      	nop
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d01f      	beq.n	800173e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
 8001702:	e012      	b.n	800172a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	4413      	add	r3, r2
 800170a:	7819      	ldrb	r1, [r3, #0]
 800170c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	4413      	add	r3, r2
 8001712:	3334      	adds	r3, #52	@ 0x34
 8001714:	460a      	mov	r2, r1
 8001716:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001718:	68ba      	ldr	r2, [r7, #8]
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	4413      	add	r3, r2
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d006      	beq.n	8001732 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	3301      	adds	r3, #1
 8001728:	61fb      	str	r3, [r7, #28]
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	2b0f      	cmp	r3, #15
 800172e:	d9e9      	bls.n	8001704 <prvInitialiseNewTask+0x66>
 8001730:	e000      	b.n	8001734 <prvInitialiseNewTask+0x96>
			{
				break;
 8001732:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800173c:	e003      	b.n	8001746 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800173e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001748:	2b06      	cmp	r3, #6
 800174a:	d901      	bls.n	8001750 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800174c:	2306      	movs	r3, #6
 800174e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001752:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001754:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001758:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800175a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800175c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800175e:	2200      	movs	r2, #0
 8001760:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001764:	3304      	adds	r3, #4
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff faec 	bl	8000d44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800176c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800176e:	3318      	adds	r3, #24
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fae7 	bl	8000d44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001778:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800177a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800177c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800177e:	f1c3 0207 	rsb	r2, r3, #7
 8001782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001784:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001788:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800178a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800178c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800178e:	2200      	movs	r2, #0
 8001790:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	68f9      	ldr	r1, [r7, #12]
 800179e:	69b8      	ldr	r0, [r7, #24]
 80017a0:	f000 fe72 	bl	8002488 <pxPortInitialiseStack>
 80017a4:	4602      	mov	r2, r0
 80017a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80017aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d002      	beq.n	80017b6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80017b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80017b6:	bf00      	nop
 80017b8:	3720      	adds	r7, #32
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80017c8:	f000 ff8e 	bl	80026e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80017cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001880 <prvAddNewTaskToReadyList+0xc0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	3301      	adds	r3, #1
 80017d2:	4a2b      	ldr	r2, [pc, #172]	@ (8001880 <prvAddNewTaskToReadyList+0xc0>)
 80017d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80017d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001884 <prvAddNewTaskToReadyList+0xc4>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d109      	bne.n	80017f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80017de:	4a29      	ldr	r2, [pc, #164]	@ (8001884 <prvAddNewTaskToReadyList+0xc4>)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80017e4:	4b26      	ldr	r3, [pc, #152]	@ (8001880 <prvAddNewTaskToReadyList+0xc0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d110      	bne.n	800180e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80017ec:	f000 fb88 	bl	8001f00 <prvInitialiseTaskLists>
 80017f0:	e00d      	b.n	800180e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80017f2:	4b25      	ldr	r3, [pc, #148]	@ (8001888 <prvAddNewTaskToReadyList+0xc8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d109      	bne.n	800180e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80017fa:	4b22      	ldr	r3, [pc, #136]	@ (8001884 <prvAddNewTaskToReadyList+0xc4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001804:	429a      	cmp	r2, r3
 8001806:	d802      	bhi.n	800180e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001808:	4a1e      	ldr	r2, [pc, #120]	@ (8001884 <prvAddNewTaskToReadyList+0xc4>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800180e:	4b1f      	ldr	r3, [pc, #124]	@ (800188c <prvAddNewTaskToReadyList+0xcc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	3301      	adds	r3, #1
 8001814:	4a1d      	ldr	r2, [pc, #116]	@ (800188c <prvAddNewTaskToReadyList+0xcc>)
 8001816:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001818:	4b1c      	ldr	r3, [pc, #112]	@ (800188c <prvAddNewTaskToReadyList+0xcc>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001824:	2201      	movs	r2, #1
 8001826:	409a      	lsls	r2, r3
 8001828:	4b19      	ldr	r3, [pc, #100]	@ (8001890 <prvAddNewTaskToReadyList+0xd0>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4313      	orrs	r3, r2
 800182e:	4a18      	ldr	r2, [pc, #96]	@ (8001890 <prvAddNewTaskToReadyList+0xd0>)
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4a15      	ldr	r2, [pc, #84]	@ (8001894 <prvAddNewTaskToReadyList+0xd4>)
 8001840:	441a      	add	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3304      	adds	r3, #4
 8001846:	4619      	mov	r1, r3
 8001848:	4610      	mov	r0, r2
 800184a:	f7ff fa88 	bl	8000d5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800184e:	f000 ff7d 	bl	800274c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001852:	4b0d      	ldr	r3, [pc, #52]	@ (8001888 <prvAddNewTaskToReadyList+0xc8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00e      	beq.n	8001878 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800185a:	4b0a      	ldr	r3, [pc, #40]	@ (8001884 <prvAddNewTaskToReadyList+0xc4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001864:	429a      	cmp	r2, r3
 8001866:	d207      	bcs.n	8001878 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001868:	4b0b      	ldr	r3, [pc, #44]	@ (8001898 <prvAddNewTaskToReadyList+0xd8>)
 800186a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	f3bf 8f4f 	dsb	sy
 8001874:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	200002fc 	.word	0x200002fc
 8001884:	200001fc 	.word	0x200001fc
 8001888:	20000308 	.word	0x20000308
 800188c:	20000318 	.word	0x20000318
 8001890:	20000304 	.word	0x20000304
 8001894:	20000200 	.word	0x20000200
 8001898:	e000ed04 	.word	0xe000ed04

0800189c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80018a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001914 <vTaskStartScheduler+0x78>)
 80018a4:	9301      	str	r3, [sp, #4]
 80018a6:	2300      	movs	r3, #0
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	2300      	movs	r3, #0
 80018ac:	2280      	movs	r2, #128	@ 0x80
 80018ae:	491a      	ldr	r1, [pc, #104]	@ (8001918 <vTaskStartScheduler+0x7c>)
 80018b0:	481a      	ldr	r0, [pc, #104]	@ (800191c <vTaskStartScheduler+0x80>)
 80018b2:	f7ff feb3 	bl	800161c <xTaskCreate>
 80018b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d116      	bne.n	80018ec <vTaskStartScheduler+0x50>
	__asm volatile
 80018be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018c2:	f383 8811 	msr	BASEPRI, r3
 80018c6:	f3bf 8f6f 	isb	sy
 80018ca:	f3bf 8f4f 	dsb	sy
 80018ce:	60bb      	str	r3, [r7, #8]
}
 80018d0:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80018d2:	4b13      	ldr	r3, [pc, #76]	@ (8001920 <vTaskStartScheduler+0x84>)
 80018d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80018d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80018da:	4b12      	ldr	r3, [pc, #72]	@ (8001924 <vTaskStartScheduler+0x88>)
 80018dc:	2201      	movs	r2, #1
 80018de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80018e0:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <vTaskStartScheduler+0x8c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80018e6:	f000 fe5b 	bl	80025a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80018ea:	e00f      	b.n	800190c <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018f2:	d10b      	bne.n	800190c <vTaskStartScheduler+0x70>
	__asm volatile
 80018f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018f8:	f383 8811 	msr	BASEPRI, r3
 80018fc:	f3bf 8f6f 	isb	sy
 8001900:	f3bf 8f4f 	dsb	sy
 8001904:	607b      	str	r3, [r7, #4]
}
 8001906:	bf00      	nop
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <vTaskStartScheduler+0x6c>
}
 800190c:	bf00      	nop
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000320 	.word	0x20000320
 8001918:	08007880 	.word	0x08007880
 800191c:	08001ed1 	.word	0x08001ed1
 8001920:	2000031c 	.word	0x2000031c
 8001924:	20000308 	.word	0x20000308
 8001928:	20000300 	.word	0x20000300

0800192c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001930:	4b04      	ldr	r3, [pc, #16]	@ (8001944 <vTaskSuspendAll+0x18>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	3301      	adds	r3, #1
 8001936:	4a03      	ldr	r2, [pc, #12]	@ (8001944 <vTaskSuspendAll+0x18>)
 8001938:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	20000324 	.word	0x20000324

08001948 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001952:	2300      	movs	r3, #0
 8001954:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001956:	4b42      	ldr	r3, [pc, #264]	@ (8001a60 <xTaskResumeAll+0x118>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10b      	bne.n	8001976 <xTaskResumeAll+0x2e>
	__asm volatile
 800195e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001962:	f383 8811 	msr	BASEPRI, r3
 8001966:	f3bf 8f6f 	isb	sy
 800196a:	f3bf 8f4f 	dsb	sy
 800196e:	603b      	str	r3, [r7, #0]
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	e7fd      	b.n	8001972 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001976:	f000 feb7 	bl	80026e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800197a:	4b39      	ldr	r3, [pc, #228]	@ (8001a60 <xTaskResumeAll+0x118>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	3b01      	subs	r3, #1
 8001980:	4a37      	ldr	r2, [pc, #220]	@ (8001a60 <xTaskResumeAll+0x118>)
 8001982:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001984:	4b36      	ldr	r3, [pc, #216]	@ (8001a60 <xTaskResumeAll+0x118>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d161      	bne.n	8001a50 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800198c:	4b35      	ldr	r3, [pc, #212]	@ (8001a64 <xTaskResumeAll+0x11c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d05d      	beq.n	8001a50 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001994:	e02e      	b.n	80019f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001996:	4b34      	ldr	r3, [pc, #208]	@ (8001a68 <xTaskResumeAll+0x120>)
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	3318      	adds	r3, #24
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fa38 	bl	8000e18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	3304      	adds	r3, #4
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fa33 	bl	8000e18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b6:	2201      	movs	r2, #1
 80019b8:	409a      	lsls	r2, r3
 80019ba:	4b2c      	ldr	r3, [pc, #176]	@ (8001a6c <xTaskResumeAll+0x124>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4313      	orrs	r3, r2
 80019c0:	4a2a      	ldr	r2, [pc, #168]	@ (8001a6c <xTaskResumeAll+0x124>)
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4a27      	ldr	r2, [pc, #156]	@ (8001a70 <xTaskResumeAll+0x128>)
 80019d2:	441a      	add	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	3304      	adds	r3, #4
 80019d8:	4619      	mov	r1, r3
 80019da:	4610      	mov	r0, r2
 80019dc:	f7ff f9bf 	bl	8000d5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019e4:	4b23      	ldr	r3, [pc, #140]	@ (8001a74 <xTaskResumeAll+0x12c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d302      	bcc.n	80019f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80019ee:	4b22      	ldr	r3, [pc, #136]	@ (8001a78 <xTaskResumeAll+0x130>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80019f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a68 <xTaskResumeAll+0x120>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1cc      	bne.n	8001996 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001a02:	f000 fafb 	bl	8001ffc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001a06:	4b1d      	ldr	r3, [pc, #116]	@ (8001a7c <xTaskResumeAll+0x134>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d010      	beq.n	8001a34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001a12:	f000 f837 	bl	8001a84 <xTaskIncrementTick>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8001a1c:	4b16      	ldr	r3, [pc, #88]	@ (8001a78 <xTaskResumeAll+0x130>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f1      	bne.n	8001a12 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8001a2e:	4b13      	ldr	r3, [pc, #76]	@ (8001a7c <xTaskResumeAll+0x134>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001a34:	4b10      	ldr	r3, [pc, #64]	@ (8001a78 <xTaskResumeAll+0x130>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d009      	beq.n	8001a50 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001a40:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <xTaskResumeAll+0x138>)
 8001a42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	f3bf 8f4f 	dsb	sy
 8001a4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001a50:	f000 fe7c 	bl	800274c <vPortExitCritical>

	return xAlreadyYielded;
 8001a54:	68bb      	ldr	r3, [r7, #8]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000324 	.word	0x20000324
 8001a64:	200002fc 	.word	0x200002fc
 8001a68:	200002bc 	.word	0x200002bc
 8001a6c:	20000304 	.word	0x20000304
 8001a70:	20000200 	.word	0x20000200
 8001a74:	200001fc 	.word	0x200001fc
 8001a78:	20000310 	.word	0x20000310
 8001a7c:	2000030c 	.word	0x2000030c
 8001a80:	e000ed04 	.word	0xe000ed04

08001a84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a8e:	4b4f      	ldr	r3, [pc, #316]	@ (8001bcc <xTaskIncrementTick+0x148>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f040 808f 	bne.w	8001bb6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001a98:	4b4d      	ldr	r3, [pc, #308]	@ (8001bd0 <xTaskIncrementTick+0x14c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001aa0:	4a4b      	ldr	r2, [pc, #300]	@ (8001bd0 <xTaskIncrementTick+0x14c>)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d121      	bne.n	8001af0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8001aac:	4b49      	ldr	r3, [pc, #292]	@ (8001bd4 <xTaskIncrementTick+0x150>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00b      	beq.n	8001ace <xTaskIncrementTick+0x4a>
	__asm volatile
 8001ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001aba:	f383 8811 	msr	BASEPRI, r3
 8001abe:	f3bf 8f6f 	isb	sy
 8001ac2:	f3bf 8f4f 	dsb	sy
 8001ac6:	603b      	str	r3, [r7, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	e7fd      	b.n	8001aca <xTaskIncrementTick+0x46>
 8001ace:	4b41      	ldr	r3, [pc, #260]	@ (8001bd4 <xTaskIncrementTick+0x150>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	4b40      	ldr	r3, [pc, #256]	@ (8001bd8 <xTaskIncrementTick+0x154>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a3e      	ldr	r2, [pc, #248]	@ (8001bd4 <xTaskIncrementTick+0x150>)
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	4a3e      	ldr	r2, [pc, #248]	@ (8001bd8 <xTaskIncrementTick+0x154>)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	4b3e      	ldr	r3, [pc, #248]	@ (8001bdc <xTaskIncrementTick+0x158>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	4a3c      	ldr	r2, [pc, #240]	@ (8001bdc <xTaskIncrementTick+0x158>)
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	f000 fa86 	bl	8001ffc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001af0:	4b3b      	ldr	r3, [pc, #236]	@ (8001be0 <xTaskIncrementTick+0x15c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d348      	bcc.n	8001b8c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001afa:	4b36      	ldr	r3, [pc, #216]	@ (8001bd4 <xTaskIncrementTick+0x150>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d104      	bne.n	8001b0e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b04:	4b36      	ldr	r3, [pc, #216]	@ (8001be0 <xTaskIncrementTick+0x15c>)
 8001b06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b0a:	601a      	str	r2, [r3, #0]
					break;
 8001b0c:	e03e      	b.n	8001b8c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b0e:	4b31      	ldr	r3, [pc, #196]	@ (8001bd4 <xTaskIncrementTick+0x150>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d203      	bcs.n	8001b2e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001b26:	4a2e      	ldr	r2, [pc, #184]	@ (8001be0 <xTaskIncrementTick+0x15c>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001b2c:	e02e      	b.n	8001b8c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	3304      	adds	r3, #4
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff f970 	bl	8000e18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d004      	beq.n	8001b4a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	3318      	adds	r3, #24
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff f967 	bl	8000e18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b4e:	2201      	movs	r2, #1
 8001b50:	409a      	lsls	r2, r3
 8001b52:	4b24      	ldr	r3, [pc, #144]	@ (8001be4 <xTaskIncrementTick+0x160>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	4a22      	ldr	r2, [pc, #136]	@ (8001be4 <xTaskIncrementTick+0x160>)
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4a1f      	ldr	r2, [pc, #124]	@ (8001be8 <xTaskIncrementTick+0x164>)
 8001b6a:	441a      	add	r2, r3
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	3304      	adds	r3, #4
 8001b70:	4619      	mov	r1, r3
 8001b72:	4610      	mov	r0, r2
 8001b74:	f7ff f8f3 	bl	8000d5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <xTaskIncrementTick+0x168>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d3b9      	bcc.n	8001afa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8001b86:	2301      	movs	r3, #1
 8001b88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b8a:	e7b6      	b.n	8001afa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001b8c:	4b17      	ldr	r3, [pc, #92]	@ (8001bec <xTaskIncrementTick+0x168>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b92:	4915      	ldr	r1, [pc, #84]	@ (8001be8 <xTaskIncrementTick+0x164>)
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d901      	bls.n	8001ba8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001ba8:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <xTaskIncrementTick+0x16c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d007      	beq.n	8001bc0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	e004      	b.n	8001bc0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf4 <xTaskIncrementTick+0x170>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf4 <xTaskIncrementTick+0x170>)
 8001bbe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001bc0:	697b      	ldr	r3, [r7, #20]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000324 	.word	0x20000324
 8001bd0:	20000300 	.word	0x20000300
 8001bd4:	200002b4 	.word	0x200002b4
 8001bd8:	200002b8 	.word	0x200002b8
 8001bdc:	20000314 	.word	0x20000314
 8001be0:	2000031c 	.word	0x2000031c
 8001be4:	20000304 	.word	0x20000304
 8001be8:	20000200 	.word	0x20000200
 8001bec:	200001fc 	.word	0x200001fc
 8001bf0:	20000310 	.word	0x20000310
 8001bf4:	2000030c 	.word	0x2000030c

08001bf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b087      	sub	sp, #28
 8001bfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001bfe:	4b27      	ldr	r3, [pc, #156]	@ (8001c9c <vTaskSwitchContext+0xa4>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001c06:	4b26      	ldr	r3, [pc, #152]	@ (8001ca0 <vTaskSwitchContext+0xa8>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001c0c:	e040      	b.n	8001c90 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8001c0e:	4b24      	ldr	r3, [pc, #144]	@ (8001ca0 <vTaskSwitchContext+0xa8>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c14:	4b23      	ldr	r3, [pc, #140]	@ (8001ca4 <vTaskSwitchContext+0xac>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	fab3 f383 	clz	r3, r3
 8001c20:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001c22:	7afb      	ldrb	r3, [r7, #11]
 8001c24:	f1c3 031f 	rsb	r3, r3, #31
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	491f      	ldr	r1, [pc, #124]	@ (8001ca8 <vTaskSwitchContext+0xb0>)
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	440b      	add	r3, r1
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10b      	bne.n	8001c56 <vTaskSwitchContext+0x5e>
	__asm volatile
 8001c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c42:	f383 8811 	msr	BASEPRI, r3
 8001c46:	f3bf 8f6f 	isb	sy
 8001c4a:	f3bf 8f4f 	dsb	sy
 8001c4e:	607b      	str	r3, [r7, #4]
}
 8001c50:	bf00      	nop
 8001c52:	bf00      	nop
 8001c54:	e7fd      	b.n	8001c52 <vTaskSwitchContext+0x5a>
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4a11      	ldr	r2, [pc, #68]	@ (8001ca8 <vTaskSwitchContext+0xb0>)
 8001c62:	4413      	add	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	3308      	adds	r3, #8
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d104      	bne.n	8001c86 <vTaskSwitchContext+0x8e>
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	4a07      	ldr	r2, [pc, #28]	@ (8001cac <vTaskSwitchContext+0xb4>)
 8001c8e:	6013      	str	r3, [r2, #0]
}
 8001c90:	bf00      	nop
 8001c92:	371c      	adds	r7, #28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	20000324 	.word	0x20000324
 8001ca0:	20000310 	.word	0x20000310
 8001ca4:	20000304 	.word	0x20000304
 8001ca8:	20000200 	.word	0x20000200
 8001cac:	200001fc 	.word	0x200001fc

08001cb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10b      	bne.n	8001cd8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8001cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cc4:	f383 8811 	msr	BASEPRI, r3
 8001cc8:	f3bf 8f6f 	isb	sy
 8001ccc:	f3bf 8f4f 	dsb	sy
 8001cd0:	60fb      	str	r3, [r7, #12]
}
 8001cd2:	bf00      	nop
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001cd8:	4b07      	ldr	r3, [pc, #28]	@ (8001cf8 <vTaskPlaceOnEventList+0x48>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	3318      	adds	r3, #24
 8001cde:	4619      	mov	r1, r3
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff f860 	bl	8000da6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	6838      	ldr	r0, [r7, #0]
 8001cea:	f000 fb67 	bl	80023bc <prvAddCurrentTaskToDelayedList>
}
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200001fc 	.word	0x200001fc

08001cfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10b      	bne.n	8001d2a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8001d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d16:	f383 8811 	msr	BASEPRI, r3
 8001d1a:	f3bf 8f6f 	isb	sy
 8001d1e:	f3bf 8f4f 	dsb	sy
 8001d22:	60fb      	str	r3, [r7, #12]
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	e7fd      	b.n	8001d26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	3318      	adds	r3, #24
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff f872 	bl	8000e18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d34:	4b1d      	ldr	r3, [pc, #116]	@ (8001dac <xTaskRemoveFromEventList+0xb0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d11c      	bne.n	8001d76 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	3304      	adds	r3, #4
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff f869 	bl	8000e18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	4b18      	ldr	r3, [pc, #96]	@ (8001db0 <xTaskRemoveFromEventList+0xb4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	4a16      	ldr	r2, [pc, #88]	@ (8001db0 <xTaskRemoveFromEventList+0xb4>)
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4a13      	ldr	r2, [pc, #76]	@ (8001db4 <xTaskRemoveFromEventList+0xb8>)
 8001d66:	441a      	add	r2, r3
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4610      	mov	r0, r2
 8001d70:	f7fe fff5 	bl	8000d5e <vListInsertEnd>
 8001d74:	e005      	b.n	8001d82 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	3318      	adds	r3, #24
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	480e      	ldr	r0, [pc, #56]	@ (8001db8 <xTaskRemoveFromEventList+0xbc>)
 8001d7e:	f7fe ffee 	bl	8000d5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d86:	4b0d      	ldr	r3, [pc, #52]	@ (8001dbc <xTaskRemoveFromEventList+0xc0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d905      	bls.n	8001d9c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001d90:	2301      	movs	r3, #1
 8001d92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001d94:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc0 <xTaskRemoveFromEventList+0xc4>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	e001      	b.n	8001da0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001da0:	697b      	ldr	r3, [r7, #20]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000324 	.word	0x20000324
 8001db0:	20000304 	.word	0x20000304
 8001db4:	20000200 	.word	0x20000200
 8001db8:	200002bc 	.word	0x200002bc
 8001dbc:	200001fc 	.word	0x200001fc
 8001dc0:	20000310 	.word	0x20000310

08001dc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <vTaskInternalSetTimeOutState+0x24>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001dd4:	4b05      	ldr	r3, [pc, #20]	@ (8001dec <vTaskInternalSetTimeOutState+0x28>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	605a      	str	r2, [r3, #4]
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	20000314 	.word	0x20000314
 8001dec:	20000300 	.word	0x20000300

08001df0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10b      	bne.n	8001e18 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8001e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e04:	f383 8811 	msr	BASEPRI, r3
 8001e08:	f3bf 8f6f 	isb	sy
 8001e0c:	f3bf 8f4f 	dsb	sy
 8001e10:	613b      	str	r3, [r7, #16]
}
 8001e12:	bf00      	nop
 8001e14:	bf00      	nop
 8001e16:	e7fd      	b.n	8001e14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10b      	bne.n	8001e36 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8001e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e22:	f383 8811 	msr	BASEPRI, r3
 8001e26:	f3bf 8f6f 	isb	sy
 8001e2a:	f3bf 8f4f 	dsb	sy
 8001e2e:	60fb      	str	r3, [r7, #12]
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	e7fd      	b.n	8001e32 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8001e36:	f000 fc57 	bl	80026e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb0 <xTaskCheckForTimeOut+0xc0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e52:	d102      	bne.n	8001e5a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61fb      	str	r3, [r7, #28]
 8001e58:	e023      	b.n	8001ea2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	4b15      	ldr	r3, [pc, #84]	@ (8001eb4 <xTaskCheckForTimeOut+0xc4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d007      	beq.n	8001e76 <xTaskCheckForTimeOut+0x86>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d302      	bcc.n	8001e76 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001e70:	2301      	movs	r3, #1
 8001e72:	61fb      	str	r3, [r7, #28]
 8001e74:	e015      	b.n	8001ea2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d20b      	bcs.n	8001e98 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	1ad2      	subs	r2, r2, r3
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ff99 	bl	8001dc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
 8001e96:	e004      	b.n	8001ea2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001ea2:	f000 fc53 	bl	800274c <vPortExitCritical>

	return xReturn;
 8001ea6:	69fb      	ldr	r3, [r7, #28]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3720      	adds	r7, #32
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000300 	.word	0x20000300
 8001eb4:	20000314 	.word	0x20000314

08001eb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001ebc:	4b03      	ldr	r3, [pc, #12]	@ (8001ecc <vTaskMissedYield+0x14>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]
}
 8001ec2:	bf00      	nop
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	20000310 	.word	0x20000310

08001ed0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001ed8:	f000 f852 	bl	8001f80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001edc:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <prvIdleTask+0x28>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d9f9      	bls.n	8001ed8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001ee4:	4b05      	ldr	r3, [pc, #20]	@ (8001efc <prvIdleTask+0x2c>)
 8001ee6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	f3bf 8f4f 	dsb	sy
 8001ef0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001ef4:	e7f0      	b.n	8001ed8 <prvIdleTask+0x8>
 8001ef6:	bf00      	nop
 8001ef8:	20000200 	.word	0x20000200
 8001efc:	e000ed04 	.word	0xe000ed04

08001f00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	e00c      	b.n	8001f26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4a12      	ldr	r2, [pc, #72]	@ (8001f60 <prvInitialiseTaskLists+0x60>)
 8001f18:	4413      	add	r3, r2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe fef2 	bl	8000d04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3301      	adds	r3, #1
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b06      	cmp	r3, #6
 8001f2a:	d9ef      	bls.n	8001f0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001f2c:	480d      	ldr	r0, [pc, #52]	@ (8001f64 <prvInitialiseTaskLists+0x64>)
 8001f2e:	f7fe fee9 	bl	8000d04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001f32:	480d      	ldr	r0, [pc, #52]	@ (8001f68 <prvInitialiseTaskLists+0x68>)
 8001f34:	f7fe fee6 	bl	8000d04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001f38:	480c      	ldr	r0, [pc, #48]	@ (8001f6c <prvInitialiseTaskLists+0x6c>)
 8001f3a:	f7fe fee3 	bl	8000d04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001f3e:	480c      	ldr	r0, [pc, #48]	@ (8001f70 <prvInitialiseTaskLists+0x70>)
 8001f40:	f7fe fee0 	bl	8000d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001f44:	480b      	ldr	r0, [pc, #44]	@ (8001f74 <prvInitialiseTaskLists+0x74>)
 8001f46:	f7fe fedd 	bl	8000d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <prvInitialiseTaskLists+0x78>)
 8001f4c:	4a05      	ldr	r2, [pc, #20]	@ (8001f64 <prvInitialiseTaskLists+0x64>)
 8001f4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001f50:	4b0a      	ldr	r3, [pc, #40]	@ (8001f7c <prvInitialiseTaskLists+0x7c>)
 8001f52:	4a05      	ldr	r2, [pc, #20]	@ (8001f68 <prvInitialiseTaskLists+0x68>)
 8001f54:	601a      	str	r2, [r3, #0]
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000200 	.word	0x20000200
 8001f64:	2000028c 	.word	0x2000028c
 8001f68:	200002a0 	.word	0x200002a0
 8001f6c:	200002bc 	.word	0x200002bc
 8001f70:	200002d0 	.word	0x200002d0
 8001f74:	200002e8 	.word	0x200002e8
 8001f78:	200002b4 	.word	0x200002b4
 8001f7c:	200002b8 	.word	0x200002b8

08001f80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f86:	e019      	b.n	8001fbc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001f88:	f000 fbae 	bl	80026e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f8c:	4b10      	ldr	r3, [pc, #64]	@ (8001fd0 <prvCheckTasksWaitingTermination+0x50>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3304      	adds	r3, #4
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe ff3d 	bl	8000e18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd4 <prvCheckTasksWaitingTermination+0x54>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	4a0b      	ldr	r2, [pc, #44]	@ (8001fd4 <prvCheckTasksWaitingTermination+0x54>)
 8001fa6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd8 <prvCheckTasksWaitingTermination+0x58>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	3b01      	subs	r3, #1
 8001fae:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd8 <prvCheckTasksWaitingTermination+0x58>)
 8001fb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001fb2:	f000 fbcb 	bl	800274c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f810 	bl	8001fdc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001fbc:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <prvCheckTasksWaitingTermination+0x58>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1e1      	bne.n	8001f88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	200002d0 	.word	0x200002d0
 8001fd4:	200002fc 	.word	0x200002fc
 8001fd8:	200002e4 	.word	0x200002e4

08001fdc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 fd2b 	bl	8002a44 <vPortFree>
			vPortFree( pxTCB );
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 fd28 	bl	8002a44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002002:	4b0c      	ldr	r3, [pc, #48]	@ (8002034 <prvResetNextTaskUnblockTime+0x38>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d104      	bne.n	8002016 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800200c:	4b0a      	ldr	r3, [pc, #40]	@ (8002038 <prvResetNextTaskUnblockTime+0x3c>)
 800200e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002012:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002014:	e008      	b.n	8002028 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002016:	4b07      	ldr	r3, [pc, #28]	@ (8002034 <prvResetNextTaskUnblockTime+0x38>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	4a04      	ldr	r2, [pc, #16]	@ (8002038 <prvResetNextTaskUnblockTime+0x3c>)
 8002026:	6013      	str	r3, [r2, #0]
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	200002b4 	.word	0x200002b4
 8002038:	2000031c 	.word	0x2000031c

0800203c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002042:	4b0b      	ldr	r3, [pc, #44]	@ (8002070 <xTaskGetSchedulerState+0x34>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d102      	bne.n	8002050 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800204a:	2301      	movs	r3, #1
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	e008      	b.n	8002062 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002050:	4b08      	ldr	r3, [pc, #32]	@ (8002074 <xTaskGetSchedulerState+0x38>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d102      	bne.n	800205e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002058:	2302      	movs	r3, #2
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	e001      	b.n	8002062 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800205e:	2300      	movs	r3, #0
 8002060:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002062:	687b      	ldr	r3, [r7, #4]
	}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	20000308 	.word	0x20000308
 8002074:	20000324 	.word	0x20000324

08002078 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d05e      	beq.n	800214c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002092:	4b31      	ldr	r3, [pc, #196]	@ (8002158 <xTaskPriorityInherit+0xe0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002098:	429a      	cmp	r2, r3
 800209a:	d24e      	bcs.n	800213a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	db06      	blt.n	80020b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020a4:	4b2c      	ldr	r3, [pc, #176]	@ (8002158 <xTaskPriorityInherit+0xe0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020aa:	f1c3 0207 	rsb	r2, r3, #7
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	6959      	ldr	r1, [r3, #20]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4a26      	ldr	r2, [pc, #152]	@ (800215c <xTaskPriorityInherit+0xe4>)
 80020c4:	4413      	add	r3, r2
 80020c6:	4299      	cmp	r1, r3
 80020c8:	d12f      	bne.n	800212a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	3304      	adds	r3, #4
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fea2 	bl	8000e18 <uxListRemove>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10a      	bne.n	80020f0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020de:	2201      	movs	r2, #1
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43da      	mvns	r2, r3
 80020e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002160 <xTaskPriorityInherit+0xe8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4013      	ands	r3, r2
 80020ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002160 <xTaskPriorityInherit+0xe8>)
 80020ee:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80020f0:	4b19      	ldr	r3, [pc, #100]	@ (8002158 <xTaskPriorityInherit+0xe0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fe:	2201      	movs	r2, #1
 8002100:	409a      	lsls	r2, r3
 8002102:	4b17      	ldr	r3, [pc, #92]	@ (8002160 <xTaskPriorityInherit+0xe8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4313      	orrs	r3, r2
 8002108:	4a15      	ldr	r2, [pc, #84]	@ (8002160 <xTaskPriorityInherit+0xe8>)
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4a10      	ldr	r2, [pc, #64]	@ (800215c <xTaskPriorityInherit+0xe4>)
 800211a:	441a      	add	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	3304      	adds	r3, #4
 8002120:	4619      	mov	r1, r3
 8002122:	4610      	mov	r0, r2
 8002124:	f7fe fe1b 	bl	8000d5e <vListInsertEnd>
 8002128:	e004      	b.n	8002134 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800212a:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <xTaskPriorityInherit+0xe0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8002134:	2301      	movs	r3, #1
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	e008      	b.n	800214c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800213e:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <xTaskPriorityInherit+0xe0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002144:	429a      	cmp	r2, r3
 8002146:	d201      	bcs.n	800214c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8002148:	2301      	movs	r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800214c:	68fb      	ldr	r3, [r7, #12]
	}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200001fc 	.word	0x200001fc
 800215c:	20000200 	.word	0x20000200
 8002160:	20000304 	.word	0x20000304

08002164 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d070      	beq.n	800225c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800217a:	4b3b      	ldr	r3, [pc, #236]	@ (8002268 <xTaskPriorityDisinherit+0x104>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	429a      	cmp	r2, r3
 8002182:	d00b      	beq.n	800219c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8002184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002188:	f383 8811 	msr	BASEPRI, r3
 800218c:	f3bf 8f6f 	isb	sy
 8002190:	f3bf 8f4f 	dsb	sy
 8002194:	60fb      	str	r3, [r7, #12]
}
 8002196:	bf00      	nop
 8002198:	bf00      	nop
 800219a:	e7fd      	b.n	8002198 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10b      	bne.n	80021bc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80021a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021a8:	f383 8811 	msr	BASEPRI, r3
 80021ac:	f3bf 8f6f 	isb	sy
 80021b0:	f3bf 8f4f 	dsb	sy
 80021b4:	60bb      	str	r3, [r7, #8]
}
 80021b6:	bf00      	nop
 80021b8:	bf00      	nop
 80021ba:	e7fd      	b.n	80021b8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021c0:	1e5a      	subs	r2, r3, #1
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d044      	beq.n	800225c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d140      	bne.n	800225c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	3304      	adds	r3, #4
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe fe1a 	bl	8000e18 <uxListRemove>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d115      	bne.n	8002216 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021ee:	491f      	ldr	r1, [pc, #124]	@ (800226c <xTaskPriorityDisinherit+0x108>)
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10a      	bne.n	8002216 <xTaskPriorityDisinherit+0xb2>
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002204:	2201      	movs	r2, #1
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43da      	mvns	r2, r3
 800220c:	4b18      	ldr	r3, [pc, #96]	@ (8002270 <xTaskPriorityDisinherit+0x10c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4013      	ands	r3, r2
 8002212:	4a17      	ldr	r2, [pc, #92]	@ (8002270 <xTaskPriorityDisinherit+0x10c>)
 8002214:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002222:	f1c3 0207 	rsb	r2, r3, #7
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222e:	2201      	movs	r2, #1
 8002230:	409a      	lsls	r2, r3
 8002232:	4b0f      	ldr	r3, [pc, #60]	@ (8002270 <xTaskPriorityDisinherit+0x10c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4313      	orrs	r3, r2
 8002238:	4a0d      	ldr	r2, [pc, #52]	@ (8002270 <xTaskPriorityDisinherit+0x10c>)
 800223a:	6013      	str	r3, [r2, #0]
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4a08      	ldr	r2, [pc, #32]	@ (800226c <xTaskPriorityDisinherit+0x108>)
 800224a:	441a      	add	r2, r3
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	3304      	adds	r3, #4
 8002250:	4619      	mov	r1, r3
 8002252:	4610      	mov	r0, r2
 8002254:	f7fe fd83 	bl	8000d5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002258:	2301      	movs	r3, #1
 800225a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800225c:	697b      	ldr	r3, [r7, #20]
	}
 800225e:	4618      	mov	r0, r3
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200001fc 	.word	0x200001fc
 800226c:	20000200 	.word	0x20000200
 8002270:	20000304 	.word	0x20000304

08002274 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8002282:	2301      	movs	r3, #1
 8002284:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d079      	beq.n	8002380 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10b      	bne.n	80022ac <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8002294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002298:	f383 8811 	msr	BASEPRI, r3
 800229c:	f3bf 8f6f 	isb	sy
 80022a0:	f3bf 8f4f 	dsb	sy
 80022a4:	60fb      	str	r3, [r7, #12]
}
 80022a6:	bf00      	nop
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d902      	bls.n	80022bc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	61fb      	str	r3, [r7, #28]
 80022ba:	e002      	b.n	80022c2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d059      	beq.n	8002380 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d154      	bne.n	8002380 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80022d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002388 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d10b      	bne.n	80022f8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80022e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022e4:	f383 8811 	msr	BASEPRI, r3
 80022e8:	f3bf 8f6f 	isb	sy
 80022ec:	f3bf 8f4f 	dsb	sy
 80022f0:	60bb      	str	r3, [r7, #8]
}
 80022f2:	bf00      	nop
 80022f4:	bf00      	nop
 80022f6:	e7fd      	b.n	80022f4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	69fa      	ldr	r2, [r7, #28]
 8002302:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	2b00      	cmp	r3, #0
 800230a:	db04      	blt.n	8002316 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f1c3 0207 	rsb	r2, r3, #7
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	6959      	ldr	r1, [r3, #20]
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4a19      	ldr	r2, [pc, #100]	@ (800238c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8002326:	4413      	add	r3, r2
 8002328:	4299      	cmp	r1, r3
 800232a:	d129      	bne.n	8002380 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	3304      	adds	r3, #4
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe fd71 	bl	8000e18 <uxListRemove>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10a      	bne.n	8002352 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002340:	2201      	movs	r2, #1
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43da      	mvns	r2, r3
 8002348:	4b11      	ldr	r3, [pc, #68]	@ (8002390 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4013      	ands	r3, r2
 800234e:	4a10      	ldr	r2, [pc, #64]	@ (8002390 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8002350:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002356:	2201      	movs	r2, #1
 8002358:	409a      	lsls	r2, r3
 800235a:	4b0d      	ldr	r3, [pc, #52]	@ (8002390 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4313      	orrs	r3, r2
 8002360:	4a0b      	ldr	r2, [pc, #44]	@ (8002390 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4a06      	ldr	r2, [pc, #24]	@ (800238c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8002372:	441a      	add	r2, r3
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	3304      	adds	r3, #4
 8002378:	4619      	mov	r1, r3
 800237a:	4610      	mov	r0, r2
 800237c:	f7fe fcef 	bl	8000d5e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002380:	bf00      	nop
 8002382:	3720      	adds	r7, #32
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	200001fc 	.word	0x200001fc
 800238c:	20000200 	.word	0x20000200
 8002390:	20000304 	.word	0x20000304

08002394 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002398:	4b07      	ldr	r3, [pc, #28]	@ (80023b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d004      	beq.n	80023aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80023a0:	4b05      	ldr	r3, [pc, #20]	@ (80023b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023a6:	3201      	adds	r2, #1
 80023a8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80023aa:	4b03      	ldr	r3, [pc, #12]	@ (80023b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80023ac:	681b      	ldr	r3, [r3, #0]
	}
 80023ae:	4618      	mov	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	200001fc 	.word	0x200001fc

080023bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80023c6:	4b29      	ldr	r3, [pc, #164]	@ (800246c <prvAddCurrentTaskToDelayedList+0xb0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80023cc:	4b28      	ldr	r3, [pc, #160]	@ (8002470 <prvAddCurrentTaskToDelayedList+0xb4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	3304      	adds	r3, #4
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe fd20 	bl	8000e18 <uxListRemove>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10b      	bne.n	80023f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80023de:	4b24      	ldr	r3, [pc, #144]	@ (8002470 <prvAddCurrentTaskToDelayedList+0xb4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e4:	2201      	movs	r2, #1
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43da      	mvns	r2, r3
 80023ec:	4b21      	ldr	r3, [pc, #132]	@ (8002474 <prvAddCurrentTaskToDelayedList+0xb8>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4013      	ands	r3, r2
 80023f2:	4a20      	ldr	r2, [pc, #128]	@ (8002474 <prvAddCurrentTaskToDelayedList+0xb8>)
 80023f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023fc:	d10a      	bne.n	8002414 <prvAddCurrentTaskToDelayedList+0x58>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d007      	beq.n	8002414 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002404:	4b1a      	ldr	r3, [pc, #104]	@ (8002470 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	3304      	adds	r3, #4
 800240a:	4619      	mov	r1, r3
 800240c:	481a      	ldr	r0, [pc, #104]	@ (8002478 <prvAddCurrentTaskToDelayedList+0xbc>)
 800240e:	f7fe fca6 	bl	8000d5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002412:	e026      	b.n	8002462 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800241c:	4b14      	ldr	r3, [pc, #80]	@ (8002470 <prvAddCurrentTaskToDelayedList+0xb4>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	429a      	cmp	r2, r3
 800242a:	d209      	bcs.n	8002440 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800242c:	4b13      	ldr	r3, [pc, #76]	@ (800247c <prvAddCurrentTaskToDelayedList+0xc0>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4b0f      	ldr	r3, [pc, #60]	@ (8002470 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	3304      	adds	r3, #4
 8002436:	4619      	mov	r1, r3
 8002438:	4610      	mov	r0, r2
 800243a:	f7fe fcb4 	bl	8000da6 <vListInsert>
}
 800243e:	e010      	b.n	8002462 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002440:	4b0f      	ldr	r3, [pc, #60]	@ (8002480 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b0a      	ldr	r3, [pc, #40]	@ (8002470 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	3304      	adds	r3, #4
 800244a:	4619      	mov	r1, r3
 800244c:	4610      	mov	r0, r2
 800244e:	f7fe fcaa 	bl	8000da6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002452:	4b0c      	ldr	r3, [pc, #48]	@ (8002484 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	429a      	cmp	r2, r3
 800245a:	d202      	bcs.n	8002462 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800245c:	4a09      	ldr	r2, [pc, #36]	@ (8002484 <prvAddCurrentTaskToDelayedList+0xc8>)
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	6013      	str	r3, [r2, #0]
}
 8002462:	bf00      	nop
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000300 	.word	0x20000300
 8002470:	200001fc 	.word	0x200001fc
 8002474:	20000304 	.word	0x20000304
 8002478:	200002e8 	.word	0x200002e8
 800247c:	200002b8 	.word	0x200002b8
 8002480:	200002b4 	.word	0x200002b4
 8002484:	2000031c 	.word	0x2000031c

08002488 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	3b04      	subs	r3, #4
 8002498:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	3b04      	subs	r3, #4
 80024a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f023 0201 	bic.w	r2, r3, #1
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	3b04      	subs	r3, #4
 80024b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80024b8:	4a0c      	ldr	r2, [pc, #48]	@ (80024ec <pxPortInitialiseStack+0x64>)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	3b14      	subs	r3, #20
 80024c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	3b04      	subs	r3, #4
 80024ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f06f 0202 	mvn.w	r2, #2
 80024d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	3b20      	subs	r3, #32
 80024dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80024de:	68fb      	ldr	r3, [r7, #12]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	080024f1 	.word	0x080024f1

080024f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80024fa:	4b13      	ldr	r3, [pc, #76]	@ (8002548 <prvTaskExitError+0x58>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002502:	d00b      	beq.n	800251c <prvTaskExitError+0x2c>
	__asm volatile
 8002504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002508:	f383 8811 	msr	BASEPRI, r3
 800250c:	f3bf 8f6f 	isb	sy
 8002510:	f3bf 8f4f 	dsb	sy
 8002514:	60fb      	str	r3, [r7, #12]
}
 8002516:	bf00      	nop
 8002518:	bf00      	nop
 800251a:	e7fd      	b.n	8002518 <prvTaskExitError+0x28>
	__asm volatile
 800251c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002520:	f383 8811 	msr	BASEPRI, r3
 8002524:	f3bf 8f6f 	isb	sy
 8002528:	f3bf 8f4f 	dsb	sy
 800252c:	60bb      	str	r3, [r7, #8]
}
 800252e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002530:	bf00      	nop
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0fc      	beq.n	8002532 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002538:	bf00      	nop
 800253a:	bf00      	nop
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	20000000 	.word	0x20000000
 800254c:	00000000 	.word	0x00000000

08002550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002550:	4b07      	ldr	r3, [pc, #28]	@ (8002570 <pxCurrentTCBConst2>)
 8002552:	6819      	ldr	r1, [r3, #0]
 8002554:	6808      	ldr	r0, [r1, #0]
 8002556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800255a:	f380 8809 	msr	PSP, r0
 800255e:	f3bf 8f6f 	isb	sy
 8002562:	f04f 0000 	mov.w	r0, #0
 8002566:	f380 8811 	msr	BASEPRI, r0
 800256a:	4770      	bx	lr
 800256c:	f3af 8000 	nop.w

08002570 <pxCurrentTCBConst2>:
 8002570:	200001fc 	.word	0x200001fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop

08002578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002578:	4808      	ldr	r0, [pc, #32]	@ (800259c <prvPortStartFirstTask+0x24>)
 800257a:	6800      	ldr	r0, [r0, #0]
 800257c:	6800      	ldr	r0, [r0, #0]
 800257e:	f380 8808 	msr	MSP, r0
 8002582:	f04f 0000 	mov.w	r0, #0
 8002586:	f380 8814 	msr	CONTROL, r0
 800258a:	b662      	cpsie	i
 800258c:	b661      	cpsie	f
 800258e:	f3bf 8f4f 	dsb	sy
 8002592:	f3bf 8f6f 	isb	sy
 8002596:	df00      	svc	0
 8002598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800259a:	bf00      	nop
 800259c:	e000ed08 	.word	0xe000ed08

080025a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80025a6:	4b47      	ldr	r3, [pc, #284]	@ (80026c4 <xPortStartScheduler+0x124>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a47      	ldr	r2, [pc, #284]	@ (80026c8 <xPortStartScheduler+0x128>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d10b      	bne.n	80025c8 <xPortStartScheduler+0x28>
	__asm volatile
 80025b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025b4:	f383 8811 	msr	BASEPRI, r3
 80025b8:	f3bf 8f6f 	isb	sy
 80025bc:	f3bf 8f4f 	dsb	sy
 80025c0:	613b      	str	r3, [r7, #16]
}
 80025c2:	bf00      	nop
 80025c4:	bf00      	nop
 80025c6:	e7fd      	b.n	80025c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80025c8:	4b3e      	ldr	r3, [pc, #248]	@ (80026c4 <xPortStartScheduler+0x124>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a3f      	ldr	r2, [pc, #252]	@ (80026cc <xPortStartScheduler+0x12c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d10b      	bne.n	80025ea <xPortStartScheduler+0x4a>
	__asm volatile
 80025d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025d6:	f383 8811 	msr	BASEPRI, r3
 80025da:	f3bf 8f6f 	isb	sy
 80025de:	f3bf 8f4f 	dsb	sy
 80025e2:	60fb      	str	r3, [r7, #12]
}
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
 80025e8:	e7fd      	b.n	80025e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80025ea:	4b39      	ldr	r3, [pc, #228]	@ (80026d0 <xPortStartScheduler+0x130>)
 80025ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	22ff      	movs	r2, #255	@ 0xff
 80025fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800260c:	b2da      	uxtb	r2, r3
 800260e:	4b31      	ldr	r3, [pc, #196]	@ (80026d4 <xPortStartScheduler+0x134>)
 8002610:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002612:	4b31      	ldr	r3, [pc, #196]	@ (80026d8 <xPortStartScheduler+0x138>)
 8002614:	2207      	movs	r2, #7
 8002616:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002618:	e009      	b.n	800262e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800261a:	4b2f      	ldr	r3, [pc, #188]	@ (80026d8 <xPortStartScheduler+0x138>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	3b01      	subs	r3, #1
 8002620:	4a2d      	ldr	r2, [pc, #180]	@ (80026d8 <xPortStartScheduler+0x138>)
 8002622:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	b2db      	uxtb	r3, r3
 800262c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800262e:	78fb      	ldrb	r3, [r7, #3]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002636:	2b80      	cmp	r3, #128	@ 0x80
 8002638:	d0ef      	beq.n	800261a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800263a:	4b27      	ldr	r3, [pc, #156]	@ (80026d8 <xPortStartScheduler+0x138>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f1c3 0307 	rsb	r3, r3, #7
 8002642:	2b04      	cmp	r3, #4
 8002644:	d00b      	beq.n	800265e <xPortStartScheduler+0xbe>
	__asm volatile
 8002646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800264a:	f383 8811 	msr	BASEPRI, r3
 800264e:	f3bf 8f6f 	isb	sy
 8002652:	f3bf 8f4f 	dsb	sy
 8002656:	60bb      	str	r3, [r7, #8]
}
 8002658:	bf00      	nop
 800265a:	bf00      	nop
 800265c:	e7fd      	b.n	800265a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800265e:	4b1e      	ldr	r3, [pc, #120]	@ (80026d8 <xPortStartScheduler+0x138>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	021b      	lsls	r3, r3, #8
 8002664:	4a1c      	ldr	r2, [pc, #112]	@ (80026d8 <xPortStartScheduler+0x138>)
 8002666:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002668:	4b1b      	ldr	r3, [pc, #108]	@ (80026d8 <xPortStartScheduler+0x138>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002670:	4a19      	ldr	r2, [pc, #100]	@ (80026d8 <xPortStartScheduler+0x138>)
 8002672:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	b2da      	uxtb	r2, r3
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800267c:	4b17      	ldr	r3, [pc, #92]	@ (80026dc <xPortStartScheduler+0x13c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a16      	ldr	r2, [pc, #88]	@ (80026dc <xPortStartScheduler+0x13c>)
 8002682:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002686:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002688:	4b14      	ldr	r3, [pc, #80]	@ (80026dc <xPortStartScheduler+0x13c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a13      	ldr	r2, [pc, #76]	@ (80026dc <xPortStartScheduler+0x13c>)
 800268e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002692:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002694:	f000 f8da 	bl	800284c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002698:	4b11      	ldr	r3, [pc, #68]	@ (80026e0 <xPortStartScheduler+0x140>)
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800269e:	f000 f8f9 	bl	8002894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80026a2:	4b10      	ldr	r3, [pc, #64]	@ (80026e4 <xPortStartScheduler+0x144>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a0f      	ldr	r2, [pc, #60]	@ (80026e4 <xPortStartScheduler+0x144>)
 80026a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80026ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80026ae:	f7ff ff63 	bl	8002578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80026b2:	f7ff faa1 	bl	8001bf8 <vTaskSwitchContext>
	prvTaskExitError();
 80026b6:	f7ff ff1b 	bl	80024f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	e000ed00 	.word	0xe000ed00
 80026c8:	410fc271 	.word	0x410fc271
 80026cc:	410fc270 	.word	0x410fc270
 80026d0:	e000e400 	.word	0xe000e400
 80026d4:	20000328 	.word	0x20000328
 80026d8:	2000032c 	.word	0x2000032c
 80026dc:	e000ed20 	.word	0xe000ed20
 80026e0:	20000000 	.word	0x20000000
 80026e4:	e000ef34 	.word	0xe000ef34

080026e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
	__asm volatile
 80026ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026f2:	f383 8811 	msr	BASEPRI, r3
 80026f6:	f3bf 8f6f 	isb	sy
 80026fa:	f3bf 8f4f 	dsb	sy
 80026fe:	607b      	str	r3, [r7, #4]
}
 8002700:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002702:	4b10      	ldr	r3, [pc, #64]	@ (8002744 <vPortEnterCritical+0x5c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	3301      	adds	r3, #1
 8002708:	4a0e      	ldr	r2, [pc, #56]	@ (8002744 <vPortEnterCritical+0x5c>)
 800270a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800270c:	4b0d      	ldr	r3, [pc, #52]	@ (8002744 <vPortEnterCritical+0x5c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d110      	bne.n	8002736 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002714:	4b0c      	ldr	r3, [pc, #48]	@ (8002748 <vPortEnterCritical+0x60>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00b      	beq.n	8002736 <vPortEnterCritical+0x4e>
	__asm volatile
 800271e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002722:	f383 8811 	msr	BASEPRI, r3
 8002726:	f3bf 8f6f 	isb	sy
 800272a:	f3bf 8f4f 	dsb	sy
 800272e:	603b      	str	r3, [r7, #0]
}
 8002730:	bf00      	nop
 8002732:	bf00      	nop
 8002734:	e7fd      	b.n	8002732 <vPortEnterCritical+0x4a>
	}
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	20000000 	.word	0x20000000
 8002748:	e000ed04 	.word	0xe000ed04

0800274c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002752:	4b12      	ldr	r3, [pc, #72]	@ (800279c <vPortExitCritical+0x50>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10b      	bne.n	8002772 <vPortExitCritical+0x26>
	__asm volatile
 800275a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800275e:	f383 8811 	msr	BASEPRI, r3
 8002762:	f3bf 8f6f 	isb	sy
 8002766:	f3bf 8f4f 	dsb	sy
 800276a:	607b      	str	r3, [r7, #4]
}
 800276c:	bf00      	nop
 800276e:	bf00      	nop
 8002770:	e7fd      	b.n	800276e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002772:	4b0a      	ldr	r3, [pc, #40]	@ (800279c <vPortExitCritical+0x50>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3b01      	subs	r3, #1
 8002778:	4a08      	ldr	r2, [pc, #32]	@ (800279c <vPortExitCritical+0x50>)
 800277a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800277c:	4b07      	ldr	r3, [pc, #28]	@ (800279c <vPortExitCritical+0x50>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d105      	bne.n	8002790 <vPortExitCritical+0x44>
 8002784:	2300      	movs	r3, #0
 8002786:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800278e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	20000000 	.word	0x20000000

080027a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80027a0:	f3ef 8009 	mrs	r0, PSP
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	4b15      	ldr	r3, [pc, #84]	@ (8002800 <pxCurrentTCBConst>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	f01e 0f10 	tst.w	lr, #16
 80027b0:	bf08      	it	eq
 80027b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80027b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027ba:	6010      	str	r0, [r2, #0]
 80027bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80027c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80027c4:	f380 8811 	msr	BASEPRI, r0
 80027c8:	f3bf 8f4f 	dsb	sy
 80027cc:	f3bf 8f6f 	isb	sy
 80027d0:	f7ff fa12 	bl	8001bf8 <vTaskSwitchContext>
 80027d4:	f04f 0000 	mov.w	r0, #0
 80027d8:	f380 8811 	msr	BASEPRI, r0
 80027dc:	bc09      	pop	{r0, r3}
 80027de:	6819      	ldr	r1, [r3, #0]
 80027e0:	6808      	ldr	r0, [r1, #0]
 80027e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027e6:	f01e 0f10 	tst.w	lr, #16
 80027ea:	bf08      	it	eq
 80027ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80027f0:	f380 8809 	msr	PSP, r0
 80027f4:	f3bf 8f6f 	isb	sy
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	f3af 8000 	nop.w

08002800 <pxCurrentTCBConst>:
 8002800:	200001fc 	.word	0x200001fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop

08002808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
	__asm volatile
 800280e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002812:	f383 8811 	msr	BASEPRI, r3
 8002816:	f3bf 8f6f 	isb	sy
 800281a:	f3bf 8f4f 	dsb	sy
 800281e:	607b      	str	r3, [r7, #4]
}
 8002820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002822:	f7ff f92f 	bl	8001a84 <xTaskIncrementTick>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800282c:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <SysTick_Handler+0x40>)
 800282e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	2300      	movs	r3, #0
 8002836:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	f383 8811 	msr	BASEPRI, r3
}
 800283e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002840:	bf00      	nop
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	e000ed04 	.word	0xe000ed04

0800284c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002850:	4b0b      	ldr	r3, [pc, #44]	@ (8002880 <vPortSetupTimerInterrupt+0x34>)
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002856:	4b0b      	ldr	r3, [pc, #44]	@ (8002884 <vPortSetupTimerInterrupt+0x38>)
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800285c:	4b0a      	ldr	r3, [pc, #40]	@ (8002888 <vPortSetupTimerInterrupt+0x3c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0a      	ldr	r2, [pc, #40]	@ (800288c <vPortSetupTimerInterrupt+0x40>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	099b      	lsrs	r3, r3, #6
 8002868:	4a09      	ldr	r2, [pc, #36]	@ (8002890 <vPortSetupTimerInterrupt+0x44>)
 800286a:	3b01      	subs	r3, #1
 800286c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800286e:	4b04      	ldr	r3, [pc, #16]	@ (8002880 <vPortSetupTimerInterrupt+0x34>)
 8002870:	2207      	movs	r2, #7
 8002872:	601a      	str	r2, [r3, #0]
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	e000e010 	.word	0xe000e010
 8002884:	e000e018 	.word	0xe000e018
 8002888:	20000014 	.word	0x20000014
 800288c:	10624dd3 	.word	0x10624dd3
 8002890:	e000e014 	.word	0xe000e014

08002894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002894:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80028a4 <vPortEnableVFP+0x10>
 8002898:	6801      	ldr	r1, [r0, #0]
 800289a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800289e:	6001      	str	r1, [r0, #0]
 80028a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80028a2:	bf00      	nop
 80028a4:	e000ed88 	.word	0xe000ed88

080028a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08a      	sub	sp, #40	@ 0x28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80028b4:	f7ff f83a 	bl	800192c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80028b8:	4b5c      	ldr	r3, [pc, #368]	@ (8002a2c <pvPortMalloc+0x184>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80028c0:	f000 f924 	bl	8002b0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80028c4:	4b5a      	ldr	r3, [pc, #360]	@ (8002a30 <pvPortMalloc+0x188>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f040 8095 	bne.w	80029fc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d01e      	beq.n	8002916 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80028d8:	2208      	movs	r2, #8
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4413      	add	r3, r2
 80028de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d015      	beq.n	8002916 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f023 0307 	bic.w	r3, r3, #7
 80028f0:	3308      	adds	r3, #8
 80028f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00b      	beq.n	8002916 <pvPortMalloc+0x6e>
	__asm volatile
 80028fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002902:	f383 8811 	msr	BASEPRI, r3
 8002906:	f3bf 8f6f 	isb	sy
 800290a:	f3bf 8f4f 	dsb	sy
 800290e:	617b      	str	r3, [r7, #20]
}
 8002910:	bf00      	nop
 8002912:	bf00      	nop
 8002914:	e7fd      	b.n	8002912 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d06f      	beq.n	80029fc <pvPortMalloc+0x154>
 800291c:	4b45      	ldr	r3, [pc, #276]	@ (8002a34 <pvPortMalloc+0x18c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	429a      	cmp	r2, r3
 8002924:	d86a      	bhi.n	80029fc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002926:	4b44      	ldr	r3, [pc, #272]	@ (8002a38 <pvPortMalloc+0x190>)
 8002928:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800292a:	4b43      	ldr	r3, [pc, #268]	@ (8002a38 <pvPortMalloc+0x190>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002930:	e004      	b.n	800293c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8002932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002934:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800293c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	429a      	cmp	r2, r3
 8002944:	d903      	bls.n	800294e <pvPortMalloc+0xa6>
 8002946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f1      	bne.n	8002932 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800294e:	4b37      	ldr	r3, [pc, #220]	@ (8002a2c <pvPortMalloc+0x184>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002954:	429a      	cmp	r2, r3
 8002956:	d051      	beq.n	80029fc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2208      	movs	r2, #8
 800295e:	4413      	add	r3, r2
 8002960:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	1ad2      	subs	r2, r2, r3
 8002972:	2308      	movs	r3, #8
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	429a      	cmp	r2, r3
 8002978:	d920      	bls.n	80029bc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800297a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4413      	add	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00b      	beq.n	80029a4 <pvPortMalloc+0xfc>
	__asm volatile
 800298c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002990:	f383 8811 	msr	BASEPRI, r3
 8002994:	f3bf 8f6f 	isb	sy
 8002998:	f3bf 8f4f 	dsb	sy
 800299c:	613b      	str	r3, [r7, #16]
}
 800299e:	bf00      	nop
 80029a0:	bf00      	nop
 80029a2:	e7fd      	b.n	80029a0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80029a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	1ad2      	subs	r2, r2, r3
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80029b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80029b6:	69b8      	ldr	r0, [r7, #24]
 80029b8:	f000 f90a 	bl	8002bd0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80029bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002a34 <pvPortMalloc+0x18c>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	4a1b      	ldr	r2, [pc, #108]	@ (8002a34 <pvPortMalloc+0x18c>)
 80029c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80029ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002a34 <pvPortMalloc+0x18c>)
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	4b1b      	ldr	r3, [pc, #108]	@ (8002a3c <pvPortMalloc+0x194>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d203      	bcs.n	80029de <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80029d6:	4b17      	ldr	r3, [pc, #92]	@ (8002a34 <pvPortMalloc+0x18c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a18      	ldr	r2, [pc, #96]	@ (8002a3c <pvPortMalloc+0x194>)
 80029dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80029de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	4b13      	ldr	r3, [pc, #76]	@ (8002a30 <pvPortMalloc+0x188>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	431a      	orrs	r2, r3
 80029e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80029f2:	4b13      	ldr	r3, [pc, #76]	@ (8002a40 <pvPortMalloc+0x198>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	3301      	adds	r3, #1
 80029f8:	4a11      	ldr	r2, [pc, #68]	@ (8002a40 <pvPortMalloc+0x198>)
 80029fa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80029fc:	f7fe ffa4 	bl	8001948 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00b      	beq.n	8002a22 <pvPortMalloc+0x17a>
	__asm volatile
 8002a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a0e:	f383 8811 	msr	BASEPRI, r3
 8002a12:	f3bf 8f6f 	isb	sy
 8002a16:	f3bf 8f4f 	dsb	sy
 8002a1a:	60fb      	str	r3, [r7, #12]
}
 8002a1c:	bf00      	nop
 8002a1e:	bf00      	nop
 8002a20:	e7fd      	b.n	8002a1e <pvPortMalloc+0x176>
	return pvReturn;
 8002a22:	69fb      	ldr	r3, [r7, #28]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3728      	adds	r7, #40	@ 0x28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20003f38 	.word	0x20003f38
 8002a30:	20003f4c 	.word	0x20003f4c
 8002a34:	20003f3c 	.word	0x20003f3c
 8002a38:	20003f30 	.word	0x20003f30
 8002a3c:	20003f40 	.word	0x20003f40
 8002a40:	20003f44 	.word	0x20003f44

08002a44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d04f      	beq.n	8002af6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002a56:	2308      	movs	r3, #8
 8002a58:	425b      	negs	r3, r3
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	4b25      	ldr	r3, [pc, #148]	@ (8002b00 <vPortFree+0xbc>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10b      	bne.n	8002a8a <vPortFree+0x46>
	__asm volatile
 8002a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a76:	f383 8811 	msr	BASEPRI, r3
 8002a7a:	f3bf 8f6f 	isb	sy
 8002a7e:	f3bf 8f4f 	dsb	sy
 8002a82:	60fb      	str	r3, [r7, #12]
}
 8002a84:	bf00      	nop
 8002a86:	bf00      	nop
 8002a88:	e7fd      	b.n	8002a86 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00b      	beq.n	8002aaa <vPortFree+0x66>
	__asm volatile
 8002a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a96:	f383 8811 	msr	BASEPRI, r3
 8002a9a:	f3bf 8f6f 	isb	sy
 8002a9e:	f3bf 8f4f 	dsb	sy
 8002aa2:	60bb      	str	r3, [r7, #8]
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop
 8002aa8:	e7fd      	b.n	8002aa6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	4b14      	ldr	r3, [pc, #80]	@ (8002b00 <vPortFree+0xbc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d01e      	beq.n	8002af6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d11a      	bne.n	8002af6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b00 <vPortFree+0xbc>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	401a      	ands	r2, r3
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002ad0:	f7fe ff2c 	bl	800192c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b04 <vPortFree+0xc0>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4413      	add	r3, r2
 8002ade:	4a09      	ldr	r2, [pc, #36]	@ (8002b04 <vPortFree+0xc0>)
 8002ae0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002ae2:	6938      	ldr	r0, [r7, #16]
 8002ae4:	f000 f874 	bl	8002bd0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002ae8:	4b07      	ldr	r3, [pc, #28]	@ (8002b08 <vPortFree+0xc4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	3301      	adds	r3, #1
 8002aee:	4a06      	ldr	r2, [pc, #24]	@ (8002b08 <vPortFree+0xc4>)
 8002af0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002af2:	f7fe ff29 	bl	8001948 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002af6:	bf00      	nop
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20003f4c 	.word	0x20003f4c
 8002b04:	20003f3c 	.word	0x20003f3c
 8002b08:	20003f48 	.word	0x20003f48

08002b0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002b12:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8002b16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002b18:	4b27      	ldr	r3, [pc, #156]	@ (8002bb8 <prvHeapInit+0xac>)
 8002b1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00c      	beq.n	8002b40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	3307      	adds	r3, #7
 8002b2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f023 0307 	bic.w	r3, r3, #7
 8002b32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8002bb8 <prvHeapInit+0xac>)
 8002b3c:	4413      	add	r3, r2
 8002b3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002b44:	4a1d      	ldr	r2, [pc, #116]	@ (8002bbc <prvHeapInit+0xb0>)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8002bbc <prvHeapInit+0xb0>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	4413      	add	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002b58:	2208      	movs	r2, #8
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f023 0307 	bic.w	r3, r3, #7
 8002b66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4a15      	ldr	r2, [pc, #84]	@ (8002bc0 <prvHeapInit+0xb4>)
 8002b6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002b6e:	4b14      	ldr	r3, [pc, #80]	@ (8002bc0 <prvHeapInit+0xb4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2200      	movs	r2, #0
 8002b74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002b76:	4b12      	ldr	r3, [pc, #72]	@ (8002bc0 <prvHeapInit+0xb4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	1ad2      	subs	r2, r2, r3
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc0 <prvHeapInit+0xb4>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc4 <prvHeapInit+0xb8>)
 8002b9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	4a09      	ldr	r2, [pc, #36]	@ (8002bc8 <prvHeapInit+0xbc>)
 8002ba2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002ba4:	4b09      	ldr	r3, [pc, #36]	@ (8002bcc <prvHeapInit+0xc0>)
 8002ba6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002baa:	601a      	str	r2, [r3, #0]
}
 8002bac:	bf00      	nop
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	20000330 	.word	0x20000330
 8002bbc:	20003f30 	.word	0x20003f30
 8002bc0:	20003f38 	.word	0x20003f38
 8002bc4:	20003f40 	.word	0x20003f40
 8002bc8:	20003f3c 	.word	0x20003f3c
 8002bcc:	20003f4c 	.word	0x20003f4c

08002bd0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002bd8:	4b28      	ldr	r3, [pc, #160]	@ (8002c7c <prvInsertBlockIntoFreeList+0xac>)
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	e002      	b.n	8002be4 <prvInsertBlockIntoFreeList+0x14>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d8f7      	bhi.n	8002bde <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d108      	bne.n	8002c12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	441a      	add	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	441a      	add	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d118      	bne.n	8002c58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	4b15      	ldr	r3, [pc, #84]	@ (8002c80 <prvInsertBlockIntoFreeList+0xb0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d00d      	beq.n	8002c4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	441a      	add	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	e008      	b.n	8002c60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c80 <prvInsertBlockIntoFreeList+0xb0>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	e003      	b.n	8002c60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d002      	beq.n	8002c6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c6e:	bf00      	nop
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	20003f30 	.word	0x20003f30
 8002c80:	20003f38 	.word	0x20003f38

08002c84 <main>:

// Post-filtered corrupt signal
q15_t filtered_sig_sample;

int main(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af02      	add	r7, sp, #8
	// Enable FPU
	fpu_enable();
 8002c8a:	f000 f8d7 	bl	8002e3c <fpu_enable>

	// Initialize the UART
	uart2_tx_init();
 8002c8e:	f000 f9cb 	bl	8003028 <uart2_tx_init>

	// Create several tasks
	xTaskCreate(data_acq_task, "Get signals", 100, NULL, Task1_priority, NULL);
 8002c92:	4b1e      	ldr	r3, [pc, #120]	@ (8002d0c <main+0x88>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	2300      	movs	r3, #0
 8002c9a:	9301      	str	r3, [sp, #4]
 8002c9c:	9200      	str	r2, [sp, #0]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	2264      	movs	r2, #100	@ 0x64
 8002ca2:	491b      	ldr	r1, [pc, #108]	@ (8002d10 <main+0x8c>)
 8002ca4:	481b      	ldr	r0, [pc, #108]	@ (8002d14 <main+0x90>)
 8002ca6:	f7fe fcb9 	bl	800161c <xTaskCreate>
	xTaskCreate(data_proc_task, "Noise and signal", 100, NULL, Task2_priority, NULL);
 8002caa:	4b1b      	ldr	r3, [pc, #108]	@ (8002d18 <main+0x94>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	9301      	str	r3, [sp, #4]
 8002cb4:	9200      	str	r2, [sp, #0]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	2264      	movs	r2, #100	@ 0x64
 8002cba:	4918      	ldr	r1, [pc, #96]	@ (8002d1c <main+0x98>)
 8002cbc:	4818      	ldr	r0, [pc, #96]	@ (8002d20 <main+0x9c>)
 8002cbe:	f7fe fcad 	bl	800161c <xTaskCreate>
	xTaskCreate(data_disp_task, "Combine signals", 100, NULL, Task3_priority, NULL);
 8002cc2:	4b18      	ldr	r3, [pc, #96]	@ (8002d24 <main+0xa0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	2300      	movs	r3, #0
 8002cca:	9301      	str	r3, [sp, #4]
 8002ccc:	9200      	str	r2, [sp, #0]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	2264      	movs	r2, #100	@ 0x64
 8002cd2:	4915      	ldr	r1, [pc, #84]	@ (8002d28 <main+0xa4>)
 8002cd4:	4815      	ldr	r0, [pc, #84]	@ (8002d2c <main+0xa8>)
 8002cd6:	f7fe fca1 	bl	800161c <xTaskCreate>
	xTaskCreate(data_filt_task, "Filter signals", 100, NULL, Task4_priority, NULL);
 8002cda:	4b15      	ldr	r3, [pc, #84]	@ (8002d30 <main+0xac>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	9301      	str	r3, [sp, #4]
 8002ce4:	9200      	str	r2, [sp, #0]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	2264      	movs	r2, #100	@ 0x64
 8002cea:	4912      	ldr	r1, [pc, #72]	@ (8002d34 <main+0xb0>)
 8002cec:	4812      	ldr	r0, [pc, #72]	@ (8002d38 <main+0xb4>)
 8002cee:	f7fe fc95 	bl	800161c <xTaskCreate>

	//Create the semaphore
	xBinarySemaphore = xSemaphoreCreateBinary();
 8002cf2:	2203      	movs	r2, #3
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	2001      	movs	r0, #1
 8002cf8:	f7fe f922 	bl	8000f40 <xQueueGenericCreate>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4a0f      	ldr	r2, [pc, #60]	@ (8002d3c <main+0xb8>)
 8002d00:	6013      	str	r3, [r2, #0]

	// Must start the scheduler or nothing happens!
	vTaskStartScheduler();
 8002d02:	f7fe fdcb 	bl	800189c <vTaskStartScheduler>
	sine_gen_init_q15(&signal_desc, SIGNAL_FREQ, SAMPLING_FREQ);
	sine_gen_init_q15(&noise_desc, NOISE_FREQ, SAMPLING_FREQ);
*/


	while(1)
 8002d06:	bf00      	nop
 8002d08:	e7fd      	b.n	8002d06 <main+0x82>
 8002d0a:	bf00      	nop
 8002d0c:	20000004 	.word	0x20000004
 8002d10:	08007888 	.word	0x08007888
 8002d14:	08002d41 	.word	0x08002d41
 8002d18:	20000008 	.word	0x20000008
 8002d1c:	08007894 	.word	0x08007894
 8002d20:	08002d89 	.word	0x08002d89
 8002d24:	2000000c 	.word	0x2000000c
 8002d28:	080078a8 	.word	0x080078a8
 8002d2c:	08002dc5 	.word	0x08002dc5
 8002d30:	20000010 	.word	0x20000010
 8002d34:	080078b8 	.word	0x080078b8
 8002d38:	08002e01 	.word	0x08002e01
 8002d3c:	20003f60 	.word	0x20003f60

08002d40 <data_acq_task>:

} // End of main

// Definition of the first task - it gives the semaphore initially
void data_acq_task(void *pvParameters)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
	xSemaphoreGive(xBinarySemaphore);
 8002d48:	4b0d      	ldr	r3, [pc, #52]	@ (8002d80 <data_acq_task+0x40>)
 8002d4a:	6818      	ldr	r0, [r3, #0]
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2100      	movs	r1, #0
 8002d52:	f7fe f94f 	bl	8000ff4 <xQueueGenericSend>

	while(1)
	{
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 8002d56:	4b0a      	ldr	r3, [pc, #40]	@ (8002d80 <data_acq_task+0x40>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe fa4a 	bl	80011f8 <xQueueSemaphoreTake>

		Task1_profiler++;
 8002d64:	4b07      	ldr	r3, [pc, #28]	@ (8002d84 <data_acq_task+0x44>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	4a06      	ldr	r2, [pc, #24]	@ (8002d84 <data_acq_task+0x44>)
 8002d6c:	6013      	str	r3, [r2, #0]

		xSemaphoreGive(xBinarySemaphore);
 8002d6e:	4b04      	ldr	r3, [pc, #16]	@ (8002d80 <data_acq_task+0x40>)
 8002d70:	6818      	ldr	r0, [r3, #0]
 8002d72:	2300      	movs	r3, #0
 8002d74:	2200      	movs	r2, #0
 8002d76:	2100      	movs	r1, #0
 8002d78:	f7fe f93c 	bl	8000ff4 <xQueueGenericSend>
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 8002d7c:	bf00      	nop
 8002d7e:	e7ea      	b.n	8002d56 <data_acq_task+0x16>
 8002d80:	20003f60 	.word	0x20003f60
 8002d84:	20003f50 	.word	0x20003f50

08002d88 <data_proc_task>:
	}
}

// Definition of the second task
void data_proc_task(void *pvParameters)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 8002d90:	4b0a      	ldr	r3, [pc, #40]	@ (8002dbc <data_proc_task+0x34>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fe fa2d 	bl	80011f8 <xQueueSemaphoreTake>

		Task2_profiler++;
 8002d9e:	4b08      	ldr	r3, [pc, #32]	@ (8002dc0 <data_proc_task+0x38>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	3301      	adds	r3, #1
 8002da4:	4a06      	ldr	r2, [pc, #24]	@ (8002dc0 <data_proc_task+0x38>)
 8002da6:	6013      	str	r3, [r2, #0]

		xSemaphoreGive(xBinarySemaphore);
 8002da8:	4b04      	ldr	r3, [pc, #16]	@ (8002dbc <data_proc_task+0x34>)
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	2300      	movs	r3, #0
 8002dae:	2200      	movs	r2, #0
 8002db0:	2100      	movs	r1, #0
 8002db2:	f7fe f91f 	bl	8000ff4 <xQueueGenericSend>
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 8002db6:	bf00      	nop
 8002db8:	e7ea      	b.n	8002d90 <data_proc_task+0x8>
 8002dba:	bf00      	nop
 8002dbc:	20003f60 	.word	0x20003f60
 8002dc0:	20003f54 	.word	0x20003f54

08002dc4 <data_disp_task>:
	}
}

// Definition of the third task
void data_disp_task(void *pvParameters)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8002df8 <data_disp_task+0x34>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fe fa0f 	bl	80011f8 <xQueueSemaphoreTake>

		Task3_profiler++;
 8002dda:	4b08      	ldr	r3, [pc, #32]	@ (8002dfc <data_disp_task+0x38>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	3301      	adds	r3, #1
 8002de0:	4a06      	ldr	r2, [pc, #24]	@ (8002dfc <data_disp_task+0x38>)
 8002de2:	6013      	str	r3, [r2, #0]

		xSemaphoreGive(xBinarySemaphore);
 8002de4:	4b04      	ldr	r3, [pc, #16]	@ (8002df8 <data_disp_task+0x34>)
 8002de6:	6818      	ldr	r0, [r3, #0]
 8002de8:	2300      	movs	r3, #0
 8002dea:	2200      	movs	r2, #0
 8002dec:	2100      	movs	r1, #0
 8002dee:	f7fe f901 	bl	8000ff4 <xQueueGenericSend>
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 8002df2:	bf00      	nop
 8002df4:	e7ea      	b.n	8002dcc <data_disp_task+0x8>
 8002df6:	bf00      	nop
 8002df8:	20003f60 	.word	0x20003f60
 8002dfc:	20003f58 	.word	0x20003f58

08002e00 <data_filt_task>:
	}
}

// Definition of the fourth task
void data_filt_task(void *pvParameters)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 8002e08:	4b0a      	ldr	r3, [pc, #40]	@ (8002e34 <data_filt_task+0x34>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fe f9f1 	bl	80011f8 <xQueueSemaphoreTake>

		Task4_profiler++;
 8002e16:	4b08      	ldr	r3, [pc, #32]	@ (8002e38 <data_filt_task+0x38>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	4a06      	ldr	r2, [pc, #24]	@ (8002e38 <data_filt_task+0x38>)
 8002e1e:	6013      	str	r3, [r2, #0]

		xSemaphoreGive(xBinarySemaphore);
 8002e20:	4b04      	ldr	r3, [pc, #16]	@ (8002e34 <data_filt_task+0x34>)
 8002e22:	6818      	ldr	r0, [r3, #0]
 8002e24:	2300      	movs	r3, #0
 8002e26:	2200      	movs	r2, #0
 8002e28:	2100      	movs	r1, #0
 8002e2a:	f7fe f8e3 	bl	8000ff4 <xQueueGenericSend>
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 8002e2e:	bf00      	nop
 8002e30:	e7ea      	b.n	8002e08 <data_filt_task+0x8>
 8002e32:	bf00      	nop
 8002e34:	20003f60 	.word	0x20003f60
 8002e38:	20003f5c 	.word	0x20003f5c

08002e3c <fpu_enable>:
}



static void fpu_enable(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
	// Enable FPU - Set bits 20, 21, 22, 23 to "1" - See page 264 of Cortex-M4 Devices Users Guide
	SCB->CPACR |= ((3UL << 20) | (3UL << 22));
 8002e40:	4b06      	ldr	r3, [pc, #24]	@ (8002e5c <fpu_enable+0x20>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e46:	4a05      	ldr	r2, [pc, #20]	@ (8002e5c <fpu_enable+0x20>)
 8002e48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	e000ed00 	.word	0xe000ed00

08002e60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return 1;
 8002e64:	2301      	movs	r3, #1
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <_kill>:

int _kill(int pid, int sig)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e7a:	f001 f96f 	bl	800415c <__errno>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2216      	movs	r2, #22
 8002e82:	601a      	str	r2, [r3, #0]
  return -1;
 8002e84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <_exit>:

void _exit (int status)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff ffe7 	bl	8002e70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ea2:	bf00      	nop
 8002ea4:	e7fd      	b.n	8002ea2 <_exit+0x12>

08002ea6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b086      	sub	sp, #24
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	e00a      	b.n	8002ece <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002eb8:	f3af 8000 	nop.w
 8002ebc:	4601      	mov	r1, r0
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	60ba      	str	r2, [r7, #8]
 8002ec4:	b2ca      	uxtb	r2, r1
 8002ec6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	617b      	str	r3, [r7, #20]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	dbf0      	blt.n	8002eb8 <_read+0x12>
  }

  return len;
 8002ed6:	687b      	ldr	r3, [r7, #4]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	e009      	b.n	8002f06 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	60ba      	str	r2, [r7, #8]
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 f888 	bl	8003010 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	3301      	adds	r3, #1
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	dbf1      	blt.n	8002ef2 <_write+0x12>
  }
  return len;
 8002f0e:	687b      	ldr	r3, [r7, #4]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <_close>:

int _close(int file)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f40:	605a      	str	r2, [r3, #4]
  return 0;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <_isatty>:

int _isatty(int file)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f58:	2301      	movs	r3, #1
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b085      	sub	sp, #20
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f88:	4a14      	ldr	r2, [pc, #80]	@ (8002fdc <_sbrk+0x5c>)
 8002f8a:	4b15      	ldr	r3, [pc, #84]	@ (8002fe0 <_sbrk+0x60>)
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f94:	4b13      	ldr	r3, [pc, #76]	@ (8002fe4 <_sbrk+0x64>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d102      	bne.n	8002fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f9c:	4b11      	ldr	r3, [pc, #68]	@ (8002fe4 <_sbrk+0x64>)
 8002f9e:	4a12      	ldr	r2, [pc, #72]	@ (8002fe8 <_sbrk+0x68>)
 8002fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fa2:	4b10      	ldr	r3, [pc, #64]	@ (8002fe4 <_sbrk+0x64>)
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4413      	add	r3, r2
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d207      	bcs.n	8002fc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fb0:	f001 f8d4 	bl	800415c <__errno>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	220c      	movs	r2, #12
 8002fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002fbe:	e009      	b.n	8002fd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fc0:	4b08      	ldr	r3, [pc, #32]	@ (8002fe4 <_sbrk+0x64>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fc6:	4b07      	ldr	r3, [pc, #28]	@ (8002fe4 <_sbrk+0x64>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	4a05      	ldr	r2, [pc, #20]	@ (8002fe4 <_sbrk+0x64>)
 8002fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20020000 	.word	0x20020000
 8002fe0:	00000400 	.word	0x00000400
 8002fe4:	20003f64 	.word	0x20003f64
 8002fe8:	200040b8 	.word	0x200040b8

08002fec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ff0:	4b06      	ldr	r3, [pc, #24]	@ (800300c <SystemInit+0x20>)
 8002ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff6:	4a05      	ldr	r2, [pc, #20]	@ (800300c <SystemInit+0x20>)
 8002ff8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ffc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003000:	bf00      	nop
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate);

void uart2_write(int ch);

int __io_putchar(int ch)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f87b 	bl	8003114 <uart2_write>

	return ch;
 800301e:	687b      	ldr	r3, [r7, #4]

}
 8003020:	4618      	mov	r0, r3
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <uart2_tx_init>:

// Function to initialize UART2
void uart2_tx_init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
	/****** [1] Configure UART2 Pins on Port A, PA2 (Tx) and PA3 (Rx) ******/
	/*  Enable clock access to GPIOA on AHB1 bus  */
	RCC->AHB1ENR |= GPIOAEN;
 800302c:	4b21      	ldr	r3, [pc, #132]	@ (80030b4 <uart2_tx_init+0x8c>)
 800302e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003030:	4a20      	ldr	r2, [pc, #128]	@ (80030b4 <uart2_tx_init+0x8c>)
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	6313      	str	r3, [r2, #48]	@ 0x30

	/*  Set PA2 mode to alternate function mode. (Set bits 5 and 4 to 0b10) */
	GPIOA->MODER |= (1U << 5);
 8003038:	4b1f      	ldr	r3, [pc, #124]	@ (80030b8 <uart2_tx_init+0x90>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a1e      	ldr	r2, [pc, #120]	@ (80030b8 <uart2_tx_init+0x90>)
 800303e:	f043 0320 	orr.w	r3, r3, #32
 8003042:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U << 4);
 8003044:	4b1c      	ldr	r3, [pc, #112]	@ (80030b8 <uart2_tx_init+0x90>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a1b      	ldr	r2, [pc, #108]	@ (80030b8 <uart2_tx_init+0x90>)
 800304a:	f023 0310 	bic.w	r3, r3, #16
 800304e:	6013      	str	r3, [r2, #0]

	/*  Set PA2 alternate function mode to UART_TX (AF07) . (Set bits 11, 10, 9, 8 to 0b0111, respectively.) */
	/*  Note this is in the alternate function low register, since we are working with PA2  */
	/*  Also note that the AF low register is AFR[0] and the AF high register is AFR[1]  */
	GPIOA->AFR[0] |= (1U << 8);
 8003050:	4b19      	ldr	r3, [pc, #100]	@ (80030b8 <uart2_tx_init+0x90>)
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	4a18      	ldr	r2, [pc, #96]	@ (80030b8 <uart2_tx_init+0x90>)
 8003056:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800305a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 9);
 800305c:	4b16      	ldr	r3, [pc, #88]	@ (80030b8 <uart2_tx_init+0x90>)
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	4a15      	ldr	r2, [pc, #84]	@ (80030b8 <uart2_tx_init+0x90>)
 8003062:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003066:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 10);
 8003068:	4b13      	ldr	r3, [pc, #76]	@ (80030b8 <uart2_tx_init+0x90>)
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	4a12      	ldr	r2, [pc, #72]	@ (80030b8 <uart2_tx_init+0x90>)
 800306e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003072:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U << 11);
 8003074:	4b10      	ldr	r3, [pc, #64]	@ (80030b8 <uart2_tx_init+0x90>)
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	4a0f      	ldr	r2, [pc, #60]	@ (80030b8 <uart2_tx_init+0x90>)
 800307a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800307e:	6213      	str	r3, [r2, #32]


	/****** [2] Configure UART  ******/
	/*  Enable clock access to UART2 on APB1*/
	RCC->APB1ENR |= UART2EN;
 8003080:	4b0c      	ldr	r3, [pc, #48]	@ (80030b4 <uart2_tx_init+0x8c>)
 8003082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003084:	4a0b      	ldr	r2, [pc, #44]	@ (80030b4 <uart2_tx_init+0x8c>)
 8003086:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800308a:	6413      	str	r3, [r2, #64]	@ 0x40

	/*  Configure baud rate  */
	uart2_set_baudrate(APB1_CLK, UART_BAUDRATE);
 800308c:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8003090:	480a      	ldr	r0, [pc, #40]	@ (80030bc <uart2_tx_init+0x94>)
 8003092:	f000 f817 	bl	80030c4 <uart2_set_baudrate>

	/*  Configure data transfer direction for Tx  */
	USART2->CR1 |= CR1_TE;
 8003096:	4b0a      	ldr	r3, [pc, #40]	@ (80030c0 <uart2_tx_init+0x98>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	4a09      	ldr	r2, [pc, #36]	@ (80030c0 <uart2_tx_init+0x98>)
 800309c:	f043 0308 	orr.w	r3, r3, #8
 80030a0:	60d3      	str	r3, [r2, #12]

	/*  Enable UART module */
	USART2->CR1 |= CR1_UE;
 80030a2:	4b07      	ldr	r3, [pc, #28]	@ (80030c0 <uart2_tx_init+0x98>)
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	4a06      	ldr	r2, [pc, #24]	@ (80030c0 <uart2_tx_init+0x98>)
 80030a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80030ac:	60d3      	str	r3, [r2, #12]

}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800
 80030b8:	40020000 	.word	0x40020000
 80030bc:	00f42400 	.word	0x00f42400
 80030c0:	40004400 	.word	0x40004400

080030c4 <uart2_set_baudrate>:

static void uart2_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk, baudrate);
 80030ce:	6839      	ldr	r1, [r7, #0]
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f80b 	bl	80030ec <compute_uart_bd>
 80030d6:	4603      	mov	r3, r0
 80030d8:	461a      	mov	r2, r3
 80030da:	4b03      	ldr	r3, [pc, #12]	@ (80030e8 <uart2_set_baudrate+0x24>)
 80030dc:	609a      	str	r2, [r3, #8]
}
 80030de:	bf00      	nop
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40004400 	.word	0x40004400

080030ec <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
	return ((baudrate/2U) + periph_clk)/baudrate;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	085a      	lsrs	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	441a      	add	r2, r3
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	fbb2 f3f3 	udiv	r3, r2, r3
 8003104:	b29b      	uxth	r3, r3
}
 8003106:	4618      	mov	r0, r3
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <uart2_write>:

void uart2_write(int ch)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
	/*  First, make sure data transmit register is empty - need to read the USART status register, SR */
	/*  Read the status register  */
	while(!(USART2->SR & SR_TXE) ) {}// Sit here until SR bit is a "1" (Data has been transferred)
 800311c:	bf00      	nop
 800311e:	4b08      	ldr	r3, [pc, #32]	@ (8003140 <uart2_write+0x2c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f9      	beq.n	800311e <uart2_write+0xa>

	/*  Write to the transmit data register.  */
	USART2->DR = (ch & 0xFF);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a04      	ldr	r2, [pc, #16]	@ (8003140 <uart2_write+0x2c>)
 800312e:	b2db      	uxtb	r3, r3
 8003130:	6053      	str	r3, [r2, #4]
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	40004400 	.word	0x40004400

08003144 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003144:	480d      	ldr	r0, [pc, #52]	@ (800317c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003146:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003148:	f7ff ff50 	bl	8002fec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800314c:	480c      	ldr	r0, [pc, #48]	@ (8003180 <LoopForever+0x6>)
  ldr r1, =_edata
 800314e:	490d      	ldr	r1, [pc, #52]	@ (8003184 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003150:	4a0d      	ldr	r2, [pc, #52]	@ (8003188 <LoopForever+0xe>)
  movs r3, #0
 8003152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003154:	e002      	b.n	800315c <LoopCopyDataInit>

08003156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800315a:	3304      	adds	r3, #4

0800315c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800315c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800315e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003160:	d3f9      	bcc.n	8003156 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003162:	4a0a      	ldr	r2, [pc, #40]	@ (800318c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003164:	4c0a      	ldr	r4, [pc, #40]	@ (8003190 <LoopForever+0x16>)
  movs r3, #0
 8003166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003168:	e001      	b.n	800316e <LoopFillZerobss>

0800316a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800316a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800316c:	3204      	adds	r2, #4

0800316e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800316e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003170:	d3fb      	bcc.n	800316a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003172:	f000 fff9 	bl	8004168 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003176:	f7ff fd85 	bl	8002c84 <main>

0800317a <LoopForever>:

LoopForever:
  b LoopForever
 800317a:	e7fe      	b.n	800317a <LoopForever>
  ldr   r0, =_estack
 800317c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003184:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003188:	08007d08 	.word	0x08007d08
  ldr r2, =_sbss
 800318c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003190:	200040b4 	.word	0x200040b4

08003194 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003194:	e7fe      	b.n	8003194 <ADC_IRQHandler>

08003196 <__cvt>:
 8003196:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800319a:	ec57 6b10 	vmov	r6, r7, d0
 800319e:	2f00      	cmp	r7, #0
 80031a0:	460c      	mov	r4, r1
 80031a2:	4619      	mov	r1, r3
 80031a4:	463b      	mov	r3, r7
 80031a6:	bfbb      	ittet	lt
 80031a8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80031ac:	461f      	movlt	r7, r3
 80031ae:	2300      	movge	r3, #0
 80031b0:	232d      	movlt	r3, #45	@ 0x2d
 80031b2:	700b      	strb	r3, [r1, #0]
 80031b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80031b6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80031ba:	4691      	mov	r9, r2
 80031bc:	f023 0820 	bic.w	r8, r3, #32
 80031c0:	bfbc      	itt	lt
 80031c2:	4632      	movlt	r2, r6
 80031c4:	4616      	movlt	r6, r2
 80031c6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80031ca:	d005      	beq.n	80031d8 <__cvt+0x42>
 80031cc:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80031d0:	d100      	bne.n	80031d4 <__cvt+0x3e>
 80031d2:	3401      	adds	r4, #1
 80031d4:	2102      	movs	r1, #2
 80031d6:	e000      	b.n	80031da <__cvt+0x44>
 80031d8:	2103      	movs	r1, #3
 80031da:	ab03      	add	r3, sp, #12
 80031dc:	9301      	str	r3, [sp, #4]
 80031de:	ab02      	add	r3, sp, #8
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	ec47 6b10 	vmov	d0, r6, r7
 80031e6:	4653      	mov	r3, sl
 80031e8:	4622      	mov	r2, r4
 80031ea:	f001 f881 	bl	80042f0 <_dtoa_r>
 80031ee:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80031f2:	4605      	mov	r5, r0
 80031f4:	d119      	bne.n	800322a <__cvt+0x94>
 80031f6:	f019 0f01 	tst.w	r9, #1
 80031fa:	d00e      	beq.n	800321a <__cvt+0x84>
 80031fc:	eb00 0904 	add.w	r9, r0, r4
 8003200:	2200      	movs	r2, #0
 8003202:	2300      	movs	r3, #0
 8003204:	4630      	mov	r0, r6
 8003206:	4639      	mov	r1, r7
 8003208:	f7fd fc66 	bl	8000ad8 <__aeabi_dcmpeq>
 800320c:	b108      	cbz	r0, 8003212 <__cvt+0x7c>
 800320e:	f8cd 900c 	str.w	r9, [sp, #12]
 8003212:	2230      	movs	r2, #48	@ 0x30
 8003214:	9b03      	ldr	r3, [sp, #12]
 8003216:	454b      	cmp	r3, r9
 8003218:	d31e      	bcc.n	8003258 <__cvt+0xc2>
 800321a:	9b03      	ldr	r3, [sp, #12]
 800321c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800321e:	1b5b      	subs	r3, r3, r5
 8003220:	4628      	mov	r0, r5
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	b004      	add	sp, #16
 8003226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800322a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800322e:	eb00 0904 	add.w	r9, r0, r4
 8003232:	d1e5      	bne.n	8003200 <__cvt+0x6a>
 8003234:	7803      	ldrb	r3, [r0, #0]
 8003236:	2b30      	cmp	r3, #48	@ 0x30
 8003238:	d10a      	bne.n	8003250 <__cvt+0xba>
 800323a:	2200      	movs	r2, #0
 800323c:	2300      	movs	r3, #0
 800323e:	4630      	mov	r0, r6
 8003240:	4639      	mov	r1, r7
 8003242:	f7fd fc49 	bl	8000ad8 <__aeabi_dcmpeq>
 8003246:	b918      	cbnz	r0, 8003250 <__cvt+0xba>
 8003248:	f1c4 0401 	rsb	r4, r4, #1
 800324c:	f8ca 4000 	str.w	r4, [sl]
 8003250:	f8da 3000 	ldr.w	r3, [sl]
 8003254:	4499      	add	r9, r3
 8003256:	e7d3      	b.n	8003200 <__cvt+0x6a>
 8003258:	1c59      	adds	r1, r3, #1
 800325a:	9103      	str	r1, [sp, #12]
 800325c:	701a      	strb	r2, [r3, #0]
 800325e:	e7d9      	b.n	8003214 <__cvt+0x7e>

08003260 <__exponent>:
 8003260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003262:	2900      	cmp	r1, #0
 8003264:	bfba      	itte	lt
 8003266:	4249      	neglt	r1, r1
 8003268:	232d      	movlt	r3, #45	@ 0x2d
 800326a:	232b      	movge	r3, #43	@ 0x2b
 800326c:	2909      	cmp	r1, #9
 800326e:	7002      	strb	r2, [r0, #0]
 8003270:	7043      	strb	r3, [r0, #1]
 8003272:	dd29      	ble.n	80032c8 <__exponent+0x68>
 8003274:	f10d 0307 	add.w	r3, sp, #7
 8003278:	461d      	mov	r5, r3
 800327a:	270a      	movs	r7, #10
 800327c:	461a      	mov	r2, r3
 800327e:	fbb1 f6f7 	udiv	r6, r1, r7
 8003282:	fb07 1416 	mls	r4, r7, r6, r1
 8003286:	3430      	adds	r4, #48	@ 0x30
 8003288:	f802 4c01 	strb.w	r4, [r2, #-1]
 800328c:	460c      	mov	r4, r1
 800328e:	2c63      	cmp	r4, #99	@ 0x63
 8003290:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8003294:	4631      	mov	r1, r6
 8003296:	dcf1      	bgt.n	800327c <__exponent+0x1c>
 8003298:	3130      	adds	r1, #48	@ 0x30
 800329a:	1e94      	subs	r4, r2, #2
 800329c:	f803 1c01 	strb.w	r1, [r3, #-1]
 80032a0:	1c41      	adds	r1, r0, #1
 80032a2:	4623      	mov	r3, r4
 80032a4:	42ab      	cmp	r3, r5
 80032a6:	d30a      	bcc.n	80032be <__exponent+0x5e>
 80032a8:	f10d 0309 	add.w	r3, sp, #9
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	42ac      	cmp	r4, r5
 80032b0:	bf88      	it	hi
 80032b2:	2300      	movhi	r3, #0
 80032b4:	3302      	adds	r3, #2
 80032b6:	4403      	add	r3, r0
 80032b8:	1a18      	subs	r0, r3, r0
 80032ba:	b003      	add	sp, #12
 80032bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032be:	f813 6b01 	ldrb.w	r6, [r3], #1
 80032c2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80032c6:	e7ed      	b.n	80032a4 <__exponent+0x44>
 80032c8:	2330      	movs	r3, #48	@ 0x30
 80032ca:	3130      	adds	r1, #48	@ 0x30
 80032cc:	7083      	strb	r3, [r0, #2]
 80032ce:	70c1      	strb	r1, [r0, #3]
 80032d0:	1d03      	adds	r3, r0, #4
 80032d2:	e7f1      	b.n	80032b8 <__exponent+0x58>

080032d4 <_printf_float>:
 80032d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032d8:	b08d      	sub	sp, #52	@ 0x34
 80032da:	460c      	mov	r4, r1
 80032dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80032e0:	4616      	mov	r6, r2
 80032e2:	461f      	mov	r7, r3
 80032e4:	4605      	mov	r5, r0
 80032e6:	f000 feef 	bl	80040c8 <_localeconv_r>
 80032ea:	6803      	ldr	r3, [r0, #0]
 80032ec:	9304      	str	r3, [sp, #16]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fc ffc6 	bl	8000280 <strlen>
 80032f4:	2300      	movs	r3, #0
 80032f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80032f8:	f8d8 3000 	ldr.w	r3, [r8]
 80032fc:	9005      	str	r0, [sp, #20]
 80032fe:	3307      	adds	r3, #7
 8003300:	f023 0307 	bic.w	r3, r3, #7
 8003304:	f103 0208 	add.w	r2, r3, #8
 8003308:	f894 a018 	ldrb.w	sl, [r4, #24]
 800330c:	f8d4 b000 	ldr.w	fp, [r4]
 8003310:	f8c8 2000 	str.w	r2, [r8]
 8003314:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003318:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800331c:	9307      	str	r3, [sp, #28]
 800331e:	f8cd 8018 	str.w	r8, [sp, #24]
 8003322:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003326:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800332a:	4b9c      	ldr	r3, [pc, #624]	@ (800359c <_printf_float+0x2c8>)
 800332c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003330:	f7fd fc04 	bl	8000b3c <__aeabi_dcmpun>
 8003334:	bb70      	cbnz	r0, 8003394 <_printf_float+0xc0>
 8003336:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800333a:	4b98      	ldr	r3, [pc, #608]	@ (800359c <_printf_float+0x2c8>)
 800333c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003340:	f7fd fbde 	bl	8000b00 <__aeabi_dcmple>
 8003344:	bb30      	cbnz	r0, 8003394 <_printf_float+0xc0>
 8003346:	2200      	movs	r2, #0
 8003348:	2300      	movs	r3, #0
 800334a:	4640      	mov	r0, r8
 800334c:	4649      	mov	r1, r9
 800334e:	f7fd fbcd 	bl	8000aec <__aeabi_dcmplt>
 8003352:	b110      	cbz	r0, 800335a <_printf_float+0x86>
 8003354:	232d      	movs	r3, #45	@ 0x2d
 8003356:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800335a:	4a91      	ldr	r2, [pc, #580]	@ (80035a0 <_printf_float+0x2cc>)
 800335c:	4b91      	ldr	r3, [pc, #580]	@ (80035a4 <_printf_float+0x2d0>)
 800335e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003362:	bf94      	ite	ls
 8003364:	4690      	movls	r8, r2
 8003366:	4698      	movhi	r8, r3
 8003368:	2303      	movs	r3, #3
 800336a:	6123      	str	r3, [r4, #16]
 800336c:	f02b 0304 	bic.w	r3, fp, #4
 8003370:	6023      	str	r3, [r4, #0]
 8003372:	f04f 0900 	mov.w	r9, #0
 8003376:	9700      	str	r7, [sp, #0]
 8003378:	4633      	mov	r3, r6
 800337a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800337c:	4621      	mov	r1, r4
 800337e:	4628      	mov	r0, r5
 8003380:	f000 f9d2 	bl	8003728 <_printf_common>
 8003384:	3001      	adds	r0, #1
 8003386:	f040 808d 	bne.w	80034a4 <_printf_float+0x1d0>
 800338a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800338e:	b00d      	add	sp, #52	@ 0x34
 8003390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003394:	4642      	mov	r2, r8
 8003396:	464b      	mov	r3, r9
 8003398:	4640      	mov	r0, r8
 800339a:	4649      	mov	r1, r9
 800339c:	f7fd fbce 	bl	8000b3c <__aeabi_dcmpun>
 80033a0:	b140      	cbz	r0, 80033b4 <_printf_float+0xe0>
 80033a2:	464b      	mov	r3, r9
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	bfbc      	itt	lt
 80033a8:	232d      	movlt	r3, #45	@ 0x2d
 80033aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80033ae:	4a7e      	ldr	r2, [pc, #504]	@ (80035a8 <_printf_float+0x2d4>)
 80033b0:	4b7e      	ldr	r3, [pc, #504]	@ (80035ac <_printf_float+0x2d8>)
 80033b2:	e7d4      	b.n	800335e <_printf_float+0x8a>
 80033b4:	6863      	ldr	r3, [r4, #4]
 80033b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80033ba:	9206      	str	r2, [sp, #24]
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	d13b      	bne.n	8003438 <_printf_float+0x164>
 80033c0:	2306      	movs	r3, #6
 80033c2:	6063      	str	r3, [r4, #4]
 80033c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80033c8:	2300      	movs	r3, #0
 80033ca:	6022      	str	r2, [r4, #0]
 80033cc:	9303      	str	r3, [sp, #12]
 80033ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80033d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80033d4:	ab09      	add	r3, sp, #36	@ 0x24
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	6861      	ldr	r1, [r4, #4]
 80033da:	ec49 8b10 	vmov	d0, r8, r9
 80033de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80033e2:	4628      	mov	r0, r5
 80033e4:	f7ff fed7 	bl	8003196 <__cvt>
 80033e8:	9b06      	ldr	r3, [sp, #24]
 80033ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80033ec:	2b47      	cmp	r3, #71	@ 0x47
 80033ee:	4680      	mov	r8, r0
 80033f0:	d129      	bne.n	8003446 <_printf_float+0x172>
 80033f2:	1cc8      	adds	r0, r1, #3
 80033f4:	db02      	blt.n	80033fc <_printf_float+0x128>
 80033f6:	6863      	ldr	r3, [r4, #4]
 80033f8:	4299      	cmp	r1, r3
 80033fa:	dd41      	ble.n	8003480 <_printf_float+0x1ac>
 80033fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8003400:	fa5f fa8a 	uxtb.w	sl, sl
 8003404:	3901      	subs	r1, #1
 8003406:	4652      	mov	r2, sl
 8003408:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800340c:	9109      	str	r1, [sp, #36]	@ 0x24
 800340e:	f7ff ff27 	bl	8003260 <__exponent>
 8003412:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003414:	1813      	adds	r3, r2, r0
 8003416:	2a01      	cmp	r2, #1
 8003418:	4681      	mov	r9, r0
 800341a:	6123      	str	r3, [r4, #16]
 800341c:	dc02      	bgt.n	8003424 <_printf_float+0x150>
 800341e:	6822      	ldr	r2, [r4, #0]
 8003420:	07d2      	lsls	r2, r2, #31
 8003422:	d501      	bpl.n	8003428 <_printf_float+0x154>
 8003424:	3301      	adds	r3, #1
 8003426:	6123      	str	r3, [r4, #16]
 8003428:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0a2      	beq.n	8003376 <_printf_float+0xa2>
 8003430:	232d      	movs	r3, #45	@ 0x2d
 8003432:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003436:	e79e      	b.n	8003376 <_printf_float+0xa2>
 8003438:	9a06      	ldr	r2, [sp, #24]
 800343a:	2a47      	cmp	r2, #71	@ 0x47
 800343c:	d1c2      	bne.n	80033c4 <_printf_float+0xf0>
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1c0      	bne.n	80033c4 <_printf_float+0xf0>
 8003442:	2301      	movs	r3, #1
 8003444:	e7bd      	b.n	80033c2 <_printf_float+0xee>
 8003446:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800344a:	d9db      	bls.n	8003404 <_printf_float+0x130>
 800344c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003450:	d118      	bne.n	8003484 <_printf_float+0x1b0>
 8003452:	2900      	cmp	r1, #0
 8003454:	6863      	ldr	r3, [r4, #4]
 8003456:	dd0b      	ble.n	8003470 <_printf_float+0x19c>
 8003458:	6121      	str	r1, [r4, #16]
 800345a:	b913      	cbnz	r3, 8003462 <_printf_float+0x18e>
 800345c:	6822      	ldr	r2, [r4, #0]
 800345e:	07d0      	lsls	r0, r2, #31
 8003460:	d502      	bpl.n	8003468 <_printf_float+0x194>
 8003462:	3301      	adds	r3, #1
 8003464:	440b      	add	r3, r1
 8003466:	6123      	str	r3, [r4, #16]
 8003468:	65a1      	str	r1, [r4, #88]	@ 0x58
 800346a:	f04f 0900 	mov.w	r9, #0
 800346e:	e7db      	b.n	8003428 <_printf_float+0x154>
 8003470:	b913      	cbnz	r3, 8003478 <_printf_float+0x1a4>
 8003472:	6822      	ldr	r2, [r4, #0]
 8003474:	07d2      	lsls	r2, r2, #31
 8003476:	d501      	bpl.n	800347c <_printf_float+0x1a8>
 8003478:	3302      	adds	r3, #2
 800347a:	e7f4      	b.n	8003466 <_printf_float+0x192>
 800347c:	2301      	movs	r3, #1
 800347e:	e7f2      	b.n	8003466 <_printf_float+0x192>
 8003480:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003486:	4299      	cmp	r1, r3
 8003488:	db05      	blt.n	8003496 <_printf_float+0x1c2>
 800348a:	6823      	ldr	r3, [r4, #0]
 800348c:	6121      	str	r1, [r4, #16]
 800348e:	07d8      	lsls	r0, r3, #31
 8003490:	d5ea      	bpl.n	8003468 <_printf_float+0x194>
 8003492:	1c4b      	adds	r3, r1, #1
 8003494:	e7e7      	b.n	8003466 <_printf_float+0x192>
 8003496:	2900      	cmp	r1, #0
 8003498:	bfd4      	ite	le
 800349a:	f1c1 0202 	rsble	r2, r1, #2
 800349e:	2201      	movgt	r2, #1
 80034a0:	4413      	add	r3, r2
 80034a2:	e7e0      	b.n	8003466 <_printf_float+0x192>
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	055a      	lsls	r2, r3, #21
 80034a8:	d407      	bmi.n	80034ba <_printf_float+0x1e6>
 80034aa:	6923      	ldr	r3, [r4, #16]
 80034ac:	4642      	mov	r2, r8
 80034ae:	4631      	mov	r1, r6
 80034b0:	4628      	mov	r0, r5
 80034b2:	47b8      	blx	r7
 80034b4:	3001      	adds	r0, #1
 80034b6:	d12b      	bne.n	8003510 <_printf_float+0x23c>
 80034b8:	e767      	b.n	800338a <_printf_float+0xb6>
 80034ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80034be:	f240 80dd 	bls.w	800367c <_printf_float+0x3a8>
 80034c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80034c6:	2200      	movs	r2, #0
 80034c8:	2300      	movs	r3, #0
 80034ca:	f7fd fb05 	bl	8000ad8 <__aeabi_dcmpeq>
 80034ce:	2800      	cmp	r0, #0
 80034d0:	d033      	beq.n	800353a <_printf_float+0x266>
 80034d2:	4a37      	ldr	r2, [pc, #220]	@ (80035b0 <_printf_float+0x2dc>)
 80034d4:	2301      	movs	r3, #1
 80034d6:	4631      	mov	r1, r6
 80034d8:	4628      	mov	r0, r5
 80034da:	47b8      	blx	r7
 80034dc:	3001      	adds	r0, #1
 80034de:	f43f af54 	beq.w	800338a <_printf_float+0xb6>
 80034e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80034e6:	4543      	cmp	r3, r8
 80034e8:	db02      	blt.n	80034f0 <_printf_float+0x21c>
 80034ea:	6823      	ldr	r3, [r4, #0]
 80034ec:	07d8      	lsls	r0, r3, #31
 80034ee:	d50f      	bpl.n	8003510 <_printf_float+0x23c>
 80034f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034f4:	4631      	mov	r1, r6
 80034f6:	4628      	mov	r0, r5
 80034f8:	47b8      	blx	r7
 80034fa:	3001      	adds	r0, #1
 80034fc:	f43f af45 	beq.w	800338a <_printf_float+0xb6>
 8003500:	f04f 0900 	mov.w	r9, #0
 8003504:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003508:	f104 0a1a 	add.w	sl, r4, #26
 800350c:	45c8      	cmp	r8, r9
 800350e:	dc09      	bgt.n	8003524 <_printf_float+0x250>
 8003510:	6823      	ldr	r3, [r4, #0]
 8003512:	079b      	lsls	r3, r3, #30
 8003514:	f100 8103 	bmi.w	800371e <_printf_float+0x44a>
 8003518:	68e0      	ldr	r0, [r4, #12]
 800351a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800351c:	4298      	cmp	r0, r3
 800351e:	bfb8      	it	lt
 8003520:	4618      	movlt	r0, r3
 8003522:	e734      	b.n	800338e <_printf_float+0xba>
 8003524:	2301      	movs	r3, #1
 8003526:	4652      	mov	r2, sl
 8003528:	4631      	mov	r1, r6
 800352a:	4628      	mov	r0, r5
 800352c:	47b8      	blx	r7
 800352e:	3001      	adds	r0, #1
 8003530:	f43f af2b 	beq.w	800338a <_printf_float+0xb6>
 8003534:	f109 0901 	add.w	r9, r9, #1
 8003538:	e7e8      	b.n	800350c <_printf_float+0x238>
 800353a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800353c:	2b00      	cmp	r3, #0
 800353e:	dc39      	bgt.n	80035b4 <_printf_float+0x2e0>
 8003540:	4a1b      	ldr	r2, [pc, #108]	@ (80035b0 <_printf_float+0x2dc>)
 8003542:	2301      	movs	r3, #1
 8003544:	4631      	mov	r1, r6
 8003546:	4628      	mov	r0, r5
 8003548:	47b8      	blx	r7
 800354a:	3001      	adds	r0, #1
 800354c:	f43f af1d 	beq.w	800338a <_printf_float+0xb6>
 8003550:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003554:	ea59 0303 	orrs.w	r3, r9, r3
 8003558:	d102      	bne.n	8003560 <_printf_float+0x28c>
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	07d9      	lsls	r1, r3, #31
 800355e:	d5d7      	bpl.n	8003510 <_printf_float+0x23c>
 8003560:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003564:	4631      	mov	r1, r6
 8003566:	4628      	mov	r0, r5
 8003568:	47b8      	blx	r7
 800356a:	3001      	adds	r0, #1
 800356c:	f43f af0d 	beq.w	800338a <_printf_float+0xb6>
 8003570:	f04f 0a00 	mov.w	sl, #0
 8003574:	f104 0b1a 	add.w	fp, r4, #26
 8003578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800357a:	425b      	negs	r3, r3
 800357c:	4553      	cmp	r3, sl
 800357e:	dc01      	bgt.n	8003584 <_printf_float+0x2b0>
 8003580:	464b      	mov	r3, r9
 8003582:	e793      	b.n	80034ac <_printf_float+0x1d8>
 8003584:	2301      	movs	r3, #1
 8003586:	465a      	mov	r2, fp
 8003588:	4631      	mov	r1, r6
 800358a:	4628      	mov	r0, r5
 800358c:	47b8      	blx	r7
 800358e:	3001      	adds	r0, #1
 8003590:	f43f aefb 	beq.w	800338a <_printf_float+0xb6>
 8003594:	f10a 0a01 	add.w	sl, sl, #1
 8003598:	e7ee      	b.n	8003578 <_printf_float+0x2a4>
 800359a:	bf00      	nop
 800359c:	7fefffff 	.word	0x7fefffff
 80035a0:	080078c7 	.word	0x080078c7
 80035a4:	080078cb 	.word	0x080078cb
 80035a8:	080078cf 	.word	0x080078cf
 80035ac:	080078d3 	.word	0x080078d3
 80035b0:	080078d7 	.word	0x080078d7
 80035b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80035b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80035ba:	4553      	cmp	r3, sl
 80035bc:	bfa8      	it	ge
 80035be:	4653      	movge	r3, sl
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	4699      	mov	r9, r3
 80035c4:	dc36      	bgt.n	8003634 <_printf_float+0x360>
 80035c6:	f04f 0b00 	mov.w	fp, #0
 80035ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80035ce:	f104 021a 	add.w	r2, r4, #26
 80035d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80035d4:	9306      	str	r3, [sp, #24]
 80035d6:	eba3 0309 	sub.w	r3, r3, r9
 80035da:	455b      	cmp	r3, fp
 80035dc:	dc31      	bgt.n	8003642 <_printf_float+0x36e>
 80035de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035e0:	459a      	cmp	sl, r3
 80035e2:	dc3a      	bgt.n	800365a <_printf_float+0x386>
 80035e4:	6823      	ldr	r3, [r4, #0]
 80035e6:	07da      	lsls	r2, r3, #31
 80035e8:	d437      	bmi.n	800365a <_printf_float+0x386>
 80035ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035ec:	ebaa 0903 	sub.w	r9, sl, r3
 80035f0:	9b06      	ldr	r3, [sp, #24]
 80035f2:	ebaa 0303 	sub.w	r3, sl, r3
 80035f6:	4599      	cmp	r9, r3
 80035f8:	bfa8      	it	ge
 80035fa:	4699      	movge	r9, r3
 80035fc:	f1b9 0f00 	cmp.w	r9, #0
 8003600:	dc33      	bgt.n	800366a <_printf_float+0x396>
 8003602:	f04f 0800 	mov.w	r8, #0
 8003606:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800360a:	f104 0b1a 	add.w	fp, r4, #26
 800360e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003610:	ebaa 0303 	sub.w	r3, sl, r3
 8003614:	eba3 0309 	sub.w	r3, r3, r9
 8003618:	4543      	cmp	r3, r8
 800361a:	f77f af79 	ble.w	8003510 <_printf_float+0x23c>
 800361e:	2301      	movs	r3, #1
 8003620:	465a      	mov	r2, fp
 8003622:	4631      	mov	r1, r6
 8003624:	4628      	mov	r0, r5
 8003626:	47b8      	blx	r7
 8003628:	3001      	adds	r0, #1
 800362a:	f43f aeae 	beq.w	800338a <_printf_float+0xb6>
 800362e:	f108 0801 	add.w	r8, r8, #1
 8003632:	e7ec      	b.n	800360e <_printf_float+0x33a>
 8003634:	4642      	mov	r2, r8
 8003636:	4631      	mov	r1, r6
 8003638:	4628      	mov	r0, r5
 800363a:	47b8      	blx	r7
 800363c:	3001      	adds	r0, #1
 800363e:	d1c2      	bne.n	80035c6 <_printf_float+0x2f2>
 8003640:	e6a3      	b.n	800338a <_printf_float+0xb6>
 8003642:	2301      	movs	r3, #1
 8003644:	4631      	mov	r1, r6
 8003646:	4628      	mov	r0, r5
 8003648:	9206      	str	r2, [sp, #24]
 800364a:	47b8      	blx	r7
 800364c:	3001      	adds	r0, #1
 800364e:	f43f ae9c 	beq.w	800338a <_printf_float+0xb6>
 8003652:	9a06      	ldr	r2, [sp, #24]
 8003654:	f10b 0b01 	add.w	fp, fp, #1
 8003658:	e7bb      	b.n	80035d2 <_printf_float+0x2fe>
 800365a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800365e:	4631      	mov	r1, r6
 8003660:	4628      	mov	r0, r5
 8003662:	47b8      	blx	r7
 8003664:	3001      	adds	r0, #1
 8003666:	d1c0      	bne.n	80035ea <_printf_float+0x316>
 8003668:	e68f      	b.n	800338a <_printf_float+0xb6>
 800366a:	9a06      	ldr	r2, [sp, #24]
 800366c:	464b      	mov	r3, r9
 800366e:	4442      	add	r2, r8
 8003670:	4631      	mov	r1, r6
 8003672:	4628      	mov	r0, r5
 8003674:	47b8      	blx	r7
 8003676:	3001      	adds	r0, #1
 8003678:	d1c3      	bne.n	8003602 <_printf_float+0x32e>
 800367a:	e686      	b.n	800338a <_printf_float+0xb6>
 800367c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003680:	f1ba 0f01 	cmp.w	sl, #1
 8003684:	dc01      	bgt.n	800368a <_printf_float+0x3b6>
 8003686:	07db      	lsls	r3, r3, #31
 8003688:	d536      	bpl.n	80036f8 <_printf_float+0x424>
 800368a:	2301      	movs	r3, #1
 800368c:	4642      	mov	r2, r8
 800368e:	4631      	mov	r1, r6
 8003690:	4628      	mov	r0, r5
 8003692:	47b8      	blx	r7
 8003694:	3001      	adds	r0, #1
 8003696:	f43f ae78 	beq.w	800338a <_printf_float+0xb6>
 800369a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800369e:	4631      	mov	r1, r6
 80036a0:	4628      	mov	r0, r5
 80036a2:	47b8      	blx	r7
 80036a4:	3001      	adds	r0, #1
 80036a6:	f43f ae70 	beq.w	800338a <_printf_float+0xb6>
 80036aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80036ae:	2200      	movs	r2, #0
 80036b0:	2300      	movs	r3, #0
 80036b2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80036b6:	f7fd fa0f 	bl	8000ad8 <__aeabi_dcmpeq>
 80036ba:	b9c0      	cbnz	r0, 80036ee <_printf_float+0x41a>
 80036bc:	4653      	mov	r3, sl
 80036be:	f108 0201 	add.w	r2, r8, #1
 80036c2:	4631      	mov	r1, r6
 80036c4:	4628      	mov	r0, r5
 80036c6:	47b8      	blx	r7
 80036c8:	3001      	adds	r0, #1
 80036ca:	d10c      	bne.n	80036e6 <_printf_float+0x412>
 80036cc:	e65d      	b.n	800338a <_printf_float+0xb6>
 80036ce:	2301      	movs	r3, #1
 80036d0:	465a      	mov	r2, fp
 80036d2:	4631      	mov	r1, r6
 80036d4:	4628      	mov	r0, r5
 80036d6:	47b8      	blx	r7
 80036d8:	3001      	adds	r0, #1
 80036da:	f43f ae56 	beq.w	800338a <_printf_float+0xb6>
 80036de:	f108 0801 	add.w	r8, r8, #1
 80036e2:	45d0      	cmp	r8, sl
 80036e4:	dbf3      	blt.n	80036ce <_printf_float+0x3fa>
 80036e6:	464b      	mov	r3, r9
 80036e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80036ec:	e6df      	b.n	80034ae <_printf_float+0x1da>
 80036ee:	f04f 0800 	mov.w	r8, #0
 80036f2:	f104 0b1a 	add.w	fp, r4, #26
 80036f6:	e7f4      	b.n	80036e2 <_printf_float+0x40e>
 80036f8:	2301      	movs	r3, #1
 80036fa:	4642      	mov	r2, r8
 80036fc:	e7e1      	b.n	80036c2 <_printf_float+0x3ee>
 80036fe:	2301      	movs	r3, #1
 8003700:	464a      	mov	r2, r9
 8003702:	4631      	mov	r1, r6
 8003704:	4628      	mov	r0, r5
 8003706:	47b8      	blx	r7
 8003708:	3001      	adds	r0, #1
 800370a:	f43f ae3e 	beq.w	800338a <_printf_float+0xb6>
 800370e:	f108 0801 	add.w	r8, r8, #1
 8003712:	68e3      	ldr	r3, [r4, #12]
 8003714:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003716:	1a5b      	subs	r3, r3, r1
 8003718:	4543      	cmp	r3, r8
 800371a:	dcf0      	bgt.n	80036fe <_printf_float+0x42a>
 800371c:	e6fc      	b.n	8003518 <_printf_float+0x244>
 800371e:	f04f 0800 	mov.w	r8, #0
 8003722:	f104 0919 	add.w	r9, r4, #25
 8003726:	e7f4      	b.n	8003712 <_printf_float+0x43e>

08003728 <_printf_common>:
 8003728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800372c:	4616      	mov	r6, r2
 800372e:	4698      	mov	r8, r3
 8003730:	688a      	ldr	r2, [r1, #8]
 8003732:	690b      	ldr	r3, [r1, #16]
 8003734:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003738:	4293      	cmp	r3, r2
 800373a:	bfb8      	it	lt
 800373c:	4613      	movlt	r3, r2
 800373e:	6033      	str	r3, [r6, #0]
 8003740:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003744:	4607      	mov	r7, r0
 8003746:	460c      	mov	r4, r1
 8003748:	b10a      	cbz	r2, 800374e <_printf_common+0x26>
 800374a:	3301      	adds	r3, #1
 800374c:	6033      	str	r3, [r6, #0]
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	0699      	lsls	r1, r3, #26
 8003752:	bf42      	ittt	mi
 8003754:	6833      	ldrmi	r3, [r6, #0]
 8003756:	3302      	addmi	r3, #2
 8003758:	6033      	strmi	r3, [r6, #0]
 800375a:	6825      	ldr	r5, [r4, #0]
 800375c:	f015 0506 	ands.w	r5, r5, #6
 8003760:	d106      	bne.n	8003770 <_printf_common+0x48>
 8003762:	f104 0a19 	add.w	sl, r4, #25
 8003766:	68e3      	ldr	r3, [r4, #12]
 8003768:	6832      	ldr	r2, [r6, #0]
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	42ab      	cmp	r3, r5
 800376e:	dc26      	bgt.n	80037be <_printf_common+0x96>
 8003770:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003774:	6822      	ldr	r2, [r4, #0]
 8003776:	3b00      	subs	r3, #0
 8003778:	bf18      	it	ne
 800377a:	2301      	movne	r3, #1
 800377c:	0692      	lsls	r2, r2, #26
 800377e:	d42b      	bmi.n	80037d8 <_printf_common+0xb0>
 8003780:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003784:	4641      	mov	r1, r8
 8003786:	4638      	mov	r0, r7
 8003788:	47c8      	blx	r9
 800378a:	3001      	adds	r0, #1
 800378c:	d01e      	beq.n	80037cc <_printf_common+0xa4>
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	6922      	ldr	r2, [r4, #16]
 8003792:	f003 0306 	and.w	r3, r3, #6
 8003796:	2b04      	cmp	r3, #4
 8003798:	bf02      	ittt	eq
 800379a:	68e5      	ldreq	r5, [r4, #12]
 800379c:	6833      	ldreq	r3, [r6, #0]
 800379e:	1aed      	subeq	r5, r5, r3
 80037a0:	68a3      	ldr	r3, [r4, #8]
 80037a2:	bf0c      	ite	eq
 80037a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037a8:	2500      	movne	r5, #0
 80037aa:	4293      	cmp	r3, r2
 80037ac:	bfc4      	itt	gt
 80037ae:	1a9b      	subgt	r3, r3, r2
 80037b0:	18ed      	addgt	r5, r5, r3
 80037b2:	2600      	movs	r6, #0
 80037b4:	341a      	adds	r4, #26
 80037b6:	42b5      	cmp	r5, r6
 80037b8:	d11a      	bne.n	80037f0 <_printf_common+0xc8>
 80037ba:	2000      	movs	r0, #0
 80037bc:	e008      	b.n	80037d0 <_printf_common+0xa8>
 80037be:	2301      	movs	r3, #1
 80037c0:	4652      	mov	r2, sl
 80037c2:	4641      	mov	r1, r8
 80037c4:	4638      	mov	r0, r7
 80037c6:	47c8      	blx	r9
 80037c8:	3001      	adds	r0, #1
 80037ca:	d103      	bne.n	80037d4 <_printf_common+0xac>
 80037cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80037d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037d4:	3501      	adds	r5, #1
 80037d6:	e7c6      	b.n	8003766 <_printf_common+0x3e>
 80037d8:	18e1      	adds	r1, r4, r3
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	2030      	movs	r0, #48	@ 0x30
 80037de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80037e2:	4422      	add	r2, r4
 80037e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80037e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80037ec:	3302      	adds	r3, #2
 80037ee:	e7c7      	b.n	8003780 <_printf_common+0x58>
 80037f0:	2301      	movs	r3, #1
 80037f2:	4622      	mov	r2, r4
 80037f4:	4641      	mov	r1, r8
 80037f6:	4638      	mov	r0, r7
 80037f8:	47c8      	blx	r9
 80037fa:	3001      	adds	r0, #1
 80037fc:	d0e6      	beq.n	80037cc <_printf_common+0xa4>
 80037fe:	3601      	adds	r6, #1
 8003800:	e7d9      	b.n	80037b6 <_printf_common+0x8e>
	...

08003804 <_printf_i>:
 8003804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003808:	7e0f      	ldrb	r7, [r1, #24]
 800380a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800380c:	2f78      	cmp	r7, #120	@ 0x78
 800380e:	4691      	mov	r9, r2
 8003810:	4680      	mov	r8, r0
 8003812:	460c      	mov	r4, r1
 8003814:	469a      	mov	sl, r3
 8003816:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800381a:	d807      	bhi.n	800382c <_printf_i+0x28>
 800381c:	2f62      	cmp	r7, #98	@ 0x62
 800381e:	d80a      	bhi.n	8003836 <_printf_i+0x32>
 8003820:	2f00      	cmp	r7, #0
 8003822:	f000 80d2 	beq.w	80039ca <_printf_i+0x1c6>
 8003826:	2f58      	cmp	r7, #88	@ 0x58
 8003828:	f000 80b9 	beq.w	800399e <_printf_i+0x19a>
 800382c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003830:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003834:	e03a      	b.n	80038ac <_printf_i+0xa8>
 8003836:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800383a:	2b15      	cmp	r3, #21
 800383c:	d8f6      	bhi.n	800382c <_printf_i+0x28>
 800383e:	a101      	add	r1, pc, #4	@ (adr r1, 8003844 <_printf_i+0x40>)
 8003840:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003844:	0800389d 	.word	0x0800389d
 8003848:	080038b1 	.word	0x080038b1
 800384c:	0800382d 	.word	0x0800382d
 8003850:	0800382d 	.word	0x0800382d
 8003854:	0800382d 	.word	0x0800382d
 8003858:	0800382d 	.word	0x0800382d
 800385c:	080038b1 	.word	0x080038b1
 8003860:	0800382d 	.word	0x0800382d
 8003864:	0800382d 	.word	0x0800382d
 8003868:	0800382d 	.word	0x0800382d
 800386c:	0800382d 	.word	0x0800382d
 8003870:	080039b1 	.word	0x080039b1
 8003874:	080038db 	.word	0x080038db
 8003878:	0800396b 	.word	0x0800396b
 800387c:	0800382d 	.word	0x0800382d
 8003880:	0800382d 	.word	0x0800382d
 8003884:	080039d3 	.word	0x080039d3
 8003888:	0800382d 	.word	0x0800382d
 800388c:	080038db 	.word	0x080038db
 8003890:	0800382d 	.word	0x0800382d
 8003894:	0800382d 	.word	0x0800382d
 8003898:	08003973 	.word	0x08003973
 800389c:	6833      	ldr	r3, [r6, #0]
 800389e:	1d1a      	adds	r2, r3, #4
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6032      	str	r2, [r6, #0]
 80038a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80038ac:	2301      	movs	r3, #1
 80038ae:	e09d      	b.n	80039ec <_printf_i+0x1e8>
 80038b0:	6833      	ldr	r3, [r6, #0]
 80038b2:	6820      	ldr	r0, [r4, #0]
 80038b4:	1d19      	adds	r1, r3, #4
 80038b6:	6031      	str	r1, [r6, #0]
 80038b8:	0606      	lsls	r6, r0, #24
 80038ba:	d501      	bpl.n	80038c0 <_printf_i+0xbc>
 80038bc:	681d      	ldr	r5, [r3, #0]
 80038be:	e003      	b.n	80038c8 <_printf_i+0xc4>
 80038c0:	0645      	lsls	r5, r0, #25
 80038c2:	d5fb      	bpl.n	80038bc <_printf_i+0xb8>
 80038c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80038c8:	2d00      	cmp	r5, #0
 80038ca:	da03      	bge.n	80038d4 <_printf_i+0xd0>
 80038cc:	232d      	movs	r3, #45	@ 0x2d
 80038ce:	426d      	negs	r5, r5
 80038d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038d4:	4859      	ldr	r0, [pc, #356]	@ (8003a3c <_printf_i+0x238>)
 80038d6:	230a      	movs	r3, #10
 80038d8:	e011      	b.n	80038fe <_printf_i+0xfa>
 80038da:	6821      	ldr	r1, [r4, #0]
 80038dc:	6833      	ldr	r3, [r6, #0]
 80038de:	0608      	lsls	r0, r1, #24
 80038e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80038e4:	d402      	bmi.n	80038ec <_printf_i+0xe8>
 80038e6:	0649      	lsls	r1, r1, #25
 80038e8:	bf48      	it	mi
 80038ea:	b2ad      	uxthmi	r5, r5
 80038ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80038ee:	4853      	ldr	r0, [pc, #332]	@ (8003a3c <_printf_i+0x238>)
 80038f0:	6033      	str	r3, [r6, #0]
 80038f2:	bf14      	ite	ne
 80038f4:	230a      	movne	r3, #10
 80038f6:	2308      	moveq	r3, #8
 80038f8:	2100      	movs	r1, #0
 80038fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80038fe:	6866      	ldr	r6, [r4, #4]
 8003900:	60a6      	str	r6, [r4, #8]
 8003902:	2e00      	cmp	r6, #0
 8003904:	bfa2      	ittt	ge
 8003906:	6821      	ldrge	r1, [r4, #0]
 8003908:	f021 0104 	bicge.w	r1, r1, #4
 800390c:	6021      	strge	r1, [r4, #0]
 800390e:	b90d      	cbnz	r5, 8003914 <_printf_i+0x110>
 8003910:	2e00      	cmp	r6, #0
 8003912:	d04b      	beq.n	80039ac <_printf_i+0x1a8>
 8003914:	4616      	mov	r6, r2
 8003916:	fbb5 f1f3 	udiv	r1, r5, r3
 800391a:	fb03 5711 	mls	r7, r3, r1, r5
 800391e:	5dc7      	ldrb	r7, [r0, r7]
 8003920:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003924:	462f      	mov	r7, r5
 8003926:	42bb      	cmp	r3, r7
 8003928:	460d      	mov	r5, r1
 800392a:	d9f4      	bls.n	8003916 <_printf_i+0x112>
 800392c:	2b08      	cmp	r3, #8
 800392e:	d10b      	bne.n	8003948 <_printf_i+0x144>
 8003930:	6823      	ldr	r3, [r4, #0]
 8003932:	07df      	lsls	r7, r3, #31
 8003934:	d508      	bpl.n	8003948 <_printf_i+0x144>
 8003936:	6923      	ldr	r3, [r4, #16]
 8003938:	6861      	ldr	r1, [r4, #4]
 800393a:	4299      	cmp	r1, r3
 800393c:	bfde      	ittt	le
 800393e:	2330      	movle	r3, #48	@ 0x30
 8003940:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003944:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003948:	1b92      	subs	r2, r2, r6
 800394a:	6122      	str	r2, [r4, #16]
 800394c:	f8cd a000 	str.w	sl, [sp]
 8003950:	464b      	mov	r3, r9
 8003952:	aa03      	add	r2, sp, #12
 8003954:	4621      	mov	r1, r4
 8003956:	4640      	mov	r0, r8
 8003958:	f7ff fee6 	bl	8003728 <_printf_common>
 800395c:	3001      	adds	r0, #1
 800395e:	d14a      	bne.n	80039f6 <_printf_i+0x1f2>
 8003960:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003964:	b004      	add	sp, #16
 8003966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800396a:	6823      	ldr	r3, [r4, #0]
 800396c:	f043 0320 	orr.w	r3, r3, #32
 8003970:	6023      	str	r3, [r4, #0]
 8003972:	4833      	ldr	r0, [pc, #204]	@ (8003a40 <_printf_i+0x23c>)
 8003974:	2778      	movs	r7, #120	@ 0x78
 8003976:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800397a:	6823      	ldr	r3, [r4, #0]
 800397c:	6831      	ldr	r1, [r6, #0]
 800397e:	061f      	lsls	r7, r3, #24
 8003980:	f851 5b04 	ldr.w	r5, [r1], #4
 8003984:	d402      	bmi.n	800398c <_printf_i+0x188>
 8003986:	065f      	lsls	r7, r3, #25
 8003988:	bf48      	it	mi
 800398a:	b2ad      	uxthmi	r5, r5
 800398c:	6031      	str	r1, [r6, #0]
 800398e:	07d9      	lsls	r1, r3, #31
 8003990:	bf44      	itt	mi
 8003992:	f043 0320 	orrmi.w	r3, r3, #32
 8003996:	6023      	strmi	r3, [r4, #0]
 8003998:	b11d      	cbz	r5, 80039a2 <_printf_i+0x19e>
 800399a:	2310      	movs	r3, #16
 800399c:	e7ac      	b.n	80038f8 <_printf_i+0xf4>
 800399e:	4827      	ldr	r0, [pc, #156]	@ (8003a3c <_printf_i+0x238>)
 80039a0:	e7e9      	b.n	8003976 <_printf_i+0x172>
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	f023 0320 	bic.w	r3, r3, #32
 80039a8:	6023      	str	r3, [r4, #0]
 80039aa:	e7f6      	b.n	800399a <_printf_i+0x196>
 80039ac:	4616      	mov	r6, r2
 80039ae:	e7bd      	b.n	800392c <_printf_i+0x128>
 80039b0:	6833      	ldr	r3, [r6, #0]
 80039b2:	6825      	ldr	r5, [r4, #0]
 80039b4:	6961      	ldr	r1, [r4, #20]
 80039b6:	1d18      	adds	r0, r3, #4
 80039b8:	6030      	str	r0, [r6, #0]
 80039ba:	062e      	lsls	r6, r5, #24
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	d501      	bpl.n	80039c4 <_printf_i+0x1c0>
 80039c0:	6019      	str	r1, [r3, #0]
 80039c2:	e002      	b.n	80039ca <_printf_i+0x1c6>
 80039c4:	0668      	lsls	r0, r5, #25
 80039c6:	d5fb      	bpl.n	80039c0 <_printf_i+0x1bc>
 80039c8:	8019      	strh	r1, [r3, #0]
 80039ca:	2300      	movs	r3, #0
 80039cc:	6123      	str	r3, [r4, #16]
 80039ce:	4616      	mov	r6, r2
 80039d0:	e7bc      	b.n	800394c <_printf_i+0x148>
 80039d2:	6833      	ldr	r3, [r6, #0]
 80039d4:	1d1a      	adds	r2, r3, #4
 80039d6:	6032      	str	r2, [r6, #0]
 80039d8:	681e      	ldr	r6, [r3, #0]
 80039da:	6862      	ldr	r2, [r4, #4]
 80039dc:	2100      	movs	r1, #0
 80039de:	4630      	mov	r0, r6
 80039e0:	f7fc fbfe 	bl	80001e0 <memchr>
 80039e4:	b108      	cbz	r0, 80039ea <_printf_i+0x1e6>
 80039e6:	1b80      	subs	r0, r0, r6
 80039e8:	6060      	str	r0, [r4, #4]
 80039ea:	6863      	ldr	r3, [r4, #4]
 80039ec:	6123      	str	r3, [r4, #16]
 80039ee:	2300      	movs	r3, #0
 80039f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039f4:	e7aa      	b.n	800394c <_printf_i+0x148>
 80039f6:	6923      	ldr	r3, [r4, #16]
 80039f8:	4632      	mov	r2, r6
 80039fa:	4649      	mov	r1, r9
 80039fc:	4640      	mov	r0, r8
 80039fe:	47d0      	blx	sl
 8003a00:	3001      	adds	r0, #1
 8003a02:	d0ad      	beq.n	8003960 <_printf_i+0x15c>
 8003a04:	6823      	ldr	r3, [r4, #0]
 8003a06:	079b      	lsls	r3, r3, #30
 8003a08:	d413      	bmi.n	8003a32 <_printf_i+0x22e>
 8003a0a:	68e0      	ldr	r0, [r4, #12]
 8003a0c:	9b03      	ldr	r3, [sp, #12]
 8003a0e:	4298      	cmp	r0, r3
 8003a10:	bfb8      	it	lt
 8003a12:	4618      	movlt	r0, r3
 8003a14:	e7a6      	b.n	8003964 <_printf_i+0x160>
 8003a16:	2301      	movs	r3, #1
 8003a18:	4632      	mov	r2, r6
 8003a1a:	4649      	mov	r1, r9
 8003a1c:	4640      	mov	r0, r8
 8003a1e:	47d0      	blx	sl
 8003a20:	3001      	adds	r0, #1
 8003a22:	d09d      	beq.n	8003960 <_printf_i+0x15c>
 8003a24:	3501      	adds	r5, #1
 8003a26:	68e3      	ldr	r3, [r4, #12]
 8003a28:	9903      	ldr	r1, [sp, #12]
 8003a2a:	1a5b      	subs	r3, r3, r1
 8003a2c:	42ab      	cmp	r3, r5
 8003a2e:	dcf2      	bgt.n	8003a16 <_printf_i+0x212>
 8003a30:	e7eb      	b.n	8003a0a <_printf_i+0x206>
 8003a32:	2500      	movs	r5, #0
 8003a34:	f104 0619 	add.w	r6, r4, #25
 8003a38:	e7f5      	b.n	8003a26 <_printf_i+0x222>
 8003a3a:	bf00      	nop
 8003a3c:	080078d9 	.word	0x080078d9
 8003a40:	080078ea 	.word	0x080078ea

08003a44 <_scanf_float>:
 8003a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a48:	b087      	sub	sp, #28
 8003a4a:	4617      	mov	r7, r2
 8003a4c:	9303      	str	r3, [sp, #12]
 8003a4e:	688b      	ldr	r3, [r1, #8]
 8003a50:	1e5a      	subs	r2, r3, #1
 8003a52:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003a56:	bf81      	itttt	hi
 8003a58:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003a5c:	eb03 0b05 	addhi.w	fp, r3, r5
 8003a60:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003a64:	608b      	strhi	r3, [r1, #8]
 8003a66:	680b      	ldr	r3, [r1, #0]
 8003a68:	460a      	mov	r2, r1
 8003a6a:	f04f 0500 	mov.w	r5, #0
 8003a6e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8003a72:	f842 3b1c 	str.w	r3, [r2], #28
 8003a76:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003a7a:	4680      	mov	r8, r0
 8003a7c:	460c      	mov	r4, r1
 8003a7e:	bf98      	it	ls
 8003a80:	f04f 0b00 	movls.w	fp, #0
 8003a84:	9201      	str	r2, [sp, #4]
 8003a86:	4616      	mov	r6, r2
 8003a88:	46aa      	mov	sl, r5
 8003a8a:	46a9      	mov	r9, r5
 8003a8c:	9502      	str	r5, [sp, #8]
 8003a8e:	68a2      	ldr	r2, [r4, #8]
 8003a90:	b152      	cbz	r2, 8003aa8 <_scanf_float+0x64>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b4e      	cmp	r3, #78	@ 0x4e
 8003a98:	d864      	bhi.n	8003b64 <_scanf_float+0x120>
 8003a9a:	2b40      	cmp	r3, #64	@ 0x40
 8003a9c:	d83c      	bhi.n	8003b18 <_scanf_float+0xd4>
 8003a9e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8003aa2:	b2c8      	uxtb	r0, r1
 8003aa4:	280e      	cmp	r0, #14
 8003aa6:	d93a      	bls.n	8003b1e <_scanf_float+0xda>
 8003aa8:	f1b9 0f00 	cmp.w	r9, #0
 8003aac:	d003      	beq.n	8003ab6 <_scanf_float+0x72>
 8003aae:	6823      	ldr	r3, [r4, #0]
 8003ab0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ab4:	6023      	str	r3, [r4, #0]
 8003ab6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8003aba:	f1ba 0f01 	cmp.w	sl, #1
 8003abe:	f200 8117 	bhi.w	8003cf0 <_scanf_float+0x2ac>
 8003ac2:	9b01      	ldr	r3, [sp, #4]
 8003ac4:	429e      	cmp	r6, r3
 8003ac6:	f200 8108 	bhi.w	8003cda <_scanf_float+0x296>
 8003aca:	2001      	movs	r0, #1
 8003acc:	b007      	add	sp, #28
 8003ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ad2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8003ad6:	2a0d      	cmp	r2, #13
 8003ad8:	d8e6      	bhi.n	8003aa8 <_scanf_float+0x64>
 8003ada:	a101      	add	r1, pc, #4	@ (adr r1, 8003ae0 <_scanf_float+0x9c>)
 8003adc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003ae0:	08003c27 	.word	0x08003c27
 8003ae4:	08003aa9 	.word	0x08003aa9
 8003ae8:	08003aa9 	.word	0x08003aa9
 8003aec:	08003aa9 	.word	0x08003aa9
 8003af0:	08003c87 	.word	0x08003c87
 8003af4:	08003c5f 	.word	0x08003c5f
 8003af8:	08003aa9 	.word	0x08003aa9
 8003afc:	08003aa9 	.word	0x08003aa9
 8003b00:	08003c35 	.word	0x08003c35
 8003b04:	08003aa9 	.word	0x08003aa9
 8003b08:	08003aa9 	.word	0x08003aa9
 8003b0c:	08003aa9 	.word	0x08003aa9
 8003b10:	08003aa9 	.word	0x08003aa9
 8003b14:	08003bed 	.word	0x08003bed
 8003b18:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8003b1c:	e7db      	b.n	8003ad6 <_scanf_float+0x92>
 8003b1e:	290e      	cmp	r1, #14
 8003b20:	d8c2      	bhi.n	8003aa8 <_scanf_float+0x64>
 8003b22:	a001      	add	r0, pc, #4	@ (adr r0, 8003b28 <_scanf_float+0xe4>)
 8003b24:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003b28:	08003bdd 	.word	0x08003bdd
 8003b2c:	08003aa9 	.word	0x08003aa9
 8003b30:	08003bdd 	.word	0x08003bdd
 8003b34:	08003c73 	.word	0x08003c73
 8003b38:	08003aa9 	.word	0x08003aa9
 8003b3c:	08003b85 	.word	0x08003b85
 8003b40:	08003bc3 	.word	0x08003bc3
 8003b44:	08003bc3 	.word	0x08003bc3
 8003b48:	08003bc3 	.word	0x08003bc3
 8003b4c:	08003bc3 	.word	0x08003bc3
 8003b50:	08003bc3 	.word	0x08003bc3
 8003b54:	08003bc3 	.word	0x08003bc3
 8003b58:	08003bc3 	.word	0x08003bc3
 8003b5c:	08003bc3 	.word	0x08003bc3
 8003b60:	08003bc3 	.word	0x08003bc3
 8003b64:	2b6e      	cmp	r3, #110	@ 0x6e
 8003b66:	d809      	bhi.n	8003b7c <_scanf_float+0x138>
 8003b68:	2b60      	cmp	r3, #96	@ 0x60
 8003b6a:	d8b2      	bhi.n	8003ad2 <_scanf_float+0x8e>
 8003b6c:	2b54      	cmp	r3, #84	@ 0x54
 8003b6e:	d07b      	beq.n	8003c68 <_scanf_float+0x224>
 8003b70:	2b59      	cmp	r3, #89	@ 0x59
 8003b72:	d199      	bne.n	8003aa8 <_scanf_float+0x64>
 8003b74:	2d07      	cmp	r5, #7
 8003b76:	d197      	bne.n	8003aa8 <_scanf_float+0x64>
 8003b78:	2508      	movs	r5, #8
 8003b7a:	e02c      	b.n	8003bd6 <_scanf_float+0x192>
 8003b7c:	2b74      	cmp	r3, #116	@ 0x74
 8003b7e:	d073      	beq.n	8003c68 <_scanf_float+0x224>
 8003b80:	2b79      	cmp	r3, #121	@ 0x79
 8003b82:	e7f6      	b.n	8003b72 <_scanf_float+0x12e>
 8003b84:	6821      	ldr	r1, [r4, #0]
 8003b86:	05c8      	lsls	r0, r1, #23
 8003b88:	d51b      	bpl.n	8003bc2 <_scanf_float+0x17e>
 8003b8a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8003b8e:	6021      	str	r1, [r4, #0]
 8003b90:	f109 0901 	add.w	r9, r9, #1
 8003b94:	f1bb 0f00 	cmp.w	fp, #0
 8003b98:	d003      	beq.n	8003ba2 <_scanf_float+0x15e>
 8003b9a:	3201      	adds	r2, #1
 8003b9c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8003ba0:	60a2      	str	r2, [r4, #8]
 8003ba2:	68a3      	ldr	r3, [r4, #8]
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	60a3      	str	r3, [r4, #8]
 8003ba8:	6923      	ldr	r3, [r4, #16]
 8003baa:	3301      	adds	r3, #1
 8003bac:	6123      	str	r3, [r4, #16]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	607b      	str	r3, [r7, #4]
 8003bb6:	f340 8087 	ble.w	8003cc8 <_scanf_float+0x284>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	603b      	str	r3, [r7, #0]
 8003bc0:	e765      	b.n	8003a8e <_scanf_float+0x4a>
 8003bc2:	eb1a 0105 	adds.w	r1, sl, r5
 8003bc6:	f47f af6f 	bne.w	8003aa8 <_scanf_float+0x64>
 8003bca:	6822      	ldr	r2, [r4, #0]
 8003bcc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8003bd0:	6022      	str	r2, [r4, #0]
 8003bd2:	460d      	mov	r5, r1
 8003bd4:	468a      	mov	sl, r1
 8003bd6:	f806 3b01 	strb.w	r3, [r6], #1
 8003bda:	e7e2      	b.n	8003ba2 <_scanf_float+0x15e>
 8003bdc:	6822      	ldr	r2, [r4, #0]
 8003bde:	0610      	lsls	r0, r2, #24
 8003be0:	f57f af62 	bpl.w	8003aa8 <_scanf_float+0x64>
 8003be4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003be8:	6022      	str	r2, [r4, #0]
 8003bea:	e7f4      	b.n	8003bd6 <_scanf_float+0x192>
 8003bec:	f1ba 0f00 	cmp.w	sl, #0
 8003bf0:	d10e      	bne.n	8003c10 <_scanf_float+0x1cc>
 8003bf2:	f1b9 0f00 	cmp.w	r9, #0
 8003bf6:	d10e      	bne.n	8003c16 <_scanf_float+0x1d2>
 8003bf8:	6822      	ldr	r2, [r4, #0]
 8003bfa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003bfe:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003c02:	d108      	bne.n	8003c16 <_scanf_float+0x1d2>
 8003c04:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003c08:	6022      	str	r2, [r4, #0]
 8003c0a:	f04f 0a01 	mov.w	sl, #1
 8003c0e:	e7e2      	b.n	8003bd6 <_scanf_float+0x192>
 8003c10:	f1ba 0f02 	cmp.w	sl, #2
 8003c14:	d055      	beq.n	8003cc2 <_scanf_float+0x27e>
 8003c16:	2d01      	cmp	r5, #1
 8003c18:	d002      	beq.n	8003c20 <_scanf_float+0x1dc>
 8003c1a:	2d04      	cmp	r5, #4
 8003c1c:	f47f af44 	bne.w	8003aa8 <_scanf_float+0x64>
 8003c20:	3501      	adds	r5, #1
 8003c22:	b2ed      	uxtb	r5, r5
 8003c24:	e7d7      	b.n	8003bd6 <_scanf_float+0x192>
 8003c26:	f1ba 0f01 	cmp.w	sl, #1
 8003c2a:	f47f af3d 	bne.w	8003aa8 <_scanf_float+0x64>
 8003c2e:	f04f 0a02 	mov.w	sl, #2
 8003c32:	e7d0      	b.n	8003bd6 <_scanf_float+0x192>
 8003c34:	b97d      	cbnz	r5, 8003c56 <_scanf_float+0x212>
 8003c36:	f1b9 0f00 	cmp.w	r9, #0
 8003c3a:	f47f af38 	bne.w	8003aae <_scanf_float+0x6a>
 8003c3e:	6822      	ldr	r2, [r4, #0]
 8003c40:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003c44:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003c48:	f040 8108 	bne.w	8003e5c <_scanf_float+0x418>
 8003c4c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003c50:	6022      	str	r2, [r4, #0]
 8003c52:	2501      	movs	r5, #1
 8003c54:	e7bf      	b.n	8003bd6 <_scanf_float+0x192>
 8003c56:	2d03      	cmp	r5, #3
 8003c58:	d0e2      	beq.n	8003c20 <_scanf_float+0x1dc>
 8003c5a:	2d05      	cmp	r5, #5
 8003c5c:	e7de      	b.n	8003c1c <_scanf_float+0x1d8>
 8003c5e:	2d02      	cmp	r5, #2
 8003c60:	f47f af22 	bne.w	8003aa8 <_scanf_float+0x64>
 8003c64:	2503      	movs	r5, #3
 8003c66:	e7b6      	b.n	8003bd6 <_scanf_float+0x192>
 8003c68:	2d06      	cmp	r5, #6
 8003c6a:	f47f af1d 	bne.w	8003aa8 <_scanf_float+0x64>
 8003c6e:	2507      	movs	r5, #7
 8003c70:	e7b1      	b.n	8003bd6 <_scanf_float+0x192>
 8003c72:	6822      	ldr	r2, [r4, #0]
 8003c74:	0591      	lsls	r1, r2, #22
 8003c76:	f57f af17 	bpl.w	8003aa8 <_scanf_float+0x64>
 8003c7a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8003c7e:	6022      	str	r2, [r4, #0]
 8003c80:	f8cd 9008 	str.w	r9, [sp, #8]
 8003c84:	e7a7      	b.n	8003bd6 <_scanf_float+0x192>
 8003c86:	6822      	ldr	r2, [r4, #0]
 8003c88:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8003c8c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003c90:	d006      	beq.n	8003ca0 <_scanf_float+0x25c>
 8003c92:	0550      	lsls	r0, r2, #21
 8003c94:	f57f af08 	bpl.w	8003aa8 <_scanf_float+0x64>
 8003c98:	f1b9 0f00 	cmp.w	r9, #0
 8003c9c:	f000 80de 	beq.w	8003e5c <_scanf_float+0x418>
 8003ca0:	0591      	lsls	r1, r2, #22
 8003ca2:	bf58      	it	pl
 8003ca4:	9902      	ldrpl	r1, [sp, #8]
 8003ca6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003caa:	bf58      	it	pl
 8003cac:	eba9 0101 	subpl.w	r1, r9, r1
 8003cb0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8003cb4:	bf58      	it	pl
 8003cb6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003cba:	6022      	str	r2, [r4, #0]
 8003cbc:	f04f 0900 	mov.w	r9, #0
 8003cc0:	e789      	b.n	8003bd6 <_scanf_float+0x192>
 8003cc2:	f04f 0a03 	mov.w	sl, #3
 8003cc6:	e786      	b.n	8003bd6 <_scanf_float+0x192>
 8003cc8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003ccc:	4639      	mov	r1, r7
 8003cce:	4640      	mov	r0, r8
 8003cd0:	4798      	blx	r3
 8003cd2:	2800      	cmp	r0, #0
 8003cd4:	f43f aedb 	beq.w	8003a8e <_scanf_float+0x4a>
 8003cd8:	e6e6      	b.n	8003aa8 <_scanf_float+0x64>
 8003cda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003cde:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003ce2:	463a      	mov	r2, r7
 8003ce4:	4640      	mov	r0, r8
 8003ce6:	4798      	blx	r3
 8003ce8:	6923      	ldr	r3, [r4, #16]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	6123      	str	r3, [r4, #16]
 8003cee:	e6e8      	b.n	8003ac2 <_scanf_float+0x7e>
 8003cf0:	1e6b      	subs	r3, r5, #1
 8003cf2:	2b06      	cmp	r3, #6
 8003cf4:	d824      	bhi.n	8003d40 <_scanf_float+0x2fc>
 8003cf6:	2d02      	cmp	r5, #2
 8003cf8:	d836      	bhi.n	8003d68 <_scanf_float+0x324>
 8003cfa:	9b01      	ldr	r3, [sp, #4]
 8003cfc:	429e      	cmp	r6, r3
 8003cfe:	f67f aee4 	bls.w	8003aca <_scanf_float+0x86>
 8003d02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003d06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003d0a:	463a      	mov	r2, r7
 8003d0c:	4640      	mov	r0, r8
 8003d0e:	4798      	blx	r3
 8003d10:	6923      	ldr	r3, [r4, #16]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	6123      	str	r3, [r4, #16]
 8003d16:	e7f0      	b.n	8003cfa <_scanf_float+0x2b6>
 8003d18:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003d1c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8003d20:	463a      	mov	r2, r7
 8003d22:	4640      	mov	r0, r8
 8003d24:	4798      	blx	r3
 8003d26:	6923      	ldr	r3, [r4, #16]
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	6123      	str	r3, [r4, #16]
 8003d2c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8003d30:	fa5f fa8a 	uxtb.w	sl, sl
 8003d34:	f1ba 0f02 	cmp.w	sl, #2
 8003d38:	d1ee      	bne.n	8003d18 <_scanf_float+0x2d4>
 8003d3a:	3d03      	subs	r5, #3
 8003d3c:	b2ed      	uxtb	r5, r5
 8003d3e:	1b76      	subs	r6, r6, r5
 8003d40:	6823      	ldr	r3, [r4, #0]
 8003d42:	05da      	lsls	r2, r3, #23
 8003d44:	d530      	bpl.n	8003da8 <_scanf_float+0x364>
 8003d46:	055b      	lsls	r3, r3, #21
 8003d48:	d511      	bpl.n	8003d6e <_scanf_float+0x32a>
 8003d4a:	9b01      	ldr	r3, [sp, #4]
 8003d4c:	429e      	cmp	r6, r3
 8003d4e:	f67f aebc 	bls.w	8003aca <_scanf_float+0x86>
 8003d52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003d56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003d5a:	463a      	mov	r2, r7
 8003d5c:	4640      	mov	r0, r8
 8003d5e:	4798      	blx	r3
 8003d60:	6923      	ldr	r3, [r4, #16]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	6123      	str	r3, [r4, #16]
 8003d66:	e7f0      	b.n	8003d4a <_scanf_float+0x306>
 8003d68:	46aa      	mov	sl, r5
 8003d6a:	46b3      	mov	fp, r6
 8003d6c:	e7de      	b.n	8003d2c <_scanf_float+0x2e8>
 8003d6e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003d72:	6923      	ldr	r3, [r4, #16]
 8003d74:	2965      	cmp	r1, #101	@ 0x65
 8003d76:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8003d7a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8003d7e:	6123      	str	r3, [r4, #16]
 8003d80:	d00c      	beq.n	8003d9c <_scanf_float+0x358>
 8003d82:	2945      	cmp	r1, #69	@ 0x45
 8003d84:	d00a      	beq.n	8003d9c <_scanf_float+0x358>
 8003d86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003d8a:	463a      	mov	r2, r7
 8003d8c:	4640      	mov	r0, r8
 8003d8e:	4798      	blx	r3
 8003d90:	6923      	ldr	r3, [r4, #16]
 8003d92:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	1eb5      	subs	r5, r6, #2
 8003d9a:	6123      	str	r3, [r4, #16]
 8003d9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003da0:	463a      	mov	r2, r7
 8003da2:	4640      	mov	r0, r8
 8003da4:	4798      	blx	r3
 8003da6:	462e      	mov	r6, r5
 8003da8:	6822      	ldr	r2, [r4, #0]
 8003daa:	f012 0210 	ands.w	r2, r2, #16
 8003dae:	d001      	beq.n	8003db4 <_scanf_float+0x370>
 8003db0:	2000      	movs	r0, #0
 8003db2:	e68b      	b.n	8003acc <_scanf_float+0x88>
 8003db4:	7032      	strb	r2, [r6, #0]
 8003db6:	6823      	ldr	r3, [r4, #0]
 8003db8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003dbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dc0:	d11c      	bne.n	8003dfc <_scanf_float+0x3b8>
 8003dc2:	9b02      	ldr	r3, [sp, #8]
 8003dc4:	454b      	cmp	r3, r9
 8003dc6:	eba3 0209 	sub.w	r2, r3, r9
 8003dca:	d123      	bne.n	8003e14 <_scanf_float+0x3d0>
 8003dcc:	9901      	ldr	r1, [sp, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	4640      	mov	r0, r8
 8003dd2:	f002 fc05 	bl	80065e0 <_strtod_r>
 8003dd6:	9b03      	ldr	r3, [sp, #12]
 8003dd8:	6821      	ldr	r1, [r4, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f011 0f02 	tst.w	r1, #2
 8003de0:	ec57 6b10 	vmov	r6, r7, d0
 8003de4:	f103 0204 	add.w	r2, r3, #4
 8003de8:	d01f      	beq.n	8003e2a <_scanf_float+0x3e6>
 8003dea:	9903      	ldr	r1, [sp, #12]
 8003dec:	600a      	str	r2, [r1, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	e9c3 6700 	strd	r6, r7, [r3]
 8003df4:	68e3      	ldr	r3, [r4, #12]
 8003df6:	3301      	adds	r3, #1
 8003df8:	60e3      	str	r3, [r4, #12]
 8003dfa:	e7d9      	b.n	8003db0 <_scanf_float+0x36c>
 8003dfc:	9b04      	ldr	r3, [sp, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0e4      	beq.n	8003dcc <_scanf_float+0x388>
 8003e02:	9905      	ldr	r1, [sp, #20]
 8003e04:	230a      	movs	r3, #10
 8003e06:	3101      	adds	r1, #1
 8003e08:	4640      	mov	r0, r8
 8003e0a:	f002 fc69 	bl	80066e0 <_strtol_r>
 8003e0e:	9b04      	ldr	r3, [sp, #16]
 8003e10:	9e05      	ldr	r6, [sp, #20]
 8003e12:	1ac2      	subs	r2, r0, r3
 8003e14:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8003e18:	429e      	cmp	r6, r3
 8003e1a:	bf28      	it	cs
 8003e1c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8003e20:	4910      	ldr	r1, [pc, #64]	@ (8003e64 <_scanf_float+0x420>)
 8003e22:	4630      	mov	r0, r6
 8003e24:	f000 f8e4 	bl	8003ff0 <siprintf>
 8003e28:	e7d0      	b.n	8003dcc <_scanf_float+0x388>
 8003e2a:	f011 0f04 	tst.w	r1, #4
 8003e2e:	9903      	ldr	r1, [sp, #12]
 8003e30:	600a      	str	r2, [r1, #0]
 8003e32:	d1dc      	bne.n	8003dee <_scanf_float+0x3aa>
 8003e34:	681d      	ldr	r5, [r3, #0]
 8003e36:	4632      	mov	r2, r6
 8003e38:	463b      	mov	r3, r7
 8003e3a:	4630      	mov	r0, r6
 8003e3c:	4639      	mov	r1, r7
 8003e3e:	f7fc fe7d 	bl	8000b3c <__aeabi_dcmpun>
 8003e42:	b128      	cbz	r0, 8003e50 <_scanf_float+0x40c>
 8003e44:	4808      	ldr	r0, [pc, #32]	@ (8003e68 <_scanf_float+0x424>)
 8003e46:	f000 f9c5 	bl	80041d4 <nanf>
 8003e4a:	ed85 0a00 	vstr	s0, [r5]
 8003e4e:	e7d1      	b.n	8003df4 <_scanf_float+0x3b0>
 8003e50:	4630      	mov	r0, r6
 8003e52:	4639      	mov	r1, r7
 8003e54:	f7fc fed0 	bl	8000bf8 <__aeabi_d2f>
 8003e58:	6028      	str	r0, [r5, #0]
 8003e5a:	e7cb      	b.n	8003df4 <_scanf_float+0x3b0>
 8003e5c:	f04f 0900 	mov.w	r9, #0
 8003e60:	e629      	b.n	8003ab6 <_scanf_float+0x72>
 8003e62:	bf00      	nop
 8003e64:	080078fb 	.word	0x080078fb
 8003e68:	08007c95 	.word	0x08007c95

08003e6c <std>:
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	b510      	push	{r4, lr}
 8003e70:	4604      	mov	r4, r0
 8003e72:	e9c0 3300 	strd	r3, r3, [r0]
 8003e76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e7a:	6083      	str	r3, [r0, #8]
 8003e7c:	8181      	strh	r1, [r0, #12]
 8003e7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003e80:	81c2      	strh	r2, [r0, #14]
 8003e82:	6183      	str	r3, [r0, #24]
 8003e84:	4619      	mov	r1, r3
 8003e86:	2208      	movs	r2, #8
 8003e88:	305c      	adds	r0, #92	@ 0x5c
 8003e8a:	f000 f914 	bl	80040b6 <memset>
 8003e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec4 <std+0x58>)
 8003e90:	6263      	str	r3, [r4, #36]	@ 0x24
 8003e92:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec8 <std+0x5c>)
 8003e94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003e96:	4b0d      	ldr	r3, [pc, #52]	@ (8003ecc <std+0x60>)
 8003e98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed0 <std+0x64>)
 8003e9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed4 <std+0x68>)
 8003ea0:	6224      	str	r4, [r4, #32]
 8003ea2:	429c      	cmp	r4, r3
 8003ea4:	d006      	beq.n	8003eb4 <std+0x48>
 8003ea6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003eaa:	4294      	cmp	r4, r2
 8003eac:	d002      	beq.n	8003eb4 <std+0x48>
 8003eae:	33d0      	adds	r3, #208	@ 0xd0
 8003eb0:	429c      	cmp	r4, r3
 8003eb2:	d105      	bne.n	8003ec0 <std+0x54>
 8003eb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ebc:	f000 b978 	b.w	80041b0 <__retarget_lock_init_recursive>
 8003ec0:	bd10      	pop	{r4, pc}
 8003ec2:	bf00      	nop
 8003ec4:	08004031 	.word	0x08004031
 8003ec8:	08004053 	.word	0x08004053
 8003ecc:	0800408b 	.word	0x0800408b
 8003ed0:	080040af 	.word	0x080040af
 8003ed4:	20003f68 	.word	0x20003f68

08003ed8 <stdio_exit_handler>:
 8003ed8:	4a02      	ldr	r2, [pc, #8]	@ (8003ee4 <stdio_exit_handler+0xc>)
 8003eda:	4903      	ldr	r1, [pc, #12]	@ (8003ee8 <stdio_exit_handler+0x10>)
 8003edc:	4803      	ldr	r0, [pc, #12]	@ (8003eec <stdio_exit_handler+0x14>)
 8003ede:	f000 b869 	b.w	8003fb4 <_fwalk_sglue>
 8003ee2:	bf00      	nop
 8003ee4:	20000018 	.word	0x20000018
 8003ee8:	08006a9d 	.word	0x08006a9d
 8003eec:	20000028 	.word	0x20000028

08003ef0 <cleanup_stdio>:
 8003ef0:	6841      	ldr	r1, [r0, #4]
 8003ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8003f24 <cleanup_stdio+0x34>)
 8003ef4:	4299      	cmp	r1, r3
 8003ef6:	b510      	push	{r4, lr}
 8003ef8:	4604      	mov	r4, r0
 8003efa:	d001      	beq.n	8003f00 <cleanup_stdio+0x10>
 8003efc:	f002 fdce 	bl	8006a9c <_fflush_r>
 8003f00:	68a1      	ldr	r1, [r4, #8]
 8003f02:	4b09      	ldr	r3, [pc, #36]	@ (8003f28 <cleanup_stdio+0x38>)
 8003f04:	4299      	cmp	r1, r3
 8003f06:	d002      	beq.n	8003f0e <cleanup_stdio+0x1e>
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f002 fdc7 	bl	8006a9c <_fflush_r>
 8003f0e:	68e1      	ldr	r1, [r4, #12]
 8003f10:	4b06      	ldr	r3, [pc, #24]	@ (8003f2c <cleanup_stdio+0x3c>)
 8003f12:	4299      	cmp	r1, r3
 8003f14:	d004      	beq.n	8003f20 <cleanup_stdio+0x30>
 8003f16:	4620      	mov	r0, r4
 8003f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f1c:	f002 bdbe 	b.w	8006a9c <_fflush_r>
 8003f20:	bd10      	pop	{r4, pc}
 8003f22:	bf00      	nop
 8003f24:	20003f68 	.word	0x20003f68
 8003f28:	20003fd0 	.word	0x20003fd0
 8003f2c:	20004038 	.word	0x20004038

08003f30 <global_stdio_init.part.0>:
 8003f30:	b510      	push	{r4, lr}
 8003f32:	4b0b      	ldr	r3, [pc, #44]	@ (8003f60 <global_stdio_init.part.0+0x30>)
 8003f34:	4c0b      	ldr	r4, [pc, #44]	@ (8003f64 <global_stdio_init.part.0+0x34>)
 8003f36:	4a0c      	ldr	r2, [pc, #48]	@ (8003f68 <global_stdio_init.part.0+0x38>)
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2104      	movs	r1, #4
 8003f40:	f7ff ff94 	bl	8003e6c <std>
 8003f44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003f48:	2201      	movs	r2, #1
 8003f4a:	2109      	movs	r1, #9
 8003f4c:	f7ff ff8e 	bl	8003e6c <std>
 8003f50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003f54:	2202      	movs	r2, #2
 8003f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f5a:	2112      	movs	r1, #18
 8003f5c:	f7ff bf86 	b.w	8003e6c <std>
 8003f60:	200040a0 	.word	0x200040a0
 8003f64:	20003f68 	.word	0x20003f68
 8003f68:	08003ed9 	.word	0x08003ed9

08003f6c <__sfp_lock_acquire>:
 8003f6c:	4801      	ldr	r0, [pc, #4]	@ (8003f74 <__sfp_lock_acquire+0x8>)
 8003f6e:	f000 b920 	b.w	80041b2 <__retarget_lock_acquire_recursive>
 8003f72:	bf00      	nop
 8003f74:	200040a9 	.word	0x200040a9

08003f78 <__sfp_lock_release>:
 8003f78:	4801      	ldr	r0, [pc, #4]	@ (8003f80 <__sfp_lock_release+0x8>)
 8003f7a:	f000 b91b 	b.w	80041b4 <__retarget_lock_release_recursive>
 8003f7e:	bf00      	nop
 8003f80:	200040a9 	.word	0x200040a9

08003f84 <__sinit>:
 8003f84:	b510      	push	{r4, lr}
 8003f86:	4604      	mov	r4, r0
 8003f88:	f7ff fff0 	bl	8003f6c <__sfp_lock_acquire>
 8003f8c:	6a23      	ldr	r3, [r4, #32]
 8003f8e:	b11b      	cbz	r3, 8003f98 <__sinit+0x14>
 8003f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f94:	f7ff bff0 	b.w	8003f78 <__sfp_lock_release>
 8003f98:	4b04      	ldr	r3, [pc, #16]	@ (8003fac <__sinit+0x28>)
 8003f9a:	6223      	str	r3, [r4, #32]
 8003f9c:	4b04      	ldr	r3, [pc, #16]	@ (8003fb0 <__sinit+0x2c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1f5      	bne.n	8003f90 <__sinit+0xc>
 8003fa4:	f7ff ffc4 	bl	8003f30 <global_stdio_init.part.0>
 8003fa8:	e7f2      	b.n	8003f90 <__sinit+0xc>
 8003faa:	bf00      	nop
 8003fac:	08003ef1 	.word	0x08003ef1
 8003fb0:	200040a0 	.word	0x200040a0

08003fb4 <_fwalk_sglue>:
 8003fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fb8:	4607      	mov	r7, r0
 8003fba:	4688      	mov	r8, r1
 8003fbc:	4614      	mov	r4, r2
 8003fbe:	2600      	movs	r6, #0
 8003fc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003fc4:	f1b9 0901 	subs.w	r9, r9, #1
 8003fc8:	d505      	bpl.n	8003fd6 <_fwalk_sglue+0x22>
 8003fca:	6824      	ldr	r4, [r4, #0]
 8003fcc:	2c00      	cmp	r4, #0
 8003fce:	d1f7      	bne.n	8003fc0 <_fwalk_sglue+0xc>
 8003fd0:	4630      	mov	r0, r6
 8003fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fd6:	89ab      	ldrh	r3, [r5, #12]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d907      	bls.n	8003fec <_fwalk_sglue+0x38>
 8003fdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	d003      	beq.n	8003fec <_fwalk_sglue+0x38>
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	4638      	mov	r0, r7
 8003fe8:	47c0      	blx	r8
 8003fea:	4306      	orrs	r6, r0
 8003fec:	3568      	adds	r5, #104	@ 0x68
 8003fee:	e7e9      	b.n	8003fc4 <_fwalk_sglue+0x10>

08003ff0 <siprintf>:
 8003ff0:	b40e      	push	{r1, r2, r3}
 8003ff2:	b500      	push	{lr}
 8003ff4:	b09c      	sub	sp, #112	@ 0x70
 8003ff6:	ab1d      	add	r3, sp, #116	@ 0x74
 8003ff8:	9002      	str	r0, [sp, #8]
 8003ffa:	9006      	str	r0, [sp, #24]
 8003ffc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004000:	4809      	ldr	r0, [pc, #36]	@ (8004028 <siprintf+0x38>)
 8004002:	9107      	str	r1, [sp, #28]
 8004004:	9104      	str	r1, [sp, #16]
 8004006:	4909      	ldr	r1, [pc, #36]	@ (800402c <siprintf+0x3c>)
 8004008:	f853 2b04 	ldr.w	r2, [r3], #4
 800400c:	9105      	str	r1, [sp, #20]
 800400e:	6800      	ldr	r0, [r0, #0]
 8004010:	9301      	str	r3, [sp, #4]
 8004012:	a902      	add	r1, sp, #8
 8004014:	f002 fbc2 	bl	800679c <_svfiprintf_r>
 8004018:	9b02      	ldr	r3, [sp, #8]
 800401a:	2200      	movs	r2, #0
 800401c:	701a      	strb	r2, [r3, #0]
 800401e:	b01c      	add	sp, #112	@ 0x70
 8004020:	f85d eb04 	ldr.w	lr, [sp], #4
 8004024:	b003      	add	sp, #12
 8004026:	4770      	bx	lr
 8004028:	20000024 	.word	0x20000024
 800402c:	ffff0208 	.word	0xffff0208

08004030 <__sread>:
 8004030:	b510      	push	{r4, lr}
 8004032:	460c      	mov	r4, r1
 8004034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004038:	f000 f86c 	bl	8004114 <_read_r>
 800403c:	2800      	cmp	r0, #0
 800403e:	bfab      	itete	ge
 8004040:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004042:	89a3      	ldrhlt	r3, [r4, #12]
 8004044:	181b      	addge	r3, r3, r0
 8004046:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800404a:	bfac      	ite	ge
 800404c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800404e:	81a3      	strhlt	r3, [r4, #12]
 8004050:	bd10      	pop	{r4, pc}

08004052 <__swrite>:
 8004052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004056:	461f      	mov	r7, r3
 8004058:	898b      	ldrh	r3, [r1, #12]
 800405a:	05db      	lsls	r3, r3, #23
 800405c:	4605      	mov	r5, r0
 800405e:	460c      	mov	r4, r1
 8004060:	4616      	mov	r6, r2
 8004062:	d505      	bpl.n	8004070 <__swrite+0x1e>
 8004064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004068:	2302      	movs	r3, #2
 800406a:	2200      	movs	r2, #0
 800406c:	f000 f840 	bl	80040f0 <_lseek_r>
 8004070:	89a3      	ldrh	r3, [r4, #12]
 8004072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004076:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800407a:	81a3      	strh	r3, [r4, #12]
 800407c:	4632      	mov	r2, r6
 800407e:	463b      	mov	r3, r7
 8004080:	4628      	mov	r0, r5
 8004082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004086:	f000 b857 	b.w	8004138 <_write_r>

0800408a <__sseek>:
 800408a:	b510      	push	{r4, lr}
 800408c:	460c      	mov	r4, r1
 800408e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004092:	f000 f82d 	bl	80040f0 <_lseek_r>
 8004096:	1c43      	adds	r3, r0, #1
 8004098:	89a3      	ldrh	r3, [r4, #12]
 800409a:	bf15      	itete	ne
 800409c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800409e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80040a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80040a6:	81a3      	strheq	r3, [r4, #12]
 80040a8:	bf18      	it	ne
 80040aa:	81a3      	strhne	r3, [r4, #12]
 80040ac:	bd10      	pop	{r4, pc}

080040ae <__sclose>:
 80040ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040b2:	f000 b80d 	b.w	80040d0 <_close_r>

080040b6 <memset>:
 80040b6:	4402      	add	r2, r0
 80040b8:	4603      	mov	r3, r0
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d100      	bne.n	80040c0 <memset+0xa>
 80040be:	4770      	bx	lr
 80040c0:	f803 1b01 	strb.w	r1, [r3], #1
 80040c4:	e7f9      	b.n	80040ba <memset+0x4>
	...

080040c8 <_localeconv_r>:
 80040c8:	4800      	ldr	r0, [pc, #0]	@ (80040cc <_localeconv_r+0x4>)
 80040ca:	4770      	bx	lr
 80040cc:	20000164 	.word	0x20000164

080040d0 <_close_r>:
 80040d0:	b538      	push	{r3, r4, r5, lr}
 80040d2:	4d06      	ldr	r5, [pc, #24]	@ (80040ec <_close_r+0x1c>)
 80040d4:	2300      	movs	r3, #0
 80040d6:	4604      	mov	r4, r0
 80040d8:	4608      	mov	r0, r1
 80040da:	602b      	str	r3, [r5, #0]
 80040dc:	f7fe ff1c 	bl	8002f18 <_close>
 80040e0:	1c43      	adds	r3, r0, #1
 80040e2:	d102      	bne.n	80040ea <_close_r+0x1a>
 80040e4:	682b      	ldr	r3, [r5, #0]
 80040e6:	b103      	cbz	r3, 80040ea <_close_r+0x1a>
 80040e8:	6023      	str	r3, [r4, #0]
 80040ea:	bd38      	pop	{r3, r4, r5, pc}
 80040ec:	200040a4 	.word	0x200040a4

080040f0 <_lseek_r>:
 80040f0:	b538      	push	{r3, r4, r5, lr}
 80040f2:	4d07      	ldr	r5, [pc, #28]	@ (8004110 <_lseek_r+0x20>)
 80040f4:	4604      	mov	r4, r0
 80040f6:	4608      	mov	r0, r1
 80040f8:	4611      	mov	r1, r2
 80040fa:	2200      	movs	r2, #0
 80040fc:	602a      	str	r2, [r5, #0]
 80040fe:	461a      	mov	r2, r3
 8004100:	f7fe ff31 	bl	8002f66 <_lseek>
 8004104:	1c43      	adds	r3, r0, #1
 8004106:	d102      	bne.n	800410e <_lseek_r+0x1e>
 8004108:	682b      	ldr	r3, [r5, #0]
 800410a:	b103      	cbz	r3, 800410e <_lseek_r+0x1e>
 800410c:	6023      	str	r3, [r4, #0]
 800410e:	bd38      	pop	{r3, r4, r5, pc}
 8004110:	200040a4 	.word	0x200040a4

08004114 <_read_r>:
 8004114:	b538      	push	{r3, r4, r5, lr}
 8004116:	4d07      	ldr	r5, [pc, #28]	@ (8004134 <_read_r+0x20>)
 8004118:	4604      	mov	r4, r0
 800411a:	4608      	mov	r0, r1
 800411c:	4611      	mov	r1, r2
 800411e:	2200      	movs	r2, #0
 8004120:	602a      	str	r2, [r5, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	f7fe febf 	bl	8002ea6 <_read>
 8004128:	1c43      	adds	r3, r0, #1
 800412a:	d102      	bne.n	8004132 <_read_r+0x1e>
 800412c:	682b      	ldr	r3, [r5, #0]
 800412e:	b103      	cbz	r3, 8004132 <_read_r+0x1e>
 8004130:	6023      	str	r3, [r4, #0]
 8004132:	bd38      	pop	{r3, r4, r5, pc}
 8004134:	200040a4 	.word	0x200040a4

08004138 <_write_r>:
 8004138:	b538      	push	{r3, r4, r5, lr}
 800413a:	4d07      	ldr	r5, [pc, #28]	@ (8004158 <_write_r+0x20>)
 800413c:	4604      	mov	r4, r0
 800413e:	4608      	mov	r0, r1
 8004140:	4611      	mov	r1, r2
 8004142:	2200      	movs	r2, #0
 8004144:	602a      	str	r2, [r5, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	f7fe feca 	bl	8002ee0 <_write>
 800414c:	1c43      	adds	r3, r0, #1
 800414e:	d102      	bne.n	8004156 <_write_r+0x1e>
 8004150:	682b      	ldr	r3, [r5, #0]
 8004152:	b103      	cbz	r3, 8004156 <_write_r+0x1e>
 8004154:	6023      	str	r3, [r4, #0]
 8004156:	bd38      	pop	{r3, r4, r5, pc}
 8004158:	200040a4 	.word	0x200040a4

0800415c <__errno>:
 800415c:	4b01      	ldr	r3, [pc, #4]	@ (8004164 <__errno+0x8>)
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	20000024 	.word	0x20000024

08004168 <__libc_init_array>:
 8004168:	b570      	push	{r4, r5, r6, lr}
 800416a:	4d0d      	ldr	r5, [pc, #52]	@ (80041a0 <__libc_init_array+0x38>)
 800416c:	4c0d      	ldr	r4, [pc, #52]	@ (80041a4 <__libc_init_array+0x3c>)
 800416e:	1b64      	subs	r4, r4, r5
 8004170:	10a4      	asrs	r4, r4, #2
 8004172:	2600      	movs	r6, #0
 8004174:	42a6      	cmp	r6, r4
 8004176:	d109      	bne.n	800418c <__libc_init_array+0x24>
 8004178:	4d0b      	ldr	r5, [pc, #44]	@ (80041a8 <__libc_init_array+0x40>)
 800417a:	4c0c      	ldr	r4, [pc, #48]	@ (80041ac <__libc_init_array+0x44>)
 800417c:	f003 fb72 	bl	8007864 <_init>
 8004180:	1b64      	subs	r4, r4, r5
 8004182:	10a4      	asrs	r4, r4, #2
 8004184:	2600      	movs	r6, #0
 8004186:	42a6      	cmp	r6, r4
 8004188:	d105      	bne.n	8004196 <__libc_init_array+0x2e>
 800418a:	bd70      	pop	{r4, r5, r6, pc}
 800418c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004190:	4798      	blx	r3
 8004192:	3601      	adds	r6, #1
 8004194:	e7ee      	b.n	8004174 <__libc_init_array+0xc>
 8004196:	f855 3b04 	ldr.w	r3, [r5], #4
 800419a:	4798      	blx	r3
 800419c:	3601      	adds	r6, #1
 800419e:	e7f2      	b.n	8004186 <__libc_init_array+0x1e>
 80041a0:	08007d00 	.word	0x08007d00
 80041a4:	08007d00 	.word	0x08007d00
 80041a8:	08007d00 	.word	0x08007d00
 80041ac:	08007d04 	.word	0x08007d04

080041b0 <__retarget_lock_init_recursive>:
 80041b0:	4770      	bx	lr

080041b2 <__retarget_lock_acquire_recursive>:
 80041b2:	4770      	bx	lr

080041b4 <__retarget_lock_release_recursive>:
 80041b4:	4770      	bx	lr

080041b6 <memcpy>:
 80041b6:	440a      	add	r2, r1
 80041b8:	4291      	cmp	r1, r2
 80041ba:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80041be:	d100      	bne.n	80041c2 <memcpy+0xc>
 80041c0:	4770      	bx	lr
 80041c2:	b510      	push	{r4, lr}
 80041c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041cc:	4291      	cmp	r1, r2
 80041ce:	d1f9      	bne.n	80041c4 <memcpy+0xe>
 80041d0:	bd10      	pop	{r4, pc}
	...

080041d4 <nanf>:
 80041d4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80041dc <nanf+0x8>
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	7fc00000 	.word	0x7fc00000

080041e0 <quorem>:
 80041e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041e4:	6903      	ldr	r3, [r0, #16]
 80041e6:	690c      	ldr	r4, [r1, #16]
 80041e8:	42a3      	cmp	r3, r4
 80041ea:	4607      	mov	r7, r0
 80041ec:	db7e      	blt.n	80042ec <quorem+0x10c>
 80041ee:	3c01      	subs	r4, #1
 80041f0:	f101 0814 	add.w	r8, r1, #20
 80041f4:	00a3      	lsls	r3, r4, #2
 80041f6:	f100 0514 	add.w	r5, r0, #20
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004200:	9301      	str	r3, [sp, #4]
 8004202:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004206:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800420a:	3301      	adds	r3, #1
 800420c:	429a      	cmp	r2, r3
 800420e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004212:	fbb2 f6f3 	udiv	r6, r2, r3
 8004216:	d32e      	bcc.n	8004276 <quorem+0x96>
 8004218:	f04f 0a00 	mov.w	sl, #0
 800421c:	46c4      	mov	ip, r8
 800421e:	46ae      	mov	lr, r5
 8004220:	46d3      	mov	fp, sl
 8004222:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004226:	b298      	uxth	r0, r3
 8004228:	fb06 a000 	mla	r0, r6, r0, sl
 800422c:	0c02      	lsrs	r2, r0, #16
 800422e:	0c1b      	lsrs	r3, r3, #16
 8004230:	fb06 2303 	mla	r3, r6, r3, r2
 8004234:	f8de 2000 	ldr.w	r2, [lr]
 8004238:	b280      	uxth	r0, r0
 800423a:	b292      	uxth	r2, r2
 800423c:	1a12      	subs	r2, r2, r0
 800423e:	445a      	add	r2, fp
 8004240:	f8de 0000 	ldr.w	r0, [lr]
 8004244:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004248:	b29b      	uxth	r3, r3
 800424a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800424e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004252:	b292      	uxth	r2, r2
 8004254:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004258:	45e1      	cmp	r9, ip
 800425a:	f84e 2b04 	str.w	r2, [lr], #4
 800425e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004262:	d2de      	bcs.n	8004222 <quorem+0x42>
 8004264:	9b00      	ldr	r3, [sp, #0]
 8004266:	58eb      	ldr	r3, [r5, r3]
 8004268:	b92b      	cbnz	r3, 8004276 <quorem+0x96>
 800426a:	9b01      	ldr	r3, [sp, #4]
 800426c:	3b04      	subs	r3, #4
 800426e:	429d      	cmp	r5, r3
 8004270:	461a      	mov	r2, r3
 8004272:	d32f      	bcc.n	80042d4 <quorem+0xf4>
 8004274:	613c      	str	r4, [r7, #16]
 8004276:	4638      	mov	r0, r7
 8004278:	f001 f9c2 	bl	8005600 <__mcmp>
 800427c:	2800      	cmp	r0, #0
 800427e:	db25      	blt.n	80042cc <quorem+0xec>
 8004280:	4629      	mov	r1, r5
 8004282:	2000      	movs	r0, #0
 8004284:	f858 2b04 	ldr.w	r2, [r8], #4
 8004288:	f8d1 c000 	ldr.w	ip, [r1]
 800428c:	fa1f fe82 	uxth.w	lr, r2
 8004290:	fa1f f38c 	uxth.w	r3, ip
 8004294:	eba3 030e 	sub.w	r3, r3, lr
 8004298:	4403      	add	r3, r0
 800429a:	0c12      	lsrs	r2, r2, #16
 800429c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80042a0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042aa:	45c1      	cmp	r9, r8
 80042ac:	f841 3b04 	str.w	r3, [r1], #4
 80042b0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80042b4:	d2e6      	bcs.n	8004284 <quorem+0xa4>
 80042b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80042ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80042be:	b922      	cbnz	r2, 80042ca <quorem+0xea>
 80042c0:	3b04      	subs	r3, #4
 80042c2:	429d      	cmp	r5, r3
 80042c4:	461a      	mov	r2, r3
 80042c6:	d30b      	bcc.n	80042e0 <quorem+0x100>
 80042c8:	613c      	str	r4, [r7, #16]
 80042ca:	3601      	adds	r6, #1
 80042cc:	4630      	mov	r0, r6
 80042ce:	b003      	add	sp, #12
 80042d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042d4:	6812      	ldr	r2, [r2, #0]
 80042d6:	3b04      	subs	r3, #4
 80042d8:	2a00      	cmp	r2, #0
 80042da:	d1cb      	bne.n	8004274 <quorem+0x94>
 80042dc:	3c01      	subs	r4, #1
 80042de:	e7c6      	b.n	800426e <quorem+0x8e>
 80042e0:	6812      	ldr	r2, [r2, #0]
 80042e2:	3b04      	subs	r3, #4
 80042e4:	2a00      	cmp	r2, #0
 80042e6:	d1ef      	bne.n	80042c8 <quorem+0xe8>
 80042e8:	3c01      	subs	r4, #1
 80042ea:	e7ea      	b.n	80042c2 <quorem+0xe2>
 80042ec:	2000      	movs	r0, #0
 80042ee:	e7ee      	b.n	80042ce <quorem+0xee>

080042f0 <_dtoa_r>:
 80042f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f4:	69c7      	ldr	r7, [r0, #28]
 80042f6:	b099      	sub	sp, #100	@ 0x64
 80042f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80042fc:	ec55 4b10 	vmov	r4, r5, d0
 8004300:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004302:	9109      	str	r1, [sp, #36]	@ 0x24
 8004304:	4683      	mov	fp, r0
 8004306:	920e      	str	r2, [sp, #56]	@ 0x38
 8004308:	9313      	str	r3, [sp, #76]	@ 0x4c
 800430a:	b97f      	cbnz	r7, 800432c <_dtoa_r+0x3c>
 800430c:	2010      	movs	r0, #16
 800430e:	f000 fdfd 	bl	8004f0c <malloc>
 8004312:	4602      	mov	r2, r0
 8004314:	f8cb 001c 	str.w	r0, [fp, #28]
 8004318:	b920      	cbnz	r0, 8004324 <_dtoa_r+0x34>
 800431a:	4ba7      	ldr	r3, [pc, #668]	@ (80045b8 <_dtoa_r+0x2c8>)
 800431c:	21ef      	movs	r1, #239	@ 0xef
 800431e:	48a7      	ldr	r0, [pc, #668]	@ (80045bc <_dtoa_r+0x2cc>)
 8004320:	f002 fc2a 	bl	8006b78 <__assert_func>
 8004324:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004328:	6007      	str	r7, [r0, #0]
 800432a:	60c7      	str	r7, [r0, #12]
 800432c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004330:	6819      	ldr	r1, [r3, #0]
 8004332:	b159      	cbz	r1, 800434c <_dtoa_r+0x5c>
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	604a      	str	r2, [r1, #4]
 8004338:	2301      	movs	r3, #1
 800433a:	4093      	lsls	r3, r2
 800433c:	608b      	str	r3, [r1, #8]
 800433e:	4658      	mov	r0, fp
 8004340:	f000 feda 	bl	80050f8 <_Bfree>
 8004344:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	1e2b      	subs	r3, r5, #0
 800434e:	bfb9      	ittee	lt
 8004350:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004354:	9303      	strlt	r3, [sp, #12]
 8004356:	2300      	movge	r3, #0
 8004358:	6033      	strge	r3, [r6, #0]
 800435a:	9f03      	ldr	r7, [sp, #12]
 800435c:	4b98      	ldr	r3, [pc, #608]	@ (80045c0 <_dtoa_r+0x2d0>)
 800435e:	bfbc      	itt	lt
 8004360:	2201      	movlt	r2, #1
 8004362:	6032      	strlt	r2, [r6, #0]
 8004364:	43bb      	bics	r3, r7
 8004366:	d112      	bne.n	800438e <_dtoa_r+0x9e>
 8004368:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800436a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004374:	4323      	orrs	r3, r4
 8004376:	f000 854d 	beq.w	8004e14 <_dtoa_r+0xb24>
 800437a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800437c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80045d4 <_dtoa_r+0x2e4>
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 854f 	beq.w	8004e24 <_dtoa_r+0xb34>
 8004386:	f10a 0303 	add.w	r3, sl, #3
 800438a:	f000 bd49 	b.w	8004e20 <_dtoa_r+0xb30>
 800438e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004392:	2200      	movs	r2, #0
 8004394:	ec51 0b17 	vmov	r0, r1, d7
 8004398:	2300      	movs	r3, #0
 800439a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800439e:	f7fc fb9b 	bl	8000ad8 <__aeabi_dcmpeq>
 80043a2:	4680      	mov	r8, r0
 80043a4:	b158      	cbz	r0, 80043be <_dtoa_r+0xce>
 80043a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80043a8:	2301      	movs	r3, #1
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80043ae:	b113      	cbz	r3, 80043b6 <_dtoa_r+0xc6>
 80043b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80043b2:	4b84      	ldr	r3, [pc, #528]	@ (80045c4 <_dtoa_r+0x2d4>)
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80045d8 <_dtoa_r+0x2e8>
 80043ba:	f000 bd33 	b.w	8004e24 <_dtoa_r+0xb34>
 80043be:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80043c2:	aa16      	add	r2, sp, #88	@ 0x58
 80043c4:	a917      	add	r1, sp, #92	@ 0x5c
 80043c6:	4658      	mov	r0, fp
 80043c8:	f001 fa3a 	bl	8005840 <__d2b>
 80043cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80043d0:	4681      	mov	r9, r0
 80043d2:	2e00      	cmp	r6, #0
 80043d4:	d077      	beq.n	80044c6 <_dtoa_r+0x1d6>
 80043d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80043d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80043dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80043e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80043e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80043ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80043f0:	4619      	mov	r1, r3
 80043f2:	2200      	movs	r2, #0
 80043f4:	4b74      	ldr	r3, [pc, #464]	@ (80045c8 <_dtoa_r+0x2d8>)
 80043f6:	f7fb ff4f 	bl	8000298 <__aeabi_dsub>
 80043fa:	a369      	add	r3, pc, #420	@ (adr r3, 80045a0 <_dtoa_r+0x2b0>)
 80043fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004400:	f7fc f902 	bl	8000608 <__aeabi_dmul>
 8004404:	a368      	add	r3, pc, #416	@ (adr r3, 80045a8 <_dtoa_r+0x2b8>)
 8004406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440a:	f7fb ff47 	bl	800029c <__adddf3>
 800440e:	4604      	mov	r4, r0
 8004410:	4630      	mov	r0, r6
 8004412:	460d      	mov	r5, r1
 8004414:	f7fc f88e 	bl	8000534 <__aeabi_i2d>
 8004418:	a365      	add	r3, pc, #404	@ (adr r3, 80045b0 <_dtoa_r+0x2c0>)
 800441a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441e:	f7fc f8f3 	bl	8000608 <__aeabi_dmul>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	4620      	mov	r0, r4
 8004428:	4629      	mov	r1, r5
 800442a:	f7fb ff37 	bl	800029c <__adddf3>
 800442e:	4604      	mov	r4, r0
 8004430:	460d      	mov	r5, r1
 8004432:	f7fc fb99 	bl	8000b68 <__aeabi_d2iz>
 8004436:	2200      	movs	r2, #0
 8004438:	4607      	mov	r7, r0
 800443a:	2300      	movs	r3, #0
 800443c:	4620      	mov	r0, r4
 800443e:	4629      	mov	r1, r5
 8004440:	f7fc fb54 	bl	8000aec <__aeabi_dcmplt>
 8004444:	b140      	cbz	r0, 8004458 <_dtoa_r+0x168>
 8004446:	4638      	mov	r0, r7
 8004448:	f7fc f874 	bl	8000534 <__aeabi_i2d>
 800444c:	4622      	mov	r2, r4
 800444e:	462b      	mov	r3, r5
 8004450:	f7fc fb42 	bl	8000ad8 <__aeabi_dcmpeq>
 8004454:	b900      	cbnz	r0, 8004458 <_dtoa_r+0x168>
 8004456:	3f01      	subs	r7, #1
 8004458:	2f16      	cmp	r7, #22
 800445a:	d851      	bhi.n	8004500 <_dtoa_r+0x210>
 800445c:	4b5b      	ldr	r3, [pc, #364]	@ (80045cc <_dtoa_r+0x2dc>)
 800445e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004466:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800446a:	f7fc fb3f 	bl	8000aec <__aeabi_dcmplt>
 800446e:	2800      	cmp	r0, #0
 8004470:	d048      	beq.n	8004504 <_dtoa_r+0x214>
 8004472:	3f01      	subs	r7, #1
 8004474:	2300      	movs	r3, #0
 8004476:	9312      	str	r3, [sp, #72]	@ 0x48
 8004478:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800447a:	1b9b      	subs	r3, r3, r6
 800447c:	1e5a      	subs	r2, r3, #1
 800447e:	bf44      	itt	mi
 8004480:	f1c3 0801 	rsbmi	r8, r3, #1
 8004484:	2300      	movmi	r3, #0
 8004486:	9208      	str	r2, [sp, #32]
 8004488:	bf54      	ite	pl
 800448a:	f04f 0800 	movpl.w	r8, #0
 800448e:	9308      	strmi	r3, [sp, #32]
 8004490:	2f00      	cmp	r7, #0
 8004492:	db39      	blt.n	8004508 <_dtoa_r+0x218>
 8004494:	9b08      	ldr	r3, [sp, #32]
 8004496:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004498:	443b      	add	r3, r7
 800449a:	9308      	str	r3, [sp, #32]
 800449c:	2300      	movs	r3, #0
 800449e:	930a      	str	r3, [sp, #40]	@ 0x28
 80044a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044a2:	2b09      	cmp	r3, #9
 80044a4:	d864      	bhi.n	8004570 <_dtoa_r+0x280>
 80044a6:	2b05      	cmp	r3, #5
 80044a8:	bfc4      	itt	gt
 80044aa:	3b04      	subgt	r3, #4
 80044ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80044ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044b0:	f1a3 0302 	sub.w	r3, r3, #2
 80044b4:	bfcc      	ite	gt
 80044b6:	2400      	movgt	r4, #0
 80044b8:	2401      	movle	r4, #1
 80044ba:	2b03      	cmp	r3, #3
 80044bc:	d863      	bhi.n	8004586 <_dtoa_r+0x296>
 80044be:	e8df f003 	tbb	[pc, r3]
 80044c2:	372a      	.short	0x372a
 80044c4:	5535      	.short	0x5535
 80044c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80044ca:	441e      	add	r6, r3
 80044cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	bfc1      	itttt	gt
 80044d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80044d8:	409f      	lslgt	r7, r3
 80044da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80044de:	fa24 f303 	lsrgt.w	r3, r4, r3
 80044e2:	bfd6      	itet	le
 80044e4:	f1c3 0320 	rsble	r3, r3, #32
 80044e8:	ea47 0003 	orrgt.w	r0, r7, r3
 80044ec:	fa04 f003 	lslle.w	r0, r4, r3
 80044f0:	f7fc f810 	bl	8000514 <__aeabi_ui2d>
 80044f4:	2201      	movs	r2, #1
 80044f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80044fa:	3e01      	subs	r6, #1
 80044fc:	9214      	str	r2, [sp, #80]	@ 0x50
 80044fe:	e777      	b.n	80043f0 <_dtoa_r+0x100>
 8004500:	2301      	movs	r3, #1
 8004502:	e7b8      	b.n	8004476 <_dtoa_r+0x186>
 8004504:	9012      	str	r0, [sp, #72]	@ 0x48
 8004506:	e7b7      	b.n	8004478 <_dtoa_r+0x188>
 8004508:	427b      	negs	r3, r7
 800450a:	930a      	str	r3, [sp, #40]	@ 0x28
 800450c:	2300      	movs	r3, #0
 800450e:	eba8 0807 	sub.w	r8, r8, r7
 8004512:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004514:	e7c4      	b.n	80044a0 <_dtoa_r+0x1b0>
 8004516:	2300      	movs	r3, #0
 8004518:	930b      	str	r3, [sp, #44]	@ 0x2c
 800451a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800451c:	2b00      	cmp	r3, #0
 800451e:	dc35      	bgt.n	800458c <_dtoa_r+0x29c>
 8004520:	2301      	movs	r3, #1
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	9307      	str	r3, [sp, #28]
 8004526:	461a      	mov	r2, r3
 8004528:	920e      	str	r2, [sp, #56]	@ 0x38
 800452a:	e00b      	b.n	8004544 <_dtoa_r+0x254>
 800452c:	2301      	movs	r3, #1
 800452e:	e7f3      	b.n	8004518 <_dtoa_r+0x228>
 8004530:	2300      	movs	r3, #0
 8004532:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004534:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004536:	18fb      	adds	r3, r7, r3
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	3301      	adds	r3, #1
 800453c:	2b01      	cmp	r3, #1
 800453e:	9307      	str	r3, [sp, #28]
 8004540:	bfb8      	it	lt
 8004542:	2301      	movlt	r3, #1
 8004544:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004548:	2100      	movs	r1, #0
 800454a:	2204      	movs	r2, #4
 800454c:	f102 0514 	add.w	r5, r2, #20
 8004550:	429d      	cmp	r5, r3
 8004552:	d91f      	bls.n	8004594 <_dtoa_r+0x2a4>
 8004554:	6041      	str	r1, [r0, #4]
 8004556:	4658      	mov	r0, fp
 8004558:	f000 fd8e 	bl	8005078 <_Balloc>
 800455c:	4682      	mov	sl, r0
 800455e:	2800      	cmp	r0, #0
 8004560:	d13c      	bne.n	80045dc <_dtoa_r+0x2ec>
 8004562:	4b1b      	ldr	r3, [pc, #108]	@ (80045d0 <_dtoa_r+0x2e0>)
 8004564:	4602      	mov	r2, r0
 8004566:	f240 11af 	movw	r1, #431	@ 0x1af
 800456a:	e6d8      	b.n	800431e <_dtoa_r+0x2e>
 800456c:	2301      	movs	r3, #1
 800456e:	e7e0      	b.n	8004532 <_dtoa_r+0x242>
 8004570:	2401      	movs	r4, #1
 8004572:	2300      	movs	r3, #0
 8004574:	9309      	str	r3, [sp, #36]	@ 0x24
 8004576:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004578:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	9307      	str	r3, [sp, #28]
 8004580:	2200      	movs	r2, #0
 8004582:	2312      	movs	r3, #18
 8004584:	e7d0      	b.n	8004528 <_dtoa_r+0x238>
 8004586:	2301      	movs	r3, #1
 8004588:	930b      	str	r3, [sp, #44]	@ 0x2c
 800458a:	e7f5      	b.n	8004578 <_dtoa_r+0x288>
 800458c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	9307      	str	r3, [sp, #28]
 8004592:	e7d7      	b.n	8004544 <_dtoa_r+0x254>
 8004594:	3101      	adds	r1, #1
 8004596:	0052      	lsls	r2, r2, #1
 8004598:	e7d8      	b.n	800454c <_dtoa_r+0x25c>
 800459a:	bf00      	nop
 800459c:	f3af 8000 	nop.w
 80045a0:	636f4361 	.word	0x636f4361
 80045a4:	3fd287a7 	.word	0x3fd287a7
 80045a8:	8b60c8b3 	.word	0x8b60c8b3
 80045ac:	3fc68a28 	.word	0x3fc68a28
 80045b0:	509f79fb 	.word	0x509f79fb
 80045b4:	3fd34413 	.word	0x3fd34413
 80045b8:	0800790d 	.word	0x0800790d
 80045bc:	08007924 	.word	0x08007924
 80045c0:	7ff00000 	.word	0x7ff00000
 80045c4:	080078d8 	.word	0x080078d8
 80045c8:	3ff80000 	.word	0x3ff80000
 80045cc:	08007a20 	.word	0x08007a20
 80045d0:	0800797c 	.word	0x0800797c
 80045d4:	08007909 	.word	0x08007909
 80045d8:	080078d7 	.word	0x080078d7
 80045dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80045e0:	6018      	str	r0, [r3, #0]
 80045e2:	9b07      	ldr	r3, [sp, #28]
 80045e4:	2b0e      	cmp	r3, #14
 80045e6:	f200 80a4 	bhi.w	8004732 <_dtoa_r+0x442>
 80045ea:	2c00      	cmp	r4, #0
 80045ec:	f000 80a1 	beq.w	8004732 <_dtoa_r+0x442>
 80045f0:	2f00      	cmp	r7, #0
 80045f2:	dd33      	ble.n	800465c <_dtoa_r+0x36c>
 80045f4:	4bad      	ldr	r3, [pc, #692]	@ (80048ac <_dtoa_r+0x5bc>)
 80045f6:	f007 020f 	and.w	r2, r7, #15
 80045fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045fe:	ed93 7b00 	vldr	d7, [r3]
 8004602:	05f8      	lsls	r0, r7, #23
 8004604:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004608:	ea4f 1427 	mov.w	r4, r7, asr #4
 800460c:	d516      	bpl.n	800463c <_dtoa_r+0x34c>
 800460e:	4ba8      	ldr	r3, [pc, #672]	@ (80048b0 <_dtoa_r+0x5c0>)
 8004610:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004614:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004618:	f7fc f920 	bl	800085c <__aeabi_ddiv>
 800461c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004620:	f004 040f 	and.w	r4, r4, #15
 8004624:	2603      	movs	r6, #3
 8004626:	4da2      	ldr	r5, [pc, #648]	@ (80048b0 <_dtoa_r+0x5c0>)
 8004628:	b954      	cbnz	r4, 8004640 <_dtoa_r+0x350>
 800462a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800462e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004632:	f7fc f913 	bl	800085c <__aeabi_ddiv>
 8004636:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800463a:	e028      	b.n	800468e <_dtoa_r+0x39e>
 800463c:	2602      	movs	r6, #2
 800463e:	e7f2      	b.n	8004626 <_dtoa_r+0x336>
 8004640:	07e1      	lsls	r1, r4, #31
 8004642:	d508      	bpl.n	8004656 <_dtoa_r+0x366>
 8004644:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004648:	e9d5 2300 	ldrd	r2, r3, [r5]
 800464c:	f7fb ffdc 	bl	8000608 <__aeabi_dmul>
 8004650:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004654:	3601      	adds	r6, #1
 8004656:	1064      	asrs	r4, r4, #1
 8004658:	3508      	adds	r5, #8
 800465a:	e7e5      	b.n	8004628 <_dtoa_r+0x338>
 800465c:	f000 80d2 	beq.w	8004804 <_dtoa_r+0x514>
 8004660:	427c      	negs	r4, r7
 8004662:	4b92      	ldr	r3, [pc, #584]	@ (80048ac <_dtoa_r+0x5bc>)
 8004664:	4d92      	ldr	r5, [pc, #584]	@ (80048b0 <_dtoa_r+0x5c0>)
 8004666:	f004 020f 	and.w	r2, r4, #15
 800466a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004672:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004676:	f7fb ffc7 	bl	8000608 <__aeabi_dmul>
 800467a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800467e:	1124      	asrs	r4, r4, #4
 8004680:	2300      	movs	r3, #0
 8004682:	2602      	movs	r6, #2
 8004684:	2c00      	cmp	r4, #0
 8004686:	f040 80b2 	bne.w	80047ee <_dtoa_r+0x4fe>
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1d3      	bne.n	8004636 <_dtoa_r+0x346>
 800468e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004690:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 80b7 	beq.w	8004808 <_dtoa_r+0x518>
 800469a:	4b86      	ldr	r3, [pc, #536]	@ (80048b4 <_dtoa_r+0x5c4>)
 800469c:	2200      	movs	r2, #0
 800469e:	4620      	mov	r0, r4
 80046a0:	4629      	mov	r1, r5
 80046a2:	f7fc fa23 	bl	8000aec <__aeabi_dcmplt>
 80046a6:	2800      	cmp	r0, #0
 80046a8:	f000 80ae 	beq.w	8004808 <_dtoa_r+0x518>
 80046ac:	9b07      	ldr	r3, [sp, #28]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 80aa 	beq.w	8004808 <_dtoa_r+0x518>
 80046b4:	9b00      	ldr	r3, [sp, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	dd37      	ble.n	800472a <_dtoa_r+0x43a>
 80046ba:	1e7b      	subs	r3, r7, #1
 80046bc:	9304      	str	r3, [sp, #16]
 80046be:	4620      	mov	r0, r4
 80046c0:	4b7d      	ldr	r3, [pc, #500]	@ (80048b8 <_dtoa_r+0x5c8>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	4629      	mov	r1, r5
 80046c6:	f7fb ff9f 	bl	8000608 <__aeabi_dmul>
 80046ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046ce:	9c00      	ldr	r4, [sp, #0]
 80046d0:	3601      	adds	r6, #1
 80046d2:	4630      	mov	r0, r6
 80046d4:	f7fb ff2e 	bl	8000534 <__aeabi_i2d>
 80046d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80046dc:	f7fb ff94 	bl	8000608 <__aeabi_dmul>
 80046e0:	4b76      	ldr	r3, [pc, #472]	@ (80048bc <_dtoa_r+0x5cc>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	f7fb fdda 	bl	800029c <__adddf3>
 80046e8:	4605      	mov	r5, r0
 80046ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80046ee:	2c00      	cmp	r4, #0
 80046f0:	f040 808d 	bne.w	800480e <_dtoa_r+0x51e>
 80046f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046f8:	4b71      	ldr	r3, [pc, #452]	@ (80048c0 <_dtoa_r+0x5d0>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	f7fb fdcc 	bl	8000298 <__aeabi_dsub>
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004708:	462a      	mov	r2, r5
 800470a:	4633      	mov	r3, r6
 800470c:	f7fc fa0c 	bl	8000b28 <__aeabi_dcmpgt>
 8004710:	2800      	cmp	r0, #0
 8004712:	f040 828b 	bne.w	8004c2c <_dtoa_r+0x93c>
 8004716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800471a:	462a      	mov	r2, r5
 800471c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004720:	f7fc f9e4 	bl	8000aec <__aeabi_dcmplt>
 8004724:	2800      	cmp	r0, #0
 8004726:	f040 8128 	bne.w	800497a <_dtoa_r+0x68a>
 800472a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800472e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004732:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004734:	2b00      	cmp	r3, #0
 8004736:	f2c0 815a 	blt.w	80049ee <_dtoa_r+0x6fe>
 800473a:	2f0e      	cmp	r7, #14
 800473c:	f300 8157 	bgt.w	80049ee <_dtoa_r+0x6fe>
 8004740:	4b5a      	ldr	r3, [pc, #360]	@ (80048ac <_dtoa_r+0x5bc>)
 8004742:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004746:	ed93 7b00 	vldr	d7, [r3]
 800474a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800474c:	2b00      	cmp	r3, #0
 800474e:	ed8d 7b00 	vstr	d7, [sp]
 8004752:	da03      	bge.n	800475c <_dtoa_r+0x46c>
 8004754:	9b07      	ldr	r3, [sp, #28]
 8004756:	2b00      	cmp	r3, #0
 8004758:	f340 8101 	ble.w	800495e <_dtoa_r+0x66e>
 800475c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004760:	4656      	mov	r6, sl
 8004762:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004766:	4620      	mov	r0, r4
 8004768:	4629      	mov	r1, r5
 800476a:	f7fc f877 	bl	800085c <__aeabi_ddiv>
 800476e:	f7fc f9fb 	bl	8000b68 <__aeabi_d2iz>
 8004772:	4680      	mov	r8, r0
 8004774:	f7fb fede 	bl	8000534 <__aeabi_i2d>
 8004778:	e9dd 2300 	ldrd	r2, r3, [sp]
 800477c:	f7fb ff44 	bl	8000608 <__aeabi_dmul>
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4620      	mov	r0, r4
 8004786:	4629      	mov	r1, r5
 8004788:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800478c:	f7fb fd84 	bl	8000298 <__aeabi_dsub>
 8004790:	f806 4b01 	strb.w	r4, [r6], #1
 8004794:	9d07      	ldr	r5, [sp, #28]
 8004796:	eba6 040a 	sub.w	r4, r6, sl
 800479a:	42a5      	cmp	r5, r4
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	f040 8117 	bne.w	80049d2 <_dtoa_r+0x6e2>
 80047a4:	f7fb fd7a 	bl	800029c <__adddf3>
 80047a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80047ac:	4604      	mov	r4, r0
 80047ae:	460d      	mov	r5, r1
 80047b0:	f7fc f9ba 	bl	8000b28 <__aeabi_dcmpgt>
 80047b4:	2800      	cmp	r0, #0
 80047b6:	f040 80f9 	bne.w	80049ac <_dtoa_r+0x6bc>
 80047ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80047be:	4620      	mov	r0, r4
 80047c0:	4629      	mov	r1, r5
 80047c2:	f7fc f989 	bl	8000ad8 <__aeabi_dcmpeq>
 80047c6:	b118      	cbz	r0, 80047d0 <_dtoa_r+0x4e0>
 80047c8:	f018 0f01 	tst.w	r8, #1
 80047cc:	f040 80ee 	bne.w	80049ac <_dtoa_r+0x6bc>
 80047d0:	4649      	mov	r1, r9
 80047d2:	4658      	mov	r0, fp
 80047d4:	f000 fc90 	bl	80050f8 <_Bfree>
 80047d8:	2300      	movs	r3, #0
 80047da:	7033      	strb	r3, [r6, #0]
 80047dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80047de:	3701      	adds	r7, #1
 80047e0:	601f      	str	r7, [r3, #0]
 80047e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 831d 	beq.w	8004e24 <_dtoa_r+0xb34>
 80047ea:	601e      	str	r6, [r3, #0]
 80047ec:	e31a      	b.n	8004e24 <_dtoa_r+0xb34>
 80047ee:	07e2      	lsls	r2, r4, #31
 80047f0:	d505      	bpl.n	80047fe <_dtoa_r+0x50e>
 80047f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80047f6:	f7fb ff07 	bl	8000608 <__aeabi_dmul>
 80047fa:	3601      	adds	r6, #1
 80047fc:	2301      	movs	r3, #1
 80047fe:	1064      	asrs	r4, r4, #1
 8004800:	3508      	adds	r5, #8
 8004802:	e73f      	b.n	8004684 <_dtoa_r+0x394>
 8004804:	2602      	movs	r6, #2
 8004806:	e742      	b.n	800468e <_dtoa_r+0x39e>
 8004808:	9c07      	ldr	r4, [sp, #28]
 800480a:	9704      	str	r7, [sp, #16]
 800480c:	e761      	b.n	80046d2 <_dtoa_r+0x3e2>
 800480e:	4b27      	ldr	r3, [pc, #156]	@ (80048ac <_dtoa_r+0x5bc>)
 8004810:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004812:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004816:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800481a:	4454      	add	r4, sl
 800481c:	2900      	cmp	r1, #0
 800481e:	d053      	beq.n	80048c8 <_dtoa_r+0x5d8>
 8004820:	4928      	ldr	r1, [pc, #160]	@ (80048c4 <_dtoa_r+0x5d4>)
 8004822:	2000      	movs	r0, #0
 8004824:	f7fc f81a 	bl	800085c <__aeabi_ddiv>
 8004828:	4633      	mov	r3, r6
 800482a:	462a      	mov	r2, r5
 800482c:	f7fb fd34 	bl	8000298 <__aeabi_dsub>
 8004830:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004834:	4656      	mov	r6, sl
 8004836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800483a:	f7fc f995 	bl	8000b68 <__aeabi_d2iz>
 800483e:	4605      	mov	r5, r0
 8004840:	f7fb fe78 	bl	8000534 <__aeabi_i2d>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800484c:	f7fb fd24 	bl	8000298 <__aeabi_dsub>
 8004850:	3530      	adds	r5, #48	@ 0x30
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800485a:	f806 5b01 	strb.w	r5, [r6], #1
 800485e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004862:	f7fc f943 	bl	8000aec <__aeabi_dcmplt>
 8004866:	2800      	cmp	r0, #0
 8004868:	d171      	bne.n	800494e <_dtoa_r+0x65e>
 800486a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800486e:	4911      	ldr	r1, [pc, #68]	@ (80048b4 <_dtoa_r+0x5c4>)
 8004870:	2000      	movs	r0, #0
 8004872:	f7fb fd11 	bl	8000298 <__aeabi_dsub>
 8004876:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800487a:	f7fc f937 	bl	8000aec <__aeabi_dcmplt>
 800487e:	2800      	cmp	r0, #0
 8004880:	f040 8095 	bne.w	80049ae <_dtoa_r+0x6be>
 8004884:	42a6      	cmp	r6, r4
 8004886:	f43f af50 	beq.w	800472a <_dtoa_r+0x43a>
 800488a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800488e:	4b0a      	ldr	r3, [pc, #40]	@ (80048b8 <_dtoa_r+0x5c8>)
 8004890:	2200      	movs	r2, #0
 8004892:	f7fb feb9 	bl	8000608 <__aeabi_dmul>
 8004896:	4b08      	ldr	r3, [pc, #32]	@ (80048b8 <_dtoa_r+0x5c8>)
 8004898:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800489c:	2200      	movs	r2, #0
 800489e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048a2:	f7fb feb1 	bl	8000608 <__aeabi_dmul>
 80048a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048aa:	e7c4      	b.n	8004836 <_dtoa_r+0x546>
 80048ac:	08007a20 	.word	0x08007a20
 80048b0:	080079f8 	.word	0x080079f8
 80048b4:	3ff00000 	.word	0x3ff00000
 80048b8:	40240000 	.word	0x40240000
 80048bc:	401c0000 	.word	0x401c0000
 80048c0:	40140000 	.word	0x40140000
 80048c4:	3fe00000 	.word	0x3fe00000
 80048c8:	4631      	mov	r1, r6
 80048ca:	4628      	mov	r0, r5
 80048cc:	f7fb fe9c 	bl	8000608 <__aeabi_dmul>
 80048d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80048d4:	9415      	str	r4, [sp, #84]	@ 0x54
 80048d6:	4656      	mov	r6, sl
 80048d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048dc:	f7fc f944 	bl	8000b68 <__aeabi_d2iz>
 80048e0:	4605      	mov	r5, r0
 80048e2:	f7fb fe27 	bl	8000534 <__aeabi_i2d>
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048ee:	f7fb fcd3 	bl	8000298 <__aeabi_dsub>
 80048f2:	3530      	adds	r5, #48	@ 0x30
 80048f4:	f806 5b01 	strb.w	r5, [r6], #1
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	42a6      	cmp	r6, r4
 80048fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004902:	f04f 0200 	mov.w	r2, #0
 8004906:	d124      	bne.n	8004952 <_dtoa_r+0x662>
 8004908:	4bac      	ldr	r3, [pc, #688]	@ (8004bbc <_dtoa_r+0x8cc>)
 800490a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800490e:	f7fb fcc5 	bl	800029c <__adddf3>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800491a:	f7fc f905 	bl	8000b28 <__aeabi_dcmpgt>
 800491e:	2800      	cmp	r0, #0
 8004920:	d145      	bne.n	80049ae <_dtoa_r+0x6be>
 8004922:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004926:	49a5      	ldr	r1, [pc, #660]	@ (8004bbc <_dtoa_r+0x8cc>)
 8004928:	2000      	movs	r0, #0
 800492a:	f7fb fcb5 	bl	8000298 <__aeabi_dsub>
 800492e:	4602      	mov	r2, r0
 8004930:	460b      	mov	r3, r1
 8004932:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004936:	f7fc f8d9 	bl	8000aec <__aeabi_dcmplt>
 800493a:	2800      	cmp	r0, #0
 800493c:	f43f aef5 	beq.w	800472a <_dtoa_r+0x43a>
 8004940:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004942:	1e73      	subs	r3, r6, #1
 8004944:	9315      	str	r3, [sp, #84]	@ 0x54
 8004946:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800494a:	2b30      	cmp	r3, #48	@ 0x30
 800494c:	d0f8      	beq.n	8004940 <_dtoa_r+0x650>
 800494e:	9f04      	ldr	r7, [sp, #16]
 8004950:	e73e      	b.n	80047d0 <_dtoa_r+0x4e0>
 8004952:	4b9b      	ldr	r3, [pc, #620]	@ (8004bc0 <_dtoa_r+0x8d0>)
 8004954:	f7fb fe58 	bl	8000608 <__aeabi_dmul>
 8004958:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800495c:	e7bc      	b.n	80048d8 <_dtoa_r+0x5e8>
 800495e:	d10c      	bne.n	800497a <_dtoa_r+0x68a>
 8004960:	4b98      	ldr	r3, [pc, #608]	@ (8004bc4 <_dtoa_r+0x8d4>)
 8004962:	2200      	movs	r2, #0
 8004964:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004968:	f7fb fe4e 	bl	8000608 <__aeabi_dmul>
 800496c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004970:	f7fc f8d0 	bl	8000b14 <__aeabi_dcmpge>
 8004974:	2800      	cmp	r0, #0
 8004976:	f000 8157 	beq.w	8004c28 <_dtoa_r+0x938>
 800497a:	2400      	movs	r4, #0
 800497c:	4625      	mov	r5, r4
 800497e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004980:	43db      	mvns	r3, r3
 8004982:	9304      	str	r3, [sp, #16]
 8004984:	4656      	mov	r6, sl
 8004986:	2700      	movs	r7, #0
 8004988:	4621      	mov	r1, r4
 800498a:	4658      	mov	r0, fp
 800498c:	f000 fbb4 	bl	80050f8 <_Bfree>
 8004990:	2d00      	cmp	r5, #0
 8004992:	d0dc      	beq.n	800494e <_dtoa_r+0x65e>
 8004994:	b12f      	cbz	r7, 80049a2 <_dtoa_r+0x6b2>
 8004996:	42af      	cmp	r7, r5
 8004998:	d003      	beq.n	80049a2 <_dtoa_r+0x6b2>
 800499a:	4639      	mov	r1, r7
 800499c:	4658      	mov	r0, fp
 800499e:	f000 fbab 	bl	80050f8 <_Bfree>
 80049a2:	4629      	mov	r1, r5
 80049a4:	4658      	mov	r0, fp
 80049a6:	f000 fba7 	bl	80050f8 <_Bfree>
 80049aa:	e7d0      	b.n	800494e <_dtoa_r+0x65e>
 80049ac:	9704      	str	r7, [sp, #16]
 80049ae:	4633      	mov	r3, r6
 80049b0:	461e      	mov	r6, r3
 80049b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80049b6:	2a39      	cmp	r2, #57	@ 0x39
 80049b8:	d107      	bne.n	80049ca <_dtoa_r+0x6da>
 80049ba:	459a      	cmp	sl, r3
 80049bc:	d1f8      	bne.n	80049b0 <_dtoa_r+0x6c0>
 80049be:	9a04      	ldr	r2, [sp, #16]
 80049c0:	3201      	adds	r2, #1
 80049c2:	9204      	str	r2, [sp, #16]
 80049c4:	2230      	movs	r2, #48	@ 0x30
 80049c6:	f88a 2000 	strb.w	r2, [sl]
 80049ca:	781a      	ldrb	r2, [r3, #0]
 80049cc:	3201      	adds	r2, #1
 80049ce:	701a      	strb	r2, [r3, #0]
 80049d0:	e7bd      	b.n	800494e <_dtoa_r+0x65e>
 80049d2:	4b7b      	ldr	r3, [pc, #492]	@ (8004bc0 <_dtoa_r+0x8d0>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	f7fb fe17 	bl	8000608 <__aeabi_dmul>
 80049da:	2200      	movs	r2, #0
 80049dc:	2300      	movs	r3, #0
 80049de:	4604      	mov	r4, r0
 80049e0:	460d      	mov	r5, r1
 80049e2:	f7fc f879 	bl	8000ad8 <__aeabi_dcmpeq>
 80049e6:	2800      	cmp	r0, #0
 80049e8:	f43f aebb 	beq.w	8004762 <_dtoa_r+0x472>
 80049ec:	e6f0      	b.n	80047d0 <_dtoa_r+0x4e0>
 80049ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80049f0:	2a00      	cmp	r2, #0
 80049f2:	f000 80db 	beq.w	8004bac <_dtoa_r+0x8bc>
 80049f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049f8:	2a01      	cmp	r2, #1
 80049fa:	f300 80bf 	bgt.w	8004b7c <_dtoa_r+0x88c>
 80049fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004a00:	2a00      	cmp	r2, #0
 8004a02:	f000 80b7 	beq.w	8004b74 <_dtoa_r+0x884>
 8004a06:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004a0a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004a0c:	4646      	mov	r6, r8
 8004a0e:	9a08      	ldr	r2, [sp, #32]
 8004a10:	2101      	movs	r1, #1
 8004a12:	441a      	add	r2, r3
 8004a14:	4658      	mov	r0, fp
 8004a16:	4498      	add	r8, r3
 8004a18:	9208      	str	r2, [sp, #32]
 8004a1a:	f000 fc6b 	bl	80052f4 <__i2b>
 8004a1e:	4605      	mov	r5, r0
 8004a20:	b15e      	cbz	r6, 8004a3a <_dtoa_r+0x74a>
 8004a22:	9b08      	ldr	r3, [sp, #32]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	dd08      	ble.n	8004a3a <_dtoa_r+0x74a>
 8004a28:	42b3      	cmp	r3, r6
 8004a2a:	9a08      	ldr	r2, [sp, #32]
 8004a2c:	bfa8      	it	ge
 8004a2e:	4633      	movge	r3, r6
 8004a30:	eba8 0803 	sub.w	r8, r8, r3
 8004a34:	1af6      	subs	r6, r6, r3
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	9308      	str	r3, [sp, #32]
 8004a3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a3c:	b1f3      	cbz	r3, 8004a7c <_dtoa_r+0x78c>
 8004a3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 80b7 	beq.w	8004bb4 <_dtoa_r+0x8c4>
 8004a46:	b18c      	cbz	r4, 8004a6c <_dtoa_r+0x77c>
 8004a48:	4629      	mov	r1, r5
 8004a4a:	4622      	mov	r2, r4
 8004a4c:	4658      	mov	r0, fp
 8004a4e:	f000 fd11 	bl	8005474 <__pow5mult>
 8004a52:	464a      	mov	r2, r9
 8004a54:	4601      	mov	r1, r0
 8004a56:	4605      	mov	r5, r0
 8004a58:	4658      	mov	r0, fp
 8004a5a:	f000 fc61 	bl	8005320 <__multiply>
 8004a5e:	4649      	mov	r1, r9
 8004a60:	9004      	str	r0, [sp, #16]
 8004a62:	4658      	mov	r0, fp
 8004a64:	f000 fb48 	bl	80050f8 <_Bfree>
 8004a68:	9b04      	ldr	r3, [sp, #16]
 8004a6a:	4699      	mov	r9, r3
 8004a6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a6e:	1b1a      	subs	r2, r3, r4
 8004a70:	d004      	beq.n	8004a7c <_dtoa_r+0x78c>
 8004a72:	4649      	mov	r1, r9
 8004a74:	4658      	mov	r0, fp
 8004a76:	f000 fcfd 	bl	8005474 <__pow5mult>
 8004a7a:	4681      	mov	r9, r0
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	4658      	mov	r0, fp
 8004a80:	f000 fc38 	bl	80052f4 <__i2b>
 8004a84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004a86:	4604      	mov	r4, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 81cf 	beq.w	8004e2c <_dtoa_r+0xb3c>
 8004a8e:	461a      	mov	r2, r3
 8004a90:	4601      	mov	r1, r0
 8004a92:	4658      	mov	r0, fp
 8004a94:	f000 fcee 	bl	8005474 <__pow5mult>
 8004a98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	4604      	mov	r4, r0
 8004a9e:	f300 8095 	bgt.w	8004bcc <_dtoa_r+0x8dc>
 8004aa2:	9b02      	ldr	r3, [sp, #8]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f040 8087 	bne.w	8004bb8 <_dtoa_r+0x8c8>
 8004aaa:	9b03      	ldr	r3, [sp, #12]
 8004aac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f040 8089 	bne.w	8004bc8 <_dtoa_r+0x8d8>
 8004ab6:	9b03      	ldr	r3, [sp, #12]
 8004ab8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004abc:	0d1b      	lsrs	r3, r3, #20
 8004abe:	051b      	lsls	r3, r3, #20
 8004ac0:	b12b      	cbz	r3, 8004ace <_dtoa_r+0x7de>
 8004ac2:	9b08      	ldr	r3, [sp, #32]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	9308      	str	r3, [sp, #32]
 8004ac8:	f108 0801 	add.w	r8, r8, #1
 8004acc:	2301      	movs	r3, #1
 8004ace:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ad0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 81b0 	beq.w	8004e38 <_dtoa_r+0xb48>
 8004ad8:	6923      	ldr	r3, [r4, #16]
 8004ada:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004ade:	6918      	ldr	r0, [r3, #16]
 8004ae0:	f000 fbbc 	bl	800525c <__hi0bits>
 8004ae4:	f1c0 0020 	rsb	r0, r0, #32
 8004ae8:	9b08      	ldr	r3, [sp, #32]
 8004aea:	4418      	add	r0, r3
 8004aec:	f010 001f 	ands.w	r0, r0, #31
 8004af0:	d077      	beq.n	8004be2 <_dtoa_r+0x8f2>
 8004af2:	f1c0 0320 	rsb	r3, r0, #32
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	dd6b      	ble.n	8004bd2 <_dtoa_r+0x8e2>
 8004afa:	9b08      	ldr	r3, [sp, #32]
 8004afc:	f1c0 001c 	rsb	r0, r0, #28
 8004b00:	4403      	add	r3, r0
 8004b02:	4480      	add	r8, r0
 8004b04:	4406      	add	r6, r0
 8004b06:	9308      	str	r3, [sp, #32]
 8004b08:	f1b8 0f00 	cmp.w	r8, #0
 8004b0c:	dd05      	ble.n	8004b1a <_dtoa_r+0x82a>
 8004b0e:	4649      	mov	r1, r9
 8004b10:	4642      	mov	r2, r8
 8004b12:	4658      	mov	r0, fp
 8004b14:	f000 fd08 	bl	8005528 <__lshift>
 8004b18:	4681      	mov	r9, r0
 8004b1a:	9b08      	ldr	r3, [sp, #32]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	dd05      	ble.n	8004b2c <_dtoa_r+0x83c>
 8004b20:	4621      	mov	r1, r4
 8004b22:	461a      	mov	r2, r3
 8004b24:	4658      	mov	r0, fp
 8004b26:	f000 fcff 	bl	8005528 <__lshift>
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d059      	beq.n	8004be6 <_dtoa_r+0x8f6>
 8004b32:	4621      	mov	r1, r4
 8004b34:	4648      	mov	r0, r9
 8004b36:	f000 fd63 	bl	8005600 <__mcmp>
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	da53      	bge.n	8004be6 <_dtoa_r+0x8f6>
 8004b3e:	1e7b      	subs	r3, r7, #1
 8004b40:	9304      	str	r3, [sp, #16]
 8004b42:	4649      	mov	r1, r9
 8004b44:	2300      	movs	r3, #0
 8004b46:	220a      	movs	r2, #10
 8004b48:	4658      	mov	r0, fp
 8004b4a:	f000 faf7 	bl	800513c <__multadd>
 8004b4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b50:	4681      	mov	r9, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 8172 	beq.w	8004e3c <_dtoa_r+0xb4c>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	4629      	mov	r1, r5
 8004b5c:	220a      	movs	r2, #10
 8004b5e:	4658      	mov	r0, fp
 8004b60:	f000 faec 	bl	800513c <__multadd>
 8004b64:	9b00      	ldr	r3, [sp, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	4605      	mov	r5, r0
 8004b6a:	dc67      	bgt.n	8004c3c <_dtoa_r+0x94c>
 8004b6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	dc41      	bgt.n	8004bf6 <_dtoa_r+0x906>
 8004b72:	e063      	b.n	8004c3c <_dtoa_r+0x94c>
 8004b74:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004b76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004b7a:	e746      	b.n	8004a0a <_dtoa_r+0x71a>
 8004b7c:	9b07      	ldr	r3, [sp, #28]
 8004b7e:	1e5c      	subs	r4, r3, #1
 8004b80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b82:	42a3      	cmp	r3, r4
 8004b84:	bfbf      	itttt	lt
 8004b86:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004b88:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004b8a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004b8c:	1ae3      	sublt	r3, r4, r3
 8004b8e:	bfb4      	ite	lt
 8004b90:	18d2      	addlt	r2, r2, r3
 8004b92:	1b1c      	subge	r4, r3, r4
 8004b94:	9b07      	ldr	r3, [sp, #28]
 8004b96:	bfbc      	itt	lt
 8004b98:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004b9a:	2400      	movlt	r4, #0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	bfb5      	itete	lt
 8004ba0:	eba8 0603 	sublt.w	r6, r8, r3
 8004ba4:	9b07      	ldrge	r3, [sp, #28]
 8004ba6:	2300      	movlt	r3, #0
 8004ba8:	4646      	movge	r6, r8
 8004baa:	e730      	b.n	8004a0e <_dtoa_r+0x71e>
 8004bac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004bae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004bb0:	4646      	mov	r6, r8
 8004bb2:	e735      	b.n	8004a20 <_dtoa_r+0x730>
 8004bb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004bb6:	e75c      	b.n	8004a72 <_dtoa_r+0x782>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	e788      	b.n	8004ace <_dtoa_r+0x7de>
 8004bbc:	3fe00000 	.word	0x3fe00000
 8004bc0:	40240000 	.word	0x40240000
 8004bc4:	40140000 	.word	0x40140000
 8004bc8:	9b02      	ldr	r3, [sp, #8]
 8004bca:	e780      	b.n	8004ace <_dtoa_r+0x7de>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	930a      	str	r3, [sp, #40]	@ 0x28
 8004bd0:	e782      	b.n	8004ad8 <_dtoa_r+0x7e8>
 8004bd2:	d099      	beq.n	8004b08 <_dtoa_r+0x818>
 8004bd4:	9a08      	ldr	r2, [sp, #32]
 8004bd6:	331c      	adds	r3, #28
 8004bd8:	441a      	add	r2, r3
 8004bda:	4498      	add	r8, r3
 8004bdc:	441e      	add	r6, r3
 8004bde:	9208      	str	r2, [sp, #32]
 8004be0:	e792      	b.n	8004b08 <_dtoa_r+0x818>
 8004be2:	4603      	mov	r3, r0
 8004be4:	e7f6      	b.n	8004bd4 <_dtoa_r+0x8e4>
 8004be6:	9b07      	ldr	r3, [sp, #28]
 8004be8:	9704      	str	r7, [sp, #16]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	dc20      	bgt.n	8004c30 <_dtoa_r+0x940>
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	dd1e      	ble.n	8004c34 <_dtoa_r+0x944>
 8004bf6:	9b00      	ldr	r3, [sp, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f47f aec0 	bne.w	800497e <_dtoa_r+0x68e>
 8004bfe:	4621      	mov	r1, r4
 8004c00:	2205      	movs	r2, #5
 8004c02:	4658      	mov	r0, fp
 8004c04:	f000 fa9a 	bl	800513c <__multadd>
 8004c08:	4601      	mov	r1, r0
 8004c0a:	4604      	mov	r4, r0
 8004c0c:	4648      	mov	r0, r9
 8004c0e:	f000 fcf7 	bl	8005600 <__mcmp>
 8004c12:	2800      	cmp	r0, #0
 8004c14:	f77f aeb3 	ble.w	800497e <_dtoa_r+0x68e>
 8004c18:	4656      	mov	r6, sl
 8004c1a:	2331      	movs	r3, #49	@ 0x31
 8004c1c:	f806 3b01 	strb.w	r3, [r6], #1
 8004c20:	9b04      	ldr	r3, [sp, #16]
 8004c22:	3301      	adds	r3, #1
 8004c24:	9304      	str	r3, [sp, #16]
 8004c26:	e6ae      	b.n	8004986 <_dtoa_r+0x696>
 8004c28:	9c07      	ldr	r4, [sp, #28]
 8004c2a:	9704      	str	r7, [sp, #16]
 8004c2c:	4625      	mov	r5, r4
 8004c2e:	e7f3      	b.n	8004c18 <_dtoa_r+0x928>
 8004c30:	9b07      	ldr	r3, [sp, #28]
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 8104 	beq.w	8004e44 <_dtoa_r+0xb54>
 8004c3c:	2e00      	cmp	r6, #0
 8004c3e:	dd05      	ble.n	8004c4c <_dtoa_r+0x95c>
 8004c40:	4629      	mov	r1, r5
 8004c42:	4632      	mov	r2, r6
 8004c44:	4658      	mov	r0, fp
 8004c46:	f000 fc6f 	bl	8005528 <__lshift>
 8004c4a:	4605      	mov	r5, r0
 8004c4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d05a      	beq.n	8004d08 <_dtoa_r+0xa18>
 8004c52:	6869      	ldr	r1, [r5, #4]
 8004c54:	4658      	mov	r0, fp
 8004c56:	f000 fa0f 	bl	8005078 <_Balloc>
 8004c5a:	4606      	mov	r6, r0
 8004c5c:	b928      	cbnz	r0, 8004c6a <_dtoa_r+0x97a>
 8004c5e:	4b84      	ldr	r3, [pc, #528]	@ (8004e70 <_dtoa_r+0xb80>)
 8004c60:	4602      	mov	r2, r0
 8004c62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004c66:	f7ff bb5a 	b.w	800431e <_dtoa_r+0x2e>
 8004c6a:	692a      	ldr	r2, [r5, #16]
 8004c6c:	3202      	adds	r2, #2
 8004c6e:	0092      	lsls	r2, r2, #2
 8004c70:	f105 010c 	add.w	r1, r5, #12
 8004c74:	300c      	adds	r0, #12
 8004c76:	f7ff fa9e 	bl	80041b6 <memcpy>
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	4631      	mov	r1, r6
 8004c7e:	4658      	mov	r0, fp
 8004c80:	f000 fc52 	bl	8005528 <__lshift>
 8004c84:	f10a 0301 	add.w	r3, sl, #1
 8004c88:	9307      	str	r3, [sp, #28]
 8004c8a:	9b00      	ldr	r3, [sp, #0]
 8004c8c:	4453      	add	r3, sl
 8004c8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c90:	9b02      	ldr	r3, [sp, #8]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	462f      	mov	r7, r5
 8004c98:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c9a:	4605      	mov	r5, r0
 8004c9c:	9b07      	ldr	r3, [sp, #28]
 8004c9e:	4621      	mov	r1, r4
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	4648      	mov	r0, r9
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	f7ff fa9b 	bl	80041e0 <quorem>
 8004caa:	4639      	mov	r1, r7
 8004cac:	9002      	str	r0, [sp, #8]
 8004cae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004cb2:	4648      	mov	r0, r9
 8004cb4:	f000 fca4 	bl	8005600 <__mcmp>
 8004cb8:	462a      	mov	r2, r5
 8004cba:	9008      	str	r0, [sp, #32]
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	4658      	mov	r0, fp
 8004cc0:	f000 fcba 	bl	8005638 <__mdiff>
 8004cc4:	68c2      	ldr	r2, [r0, #12]
 8004cc6:	4606      	mov	r6, r0
 8004cc8:	bb02      	cbnz	r2, 8004d0c <_dtoa_r+0xa1c>
 8004cca:	4601      	mov	r1, r0
 8004ccc:	4648      	mov	r0, r9
 8004cce:	f000 fc97 	bl	8005600 <__mcmp>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	4631      	mov	r1, r6
 8004cd6:	4658      	mov	r0, fp
 8004cd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8004cda:	f000 fa0d 	bl	80050f8 <_Bfree>
 8004cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ce0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004ce2:	9e07      	ldr	r6, [sp, #28]
 8004ce4:	ea43 0102 	orr.w	r1, r3, r2
 8004ce8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004cea:	4319      	orrs	r1, r3
 8004cec:	d110      	bne.n	8004d10 <_dtoa_r+0xa20>
 8004cee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004cf2:	d029      	beq.n	8004d48 <_dtoa_r+0xa58>
 8004cf4:	9b08      	ldr	r3, [sp, #32]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	dd02      	ble.n	8004d00 <_dtoa_r+0xa10>
 8004cfa:	9b02      	ldr	r3, [sp, #8]
 8004cfc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004d00:	9b00      	ldr	r3, [sp, #0]
 8004d02:	f883 8000 	strb.w	r8, [r3]
 8004d06:	e63f      	b.n	8004988 <_dtoa_r+0x698>
 8004d08:	4628      	mov	r0, r5
 8004d0a:	e7bb      	b.n	8004c84 <_dtoa_r+0x994>
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	e7e1      	b.n	8004cd4 <_dtoa_r+0x9e4>
 8004d10:	9b08      	ldr	r3, [sp, #32]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	db04      	blt.n	8004d20 <_dtoa_r+0xa30>
 8004d16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004d18:	430b      	orrs	r3, r1
 8004d1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004d1c:	430b      	orrs	r3, r1
 8004d1e:	d120      	bne.n	8004d62 <_dtoa_r+0xa72>
 8004d20:	2a00      	cmp	r2, #0
 8004d22:	dded      	ble.n	8004d00 <_dtoa_r+0xa10>
 8004d24:	4649      	mov	r1, r9
 8004d26:	2201      	movs	r2, #1
 8004d28:	4658      	mov	r0, fp
 8004d2a:	f000 fbfd 	bl	8005528 <__lshift>
 8004d2e:	4621      	mov	r1, r4
 8004d30:	4681      	mov	r9, r0
 8004d32:	f000 fc65 	bl	8005600 <__mcmp>
 8004d36:	2800      	cmp	r0, #0
 8004d38:	dc03      	bgt.n	8004d42 <_dtoa_r+0xa52>
 8004d3a:	d1e1      	bne.n	8004d00 <_dtoa_r+0xa10>
 8004d3c:	f018 0f01 	tst.w	r8, #1
 8004d40:	d0de      	beq.n	8004d00 <_dtoa_r+0xa10>
 8004d42:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004d46:	d1d8      	bne.n	8004cfa <_dtoa_r+0xa0a>
 8004d48:	9a00      	ldr	r2, [sp, #0]
 8004d4a:	2339      	movs	r3, #57	@ 0x39
 8004d4c:	7013      	strb	r3, [r2, #0]
 8004d4e:	4633      	mov	r3, r6
 8004d50:	461e      	mov	r6, r3
 8004d52:	3b01      	subs	r3, #1
 8004d54:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004d58:	2a39      	cmp	r2, #57	@ 0x39
 8004d5a:	d052      	beq.n	8004e02 <_dtoa_r+0xb12>
 8004d5c:	3201      	adds	r2, #1
 8004d5e:	701a      	strb	r2, [r3, #0]
 8004d60:	e612      	b.n	8004988 <_dtoa_r+0x698>
 8004d62:	2a00      	cmp	r2, #0
 8004d64:	dd07      	ble.n	8004d76 <_dtoa_r+0xa86>
 8004d66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004d6a:	d0ed      	beq.n	8004d48 <_dtoa_r+0xa58>
 8004d6c:	9a00      	ldr	r2, [sp, #0]
 8004d6e:	f108 0301 	add.w	r3, r8, #1
 8004d72:	7013      	strb	r3, [r2, #0]
 8004d74:	e608      	b.n	8004988 <_dtoa_r+0x698>
 8004d76:	9b07      	ldr	r3, [sp, #28]
 8004d78:	9a07      	ldr	r2, [sp, #28]
 8004d7a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004d7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d028      	beq.n	8004dd6 <_dtoa_r+0xae6>
 8004d84:	4649      	mov	r1, r9
 8004d86:	2300      	movs	r3, #0
 8004d88:	220a      	movs	r2, #10
 8004d8a:	4658      	mov	r0, fp
 8004d8c:	f000 f9d6 	bl	800513c <__multadd>
 8004d90:	42af      	cmp	r7, r5
 8004d92:	4681      	mov	r9, r0
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	f04f 020a 	mov.w	r2, #10
 8004d9c:	4639      	mov	r1, r7
 8004d9e:	4658      	mov	r0, fp
 8004da0:	d107      	bne.n	8004db2 <_dtoa_r+0xac2>
 8004da2:	f000 f9cb 	bl	800513c <__multadd>
 8004da6:	4607      	mov	r7, r0
 8004da8:	4605      	mov	r5, r0
 8004daa:	9b07      	ldr	r3, [sp, #28]
 8004dac:	3301      	adds	r3, #1
 8004dae:	9307      	str	r3, [sp, #28]
 8004db0:	e774      	b.n	8004c9c <_dtoa_r+0x9ac>
 8004db2:	f000 f9c3 	bl	800513c <__multadd>
 8004db6:	4629      	mov	r1, r5
 8004db8:	4607      	mov	r7, r0
 8004dba:	2300      	movs	r3, #0
 8004dbc:	220a      	movs	r2, #10
 8004dbe:	4658      	mov	r0, fp
 8004dc0:	f000 f9bc 	bl	800513c <__multadd>
 8004dc4:	4605      	mov	r5, r0
 8004dc6:	e7f0      	b.n	8004daa <_dtoa_r+0xaba>
 8004dc8:	9b00      	ldr	r3, [sp, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	bfcc      	ite	gt
 8004dce:	461e      	movgt	r6, r3
 8004dd0:	2601      	movle	r6, #1
 8004dd2:	4456      	add	r6, sl
 8004dd4:	2700      	movs	r7, #0
 8004dd6:	4649      	mov	r1, r9
 8004dd8:	2201      	movs	r2, #1
 8004dda:	4658      	mov	r0, fp
 8004ddc:	f000 fba4 	bl	8005528 <__lshift>
 8004de0:	4621      	mov	r1, r4
 8004de2:	4681      	mov	r9, r0
 8004de4:	f000 fc0c 	bl	8005600 <__mcmp>
 8004de8:	2800      	cmp	r0, #0
 8004dea:	dcb0      	bgt.n	8004d4e <_dtoa_r+0xa5e>
 8004dec:	d102      	bne.n	8004df4 <_dtoa_r+0xb04>
 8004dee:	f018 0f01 	tst.w	r8, #1
 8004df2:	d1ac      	bne.n	8004d4e <_dtoa_r+0xa5e>
 8004df4:	4633      	mov	r3, r6
 8004df6:	461e      	mov	r6, r3
 8004df8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004dfc:	2a30      	cmp	r2, #48	@ 0x30
 8004dfe:	d0fa      	beq.n	8004df6 <_dtoa_r+0xb06>
 8004e00:	e5c2      	b.n	8004988 <_dtoa_r+0x698>
 8004e02:	459a      	cmp	sl, r3
 8004e04:	d1a4      	bne.n	8004d50 <_dtoa_r+0xa60>
 8004e06:	9b04      	ldr	r3, [sp, #16]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	9304      	str	r3, [sp, #16]
 8004e0c:	2331      	movs	r3, #49	@ 0x31
 8004e0e:	f88a 3000 	strb.w	r3, [sl]
 8004e12:	e5b9      	b.n	8004988 <_dtoa_r+0x698>
 8004e14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004e16:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004e74 <_dtoa_r+0xb84>
 8004e1a:	b11b      	cbz	r3, 8004e24 <_dtoa_r+0xb34>
 8004e1c:	f10a 0308 	add.w	r3, sl, #8
 8004e20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004e22:	6013      	str	r3, [r2, #0]
 8004e24:	4650      	mov	r0, sl
 8004e26:	b019      	add	sp, #100	@ 0x64
 8004e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	f77f ae37 	ble.w	8004aa2 <_dtoa_r+0x7b2>
 8004e34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e36:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e38:	2001      	movs	r0, #1
 8004e3a:	e655      	b.n	8004ae8 <_dtoa_r+0x7f8>
 8004e3c:	9b00      	ldr	r3, [sp, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f77f aed6 	ble.w	8004bf0 <_dtoa_r+0x900>
 8004e44:	4656      	mov	r6, sl
 8004e46:	4621      	mov	r1, r4
 8004e48:	4648      	mov	r0, r9
 8004e4a:	f7ff f9c9 	bl	80041e0 <quorem>
 8004e4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004e52:	f806 8b01 	strb.w	r8, [r6], #1
 8004e56:	9b00      	ldr	r3, [sp, #0]
 8004e58:	eba6 020a 	sub.w	r2, r6, sl
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	ddb3      	ble.n	8004dc8 <_dtoa_r+0xad8>
 8004e60:	4649      	mov	r1, r9
 8004e62:	2300      	movs	r3, #0
 8004e64:	220a      	movs	r2, #10
 8004e66:	4658      	mov	r0, fp
 8004e68:	f000 f968 	bl	800513c <__multadd>
 8004e6c:	4681      	mov	r9, r0
 8004e6e:	e7ea      	b.n	8004e46 <_dtoa_r+0xb56>
 8004e70:	0800797c 	.word	0x0800797c
 8004e74:	08007900 	.word	0x08007900

08004e78 <_free_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	4605      	mov	r5, r0
 8004e7c:	2900      	cmp	r1, #0
 8004e7e:	d041      	beq.n	8004f04 <_free_r+0x8c>
 8004e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e84:	1f0c      	subs	r4, r1, #4
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	bfb8      	it	lt
 8004e8a:	18e4      	addlt	r4, r4, r3
 8004e8c:	f000 f8e8 	bl	8005060 <__malloc_lock>
 8004e90:	4a1d      	ldr	r2, [pc, #116]	@ (8004f08 <_free_r+0x90>)
 8004e92:	6813      	ldr	r3, [r2, #0]
 8004e94:	b933      	cbnz	r3, 8004ea4 <_free_r+0x2c>
 8004e96:	6063      	str	r3, [r4, #4]
 8004e98:	6014      	str	r4, [r2, #0]
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ea0:	f000 b8e4 	b.w	800506c <__malloc_unlock>
 8004ea4:	42a3      	cmp	r3, r4
 8004ea6:	d908      	bls.n	8004eba <_free_r+0x42>
 8004ea8:	6820      	ldr	r0, [r4, #0]
 8004eaa:	1821      	adds	r1, r4, r0
 8004eac:	428b      	cmp	r3, r1
 8004eae:	bf01      	itttt	eq
 8004eb0:	6819      	ldreq	r1, [r3, #0]
 8004eb2:	685b      	ldreq	r3, [r3, #4]
 8004eb4:	1809      	addeq	r1, r1, r0
 8004eb6:	6021      	streq	r1, [r4, #0]
 8004eb8:	e7ed      	b.n	8004e96 <_free_r+0x1e>
 8004eba:	461a      	mov	r2, r3
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	b10b      	cbz	r3, 8004ec4 <_free_r+0x4c>
 8004ec0:	42a3      	cmp	r3, r4
 8004ec2:	d9fa      	bls.n	8004eba <_free_r+0x42>
 8004ec4:	6811      	ldr	r1, [r2, #0]
 8004ec6:	1850      	adds	r0, r2, r1
 8004ec8:	42a0      	cmp	r0, r4
 8004eca:	d10b      	bne.n	8004ee4 <_free_r+0x6c>
 8004ecc:	6820      	ldr	r0, [r4, #0]
 8004ece:	4401      	add	r1, r0
 8004ed0:	1850      	adds	r0, r2, r1
 8004ed2:	4283      	cmp	r3, r0
 8004ed4:	6011      	str	r1, [r2, #0]
 8004ed6:	d1e0      	bne.n	8004e9a <_free_r+0x22>
 8004ed8:	6818      	ldr	r0, [r3, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	6053      	str	r3, [r2, #4]
 8004ede:	4408      	add	r0, r1
 8004ee0:	6010      	str	r0, [r2, #0]
 8004ee2:	e7da      	b.n	8004e9a <_free_r+0x22>
 8004ee4:	d902      	bls.n	8004eec <_free_r+0x74>
 8004ee6:	230c      	movs	r3, #12
 8004ee8:	602b      	str	r3, [r5, #0]
 8004eea:	e7d6      	b.n	8004e9a <_free_r+0x22>
 8004eec:	6820      	ldr	r0, [r4, #0]
 8004eee:	1821      	adds	r1, r4, r0
 8004ef0:	428b      	cmp	r3, r1
 8004ef2:	bf04      	itt	eq
 8004ef4:	6819      	ldreq	r1, [r3, #0]
 8004ef6:	685b      	ldreq	r3, [r3, #4]
 8004ef8:	6063      	str	r3, [r4, #4]
 8004efa:	bf04      	itt	eq
 8004efc:	1809      	addeq	r1, r1, r0
 8004efe:	6021      	streq	r1, [r4, #0]
 8004f00:	6054      	str	r4, [r2, #4]
 8004f02:	e7ca      	b.n	8004e9a <_free_r+0x22>
 8004f04:	bd38      	pop	{r3, r4, r5, pc}
 8004f06:	bf00      	nop
 8004f08:	200040b0 	.word	0x200040b0

08004f0c <malloc>:
 8004f0c:	4b02      	ldr	r3, [pc, #8]	@ (8004f18 <malloc+0xc>)
 8004f0e:	4601      	mov	r1, r0
 8004f10:	6818      	ldr	r0, [r3, #0]
 8004f12:	f000 b825 	b.w	8004f60 <_malloc_r>
 8004f16:	bf00      	nop
 8004f18:	20000024 	.word	0x20000024

08004f1c <sbrk_aligned>:
 8004f1c:	b570      	push	{r4, r5, r6, lr}
 8004f1e:	4e0f      	ldr	r6, [pc, #60]	@ (8004f5c <sbrk_aligned+0x40>)
 8004f20:	460c      	mov	r4, r1
 8004f22:	6831      	ldr	r1, [r6, #0]
 8004f24:	4605      	mov	r5, r0
 8004f26:	b911      	cbnz	r1, 8004f2e <sbrk_aligned+0x12>
 8004f28:	f001 fe0c 	bl	8006b44 <_sbrk_r>
 8004f2c:	6030      	str	r0, [r6, #0]
 8004f2e:	4621      	mov	r1, r4
 8004f30:	4628      	mov	r0, r5
 8004f32:	f001 fe07 	bl	8006b44 <_sbrk_r>
 8004f36:	1c43      	adds	r3, r0, #1
 8004f38:	d103      	bne.n	8004f42 <sbrk_aligned+0x26>
 8004f3a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004f3e:	4620      	mov	r0, r4
 8004f40:	bd70      	pop	{r4, r5, r6, pc}
 8004f42:	1cc4      	adds	r4, r0, #3
 8004f44:	f024 0403 	bic.w	r4, r4, #3
 8004f48:	42a0      	cmp	r0, r4
 8004f4a:	d0f8      	beq.n	8004f3e <sbrk_aligned+0x22>
 8004f4c:	1a21      	subs	r1, r4, r0
 8004f4e:	4628      	mov	r0, r5
 8004f50:	f001 fdf8 	bl	8006b44 <_sbrk_r>
 8004f54:	3001      	adds	r0, #1
 8004f56:	d1f2      	bne.n	8004f3e <sbrk_aligned+0x22>
 8004f58:	e7ef      	b.n	8004f3a <sbrk_aligned+0x1e>
 8004f5a:	bf00      	nop
 8004f5c:	200040ac 	.word	0x200040ac

08004f60 <_malloc_r>:
 8004f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f64:	1ccd      	adds	r5, r1, #3
 8004f66:	f025 0503 	bic.w	r5, r5, #3
 8004f6a:	3508      	adds	r5, #8
 8004f6c:	2d0c      	cmp	r5, #12
 8004f6e:	bf38      	it	cc
 8004f70:	250c      	movcc	r5, #12
 8004f72:	2d00      	cmp	r5, #0
 8004f74:	4606      	mov	r6, r0
 8004f76:	db01      	blt.n	8004f7c <_malloc_r+0x1c>
 8004f78:	42a9      	cmp	r1, r5
 8004f7a:	d904      	bls.n	8004f86 <_malloc_r+0x26>
 8004f7c:	230c      	movs	r3, #12
 8004f7e:	6033      	str	r3, [r6, #0]
 8004f80:	2000      	movs	r0, #0
 8004f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800505c <_malloc_r+0xfc>
 8004f8a:	f000 f869 	bl	8005060 <__malloc_lock>
 8004f8e:	f8d8 3000 	ldr.w	r3, [r8]
 8004f92:	461c      	mov	r4, r3
 8004f94:	bb44      	cbnz	r4, 8004fe8 <_malloc_r+0x88>
 8004f96:	4629      	mov	r1, r5
 8004f98:	4630      	mov	r0, r6
 8004f9a:	f7ff ffbf 	bl	8004f1c <sbrk_aligned>
 8004f9e:	1c43      	adds	r3, r0, #1
 8004fa0:	4604      	mov	r4, r0
 8004fa2:	d158      	bne.n	8005056 <_malloc_r+0xf6>
 8004fa4:	f8d8 4000 	ldr.w	r4, [r8]
 8004fa8:	4627      	mov	r7, r4
 8004faa:	2f00      	cmp	r7, #0
 8004fac:	d143      	bne.n	8005036 <_malloc_r+0xd6>
 8004fae:	2c00      	cmp	r4, #0
 8004fb0:	d04b      	beq.n	800504a <_malloc_r+0xea>
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	4639      	mov	r1, r7
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	eb04 0903 	add.w	r9, r4, r3
 8004fbc:	f001 fdc2 	bl	8006b44 <_sbrk_r>
 8004fc0:	4581      	cmp	r9, r0
 8004fc2:	d142      	bne.n	800504a <_malloc_r+0xea>
 8004fc4:	6821      	ldr	r1, [r4, #0]
 8004fc6:	1a6d      	subs	r5, r5, r1
 8004fc8:	4629      	mov	r1, r5
 8004fca:	4630      	mov	r0, r6
 8004fcc:	f7ff ffa6 	bl	8004f1c <sbrk_aligned>
 8004fd0:	3001      	adds	r0, #1
 8004fd2:	d03a      	beq.n	800504a <_malloc_r+0xea>
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	442b      	add	r3, r5
 8004fd8:	6023      	str	r3, [r4, #0]
 8004fda:	f8d8 3000 	ldr.w	r3, [r8]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	bb62      	cbnz	r2, 800503c <_malloc_r+0xdc>
 8004fe2:	f8c8 7000 	str.w	r7, [r8]
 8004fe6:	e00f      	b.n	8005008 <_malloc_r+0xa8>
 8004fe8:	6822      	ldr	r2, [r4, #0]
 8004fea:	1b52      	subs	r2, r2, r5
 8004fec:	d420      	bmi.n	8005030 <_malloc_r+0xd0>
 8004fee:	2a0b      	cmp	r2, #11
 8004ff0:	d917      	bls.n	8005022 <_malloc_r+0xc2>
 8004ff2:	1961      	adds	r1, r4, r5
 8004ff4:	42a3      	cmp	r3, r4
 8004ff6:	6025      	str	r5, [r4, #0]
 8004ff8:	bf18      	it	ne
 8004ffa:	6059      	strne	r1, [r3, #4]
 8004ffc:	6863      	ldr	r3, [r4, #4]
 8004ffe:	bf08      	it	eq
 8005000:	f8c8 1000 	streq.w	r1, [r8]
 8005004:	5162      	str	r2, [r4, r5]
 8005006:	604b      	str	r3, [r1, #4]
 8005008:	4630      	mov	r0, r6
 800500a:	f000 f82f 	bl	800506c <__malloc_unlock>
 800500e:	f104 000b 	add.w	r0, r4, #11
 8005012:	1d23      	adds	r3, r4, #4
 8005014:	f020 0007 	bic.w	r0, r0, #7
 8005018:	1ac2      	subs	r2, r0, r3
 800501a:	bf1c      	itt	ne
 800501c:	1a1b      	subne	r3, r3, r0
 800501e:	50a3      	strne	r3, [r4, r2]
 8005020:	e7af      	b.n	8004f82 <_malloc_r+0x22>
 8005022:	6862      	ldr	r2, [r4, #4]
 8005024:	42a3      	cmp	r3, r4
 8005026:	bf0c      	ite	eq
 8005028:	f8c8 2000 	streq.w	r2, [r8]
 800502c:	605a      	strne	r2, [r3, #4]
 800502e:	e7eb      	b.n	8005008 <_malloc_r+0xa8>
 8005030:	4623      	mov	r3, r4
 8005032:	6864      	ldr	r4, [r4, #4]
 8005034:	e7ae      	b.n	8004f94 <_malloc_r+0x34>
 8005036:	463c      	mov	r4, r7
 8005038:	687f      	ldr	r7, [r7, #4]
 800503a:	e7b6      	b.n	8004faa <_malloc_r+0x4a>
 800503c:	461a      	mov	r2, r3
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	42a3      	cmp	r3, r4
 8005042:	d1fb      	bne.n	800503c <_malloc_r+0xdc>
 8005044:	2300      	movs	r3, #0
 8005046:	6053      	str	r3, [r2, #4]
 8005048:	e7de      	b.n	8005008 <_malloc_r+0xa8>
 800504a:	230c      	movs	r3, #12
 800504c:	6033      	str	r3, [r6, #0]
 800504e:	4630      	mov	r0, r6
 8005050:	f000 f80c 	bl	800506c <__malloc_unlock>
 8005054:	e794      	b.n	8004f80 <_malloc_r+0x20>
 8005056:	6005      	str	r5, [r0, #0]
 8005058:	e7d6      	b.n	8005008 <_malloc_r+0xa8>
 800505a:	bf00      	nop
 800505c:	200040b0 	.word	0x200040b0

08005060 <__malloc_lock>:
 8005060:	4801      	ldr	r0, [pc, #4]	@ (8005068 <__malloc_lock+0x8>)
 8005062:	f7ff b8a6 	b.w	80041b2 <__retarget_lock_acquire_recursive>
 8005066:	bf00      	nop
 8005068:	200040a8 	.word	0x200040a8

0800506c <__malloc_unlock>:
 800506c:	4801      	ldr	r0, [pc, #4]	@ (8005074 <__malloc_unlock+0x8>)
 800506e:	f7ff b8a1 	b.w	80041b4 <__retarget_lock_release_recursive>
 8005072:	bf00      	nop
 8005074:	200040a8 	.word	0x200040a8

08005078 <_Balloc>:
 8005078:	b570      	push	{r4, r5, r6, lr}
 800507a:	69c6      	ldr	r6, [r0, #28]
 800507c:	4604      	mov	r4, r0
 800507e:	460d      	mov	r5, r1
 8005080:	b976      	cbnz	r6, 80050a0 <_Balloc+0x28>
 8005082:	2010      	movs	r0, #16
 8005084:	f7ff ff42 	bl	8004f0c <malloc>
 8005088:	4602      	mov	r2, r0
 800508a:	61e0      	str	r0, [r4, #28]
 800508c:	b920      	cbnz	r0, 8005098 <_Balloc+0x20>
 800508e:	4b18      	ldr	r3, [pc, #96]	@ (80050f0 <_Balloc+0x78>)
 8005090:	4818      	ldr	r0, [pc, #96]	@ (80050f4 <_Balloc+0x7c>)
 8005092:	216b      	movs	r1, #107	@ 0x6b
 8005094:	f001 fd70 	bl	8006b78 <__assert_func>
 8005098:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800509c:	6006      	str	r6, [r0, #0]
 800509e:	60c6      	str	r6, [r0, #12]
 80050a0:	69e6      	ldr	r6, [r4, #28]
 80050a2:	68f3      	ldr	r3, [r6, #12]
 80050a4:	b183      	cbz	r3, 80050c8 <_Balloc+0x50>
 80050a6:	69e3      	ldr	r3, [r4, #28]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80050ae:	b9b8      	cbnz	r0, 80050e0 <_Balloc+0x68>
 80050b0:	2101      	movs	r1, #1
 80050b2:	fa01 f605 	lsl.w	r6, r1, r5
 80050b6:	1d72      	adds	r2, r6, #5
 80050b8:	0092      	lsls	r2, r2, #2
 80050ba:	4620      	mov	r0, r4
 80050bc:	f001 fd7a 	bl	8006bb4 <_calloc_r>
 80050c0:	b160      	cbz	r0, 80050dc <_Balloc+0x64>
 80050c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80050c6:	e00e      	b.n	80050e6 <_Balloc+0x6e>
 80050c8:	2221      	movs	r2, #33	@ 0x21
 80050ca:	2104      	movs	r1, #4
 80050cc:	4620      	mov	r0, r4
 80050ce:	f001 fd71 	bl	8006bb4 <_calloc_r>
 80050d2:	69e3      	ldr	r3, [r4, #28]
 80050d4:	60f0      	str	r0, [r6, #12]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1e4      	bne.n	80050a6 <_Balloc+0x2e>
 80050dc:	2000      	movs	r0, #0
 80050de:	bd70      	pop	{r4, r5, r6, pc}
 80050e0:	6802      	ldr	r2, [r0, #0]
 80050e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80050e6:	2300      	movs	r3, #0
 80050e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80050ec:	e7f7      	b.n	80050de <_Balloc+0x66>
 80050ee:	bf00      	nop
 80050f0:	0800790d 	.word	0x0800790d
 80050f4:	0800798d 	.word	0x0800798d

080050f8 <_Bfree>:
 80050f8:	b570      	push	{r4, r5, r6, lr}
 80050fa:	69c6      	ldr	r6, [r0, #28]
 80050fc:	4605      	mov	r5, r0
 80050fe:	460c      	mov	r4, r1
 8005100:	b976      	cbnz	r6, 8005120 <_Bfree+0x28>
 8005102:	2010      	movs	r0, #16
 8005104:	f7ff ff02 	bl	8004f0c <malloc>
 8005108:	4602      	mov	r2, r0
 800510a:	61e8      	str	r0, [r5, #28]
 800510c:	b920      	cbnz	r0, 8005118 <_Bfree+0x20>
 800510e:	4b09      	ldr	r3, [pc, #36]	@ (8005134 <_Bfree+0x3c>)
 8005110:	4809      	ldr	r0, [pc, #36]	@ (8005138 <_Bfree+0x40>)
 8005112:	218f      	movs	r1, #143	@ 0x8f
 8005114:	f001 fd30 	bl	8006b78 <__assert_func>
 8005118:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800511c:	6006      	str	r6, [r0, #0]
 800511e:	60c6      	str	r6, [r0, #12]
 8005120:	b13c      	cbz	r4, 8005132 <_Bfree+0x3a>
 8005122:	69eb      	ldr	r3, [r5, #28]
 8005124:	6862      	ldr	r2, [r4, #4]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800512c:	6021      	str	r1, [r4, #0]
 800512e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005132:	bd70      	pop	{r4, r5, r6, pc}
 8005134:	0800790d 	.word	0x0800790d
 8005138:	0800798d 	.word	0x0800798d

0800513c <__multadd>:
 800513c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005140:	690d      	ldr	r5, [r1, #16]
 8005142:	4607      	mov	r7, r0
 8005144:	460c      	mov	r4, r1
 8005146:	461e      	mov	r6, r3
 8005148:	f101 0c14 	add.w	ip, r1, #20
 800514c:	2000      	movs	r0, #0
 800514e:	f8dc 3000 	ldr.w	r3, [ip]
 8005152:	b299      	uxth	r1, r3
 8005154:	fb02 6101 	mla	r1, r2, r1, r6
 8005158:	0c1e      	lsrs	r6, r3, #16
 800515a:	0c0b      	lsrs	r3, r1, #16
 800515c:	fb02 3306 	mla	r3, r2, r6, r3
 8005160:	b289      	uxth	r1, r1
 8005162:	3001      	adds	r0, #1
 8005164:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005168:	4285      	cmp	r5, r0
 800516a:	f84c 1b04 	str.w	r1, [ip], #4
 800516e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005172:	dcec      	bgt.n	800514e <__multadd+0x12>
 8005174:	b30e      	cbz	r6, 80051ba <__multadd+0x7e>
 8005176:	68a3      	ldr	r3, [r4, #8]
 8005178:	42ab      	cmp	r3, r5
 800517a:	dc19      	bgt.n	80051b0 <__multadd+0x74>
 800517c:	6861      	ldr	r1, [r4, #4]
 800517e:	4638      	mov	r0, r7
 8005180:	3101      	adds	r1, #1
 8005182:	f7ff ff79 	bl	8005078 <_Balloc>
 8005186:	4680      	mov	r8, r0
 8005188:	b928      	cbnz	r0, 8005196 <__multadd+0x5a>
 800518a:	4602      	mov	r2, r0
 800518c:	4b0c      	ldr	r3, [pc, #48]	@ (80051c0 <__multadd+0x84>)
 800518e:	480d      	ldr	r0, [pc, #52]	@ (80051c4 <__multadd+0x88>)
 8005190:	21ba      	movs	r1, #186	@ 0xba
 8005192:	f001 fcf1 	bl	8006b78 <__assert_func>
 8005196:	6922      	ldr	r2, [r4, #16]
 8005198:	3202      	adds	r2, #2
 800519a:	f104 010c 	add.w	r1, r4, #12
 800519e:	0092      	lsls	r2, r2, #2
 80051a0:	300c      	adds	r0, #12
 80051a2:	f7ff f808 	bl	80041b6 <memcpy>
 80051a6:	4621      	mov	r1, r4
 80051a8:	4638      	mov	r0, r7
 80051aa:	f7ff ffa5 	bl	80050f8 <_Bfree>
 80051ae:	4644      	mov	r4, r8
 80051b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80051b4:	3501      	adds	r5, #1
 80051b6:	615e      	str	r6, [r3, #20]
 80051b8:	6125      	str	r5, [r4, #16]
 80051ba:	4620      	mov	r0, r4
 80051bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051c0:	0800797c 	.word	0x0800797c
 80051c4:	0800798d 	.word	0x0800798d

080051c8 <__s2b>:
 80051c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051cc:	460c      	mov	r4, r1
 80051ce:	4615      	mov	r5, r2
 80051d0:	461f      	mov	r7, r3
 80051d2:	2209      	movs	r2, #9
 80051d4:	3308      	adds	r3, #8
 80051d6:	4606      	mov	r6, r0
 80051d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80051dc:	2100      	movs	r1, #0
 80051de:	2201      	movs	r2, #1
 80051e0:	429a      	cmp	r2, r3
 80051e2:	db09      	blt.n	80051f8 <__s2b+0x30>
 80051e4:	4630      	mov	r0, r6
 80051e6:	f7ff ff47 	bl	8005078 <_Balloc>
 80051ea:	b940      	cbnz	r0, 80051fe <__s2b+0x36>
 80051ec:	4602      	mov	r2, r0
 80051ee:	4b19      	ldr	r3, [pc, #100]	@ (8005254 <__s2b+0x8c>)
 80051f0:	4819      	ldr	r0, [pc, #100]	@ (8005258 <__s2b+0x90>)
 80051f2:	21d3      	movs	r1, #211	@ 0xd3
 80051f4:	f001 fcc0 	bl	8006b78 <__assert_func>
 80051f8:	0052      	lsls	r2, r2, #1
 80051fa:	3101      	adds	r1, #1
 80051fc:	e7f0      	b.n	80051e0 <__s2b+0x18>
 80051fe:	9b08      	ldr	r3, [sp, #32]
 8005200:	6143      	str	r3, [r0, #20]
 8005202:	2d09      	cmp	r5, #9
 8005204:	f04f 0301 	mov.w	r3, #1
 8005208:	6103      	str	r3, [r0, #16]
 800520a:	dd16      	ble.n	800523a <__s2b+0x72>
 800520c:	f104 0909 	add.w	r9, r4, #9
 8005210:	46c8      	mov	r8, r9
 8005212:	442c      	add	r4, r5
 8005214:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005218:	4601      	mov	r1, r0
 800521a:	3b30      	subs	r3, #48	@ 0x30
 800521c:	220a      	movs	r2, #10
 800521e:	4630      	mov	r0, r6
 8005220:	f7ff ff8c 	bl	800513c <__multadd>
 8005224:	45a0      	cmp	r8, r4
 8005226:	d1f5      	bne.n	8005214 <__s2b+0x4c>
 8005228:	f1a5 0408 	sub.w	r4, r5, #8
 800522c:	444c      	add	r4, r9
 800522e:	1b2d      	subs	r5, r5, r4
 8005230:	1963      	adds	r3, r4, r5
 8005232:	42bb      	cmp	r3, r7
 8005234:	db04      	blt.n	8005240 <__s2b+0x78>
 8005236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800523a:	340a      	adds	r4, #10
 800523c:	2509      	movs	r5, #9
 800523e:	e7f6      	b.n	800522e <__s2b+0x66>
 8005240:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005244:	4601      	mov	r1, r0
 8005246:	3b30      	subs	r3, #48	@ 0x30
 8005248:	220a      	movs	r2, #10
 800524a:	4630      	mov	r0, r6
 800524c:	f7ff ff76 	bl	800513c <__multadd>
 8005250:	e7ee      	b.n	8005230 <__s2b+0x68>
 8005252:	bf00      	nop
 8005254:	0800797c 	.word	0x0800797c
 8005258:	0800798d 	.word	0x0800798d

0800525c <__hi0bits>:
 800525c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005260:	4603      	mov	r3, r0
 8005262:	bf36      	itet	cc
 8005264:	0403      	lslcc	r3, r0, #16
 8005266:	2000      	movcs	r0, #0
 8005268:	2010      	movcc	r0, #16
 800526a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800526e:	bf3c      	itt	cc
 8005270:	021b      	lslcc	r3, r3, #8
 8005272:	3008      	addcc	r0, #8
 8005274:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005278:	bf3c      	itt	cc
 800527a:	011b      	lslcc	r3, r3, #4
 800527c:	3004      	addcc	r0, #4
 800527e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005282:	bf3c      	itt	cc
 8005284:	009b      	lslcc	r3, r3, #2
 8005286:	3002      	addcc	r0, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	db05      	blt.n	8005298 <__hi0bits+0x3c>
 800528c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005290:	f100 0001 	add.w	r0, r0, #1
 8005294:	bf08      	it	eq
 8005296:	2020      	moveq	r0, #32
 8005298:	4770      	bx	lr

0800529a <__lo0bits>:
 800529a:	6803      	ldr	r3, [r0, #0]
 800529c:	4602      	mov	r2, r0
 800529e:	f013 0007 	ands.w	r0, r3, #7
 80052a2:	d00b      	beq.n	80052bc <__lo0bits+0x22>
 80052a4:	07d9      	lsls	r1, r3, #31
 80052a6:	d421      	bmi.n	80052ec <__lo0bits+0x52>
 80052a8:	0798      	lsls	r0, r3, #30
 80052aa:	bf49      	itett	mi
 80052ac:	085b      	lsrmi	r3, r3, #1
 80052ae:	089b      	lsrpl	r3, r3, #2
 80052b0:	2001      	movmi	r0, #1
 80052b2:	6013      	strmi	r3, [r2, #0]
 80052b4:	bf5c      	itt	pl
 80052b6:	6013      	strpl	r3, [r2, #0]
 80052b8:	2002      	movpl	r0, #2
 80052ba:	4770      	bx	lr
 80052bc:	b299      	uxth	r1, r3
 80052be:	b909      	cbnz	r1, 80052c4 <__lo0bits+0x2a>
 80052c0:	0c1b      	lsrs	r3, r3, #16
 80052c2:	2010      	movs	r0, #16
 80052c4:	b2d9      	uxtb	r1, r3
 80052c6:	b909      	cbnz	r1, 80052cc <__lo0bits+0x32>
 80052c8:	3008      	adds	r0, #8
 80052ca:	0a1b      	lsrs	r3, r3, #8
 80052cc:	0719      	lsls	r1, r3, #28
 80052ce:	bf04      	itt	eq
 80052d0:	091b      	lsreq	r3, r3, #4
 80052d2:	3004      	addeq	r0, #4
 80052d4:	0799      	lsls	r1, r3, #30
 80052d6:	bf04      	itt	eq
 80052d8:	089b      	lsreq	r3, r3, #2
 80052da:	3002      	addeq	r0, #2
 80052dc:	07d9      	lsls	r1, r3, #31
 80052de:	d403      	bmi.n	80052e8 <__lo0bits+0x4e>
 80052e0:	085b      	lsrs	r3, r3, #1
 80052e2:	f100 0001 	add.w	r0, r0, #1
 80052e6:	d003      	beq.n	80052f0 <__lo0bits+0x56>
 80052e8:	6013      	str	r3, [r2, #0]
 80052ea:	4770      	bx	lr
 80052ec:	2000      	movs	r0, #0
 80052ee:	4770      	bx	lr
 80052f0:	2020      	movs	r0, #32
 80052f2:	4770      	bx	lr

080052f4 <__i2b>:
 80052f4:	b510      	push	{r4, lr}
 80052f6:	460c      	mov	r4, r1
 80052f8:	2101      	movs	r1, #1
 80052fa:	f7ff febd 	bl	8005078 <_Balloc>
 80052fe:	4602      	mov	r2, r0
 8005300:	b928      	cbnz	r0, 800530e <__i2b+0x1a>
 8005302:	4b05      	ldr	r3, [pc, #20]	@ (8005318 <__i2b+0x24>)
 8005304:	4805      	ldr	r0, [pc, #20]	@ (800531c <__i2b+0x28>)
 8005306:	f240 1145 	movw	r1, #325	@ 0x145
 800530a:	f001 fc35 	bl	8006b78 <__assert_func>
 800530e:	2301      	movs	r3, #1
 8005310:	6144      	str	r4, [r0, #20]
 8005312:	6103      	str	r3, [r0, #16]
 8005314:	bd10      	pop	{r4, pc}
 8005316:	bf00      	nop
 8005318:	0800797c 	.word	0x0800797c
 800531c:	0800798d 	.word	0x0800798d

08005320 <__multiply>:
 8005320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005324:	4614      	mov	r4, r2
 8005326:	690a      	ldr	r2, [r1, #16]
 8005328:	6923      	ldr	r3, [r4, #16]
 800532a:	429a      	cmp	r2, r3
 800532c:	bfa8      	it	ge
 800532e:	4623      	movge	r3, r4
 8005330:	460f      	mov	r7, r1
 8005332:	bfa4      	itt	ge
 8005334:	460c      	movge	r4, r1
 8005336:	461f      	movge	r7, r3
 8005338:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800533c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005340:	68a3      	ldr	r3, [r4, #8]
 8005342:	6861      	ldr	r1, [r4, #4]
 8005344:	eb0a 0609 	add.w	r6, sl, r9
 8005348:	42b3      	cmp	r3, r6
 800534a:	b085      	sub	sp, #20
 800534c:	bfb8      	it	lt
 800534e:	3101      	addlt	r1, #1
 8005350:	f7ff fe92 	bl	8005078 <_Balloc>
 8005354:	b930      	cbnz	r0, 8005364 <__multiply+0x44>
 8005356:	4602      	mov	r2, r0
 8005358:	4b44      	ldr	r3, [pc, #272]	@ (800546c <__multiply+0x14c>)
 800535a:	4845      	ldr	r0, [pc, #276]	@ (8005470 <__multiply+0x150>)
 800535c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005360:	f001 fc0a 	bl	8006b78 <__assert_func>
 8005364:	f100 0514 	add.w	r5, r0, #20
 8005368:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800536c:	462b      	mov	r3, r5
 800536e:	2200      	movs	r2, #0
 8005370:	4543      	cmp	r3, r8
 8005372:	d321      	bcc.n	80053b8 <__multiply+0x98>
 8005374:	f107 0114 	add.w	r1, r7, #20
 8005378:	f104 0214 	add.w	r2, r4, #20
 800537c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005380:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005384:	9302      	str	r3, [sp, #8]
 8005386:	1b13      	subs	r3, r2, r4
 8005388:	3b15      	subs	r3, #21
 800538a:	f023 0303 	bic.w	r3, r3, #3
 800538e:	3304      	adds	r3, #4
 8005390:	f104 0715 	add.w	r7, r4, #21
 8005394:	42ba      	cmp	r2, r7
 8005396:	bf38      	it	cc
 8005398:	2304      	movcc	r3, #4
 800539a:	9301      	str	r3, [sp, #4]
 800539c:	9b02      	ldr	r3, [sp, #8]
 800539e:	9103      	str	r1, [sp, #12]
 80053a0:	428b      	cmp	r3, r1
 80053a2:	d80c      	bhi.n	80053be <__multiply+0x9e>
 80053a4:	2e00      	cmp	r6, #0
 80053a6:	dd03      	ble.n	80053b0 <__multiply+0x90>
 80053a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d05b      	beq.n	8005468 <__multiply+0x148>
 80053b0:	6106      	str	r6, [r0, #16]
 80053b2:	b005      	add	sp, #20
 80053b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053b8:	f843 2b04 	str.w	r2, [r3], #4
 80053bc:	e7d8      	b.n	8005370 <__multiply+0x50>
 80053be:	f8b1 a000 	ldrh.w	sl, [r1]
 80053c2:	f1ba 0f00 	cmp.w	sl, #0
 80053c6:	d024      	beq.n	8005412 <__multiply+0xf2>
 80053c8:	f104 0e14 	add.w	lr, r4, #20
 80053cc:	46a9      	mov	r9, r5
 80053ce:	f04f 0c00 	mov.w	ip, #0
 80053d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80053d6:	f8d9 3000 	ldr.w	r3, [r9]
 80053da:	fa1f fb87 	uxth.w	fp, r7
 80053de:	b29b      	uxth	r3, r3
 80053e0:	fb0a 330b 	mla	r3, sl, fp, r3
 80053e4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80053e8:	f8d9 7000 	ldr.w	r7, [r9]
 80053ec:	4463      	add	r3, ip
 80053ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80053f2:	fb0a c70b 	mla	r7, sl, fp, ip
 80053f6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005400:	4572      	cmp	r2, lr
 8005402:	f849 3b04 	str.w	r3, [r9], #4
 8005406:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800540a:	d8e2      	bhi.n	80053d2 <__multiply+0xb2>
 800540c:	9b01      	ldr	r3, [sp, #4]
 800540e:	f845 c003 	str.w	ip, [r5, r3]
 8005412:	9b03      	ldr	r3, [sp, #12]
 8005414:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005418:	3104      	adds	r1, #4
 800541a:	f1b9 0f00 	cmp.w	r9, #0
 800541e:	d021      	beq.n	8005464 <__multiply+0x144>
 8005420:	682b      	ldr	r3, [r5, #0]
 8005422:	f104 0c14 	add.w	ip, r4, #20
 8005426:	46ae      	mov	lr, r5
 8005428:	f04f 0a00 	mov.w	sl, #0
 800542c:	f8bc b000 	ldrh.w	fp, [ip]
 8005430:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005434:	fb09 770b 	mla	r7, r9, fp, r7
 8005438:	4457      	add	r7, sl
 800543a:	b29b      	uxth	r3, r3
 800543c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005440:	f84e 3b04 	str.w	r3, [lr], #4
 8005444:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005448:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800544c:	f8be 3000 	ldrh.w	r3, [lr]
 8005450:	fb09 330a 	mla	r3, r9, sl, r3
 8005454:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005458:	4562      	cmp	r2, ip
 800545a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800545e:	d8e5      	bhi.n	800542c <__multiply+0x10c>
 8005460:	9f01      	ldr	r7, [sp, #4]
 8005462:	51eb      	str	r3, [r5, r7]
 8005464:	3504      	adds	r5, #4
 8005466:	e799      	b.n	800539c <__multiply+0x7c>
 8005468:	3e01      	subs	r6, #1
 800546a:	e79b      	b.n	80053a4 <__multiply+0x84>
 800546c:	0800797c 	.word	0x0800797c
 8005470:	0800798d 	.word	0x0800798d

08005474 <__pow5mult>:
 8005474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005478:	4615      	mov	r5, r2
 800547a:	f012 0203 	ands.w	r2, r2, #3
 800547e:	4607      	mov	r7, r0
 8005480:	460e      	mov	r6, r1
 8005482:	d007      	beq.n	8005494 <__pow5mult+0x20>
 8005484:	4c25      	ldr	r4, [pc, #148]	@ (800551c <__pow5mult+0xa8>)
 8005486:	3a01      	subs	r2, #1
 8005488:	2300      	movs	r3, #0
 800548a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800548e:	f7ff fe55 	bl	800513c <__multadd>
 8005492:	4606      	mov	r6, r0
 8005494:	10ad      	asrs	r5, r5, #2
 8005496:	d03d      	beq.n	8005514 <__pow5mult+0xa0>
 8005498:	69fc      	ldr	r4, [r7, #28]
 800549a:	b97c      	cbnz	r4, 80054bc <__pow5mult+0x48>
 800549c:	2010      	movs	r0, #16
 800549e:	f7ff fd35 	bl	8004f0c <malloc>
 80054a2:	4602      	mov	r2, r0
 80054a4:	61f8      	str	r0, [r7, #28]
 80054a6:	b928      	cbnz	r0, 80054b4 <__pow5mult+0x40>
 80054a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005520 <__pow5mult+0xac>)
 80054aa:	481e      	ldr	r0, [pc, #120]	@ (8005524 <__pow5mult+0xb0>)
 80054ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80054b0:	f001 fb62 	bl	8006b78 <__assert_func>
 80054b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80054b8:	6004      	str	r4, [r0, #0]
 80054ba:	60c4      	str	r4, [r0, #12]
 80054bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80054c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80054c4:	b94c      	cbnz	r4, 80054da <__pow5mult+0x66>
 80054c6:	f240 2171 	movw	r1, #625	@ 0x271
 80054ca:	4638      	mov	r0, r7
 80054cc:	f7ff ff12 	bl	80052f4 <__i2b>
 80054d0:	2300      	movs	r3, #0
 80054d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80054d6:	4604      	mov	r4, r0
 80054d8:	6003      	str	r3, [r0, #0]
 80054da:	f04f 0900 	mov.w	r9, #0
 80054de:	07eb      	lsls	r3, r5, #31
 80054e0:	d50a      	bpl.n	80054f8 <__pow5mult+0x84>
 80054e2:	4631      	mov	r1, r6
 80054e4:	4622      	mov	r2, r4
 80054e6:	4638      	mov	r0, r7
 80054e8:	f7ff ff1a 	bl	8005320 <__multiply>
 80054ec:	4631      	mov	r1, r6
 80054ee:	4680      	mov	r8, r0
 80054f0:	4638      	mov	r0, r7
 80054f2:	f7ff fe01 	bl	80050f8 <_Bfree>
 80054f6:	4646      	mov	r6, r8
 80054f8:	106d      	asrs	r5, r5, #1
 80054fa:	d00b      	beq.n	8005514 <__pow5mult+0xa0>
 80054fc:	6820      	ldr	r0, [r4, #0]
 80054fe:	b938      	cbnz	r0, 8005510 <__pow5mult+0x9c>
 8005500:	4622      	mov	r2, r4
 8005502:	4621      	mov	r1, r4
 8005504:	4638      	mov	r0, r7
 8005506:	f7ff ff0b 	bl	8005320 <__multiply>
 800550a:	6020      	str	r0, [r4, #0]
 800550c:	f8c0 9000 	str.w	r9, [r0]
 8005510:	4604      	mov	r4, r0
 8005512:	e7e4      	b.n	80054de <__pow5mult+0x6a>
 8005514:	4630      	mov	r0, r6
 8005516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800551a:	bf00      	nop
 800551c:	080079e8 	.word	0x080079e8
 8005520:	0800790d 	.word	0x0800790d
 8005524:	0800798d 	.word	0x0800798d

08005528 <__lshift>:
 8005528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800552c:	460c      	mov	r4, r1
 800552e:	6849      	ldr	r1, [r1, #4]
 8005530:	6923      	ldr	r3, [r4, #16]
 8005532:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005536:	68a3      	ldr	r3, [r4, #8]
 8005538:	4607      	mov	r7, r0
 800553a:	4691      	mov	r9, r2
 800553c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005540:	f108 0601 	add.w	r6, r8, #1
 8005544:	42b3      	cmp	r3, r6
 8005546:	db0b      	blt.n	8005560 <__lshift+0x38>
 8005548:	4638      	mov	r0, r7
 800554a:	f7ff fd95 	bl	8005078 <_Balloc>
 800554e:	4605      	mov	r5, r0
 8005550:	b948      	cbnz	r0, 8005566 <__lshift+0x3e>
 8005552:	4602      	mov	r2, r0
 8005554:	4b28      	ldr	r3, [pc, #160]	@ (80055f8 <__lshift+0xd0>)
 8005556:	4829      	ldr	r0, [pc, #164]	@ (80055fc <__lshift+0xd4>)
 8005558:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800555c:	f001 fb0c 	bl	8006b78 <__assert_func>
 8005560:	3101      	adds	r1, #1
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	e7ee      	b.n	8005544 <__lshift+0x1c>
 8005566:	2300      	movs	r3, #0
 8005568:	f100 0114 	add.w	r1, r0, #20
 800556c:	f100 0210 	add.w	r2, r0, #16
 8005570:	4618      	mov	r0, r3
 8005572:	4553      	cmp	r3, sl
 8005574:	db33      	blt.n	80055de <__lshift+0xb6>
 8005576:	6920      	ldr	r0, [r4, #16]
 8005578:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800557c:	f104 0314 	add.w	r3, r4, #20
 8005580:	f019 091f 	ands.w	r9, r9, #31
 8005584:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005588:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800558c:	d02b      	beq.n	80055e6 <__lshift+0xbe>
 800558e:	f1c9 0e20 	rsb	lr, r9, #32
 8005592:	468a      	mov	sl, r1
 8005594:	2200      	movs	r2, #0
 8005596:	6818      	ldr	r0, [r3, #0]
 8005598:	fa00 f009 	lsl.w	r0, r0, r9
 800559c:	4310      	orrs	r0, r2
 800559e:	f84a 0b04 	str.w	r0, [sl], #4
 80055a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80055a6:	459c      	cmp	ip, r3
 80055a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80055ac:	d8f3      	bhi.n	8005596 <__lshift+0x6e>
 80055ae:	ebac 0304 	sub.w	r3, ip, r4
 80055b2:	3b15      	subs	r3, #21
 80055b4:	f023 0303 	bic.w	r3, r3, #3
 80055b8:	3304      	adds	r3, #4
 80055ba:	f104 0015 	add.w	r0, r4, #21
 80055be:	4584      	cmp	ip, r0
 80055c0:	bf38      	it	cc
 80055c2:	2304      	movcc	r3, #4
 80055c4:	50ca      	str	r2, [r1, r3]
 80055c6:	b10a      	cbz	r2, 80055cc <__lshift+0xa4>
 80055c8:	f108 0602 	add.w	r6, r8, #2
 80055cc:	3e01      	subs	r6, #1
 80055ce:	4638      	mov	r0, r7
 80055d0:	612e      	str	r6, [r5, #16]
 80055d2:	4621      	mov	r1, r4
 80055d4:	f7ff fd90 	bl	80050f8 <_Bfree>
 80055d8:	4628      	mov	r0, r5
 80055da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055de:	f842 0f04 	str.w	r0, [r2, #4]!
 80055e2:	3301      	adds	r3, #1
 80055e4:	e7c5      	b.n	8005572 <__lshift+0x4a>
 80055e6:	3904      	subs	r1, #4
 80055e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80055ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80055f0:	459c      	cmp	ip, r3
 80055f2:	d8f9      	bhi.n	80055e8 <__lshift+0xc0>
 80055f4:	e7ea      	b.n	80055cc <__lshift+0xa4>
 80055f6:	bf00      	nop
 80055f8:	0800797c 	.word	0x0800797c
 80055fc:	0800798d 	.word	0x0800798d

08005600 <__mcmp>:
 8005600:	690a      	ldr	r2, [r1, #16]
 8005602:	4603      	mov	r3, r0
 8005604:	6900      	ldr	r0, [r0, #16]
 8005606:	1a80      	subs	r0, r0, r2
 8005608:	b530      	push	{r4, r5, lr}
 800560a:	d10e      	bne.n	800562a <__mcmp+0x2a>
 800560c:	3314      	adds	r3, #20
 800560e:	3114      	adds	r1, #20
 8005610:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005614:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005618:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800561c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005620:	4295      	cmp	r5, r2
 8005622:	d003      	beq.n	800562c <__mcmp+0x2c>
 8005624:	d205      	bcs.n	8005632 <__mcmp+0x32>
 8005626:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800562a:	bd30      	pop	{r4, r5, pc}
 800562c:	42a3      	cmp	r3, r4
 800562e:	d3f3      	bcc.n	8005618 <__mcmp+0x18>
 8005630:	e7fb      	b.n	800562a <__mcmp+0x2a>
 8005632:	2001      	movs	r0, #1
 8005634:	e7f9      	b.n	800562a <__mcmp+0x2a>
	...

08005638 <__mdiff>:
 8005638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800563c:	4689      	mov	r9, r1
 800563e:	4606      	mov	r6, r0
 8005640:	4611      	mov	r1, r2
 8005642:	4648      	mov	r0, r9
 8005644:	4614      	mov	r4, r2
 8005646:	f7ff ffdb 	bl	8005600 <__mcmp>
 800564a:	1e05      	subs	r5, r0, #0
 800564c:	d112      	bne.n	8005674 <__mdiff+0x3c>
 800564e:	4629      	mov	r1, r5
 8005650:	4630      	mov	r0, r6
 8005652:	f7ff fd11 	bl	8005078 <_Balloc>
 8005656:	4602      	mov	r2, r0
 8005658:	b928      	cbnz	r0, 8005666 <__mdiff+0x2e>
 800565a:	4b3f      	ldr	r3, [pc, #252]	@ (8005758 <__mdiff+0x120>)
 800565c:	f240 2137 	movw	r1, #567	@ 0x237
 8005660:	483e      	ldr	r0, [pc, #248]	@ (800575c <__mdiff+0x124>)
 8005662:	f001 fa89 	bl	8006b78 <__assert_func>
 8005666:	2301      	movs	r3, #1
 8005668:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800566c:	4610      	mov	r0, r2
 800566e:	b003      	add	sp, #12
 8005670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005674:	bfbc      	itt	lt
 8005676:	464b      	movlt	r3, r9
 8005678:	46a1      	movlt	r9, r4
 800567a:	4630      	mov	r0, r6
 800567c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005680:	bfba      	itte	lt
 8005682:	461c      	movlt	r4, r3
 8005684:	2501      	movlt	r5, #1
 8005686:	2500      	movge	r5, #0
 8005688:	f7ff fcf6 	bl	8005078 <_Balloc>
 800568c:	4602      	mov	r2, r0
 800568e:	b918      	cbnz	r0, 8005698 <__mdiff+0x60>
 8005690:	4b31      	ldr	r3, [pc, #196]	@ (8005758 <__mdiff+0x120>)
 8005692:	f240 2145 	movw	r1, #581	@ 0x245
 8005696:	e7e3      	b.n	8005660 <__mdiff+0x28>
 8005698:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800569c:	6926      	ldr	r6, [r4, #16]
 800569e:	60c5      	str	r5, [r0, #12]
 80056a0:	f109 0310 	add.w	r3, r9, #16
 80056a4:	f109 0514 	add.w	r5, r9, #20
 80056a8:	f104 0e14 	add.w	lr, r4, #20
 80056ac:	f100 0b14 	add.w	fp, r0, #20
 80056b0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80056b4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80056b8:	9301      	str	r3, [sp, #4]
 80056ba:	46d9      	mov	r9, fp
 80056bc:	f04f 0c00 	mov.w	ip, #0
 80056c0:	9b01      	ldr	r3, [sp, #4]
 80056c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80056c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80056ca:	9301      	str	r3, [sp, #4]
 80056cc:	fa1f f38a 	uxth.w	r3, sl
 80056d0:	4619      	mov	r1, r3
 80056d2:	b283      	uxth	r3, r0
 80056d4:	1acb      	subs	r3, r1, r3
 80056d6:	0c00      	lsrs	r0, r0, #16
 80056d8:	4463      	add	r3, ip
 80056da:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80056de:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80056e8:	4576      	cmp	r6, lr
 80056ea:	f849 3b04 	str.w	r3, [r9], #4
 80056ee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80056f2:	d8e5      	bhi.n	80056c0 <__mdiff+0x88>
 80056f4:	1b33      	subs	r3, r6, r4
 80056f6:	3b15      	subs	r3, #21
 80056f8:	f023 0303 	bic.w	r3, r3, #3
 80056fc:	3415      	adds	r4, #21
 80056fe:	3304      	adds	r3, #4
 8005700:	42a6      	cmp	r6, r4
 8005702:	bf38      	it	cc
 8005704:	2304      	movcc	r3, #4
 8005706:	441d      	add	r5, r3
 8005708:	445b      	add	r3, fp
 800570a:	461e      	mov	r6, r3
 800570c:	462c      	mov	r4, r5
 800570e:	4544      	cmp	r4, r8
 8005710:	d30e      	bcc.n	8005730 <__mdiff+0xf8>
 8005712:	f108 0103 	add.w	r1, r8, #3
 8005716:	1b49      	subs	r1, r1, r5
 8005718:	f021 0103 	bic.w	r1, r1, #3
 800571c:	3d03      	subs	r5, #3
 800571e:	45a8      	cmp	r8, r5
 8005720:	bf38      	it	cc
 8005722:	2100      	movcc	r1, #0
 8005724:	440b      	add	r3, r1
 8005726:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800572a:	b191      	cbz	r1, 8005752 <__mdiff+0x11a>
 800572c:	6117      	str	r7, [r2, #16]
 800572e:	e79d      	b.n	800566c <__mdiff+0x34>
 8005730:	f854 1b04 	ldr.w	r1, [r4], #4
 8005734:	46e6      	mov	lr, ip
 8005736:	0c08      	lsrs	r0, r1, #16
 8005738:	fa1c fc81 	uxtah	ip, ip, r1
 800573c:	4471      	add	r1, lr
 800573e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005742:	b289      	uxth	r1, r1
 8005744:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005748:	f846 1b04 	str.w	r1, [r6], #4
 800574c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005750:	e7dd      	b.n	800570e <__mdiff+0xd6>
 8005752:	3f01      	subs	r7, #1
 8005754:	e7e7      	b.n	8005726 <__mdiff+0xee>
 8005756:	bf00      	nop
 8005758:	0800797c 	.word	0x0800797c
 800575c:	0800798d 	.word	0x0800798d

08005760 <__ulp>:
 8005760:	b082      	sub	sp, #8
 8005762:	ed8d 0b00 	vstr	d0, [sp]
 8005766:	9a01      	ldr	r2, [sp, #4]
 8005768:	4b0f      	ldr	r3, [pc, #60]	@ (80057a8 <__ulp+0x48>)
 800576a:	4013      	ands	r3, r2
 800576c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005770:	2b00      	cmp	r3, #0
 8005772:	dc08      	bgt.n	8005786 <__ulp+0x26>
 8005774:	425b      	negs	r3, r3
 8005776:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800577a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800577e:	da04      	bge.n	800578a <__ulp+0x2a>
 8005780:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005784:	4113      	asrs	r3, r2
 8005786:	2200      	movs	r2, #0
 8005788:	e008      	b.n	800579c <__ulp+0x3c>
 800578a:	f1a2 0314 	sub.w	r3, r2, #20
 800578e:	2b1e      	cmp	r3, #30
 8005790:	bfda      	itte	le
 8005792:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8005796:	40da      	lsrle	r2, r3
 8005798:	2201      	movgt	r2, #1
 800579a:	2300      	movs	r3, #0
 800579c:	4619      	mov	r1, r3
 800579e:	4610      	mov	r0, r2
 80057a0:	ec41 0b10 	vmov	d0, r0, r1
 80057a4:	b002      	add	sp, #8
 80057a6:	4770      	bx	lr
 80057a8:	7ff00000 	.word	0x7ff00000

080057ac <__b2d>:
 80057ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057b0:	6906      	ldr	r6, [r0, #16]
 80057b2:	f100 0814 	add.w	r8, r0, #20
 80057b6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80057ba:	1f37      	subs	r7, r6, #4
 80057bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80057c0:	4610      	mov	r0, r2
 80057c2:	f7ff fd4b 	bl	800525c <__hi0bits>
 80057c6:	f1c0 0320 	rsb	r3, r0, #32
 80057ca:	280a      	cmp	r0, #10
 80057cc:	600b      	str	r3, [r1, #0]
 80057ce:	491b      	ldr	r1, [pc, #108]	@ (800583c <__b2d+0x90>)
 80057d0:	dc15      	bgt.n	80057fe <__b2d+0x52>
 80057d2:	f1c0 0c0b 	rsb	ip, r0, #11
 80057d6:	fa22 f30c 	lsr.w	r3, r2, ip
 80057da:	45b8      	cmp	r8, r7
 80057dc:	ea43 0501 	orr.w	r5, r3, r1
 80057e0:	bf34      	ite	cc
 80057e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80057e6:	2300      	movcs	r3, #0
 80057e8:	3015      	adds	r0, #21
 80057ea:	fa02 f000 	lsl.w	r0, r2, r0
 80057ee:	fa23 f30c 	lsr.w	r3, r3, ip
 80057f2:	4303      	orrs	r3, r0
 80057f4:	461c      	mov	r4, r3
 80057f6:	ec45 4b10 	vmov	d0, r4, r5
 80057fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057fe:	45b8      	cmp	r8, r7
 8005800:	bf3a      	itte	cc
 8005802:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8005806:	f1a6 0708 	subcc.w	r7, r6, #8
 800580a:	2300      	movcs	r3, #0
 800580c:	380b      	subs	r0, #11
 800580e:	d012      	beq.n	8005836 <__b2d+0x8a>
 8005810:	f1c0 0120 	rsb	r1, r0, #32
 8005814:	fa23 f401 	lsr.w	r4, r3, r1
 8005818:	4082      	lsls	r2, r0
 800581a:	4322      	orrs	r2, r4
 800581c:	4547      	cmp	r7, r8
 800581e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8005822:	bf8c      	ite	hi
 8005824:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8005828:	2200      	movls	r2, #0
 800582a:	4083      	lsls	r3, r0
 800582c:	40ca      	lsrs	r2, r1
 800582e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8005832:	4313      	orrs	r3, r2
 8005834:	e7de      	b.n	80057f4 <__b2d+0x48>
 8005836:	ea42 0501 	orr.w	r5, r2, r1
 800583a:	e7db      	b.n	80057f4 <__b2d+0x48>
 800583c:	3ff00000 	.word	0x3ff00000

08005840 <__d2b>:
 8005840:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005844:	460f      	mov	r7, r1
 8005846:	2101      	movs	r1, #1
 8005848:	ec59 8b10 	vmov	r8, r9, d0
 800584c:	4616      	mov	r6, r2
 800584e:	f7ff fc13 	bl	8005078 <_Balloc>
 8005852:	4604      	mov	r4, r0
 8005854:	b930      	cbnz	r0, 8005864 <__d2b+0x24>
 8005856:	4602      	mov	r2, r0
 8005858:	4b23      	ldr	r3, [pc, #140]	@ (80058e8 <__d2b+0xa8>)
 800585a:	4824      	ldr	r0, [pc, #144]	@ (80058ec <__d2b+0xac>)
 800585c:	f240 310f 	movw	r1, #783	@ 0x30f
 8005860:	f001 f98a 	bl	8006b78 <__assert_func>
 8005864:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005868:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800586c:	b10d      	cbz	r5, 8005872 <__d2b+0x32>
 800586e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005872:	9301      	str	r3, [sp, #4]
 8005874:	f1b8 0300 	subs.w	r3, r8, #0
 8005878:	d023      	beq.n	80058c2 <__d2b+0x82>
 800587a:	4668      	mov	r0, sp
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	f7ff fd0c 	bl	800529a <__lo0bits>
 8005882:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005886:	b1d0      	cbz	r0, 80058be <__d2b+0x7e>
 8005888:	f1c0 0320 	rsb	r3, r0, #32
 800588c:	fa02 f303 	lsl.w	r3, r2, r3
 8005890:	430b      	orrs	r3, r1
 8005892:	40c2      	lsrs	r2, r0
 8005894:	6163      	str	r3, [r4, #20]
 8005896:	9201      	str	r2, [sp, #4]
 8005898:	9b01      	ldr	r3, [sp, #4]
 800589a:	61a3      	str	r3, [r4, #24]
 800589c:	2b00      	cmp	r3, #0
 800589e:	bf0c      	ite	eq
 80058a0:	2201      	moveq	r2, #1
 80058a2:	2202      	movne	r2, #2
 80058a4:	6122      	str	r2, [r4, #16]
 80058a6:	b1a5      	cbz	r5, 80058d2 <__d2b+0x92>
 80058a8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80058ac:	4405      	add	r5, r0
 80058ae:	603d      	str	r5, [r7, #0]
 80058b0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80058b4:	6030      	str	r0, [r6, #0]
 80058b6:	4620      	mov	r0, r4
 80058b8:	b003      	add	sp, #12
 80058ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058be:	6161      	str	r1, [r4, #20]
 80058c0:	e7ea      	b.n	8005898 <__d2b+0x58>
 80058c2:	a801      	add	r0, sp, #4
 80058c4:	f7ff fce9 	bl	800529a <__lo0bits>
 80058c8:	9b01      	ldr	r3, [sp, #4]
 80058ca:	6163      	str	r3, [r4, #20]
 80058cc:	3020      	adds	r0, #32
 80058ce:	2201      	movs	r2, #1
 80058d0:	e7e8      	b.n	80058a4 <__d2b+0x64>
 80058d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80058d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80058da:	6038      	str	r0, [r7, #0]
 80058dc:	6918      	ldr	r0, [r3, #16]
 80058de:	f7ff fcbd 	bl	800525c <__hi0bits>
 80058e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80058e6:	e7e5      	b.n	80058b4 <__d2b+0x74>
 80058e8:	0800797c 	.word	0x0800797c
 80058ec:	0800798d 	.word	0x0800798d

080058f0 <__ratio>:
 80058f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f4:	b085      	sub	sp, #20
 80058f6:	e9cd 1000 	strd	r1, r0, [sp]
 80058fa:	a902      	add	r1, sp, #8
 80058fc:	f7ff ff56 	bl	80057ac <__b2d>
 8005900:	9800      	ldr	r0, [sp, #0]
 8005902:	a903      	add	r1, sp, #12
 8005904:	ec55 4b10 	vmov	r4, r5, d0
 8005908:	f7ff ff50 	bl	80057ac <__b2d>
 800590c:	9b01      	ldr	r3, [sp, #4]
 800590e:	6919      	ldr	r1, [r3, #16]
 8005910:	9b00      	ldr	r3, [sp, #0]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	1ac9      	subs	r1, r1, r3
 8005916:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800591a:	1a9b      	subs	r3, r3, r2
 800591c:	ec5b ab10 	vmov	sl, fp, d0
 8005920:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005924:	2b00      	cmp	r3, #0
 8005926:	bfce      	itee	gt
 8005928:	462a      	movgt	r2, r5
 800592a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800592e:	465a      	movle	r2, fp
 8005930:	462f      	mov	r7, r5
 8005932:	46d9      	mov	r9, fp
 8005934:	bfcc      	ite	gt
 8005936:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800593a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800593e:	464b      	mov	r3, r9
 8005940:	4652      	mov	r2, sl
 8005942:	4620      	mov	r0, r4
 8005944:	4639      	mov	r1, r7
 8005946:	f7fa ff89 	bl	800085c <__aeabi_ddiv>
 800594a:	ec41 0b10 	vmov	d0, r0, r1
 800594e:	b005      	add	sp, #20
 8005950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005954 <__copybits>:
 8005954:	3901      	subs	r1, #1
 8005956:	b570      	push	{r4, r5, r6, lr}
 8005958:	1149      	asrs	r1, r1, #5
 800595a:	6914      	ldr	r4, [r2, #16]
 800595c:	3101      	adds	r1, #1
 800595e:	f102 0314 	add.w	r3, r2, #20
 8005962:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005966:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800596a:	1f05      	subs	r5, r0, #4
 800596c:	42a3      	cmp	r3, r4
 800596e:	d30c      	bcc.n	800598a <__copybits+0x36>
 8005970:	1aa3      	subs	r3, r4, r2
 8005972:	3b11      	subs	r3, #17
 8005974:	f023 0303 	bic.w	r3, r3, #3
 8005978:	3211      	adds	r2, #17
 800597a:	42a2      	cmp	r2, r4
 800597c:	bf88      	it	hi
 800597e:	2300      	movhi	r3, #0
 8005980:	4418      	add	r0, r3
 8005982:	2300      	movs	r3, #0
 8005984:	4288      	cmp	r0, r1
 8005986:	d305      	bcc.n	8005994 <__copybits+0x40>
 8005988:	bd70      	pop	{r4, r5, r6, pc}
 800598a:	f853 6b04 	ldr.w	r6, [r3], #4
 800598e:	f845 6f04 	str.w	r6, [r5, #4]!
 8005992:	e7eb      	b.n	800596c <__copybits+0x18>
 8005994:	f840 3b04 	str.w	r3, [r0], #4
 8005998:	e7f4      	b.n	8005984 <__copybits+0x30>

0800599a <__any_on>:
 800599a:	f100 0214 	add.w	r2, r0, #20
 800599e:	6900      	ldr	r0, [r0, #16]
 80059a0:	114b      	asrs	r3, r1, #5
 80059a2:	4298      	cmp	r0, r3
 80059a4:	b510      	push	{r4, lr}
 80059a6:	db11      	blt.n	80059cc <__any_on+0x32>
 80059a8:	dd0a      	ble.n	80059c0 <__any_on+0x26>
 80059aa:	f011 011f 	ands.w	r1, r1, #31
 80059ae:	d007      	beq.n	80059c0 <__any_on+0x26>
 80059b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80059b4:	fa24 f001 	lsr.w	r0, r4, r1
 80059b8:	fa00 f101 	lsl.w	r1, r0, r1
 80059bc:	428c      	cmp	r4, r1
 80059be:	d10b      	bne.n	80059d8 <__any_on+0x3e>
 80059c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d803      	bhi.n	80059d0 <__any_on+0x36>
 80059c8:	2000      	movs	r0, #0
 80059ca:	bd10      	pop	{r4, pc}
 80059cc:	4603      	mov	r3, r0
 80059ce:	e7f7      	b.n	80059c0 <__any_on+0x26>
 80059d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80059d4:	2900      	cmp	r1, #0
 80059d6:	d0f5      	beq.n	80059c4 <__any_on+0x2a>
 80059d8:	2001      	movs	r0, #1
 80059da:	e7f6      	b.n	80059ca <__any_on+0x30>

080059dc <sulp>:
 80059dc:	b570      	push	{r4, r5, r6, lr}
 80059de:	4604      	mov	r4, r0
 80059e0:	460d      	mov	r5, r1
 80059e2:	ec45 4b10 	vmov	d0, r4, r5
 80059e6:	4616      	mov	r6, r2
 80059e8:	f7ff feba 	bl	8005760 <__ulp>
 80059ec:	ec51 0b10 	vmov	r0, r1, d0
 80059f0:	b17e      	cbz	r6, 8005a12 <sulp+0x36>
 80059f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80059f6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	dd09      	ble.n	8005a12 <sulp+0x36>
 80059fe:	051b      	lsls	r3, r3, #20
 8005a00:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005a04:	2400      	movs	r4, #0
 8005a06:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005a0a:	4622      	mov	r2, r4
 8005a0c:	462b      	mov	r3, r5
 8005a0e:	f7fa fdfb 	bl	8000608 <__aeabi_dmul>
 8005a12:	ec41 0b10 	vmov	d0, r0, r1
 8005a16:	bd70      	pop	{r4, r5, r6, pc}

08005a18 <_strtod_l>:
 8005a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a1c:	b09f      	sub	sp, #124	@ 0x7c
 8005a1e:	460c      	mov	r4, r1
 8005a20:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005a22:	2200      	movs	r2, #0
 8005a24:	921a      	str	r2, [sp, #104]	@ 0x68
 8005a26:	9005      	str	r0, [sp, #20]
 8005a28:	f04f 0a00 	mov.w	sl, #0
 8005a2c:	f04f 0b00 	mov.w	fp, #0
 8005a30:	460a      	mov	r2, r1
 8005a32:	9219      	str	r2, [sp, #100]	@ 0x64
 8005a34:	7811      	ldrb	r1, [r2, #0]
 8005a36:	292b      	cmp	r1, #43	@ 0x2b
 8005a38:	d04a      	beq.n	8005ad0 <_strtod_l+0xb8>
 8005a3a:	d838      	bhi.n	8005aae <_strtod_l+0x96>
 8005a3c:	290d      	cmp	r1, #13
 8005a3e:	d832      	bhi.n	8005aa6 <_strtod_l+0x8e>
 8005a40:	2908      	cmp	r1, #8
 8005a42:	d832      	bhi.n	8005aaa <_strtod_l+0x92>
 8005a44:	2900      	cmp	r1, #0
 8005a46:	d03b      	beq.n	8005ac0 <_strtod_l+0xa8>
 8005a48:	2200      	movs	r2, #0
 8005a4a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005a4c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005a4e:	782a      	ldrb	r2, [r5, #0]
 8005a50:	2a30      	cmp	r2, #48	@ 0x30
 8005a52:	f040 80b3 	bne.w	8005bbc <_strtod_l+0x1a4>
 8005a56:	786a      	ldrb	r2, [r5, #1]
 8005a58:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005a5c:	2a58      	cmp	r2, #88	@ 0x58
 8005a5e:	d16e      	bne.n	8005b3e <_strtod_l+0x126>
 8005a60:	9302      	str	r3, [sp, #8]
 8005a62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a64:	9301      	str	r3, [sp, #4]
 8005a66:	ab1a      	add	r3, sp, #104	@ 0x68
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	4a8e      	ldr	r2, [pc, #568]	@ (8005ca4 <_strtod_l+0x28c>)
 8005a6c:	9805      	ldr	r0, [sp, #20]
 8005a6e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005a70:	a919      	add	r1, sp, #100	@ 0x64
 8005a72:	f001 f91b 	bl	8006cac <__gethex>
 8005a76:	f010 060f 	ands.w	r6, r0, #15
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	d005      	beq.n	8005a8a <_strtod_l+0x72>
 8005a7e:	2e06      	cmp	r6, #6
 8005a80:	d128      	bne.n	8005ad4 <_strtod_l+0xbc>
 8005a82:	3501      	adds	r5, #1
 8005a84:	2300      	movs	r3, #0
 8005a86:	9519      	str	r5, [sp, #100]	@ 0x64
 8005a88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f040 858e 	bne.w	80065ae <_strtod_l+0xb96>
 8005a92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a94:	b1cb      	cbz	r3, 8005aca <_strtod_l+0xb2>
 8005a96:	4652      	mov	r2, sl
 8005a98:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8005a9c:	ec43 2b10 	vmov	d0, r2, r3
 8005aa0:	b01f      	add	sp, #124	@ 0x7c
 8005aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa6:	2920      	cmp	r1, #32
 8005aa8:	d1ce      	bne.n	8005a48 <_strtod_l+0x30>
 8005aaa:	3201      	adds	r2, #1
 8005aac:	e7c1      	b.n	8005a32 <_strtod_l+0x1a>
 8005aae:	292d      	cmp	r1, #45	@ 0x2d
 8005ab0:	d1ca      	bne.n	8005a48 <_strtod_l+0x30>
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005ab6:	1c51      	adds	r1, r2, #1
 8005ab8:	9119      	str	r1, [sp, #100]	@ 0x64
 8005aba:	7852      	ldrb	r2, [r2, #1]
 8005abc:	2a00      	cmp	r2, #0
 8005abe:	d1c5      	bne.n	8005a4c <_strtod_l+0x34>
 8005ac0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005ac2:	9419      	str	r4, [sp, #100]	@ 0x64
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f040 8570 	bne.w	80065aa <_strtod_l+0xb92>
 8005aca:	4652      	mov	r2, sl
 8005acc:	465b      	mov	r3, fp
 8005ace:	e7e5      	b.n	8005a9c <_strtod_l+0x84>
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	e7ef      	b.n	8005ab4 <_strtod_l+0x9c>
 8005ad4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005ad6:	b13a      	cbz	r2, 8005ae8 <_strtod_l+0xd0>
 8005ad8:	2135      	movs	r1, #53	@ 0x35
 8005ada:	a81c      	add	r0, sp, #112	@ 0x70
 8005adc:	f7ff ff3a 	bl	8005954 <__copybits>
 8005ae0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005ae2:	9805      	ldr	r0, [sp, #20]
 8005ae4:	f7ff fb08 	bl	80050f8 <_Bfree>
 8005ae8:	3e01      	subs	r6, #1
 8005aea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005aec:	2e04      	cmp	r6, #4
 8005aee:	d806      	bhi.n	8005afe <_strtod_l+0xe6>
 8005af0:	e8df f006 	tbb	[pc, r6]
 8005af4:	201d0314 	.word	0x201d0314
 8005af8:	14          	.byte	0x14
 8005af9:	00          	.byte	0x00
 8005afa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005afe:	05e1      	lsls	r1, r4, #23
 8005b00:	bf48      	it	mi
 8005b02:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005b06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005b0a:	0d1b      	lsrs	r3, r3, #20
 8005b0c:	051b      	lsls	r3, r3, #20
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1bb      	bne.n	8005a8a <_strtod_l+0x72>
 8005b12:	f7fe fb23 	bl	800415c <__errno>
 8005b16:	2322      	movs	r3, #34	@ 0x22
 8005b18:	6003      	str	r3, [r0, #0]
 8005b1a:	e7b6      	b.n	8005a8a <_strtod_l+0x72>
 8005b1c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005b20:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005b24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005b28:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005b2c:	e7e7      	b.n	8005afe <_strtod_l+0xe6>
 8005b2e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8005cac <_strtod_l+0x294>
 8005b32:	e7e4      	b.n	8005afe <_strtod_l+0xe6>
 8005b34:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005b38:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8005b3c:	e7df      	b.n	8005afe <_strtod_l+0xe6>
 8005b3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b40:	1c5a      	adds	r2, r3, #1
 8005b42:	9219      	str	r2, [sp, #100]	@ 0x64
 8005b44:	785b      	ldrb	r3, [r3, #1]
 8005b46:	2b30      	cmp	r3, #48	@ 0x30
 8005b48:	d0f9      	beq.n	8005b3e <_strtod_l+0x126>
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d09d      	beq.n	8005a8a <_strtod_l+0x72>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b54:	930c      	str	r3, [sp, #48]	@ 0x30
 8005b56:	2300      	movs	r3, #0
 8005b58:	9308      	str	r3, [sp, #32]
 8005b5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b5c:	461f      	mov	r7, r3
 8005b5e:	220a      	movs	r2, #10
 8005b60:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005b62:	7805      	ldrb	r5, [r0, #0]
 8005b64:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005b68:	b2d9      	uxtb	r1, r3
 8005b6a:	2909      	cmp	r1, #9
 8005b6c:	d928      	bls.n	8005bc0 <_strtod_l+0x1a8>
 8005b6e:	494e      	ldr	r1, [pc, #312]	@ (8005ca8 <_strtod_l+0x290>)
 8005b70:	2201      	movs	r2, #1
 8005b72:	f000 ffd5 	bl	8006b20 <strncmp>
 8005b76:	2800      	cmp	r0, #0
 8005b78:	d032      	beq.n	8005be0 <_strtod_l+0x1c8>
 8005b7a:	2000      	movs	r0, #0
 8005b7c:	462a      	mov	r2, r5
 8005b7e:	4681      	mov	r9, r0
 8005b80:	463d      	mov	r5, r7
 8005b82:	4603      	mov	r3, r0
 8005b84:	2a65      	cmp	r2, #101	@ 0x65
 8005b86:	d001      	beq.n	8005b8c <_strtod_l+0x174>
 8005b88:	2a45      	cmp	r2, #69	@ 0x45
 8005b8a:	d114      	bne.n	8005bb6 <_strtod_l+0x19e>
 8005b8c:	b91d      	cbnz	r5, 8005b96 <_strtod_l+0x17e>
 8005b8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b90:	4302      	orrs	r2, r0
 8005b92:	d095      	beq.n	8005ac0 <_strtod_l+0xa8>
 8005b94:	2500      	movs	r5, #0
 8005b96:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005b98:	1c62      	adds	r2, r4, #1
 8005b9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8005b9c:	7862      	ldrb	r2, [r4, #1]
 8005b9e:	2a2b      	cmp	r2, #43	@ 0x2b
 8005ba0:	d077      	beq.n	8005c92 <_strtod_l+0x27a>
 8005ba2:	2a2d      	cmp	r2, #45	@ 0x2d
 8005ba4:	d07b      	beq.n	8005c9e <_strtod_l+0x286>
 8005ba6:	f04f 0c00 	mov.w	ip, #0
 8005baa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005bae:	2909      	cmp	r1, #9
 8005bb0:	f240 8082 	bls.w	8005cb8 <_strtod_l+0x2a0>
 8005bb4:	9419      	str	r4, [sp, #100]	@ 0x64
 8005bb6:	f04f 0800 	mov.w	r8, #0
 8005bba:	e0a2      	b.n	8005d02 <_strtod_l+0x2ea>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	e7c7      	b.n	8005b50 <_strtod_l+0x138>
 8005bc0:	2f08      	cmp	r7, #8
 8005bc2:	bfd5      	itete	le
 8005bc4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005bc6:	9908      	ldrgt	r1, [sp, #32]
 8005bc8:	fb02 3301 	mlale	r3, r2, r1, r3
 8005bcc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005bd0:	f100 0001 	add.w	r0, r0, #1
 8005bd4:	bfd4      	ite	le
 8005bd6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005bd8:	9308      	strgt	r3, [sp, #32]
 8005bda:	3701      	adds	r7, #1
 8005bdc:	9019      	str	r0, [sp, #100]	@ 0x64
 8005bde:	e7bf      	b.n	8005b60 <_strtod_l+0x148>
 8005be0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005be2:	1c5a      	adds	r2, r3, #1
 8005be4:	9219      	str	r2, [sp, #100]	@ 0x64
 8005be6:	785a      	ldrb	r2, [r3, #1]
 8005be8:	b37f      	cbz	r7, 8005c4a <_strtod_l+0x232>
 8005bea:	4681      	mov	r9, r0
 8005bec:	463d      	mov	r5, r7
 8005bee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005bf2:	2b09      	cmp	r3, #9
 8005bf4:	d912      	bls.n	8005c1c <_strtod_l+0x204>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e7c4      	b.n	8005b84 <_strtod_l+0x16c>
 8005bfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005bfc:	1c5a      	adds	r2, r3, #1
 8005bfe:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c00:	785a      	ldrb	r2, [r3, #1]
 8005c02:	3001      	adds	r0, #1
 8005c04:	2a30      	cmp	r2, #48	@ 0x30
 8005c06:	d0f8      	beq.n	8005bfa <_strtod_l+0x1e2>
 8005c08:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	f200 84d3 	bhi.w	80065b8 <_strtod_l+0xba0>
 8005c12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c14:	930c      	str	r3, [sp, #48]	@ 0x30
 8005c16:	4681      	mov	r9, r0
 8005c18:	2000      	movs	r0, #0
 8005c1a:	4605      	mov	r5, r0
 8005c1c:	3a30      	subs	r2, #48	@ 0x30
 8005c1e:	f100 0301 	add.w	r3, r0, #1
 8005c22:	d02a      	beq.n	8005c7a <_strtod_l+0x262>
 8005c24:	4499      	add	r9, r3
 8005c26:	eb00 0c05 	add.w	ip, r0, r5
 8005c2a:	462b      	mov	r3, r5
 8005c2c:	210a      	movs	r1, #10
 8005c2e:	4563      	cmp	r3, ip
 8005c30:	d10d      	bne.n	8005c4e <_strtod_l+0x236>
 8005c32:	1c69      	adds	r1, r5, #1
 8005c34:	4401      	add	r1, r0
 8005c36:	4428      	add	r0, r5
 8005c38:	2808      	cmp	r0, #8
 8005c3a:	dc16      	bgt.n	8005c6a <_strtod_l+0x252>
 8005c3c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005c3e:	230a      	movs	r3, #10
 8005c40:	fb03 2300 	mla	r3, r3, r0, r2
 8005c44:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c46:	2300      	movs	r3, #0
 8005c48:	e018      	b.n	8005c7c <_strtod_l+0x264>
 8005c4a:	4638      	mov	r0, r7
 8005c4c:	e7da      	b.n	8005c04 <_strtod_l+0x1ec>
 8005c4e:	2b08      	cmp	r3, #8
 8005c50:	f103 0301 	add.w	r3, r3, #1
 8005c54:	dc03      	bgt.n	8005c5e <_strtod_l+0x246>
 8005c56:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005c58:	434e      	muls	r6, r1
 8005c5a:	960a      	str	r6, [sp, #40]	@ 0x28
 8005c5c:	e7e7      	b.n	8005c2e <_strtod_l+0x216>
 8005c5e:	2b10      	cmp	r3, #16
 8005c60:	bfde      	ittt	le
 8005c62:	9e08      	ldrle	r6, [sp, #32]
 8005c64:	434e      	mulle	r6, r1
 8005c66:	9608      	strle	r6, [sp, #32]
 8005c68:	e7e1      	b.n	8005c2e <_strtod_l+0x216>
 8005c6a:	280f      	cmp	r0, #15
 8005c6c:	dceb      	bgt.n	8005c46 <_strtod_l+0x22e>
 8005c6e:	9808      	ldr	r0, [sp, #32]
 8005c70:	230a      	movs	r3, #10
 8005c72:	fb03 2300 	mla	r3, r3, r0, r2
 8005c76:	9308      	str	r3, [sp, #32]
 8005c78:	e7e5      	b.n	8005c46 <_strtod_l+0x22e>
 8005c7a:	4629      	mov	r1, r5
 8005c7c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005c7e:	1c50      	adds	r0, r2, #1
 8005c80:	9019      	str	r0, [sp, #100]	@ 0x64
 8005c82:	7852      	ldrb	r2, [r2, #1]
 8005c84:	4618      	mov	r0, r3
 8005c86:	460d      	mov	r5, r1
 8005c88:	e7b1      	b.n	8005bee <_strtod_l+0x1d6>
 8005c8a:	f04f 0900 	mov.w	r9, #0
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e77d      	b.n	8005b8e <_strtod_l+0x176>
 8005c92:	f04f 0c00 	mov.w	ip, #0
 8005c96:	1ca2      	adds	r2, r4, #2
 8005c98:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c9a:	78a2      	ldrb	r2, [r4, #2]
 8005c9c:	e785      	b.n	8005baa <_strtod_l+0x192>
 8005c9e:	f04f 0c01 	mov.w	ip, #1
 8005ca2:	e7f8      	b.n	8005c96 <_strtod_l+0x27e>
 8005ca4:	08007b00 	.word	0x08007b00
 8005ca8:	08007ae8 	.word	0x08007ae8
 8005cac:	7ff00000 	.word	0x7ff00000
 8005cb0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005cb2:	1c51      	adds	r1, r2, #1
 8005cb4:	9119      	str	r1, [sp, #100]	@ 0x64
 8005cb6:	7852      	ldrb	r2, [r2, #1]
 8005cb8:	2a30      	cmp	r2, #48	@ 0x30
 8005cba:	d0f9      	beq.n	8005cb0 <_strtod_l+0x298>
 8005cbc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005cc0:	2908      	cmp	r1, #8
 8005cc2:	f63f af78 	bhi.w	8005bb6 <_strtod_l+0x19e>
 8005cc6:	3a30      	subs	r2, #48	@ 0x30
 8005cc8:	920e      	str	r2, [sp, #56]	@ 0x38
 8005cca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005ccc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005cce:	f04f 080a 	mov.w	r8, #10
 8005cd2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005cd4:	1c56      	adds	r6, r2, #1
 8005cd6:	9619      	str	r6, [sp, #100]	@ 0x64
 8005cd8:	7852      	ldrb	r2, [r2, #1]
 8005cda:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005cde:	f1be 0f09 	cmp.w	lr, #9
 8005ce2:	d939      	bls.n	8005d58 <_strtod_l+0x340>
 8005ce4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005ce6:	1a76      	subs	r6, r6, r1
 8005ce8:	2e08      	cmp	r6, #8
 8005cea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005cee:	dc03      	bgt.n	8005cf8 <_strtod_l+0x2e0>
 8005cf0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005cf2:	4588      	cmp	r8, r1
 8005cf4:	bfa8      	it	ge
 8005cf6:	4688      	movge	r8, r1
 8005cf8:	f1bc 0f00 	cmp.w	ip, #0
 8005cfc:	d001      	beq.n	8005d02 <_strtod_l+0x2ea>
 8005cfe:	f1c8 0800 	rsb	r8, r8, #0
 8005d02:	2d00      	cmp	r5, #0
 8005d04:	d14e      	bne.n	8005da4 <_strtod_l+0x38c>
 8005d06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005d08:	4308      	orrs	r0, r1
 8005d0a:	f47f aebe 	bne.w	8005a8a <_strtod_l+0x72>
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f47f aed6 	bne.w	8005ac0 <_strtod_l+0xa8>
 8005d14:	2a69      	cmp	r2, #105	@ 0x69
 8005d16:	d028      	beq.n	8005d6a <_strtod_l+0x352>
 8005d18:	dc25      	bgt.n	8005d66 <_strtod_l+0x34e>
 8005d1a:	2a49      	cmp	r2, #73	@ 0x49
 8005d1c:	d025      	beq.n	8005d6a <_strtod_l+0x352>
 8005d1e:	2a4e      	cmp	r2, #78	@ 0x4e
 8005d20:	f47f aece 	bne.w	8005ac0 <_strtod_l+0xa8>
 8005d24:	499b      	ldr	r1, [pc, #620]	@ (8005f94 <_strtod_l+0x57c>)
 8005d26:	a819      	add	r0, sp, #100	@ 0x64
 8005d28:	f001 f9e2 	bl	80070f0 <__match>
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	f43f aec7 	beq.w	8005ac0 <_strtod_l+0xa8>
 8005d32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	2b28      	cmp	r3, #40	@ 0x28
 8005d38:	d12e      	bne.n	8005d98 <_strtod_l+0x380>
 8005d3a:	4997      	ldr	r1, [pc, #604]	@ (8005f98 <_strtod_l+0x580>)
 8005d3c:	aa1c      	add	r2, sp, #112	@ 0x70
 8005d3e:	a819      	add	r0, sp, #100	@ 0x64
 8005d40:	f001 f9ea 	bl	8007118 <__hexnan>
 8005d44:	2805      	cmp	r0, #5
 8005d46:	d127      	bne.n	8005d98 <_strtod_l+0x380>
 8005d48:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005d4a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005d4e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005d52:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005d56:	e698      	b.n	8005a8a <_strtod_l+0x72>
 8005d58:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005d5a:	fb08 2101 	mla	r1, r8, r1, r2
 8005d5e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005d62:	920e      	str	r2, [sp, #56]	@ 0x38
 8005d64:	e7b5      	b.n	8005cd2 <_strtod_l+0x2ba>
 8005d66:	2a6e      	cmp	r2, #110	@ 0x6e
 8005d68:	e7da      	b.n	8005d20 <_strtod_l+0x308>
 8005d6a:	498c      	ldr	r1, [pc, #560]	@ (8005f9c <_strtod_l+0x584>)
 8005d6c:	a819      	add	r0, sp, #100	@ 0x64
 8005d6e:	f001 f9bf 	bl	80070f0 <__match>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	f43f aea4 	beq.w	8005ac0 <_strtod_l+0xa8>
 8005d78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d7a:	4989      	ldr	r1, [pc, #548]	@ (8005fa0 <_strtod_l+0x588>)
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	a819      	add	r0, sp, #100	@ 0x64
 8005d80:	9319      	str	r3, [sp, #100]	@ 0x64
 8005d82:	f001 f9b5 	bl	80070f0 <__match>
 8005d86:	b910      	cbnz	r0, 8005d8e <_strtod_l+0x376>
 8005d88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	9319      	str	r3, [sp, #100]	@ 0x64
 8005d8e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8005fb0 <_strtod_l+0x598>
 8005d92:	f04f 0a00 	mov.w	sl, #0
 8005d96:	e678      	b.n	8005a8a <_strtod_l+0x72>
 8005d98:	4882      	ldr	r0, [pc, #520]	@ (8005fa4 <_strtod_l+0x58c>)
 8005d9a:	f000 fee5 	bl	8006b68 <nan>
 8005d9e:	ec5b ab10 	vmov	sl, fp, d0
 8005da2:	e672      	b.n	8005a8a <_strtod_l+0x72>
 8005da4:	eba8 0309 	sub.w	r3, r8, r9
 8005da8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005daa:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dac:	2f00      	cmp	r7, #0
 8005dae:	bf08      	it	eq
 8005db0:	462f      	moveq	r7, r5
 8005db2:	2d10      	cmp	r5, #16
 8005db4:	462c      	mov	r4, r5
 8005db6:	bfa8      	it	ge
 8005db8:	2410      	movge	r4, #16
 8005dba:	f7fa fbab 	bl	8000514 <__aeabi_ui2d>
 8005dbe:	2d09      	cmp	r5, #9
 8005dc0:	4682      	mov	sl, r0
 8005dc2:	468b      	mov	fp, r1
 8005dc4:	dc13      	bgt.n	8005dee <_strtod_l+0x3d6>
 8005dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f43f ae5e 	beq.w	8005a8a <_strtod_l+0x72>
 8005dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dd0:	dd78      	ble.n	8005ec4 <_strtod_l+0x4ac>
 8005dd2:	2b16      	cmp	r3, #22
 8005dd4:	dc5f      	bgt.n	8005e96 <_strtod_l+0x47e>
 8005dd6:	4974      	ldr	r1, [pc, #464]	@ (8005fa8 <_strtod_l+0x590>)
 8005dd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005ddc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005de0:	4652      	mov	r2, sl
 8005de2:	465b      	mov	r3, fp
 8005de4:	f7fa fc10 	bl	8000608 <__aeabi_dmul>
 8005de8:	4682      	mov	sl, r0
 8005dea:	468b      	mov	fp, r1
 8005dec:	e64d      	b.n	8005a8a <_strtod_l+0x72>
 8005dee:	4b6e      	ldr	r3, [pc, #440]	@ (8005fa8 <_strtod_l+0x590>)
 8005df0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005df4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005df8:	f7fa fc06 	bl	8000608 <__aeabi_dmul>
 8005dfc:	4682      	mov	sl, r0
 8005dfe:	9808      	ldr	r0, [sp, #32]
 8005e00:	468b      	mov	fp, r1
 8005e02:	f7fa fb87 	bl	8000514 <__aeabi_ui2d>
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	4650      	mov	r0, sl
 8005e0c:	4659      	mov	r1, fp
 8005e0e:	f7fa fa45 	bl	800029c <__adddf3>
 8005e12:	2d0f      	cmp	r5, #15
 8005e14:	4682      	mov	sl, r0
 8005e16:	468b      	mov	fp, r1
 8005e18:	ddd5      	ble.n	8005dc6 <_strtod_l+0x3ae>
 8005e1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e1c:	1b2c      	subs	r4, r5, r4
 8005e1e:	441c      	add	r4, r3
 8005e20:	2c00      	cmp	r4, #0
 8005e22:	f340 8096 	ble.w	8005f52 <_strtod_l+0x53a>
 8005e26:	f014 030f 	ands.w	r3, r4, #15
 8005e2a:	d00a      	beq.n	8005e42 <_strtod_l+0x42a>
 8005e2c:	495e      	ldr	r1, [pc, #376]	@ (8005fa8 <_strtod_l+0x590>)
 8005e2e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e32:	4652      	mov	r2, sl
 8005e34:	465b      	mov	r3, fp
 8005e36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e3a:	f7fa fbe5 	bl	8000608 <__aeabi_dmul>
 8005e3e:	4682      	mov	sl, r0
 8005e40:	468b      	mov	fp, r1
 8005e42:	f034 040f 	bics.w	r4, r4, #15
 8005e46:	d073      	beq.n	8005f30 <_strtod_l+0x518>
 8005e48:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005e4c:	dd48      	ble.n	8005ee0 <_strtod_l+0x4c8>
 8005e4e:	2400      	movs	r4, #0
 8005e50:	46a0      	mov	r8, r4
 8005e52:	940a      	str	r4, [sp, #40]	@ 0x28
 8005e54:	46a1      	mov	r9, r4
 8005e56:	9a05      	ldr	r2, [sp, #20]
 8005e58:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8005fb0 <_strtod_l+0x598>
 8005e5c:	2322      	movs	r3, #34	@ 0x22
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	f04f 0a00 	mov.w	sl, #0
 8005e64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f43f ae0f 	beq.w	8005a8a <_strtod_l+0x72>
 8005e6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005e6e:	9805      	ldr	r0, [sp, #20]
 8005e70:	f7ff f942 	bl	80050f8 <_Bfree>
 8005e74:	9805      	ldr	r0, [sp, #20]
 8005e76:	4649      	mov	r1, r9
 8005e78:	f7ff f93e 	bl	80050f8 <_Bfree>
 8005e7c:	9805      	ldr	r0, [sp, #20]
 8005e7e:	4641      	mov	r1, r8
 8005e80:	f7ff f93a 	bl	80050f8 <_Bfree>
 8005e84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005e86:	9805      	ldr	r0, [sp, #20]
 8005e88:	f7ff f936 	bl	80050f8 <_Bfree>
 8005e8c:	9805      	ldr	r0, [sp, #20]
 8005e8e:	4621      	mov	r1, r4
 8005e90:	f7ff f932 	bl	80050f8 <_Bfree>
 8005e94:	e5f9      	b.n	8005a8a <_strtod_l+0x72>
 8005e96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e98:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	dbbc      	blt.n	8005e1a <_strtod_l+0x402>
 8005ea0:	4c41      	ldr	r4, [pc, #260]	@ (8005fa8 <_strtod_l+0x590>)
 8005ea2:	f1c5 050f 	rsb	r5, r5, #15
 8005ea6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005eaa:	4652      	mov	r2, sl
 8005eac:	465b      	mov	r3, fp
 8005eae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005eb2:	f7fa fba9 	bl	8000608 <__aeabi_dmul>
 8005eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eb8:	1b5d      	subs	r5, r3, r5
 8005eba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005ebe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005ec2:	e78f      	b.n	8005de4 <_strtod_l+0x3cc>
 8005ec4:	3316      	adds	r3, #22
 8005ec6:	dba8      	blt.n	8005e1a <_strtod_l+0x402>
 8005ec8:	4b37      	ldr	r3, [pc, #220]	@ (8005fa8 <_strtod_l+0x590>)
 8005eca:	eba9 0808 	sub.w	r8, r9, r8
 8005ece:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005ed2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005ed6:	4650      	mov	r0, sl
 8005ed8:	4659      	mov	r1, fp
 8005eda:	f7fa fcbf 	bl	800085c <__aeabi_ddiv>
 8005ede:	e783      	b.n	8005de8 <_strtod_l+0x3d0>
 8005ee0:	4b32      	ldr	r3, [pc, #200]	@ (8005fac <_strtod_l+0x594>)
 8005ee2:	9308      	str	r3, [sp, #32]
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	1124      	asrs	r4, r4, #4
 8005ee8:	4650      	mov	r0, sl
 8005eea:	4659      	mov	r1, fp
 8005eec:	461e      	mov	r6, r3
 8005eee:	2c01      	cmp	r4, #1
 8005ef0:	dc21      	bgt.n	8005f36 <_strtod_l+0x51e>
 8005ef2:	b10b      	cbz	r3, 8005ef8 <_strtod_l+0x4e0>
 8005ef4:	4682      	mov	sl, r0
 8005ef6:	468b      	mov	fp, r1
 8005ef8:	492c      	ldr	r1, [pc, #176]	@ (8005fac <_strtod_l+0x594>)
 8005efa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005efe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005f02:	4652      	mov	r2, sl
 8005f04:	465b      	mov	r3, fp
 8005f06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f0a:	f7fa fb7d 	bl	8000608 <__aeabi_dmul>
 8005f0e:	4b28      	ldr	r3, [pc, #160]	@ (8005fb0 <_strtod_l+0x598>)
 8005f10:	460a      	mov	r2, r1
 8005f12:	400b      	ands	r3, r1
 8005f14:	4927      	ldr	r1, [pc, #156]	@ (8005fb4 <_strtod_l+0x59c>)
 8005f16:	428b      	cmp	r3, r1
 8005f18:	4682      	mov	sl, r0
 8005f1a:	d898      	bhi.n	8005e4e <_strtod_l+0x436>
 8005f1c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005f20:	428b      	cmp	r3, r1
 8005f22:	bf86      	itte	hi
 8005f24:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8005fb8 <_strtod_l+0x5a0>
 8005f28:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8005f2c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005f30:	2300      	movs	r3, #0
 8005f32:	9308      	str	r3, [sp, #32]
 8005f34:	e07a      	b.n	800602c <_strtod_l+0x614>
 8005f36:	07e2      	lsls	r2, r4, #31
 8005f38:	d505      	bpl.n	8005f46 <_strtod_l+0x52e>
 8005f3a:	9b08      	ldr	r3, [sp, #32]
 8005f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f40:	f7fa fb62 	bl	8000608 <__aeabi_dmul>
 8005f44:	2301      	movs	r3, #1
 8005f46:	9a08      	ldr	r2, [sp, #32]
 8005f48:	3208      	adds	r2, #8
 8005f4a:	3601      	adds	r6, #1
 8005f4c:	1064      	asrs	r4, r4, #1
 8005f4e:	9208      	str	r2, [sp, #32]
 8005f50:	e7cd      	b.n	8005eee <_strtod_l+0x4d6>
 8005f52:	d0ed      	beq.n	8005f30 <_strtod_l+0x518>
 8005f54:	4264      	negs	r4, r4
 8005f56:	f014 020f 	ands.w	r2, r4, #15
 8005f5a:	d00a      	beq.n	8005f72 <_strtod_l+0x55a>
 8005f5c:	4b12      	ldr	r3, [pc, #72]	@ (8005fa8 <_strtod_l+0x590>)
 8005f5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f62:	4650      	mov	r0, sl
 8005f64:	4659      	mov	r1, fp
 8005f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6a:	f7fa fc77 	bl	800085c <__aeabi_ddiv>
 8005f6e:	4682      	mov	sl, r0
 8005f70:	468b      	mov	fp, r1
 8005f72:	1124      	asrs	r4, r4, #4
 8005f74:	d0dc      	beq.n	8005f30 <_strtod_l+0x518>
 8005f76:	2c1f      	cmp	r4, #31
 8005f78:	dd20      	ble.n	8005fbc <_strtod_l+0x5a4>
 8005f7a:	2400      	movs	r4, #0
 8005f7c:	46a0      	mov	r8, r4
 8005f7e:	940a      	str	r4, [sp, #40]	@ 0x28
 8005f80:	46a1      	mov	r9, r4
 8005f82:	9a05      	ldr	r2, [sp, #20]
 8005f84:	2322      	movs	r3, #34	@ 0x22
 8005f86:	f04f 0a00 	mov.w	sl, #0
 8005f8a:	f04f 0b00 	mov.w	fp, #0
 8005f8e:	6013      	str	r3, [r2, #0]
 8005f90:	e768      	b.n	8005e64 <_strtod_l+0x44c>
 8005f92:	bf00      	nop
 8005f94:	080078d4 	.word	0x080078d4
 8005f98:	08007aec 	.word	0x08007aec
 8005f9c:	080078cc 	.word	0x080078cc
 8005fa0:	08007903 	.word	0x08007903
 8005fa4:	08007c95 	.word	0x08007c95
 8005fa8:	08007a20 	.word	0x08007a20
 8005fac:	080079f8 	.word	0x080079f8
 8005fb0:	7ff00000 	.word	0x7ff00000
 8005fb4:	7ca00000 	.word	0x7ca00000
 8005fb8:	7fefffff 	.word	0x7fefffff
 8005fbc:	f014 0310 	ands.w	r3, r4, #16
 8005fc0:	bf18      	it	ne
 8005fc2:	236a      	movne	r3, #106	@ 0x6a
 8005fc4:	4ea9      	ldr	r6, [pc, #676]	@ (800626c <_strtod_l+0x854>)
 8005fc6:	9308      	str	r3, [sp, #32]
 8005fc8:	4650      	mov	r0, sl
 8005fca:	4659      	mov	r1, fp
 8005fcc:	2300      	movs	r3, #0
 8005fce:	07e2      	lsls	r2, r4, #31
 8005fd0:	d504      	bpl.n	8005fdc <_strtod_l+0x5c4>
 8005fd2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005fd6:	f7fa fb17 	bl	8000608 <__aeabi_dmul>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	1064      	asrs	r4, r4, #1
 8005fde:	f106 0608 	add.w	r6, r6, #8
 8005fe2:	d1f4      	bne.n	8005fce <_strtod_l+0x5b6>
 8005fe4:	b10b      	cbz	r3, 8005fea <_strtod_l+0x5d2>
 8005fe6:	4682      	mov	sl, r0
 8005fe8:	468b      	mov	fp, r1
 8005fea:	9b08      	ldr	r3, [sp, #32]
 8005fec:	b1b3      	cbz	r3, 800601c <_strtod_l+0x604>
 8005fee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005ff2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	4659      	mov	r1, fp
 8005ffa:	dd0f      	ble.n	800601c <_strtod_l+0x604>
 8005ffc:	2b1f      	cmp	r3, #31
 8005ffe:	dd55      	ble.n	80060ac <_strtod_l+0x694>
 8006000:	2b34      	cmp	r3, #52	@ 0x34
 8006002:	bfde      	ittt	le
 8006004:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8006008:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800600c:	4093      	lslle	r3, r2
 800600e:	f04f 0a00 	mov.w	sl, #0
 8006012:	bfcc      	ite	gt
 8006014:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006018:	ea03 0b01 	andle.w	fp, r3, r1
 800601c:	2200      	movs	r2, #0
 800601e:	2300      	movs	r3, #0
 8006020:	4650      	mov	r0, sl
 8006022:	4659      	mov	r1, fp
 8006024:	f7fa fd58 	bl	8000ad8 <__aeabi_dcmpeq>
 8006028:	2800      	cmp	r0, #0
 800602a:	d1a6      	bne.n	8005f7a <_strtod_l+0x562>
 800602c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006032:	9805      	ldr	r0, [sp, #20]
 8006034:	462b      	mov	r3, r5
 8006036:	463a      	mov	r2, r7
 8006038:	f7ff f8c6 	bl	80051c8 <__s2b>
 800603c:	900a      	str	r0, [sp, #40]	@ 0x28
 800603e:	2800      	cmp	r0, #0
 8006040:	f43f af05 	beq.w	8005e4e <_strtod_l+0x436>
 8006044:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006046:	2a00      	cmp	r2, #0
 8006048:	eba9 0308 	sub.w	r3, r9, r8
 800604c:	bfa8      	it	ge
 800604e:	2300      	movge	r3, #0
 8006050:	9312      	str	r3, [sp, #72]	@ 0x48
 8006052:	2400      	movs	r4, #0
 8006054:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006058:	9316      	str	r3, [sp, #88]	@ 0x58
 800605a:	46a0      	mov	r8, r4
 800605c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800605e:	9805      	ldr	r0, [sp, #20]
 8006060:	6859      	ldr	r1, [r3, #4]
 8006062:	f7ff f809 	bl	8005078 <_Balloc>
 8006066:	4681      	mov	r9, r0
 8006068:	2800      	cmp	r0, #0
 800606a:	f43f aef4 	beq.w	8005e56 <_strtod_l+0x43e>
 800606e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006070:	691a      	ldr	r2, [r3, #16]
 8006072:	3202      	adds	r2, #2
 8006074:	f103 010c 	add.w	r1, r3, #12
 8006078:	0092      	lsls	r2, r2, #2
 800607a:	300c      	adds	r0, #12
 800607c:	f7fe f89b 	bl	80041b6 <memcpy>
 8006080:	ec4b ab10 	vmov	d0, sl, fp
 8006084:	9805      	ldr	r0, [sp, #20]
 8006086:	aa1c      	add	r2, sp, #112	@ 0x70
 8006088:	a91b      	add	r1, sp, #108	@ 0x6c
 800608a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800608e:	f7ff fbd7 	bl	8005840 <__d2b>
 8006092:	901a      	str	r0, [sp, #104]	@ 0x68
 8006094:	2800      	cmp	r0, #0
 8006096:	f43f aede 	beq.w	8005e56 <_strtod_l+0x43e>
 800609a:	9805      	ldr	r0, [sp, #20]
 800609c:	2101      	movs	r1, #1
 800609e:	f7ff f929 	bl	80052f4 <__i2b>
 80060a2:	4680      	mov	r8, r0
 80060a4:	b948      	cbnz	r0, 80060ba <_strtod_l+0x6a2>
 80060a6:	f04f 0800 	mov.w	r8, #0
 80060aa:	e6d4      	b.n	8005e56 <_strtod_l+0x43e>
 80060ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80060b0:	fa02 f303 	lsl.w	r3, r2, r3
 80060b4:	ea03 0a0a 	and.w	sl, r3, sl
 80060b8:	e7b0      	b.n	800601c <_strtod_l+0x604>
 80060ba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80060bc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80060be:	2d00      	cmp	r5, #0
 80060c0:	bfab      	itete	ge
 80060c2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80060c4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80060c6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80060c8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80060ca:	bfac      	ite	ge
 80060cc:	18ef      	addge	r7, r5, r3
 80060ce:	1b5e      	sublt	r6, r3, r5
 80060d0:	9b08      	ldr	r3, [sp, #32]
 80060d2:	1aed      	subs	r5, r5, r3
 80060d4:	4415      	add	r5, r2
 80060d6:	4b66      	ldr	r3, [pc, #408]	@ (8006270 <_strtod_l+0x858>)
 80060d8:	3d01      	subs	r5, #1
 80060da:	429d      	cmp	r5, r3
 80060dc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80060e0:	da50      	bge.n	8006184 <_strtod_l+0x76c>
 80060e2:	1b5b      	subs	r3, r3, r5
 80060e4:	2b1f      	cmp	r3, #31
 80060e6:	eba2 0203 	sub.w	r2, r2, r3
 80060ea:	f04f 0101 	mov.w	r1, #1
 80060ee:	dc3d      	bgt.n	800616c <_strtod_l+0x754>
 80060f0:	fa01 f303 	lsl.w	r3, r1, r3
 80060f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80060f6:	2300      	movs	r3, #0
 80060f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80060fa:	18bd      	adds	r5, r7, r2
 80060fc:	9b08      	ldr	r3, [sp, #32]
 80060fe:	42af      	cmp	r7, r5
 8006100:	4416      	add	r6, r2
 8006102:	441e      	add	r6, r3
 8006104:	463b      	mov	r3, r7
 8006106:	bfa8      	it	ge
 8006108:	462b      	movge	r3, r5
 800610a:	42b3      	cmp	r3, r6
 800610c:	bfa8      	it	ge
 800610e:	4633      	movge	r3, r6
 8006110:	2b00      	cmp	r3, #0
 8006112:	bfc2      	ittt	gt
 8006114:	1aed      	subgt	r5, r5, r3
 8006116:	1af6      	subgt	r6, r6, r3
 8006118:	1aff      	subgt	r7, r7, r3
 800611a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800611c:	2b00      	cmp	r3, #0
 800611e:	dd16      	ble.n	800614e <_strtod_l+0x736>
 8006120:	4641      	mov	r1, r8
 8006122:	9805      	ldr	r0, [sp, #20]
 8006124:	461a      	mov	r2, r3
 8006126:	f7ff f9a5 	bl	8005474 <__pow5mult>
 800612a:	4680      	mov	r8, r0
 800612c:	2800      	cmp	r0, #0
 800612e:	d0ba      	beq.n	80060a6 <_strtod_l+0x68e>
 8006130:	4601      	mov	r1, r0
 8006132:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006134:	9805      	ldr	r0, [sp, #20]
 8006136:	f7ff f8f3 	bl	8005320 <__multiply>
 800613a:	900e      	str	r0, [sp, #56]	@ 0x38
 800613c:	2800      	cmp	r0, #0
 800613e:	f43f ae8a 	beq.w	8005e56 <_strtod_l+0x43e>
 8006142:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006144:	9805      	ldr	r0, [sp, #20]
 8006146:	f7fe ffd7 	bl	80050f8 <_Bfree>
 800614a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800614c:	931a      	str	r3, [sp, #104]	@ 0x68
 800614e:	2d00      	cmp	r5, #0
 8006150:	dc1d      	bgt.n	800618e <_strtod_l+0x776>
 8006152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006154:	2b00      	cmp	r3, #0
 8006156:	dd23      	ble.n	80061a0 <_strtod_l+0x788>
 8006158:	4649      	mov	r1, r9
 800615a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800615c:	9805      	ldr	r0, [sp, #20]
 800615e:	f7ff f989 	bl	8005474 <__pow5mult>
 8006162:	4681      	mov	r9, r0
 8006164:	b9e0      	cbnz	r0, 80061a0 <_strtod_l+0x788>
 8006166:	f04f 0900 	mov.w	r9, #0
 800616a:	e674      	b.n	8005e56 <_strtod_l+0x43e>
 800616c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006170:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006174:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006178:	35e2      	adds	r5, #226	@ 0xe2
 800617a:	fa01 f305 	lsl.w	r3, r1, r5
 800617e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006180:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006182:	e7ba      	b.n	80060fa <_strtod_l+0x6e2>
 8006184:	2300      	movs	r3, #0
 8006186:	9310      	str	r3, [sp, #64]	@ 0x40
 8006188:	2301      	movs	r3, #1
 800618a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800618c:	e7b5      	b.n	80060fa <_strtod_l+0x6e2>
 800618e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006190:	9805      	ldr	r0, [sp, #20]
 8006192:	462a      	mov	r2, r5
 8006194:	f7ff f9c8 	bl	8005528 <__lshift>
 8006198:	901a      	str	r0, [sp, #104]	@ 0x68
 800619a:	2800      	cmp	r0, #0
 800619c:	d1d9      	bne.n	8006152 <_strtod_l+0x73a>
 800619e:	e65a      	b.n	8005e56 <_strtod_l+0x43e>
 80061a0:	2e00      	cmp	r6, #0
 80061a2:	dd07      	ble.n	80061b4 <_strtod_l+0x79c>
 80061a4:	4649      	mov	r1, r9
 80061a6:	9805      	ldr	r0, [sp, #20]
 80061a8:	4632      	mov	r2, r6
 80061aa:	f7ff f9bd 	bl	8005528 <__lshift>
 80061ae:	4681      	mov	r9, r0
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d0d8      	beq.n	8006166 <_strtod_l+0x74e>
 80061b4:	2f00      	cmp	r7, #0
 80061b6:	dd08      	ble.n	80061ca <_strtod_l+0x7b2>
 80061b8:	4641      	mov	r1, r8
 80061ba:	9805      	ldr	r0, [sp, #20]
 80061bc:	463a      	mov	r2, r7
 80061be:	f7ff f9b3 	bl	8005528 <__lshift>
 80061c2:	4680      	mov	r8, r0
 80061c4:	2800      	cmp	r0, #0
 80061c6:	f43f ae46 	beq.w	8005e56 <_strtod_l+0x43e>
 80061ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80061cc:	9805      	ldr	r0, [sp, #20]
 80061ce:	464a      	mov	r2, r9
 80061d0:	f7ff fa32 	bl	8005638 <__mdiff>
 80061d4:	4604      	mov	r4, r0
 80061d6:	2800      	cmp	r0, #0
 80061d8:	f43f ae3d 	beq.w	8005e56 <_strtod_l+0x43e>
 80061dc:	68c3      	ldr	r3, [r0, #12]
 80061de:	930f      	str	r3, [sp, #60]	@ 0x3c
 80061e0:	2300      	movs	r3, #0
 80061e2:	60c3      	str	r3, [r0, #12]
 80061e4:	4641      	mov	r1, r8
 80061e6:	f7ff fa0b 	bl	8005600 <__mcmp>
 80061ea:	2800      	cmp	r0, #0
 80061ec:	da46      	bge.n	800627c <_strtod_l+0x864>
 80061ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061f0:	ea53 030a 	orrs.w	r3, r3, sl
 80061f4:	d16c      	bne.n	80062d0 <_strtod_l+0x8b8>
 80061f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d168      	bne.n	80062d0 <_strtod_l+0x8b8>
 80061fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006202:	0d1b      	lsrs	r3, r3, #20
 8006204:	051b      	lsls	r3, r3, #20
 8006206:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800620a:	d961      	bls.n	80062d0 <_strtod_l+0x8b8>
 800620c:	6963      	ldr	r3, [r4, #20]
 800620e:	b913      	cbnz	r3, 8006216 <_strtod_l+0x7fe>
 8006210:	6923      	ldr	r3, [r4, #16]
 8006212:	2b01      	cmp	r3, #1
 8006214:	dd5c      	ble.n	80062d0 <_strtod_l+0x8b8>
 8006216:	4621      	mov	r1, r4
 8006218:	2201      	movs	r2, #1
 800621a:	9805      	ldr	r0, [sp, #20]
 800621c:	f7ff f984 	bl	8005528 <__lshift>
 8006220:	4641      	mov	r1, r8
 8006222:	4604      	mov	r4, r0
 8006224:	f7ff f9ec 	bl	8005600 <__mcmp>
 8006228:	2800      	cmp	r0, #0
 800622a:	dd51      	ble.n	80062d0 <_strtod_l+0x8b8>
 800622c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006230:	9a08      	ldr	r2, [sp, #32]
 8006232:	0d1b      	lsrs	r3, r3, #20
 8006234:	051b      	lsls	r3, r3, #20
 8006236:	2a00      	cmp	r2, #0
 8006238:	d06b      	beq.n	8006312 <_strtod_l+0x8fa>
 800623a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800623e:	d868      	bhi.n	8006312 <_strtod_l+0x8fa>
 8006240:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006244:	f67f ae9d 	bls.w	8005f82 <_strtod_l+0x56a>
 8006248:	4b0a      	ldr	r3, [pc, #40]	@ (8006274 <_strtod_l+0x85c>)
 800624a:	4650      	mov	r0, sl
 800624c:	4659      	mov	r1, fp
 800624e:	2200      	movs	r2, #0
 8006250:	f7fa f9da 	bl	8000608 <__aeabi_dmul>
 8006254:	4b08      	ldr	r3, [pc, #32]	@ (8006278 <_strtod_l+0x860>)
 8006256:	400b      	ands	r3, r1
 8006258:	4682      	mov	sl, r0
 800625a:	468b      	mov	fp, r1
 800625c:	2b00      	cmp	r3, #0
 800625e:	f47f ae05 	bne.w	8005e6c <_strtod_l+0x454>
 8006262:	9a05      	ldr	r2, [sp, #20]
 8006264:	2322      	movs	r3, #34	@ 0x22
 8006266:	6013      	str	r3, [r2, #0]
 8006268:	e600      	b.n	8005e6c <_strtod_l+0x454>
 800626a:	bf00      	nop
 800626c:	08007b18 	.word	0x08007b18
 8006270:	fffffc02 	.word	0xfffffc02
 8006274:	39500000 	.word	0x39500000
 8006278:	7ff00000 	.word	0x7ff00000
 800627c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006280:	d165      	bne.n	800634e <_strtod_l+0x936>
 8006282:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006284:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006288:	b35a      	cbz	r2, 80062e2 <_strtod_l+0x8ca>
 800628a:	4a9f      	ldr	r2, [pc, #636]	@ (8006508 <_strtod_l+0xaf0>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d12b      	bne.n	80062e8 <_strtod_l+0x8d0>
 8006290:	9b08      	ldr	r3, [sp, #32]
 8006292:	4651      	mov	r1, sl
 8006294:	b303      	cbz	r3, 80062d8 <_strtod_l+0x8c0>
 8006296:	4b9d      	ldr	r3, [pc, #628]	@ (800650c <_strtod_l+0xaf4>)
 8006298:	465a      	mov	r2, fp
 800629a:	4013      	ands	r3, r2
 800629c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80062a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80062a4:	d81b      	bhi.n	80062de <_strtod_l+0x8c6>
 80062a6:	0d1b      	lsrs	r3, r3, #20
 80062a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80062ac:	fa02 f303 	lsl.w	r3, r2, r3
 80062b0:	4299      	cmp	r1, r3
 80062b2:	d119      	bne.n	80062e8 <_strtod_l+0x8d0>
 80062b4:	4b96      	ldr	r3, [pc, #600]	@ (8006510 <_strtod_l+0xaf8>)
 80062b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d102      	bne.n	80062c2 <_strtod_l+0x8aa>
 80062bc:	3101      	adds	r1, #1
 80062be:	f43f adca 	beq.w	8005e56 <_strtod_l+0x43e>
 80062c2:	4b92      	ldr	r3, [pc, #584]	@ (800650c <_strtod_l+0xaf4>)
 80062c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80062c6:	401a      	ands	r2, r3
 80062c8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80062cc:	f04f 0a00 	mov.w	sl, #0
 80062d0:	9b08      	ldr	r3, [sp, #32]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1b8      	bne.n	8006248 <_strtod_l+0x830>
 80062d6:	e5c9      	b.n	8005e6c <_strtod_l+0x454>
 80062d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80062dc:	e7e8      	b.n	80062b0 <_strtod_l+0x898>
 80062de:	4613      	mov	r3, r2
 80062e0:	e7e6      	b.n	80062b0 <_strtod_l+0x898>
 80062e2:	ea53 030a 	orrs.w	r3, r3, sl
 80062e6:	d0a1      	beq.n	800622c <_strtod_l+0x814>
 80062e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80062ea:	b1db      	cbz	r3, 8006324 <_strtod_l+0x90c>
 80062ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80062ee:	4213      	tst	r3, r2
 80062f0:	d0ee      	beq.n	80062d0 <_strtod_l+0x8b8>
 80062f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80062f4:	9a08      	ldr	r2, [sp, #32]
 80062f6:	4650      	mov	r0, sl
 80062f8:	4659      	mov	r1, fp
 80062fa:	b1bb      	cbz	r3, 800632c <_strtod_l+0x914>
 80062fc:	f7ff fb6e 	bl	80059dc <sulp>
 8006300:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006304:	ec53 2b10 	vmov	r2, r3, d0
 8006308:	f7f9 ffc8 	bl	800029c <__adddf3>
 800630c:	4682      	mov	sl, r0
 800630e:	468b      	mov	fp, r1
 8006310:	e7de      	b.n	80062d0 <_strtod_l+0x8b8>
 8006312:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006316:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800631a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800631e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006322:	e7d5      	b.n	80062d0 <_strtod_l+0x8b8>
 8006324:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006326:	ea13 0f0a 	tst.w	r3, sl
 800632a:	e7e1      	b.n	80062f0 <_strtod_l+0x8d8>
 800632c:	f7ff fb56 	bl	80059dc <sulp>
 8006330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006334:	ec53 2b10 	vmov	r2, r3, d0
 8006338:	f7f9 ffae 	bl	8000298 <__aeabi_dsub>
 800633c:	2200      	movs	r2, #0
 800633e:	2300      	movs	r3, #0
 8006340:	4682      	mov	sl, r0
 8006342:	468b      	mov	fp, r1
 8006344:	f7fa fbc8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006348:	2800      	cmp	r0, #0
 800634a:	d0c1      	beq.n	80062d0 <_strtod_l+0x8b8>
 800634c:	e619      	b.n	8005f82 <_strtod_l+0x56a>
 800634e:	4641      	mov	r1, r8
 8006350:	4620      	mov	r0, r4
 8006352:	f7ff facd 	bl	80058f0 <__ratio>
 8006356:	ec57 6b10 	vmov	r6, r7, d0
 800635a:	2200      	movs	r2, #0
 800635c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006360:	4630      	mov	r0, r6
 8006362:	4639      	mov	r1, r7
 8006364:	f7fa fbcc 	bl	8000b00 <__aeabi_dcmple>
 8006368:	2800      	cmp	r0, #0
 800636a:	d06f      	beq.n	800644c <_strtod_l+0xa34>
 800636c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800636e:	2b00      	cmp	r3, #0
 8006370:	d17a      	bne.n	8006468 <_strtod_l+0xa50>
 8006372:	f1ba 0f00 	cmp.w	sl, #0
 8006376:	d158      	bne.n	800642a <_strtod_l+0xa12>
 8006378:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800637a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800637e:	2b00      	cmp	r3, #0
 8006380:	d15a      	bne.n	8006438 <_strtod_l+0xa20>
 8006382:	4b64      	ldr	r3, [pc, #400]	@ (8006514 <_strtod_l+0xafc>)
 8006384:	2200      	movs	r2, #0
 8006386:	4630      	mov	r0, r6
 8006388:	4639      	mov	r1, r7
 800638a:	f7fa fbaf 	bl	8000aec <__aeabi_dcmplt>
 800638e:	2800      	cmp	r0, #0
 8006390:	d159      	bne.n	8006446 <_strtod_l+0xa2e>
 8006392:	4630      	mov	r0, r6
 8006394:	4639      	mov	r1, r7
 8006396:	4b60      	ldr	r3, [pc, #384]	@ (8006518 <_strtod_l+0xb00>)
 8006398:	2200      	movs	r2, #0
 800639a:	f7fa f935 	bl	8000608 <__aeabi_dmul>
 800639e:	4606      	mov	r6, r0
 80063a0:	460f      	mov	r7, r1
 80063a2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80063a6:	9606      	str	r6, [sp, #24]
 80063a8:	9307      	str	r3, [sp, #28]
 80063aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063ae:	4d57      	ldr	r5, [pc, #348]	@ (800650c <_strtod_l+0xaf4>)
 80063b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80063b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063b6:	401d      	ands	r5, r3
 80063b8:	4b58      	ldr	r3, [pc, #352]	@ (800651c <_strtod_l+0xb04>)
 80063ba:	429d      	cmp	r5, r3
 80063bc:	f040 80b2 	bne.w	8006524 <_strtod_l+0xb0c>
 80063c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063c2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80063c6:	ec4b ab10 	vmov	d0, sl, fp
 80063ca:	f7ff f9c9 	bl	8005760 <__ulp>
 80063ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063d2:	ec51 0b10 	vmov	r0, r1, d0
 80063d6:	f7fa f917 	bl	8000608 <__aeabi_dmul>
 80063da:	4652      	mov	r2, sl
 80063dc:	465b      	mov	r3, fp
 80063de:	f7f9 ff5d 	bl	800029c <__adddf3>
 80063e2:	460b      	mov	r3, r1
 80063e4:	4949      	ldr	r1, [pc, #292]	@ (800650c <_strtod_l+0xaf4>)
 80063e6:	4a4e      	ldr	r2, [pc, #312]	@ (8006520 <_strtod_l+0xb08>)
 80063e8:	4019      	ands	r1, r3
 80063ea:	4291      	cmp	r1, r2
 80063ec:	4682      	mov	sl, r0
 80063ee:	d942      	bls.n	8006476 <_strtod_l+0xa5e>
 80063f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80063f2:	4b47      	ldr	r3, [pc, #284]	@ (8006510 <_strtod_l+0xaf8>)
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d103      	bne.n	8006400 <_strtod_l+0x9e8>
 80063f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80063fa:	3301      	adds	r3, #1
 80063fc:	f43f ad2b 	beq.w	8005e56 <_strtod_l+0x43e>
 8006400:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8006510 <_strtod_l+0xaf8>
 8006404:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006408:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800640a:	9805      	ldr	r0, [sp, #20]
 800640c:	f7fe fe74 	bl	80050f8 <_Bfree>
 8006410:	9805      	ldr	r0, [sp, #20]
 8006412:	4649      	mov	r1, r9
 8006414:	f7fe fe70 	bl	80050f8 <_Bfree>
 8006418:	9805      	ldr	r0, [sp, #20]
 800641a:	4641      	mov	r1, r8
 800641c:	f7fe fe6c 	bl	80050f8 <_Bfree>
 8006420:	9805      	ldr	r0, [sp, #20]
 8006422:	4621      	mov	r1, r4
 8006424:	f7fe fe68 	bl	80050f8 <_Bfree>
 8006428:	e618      	b.n	800605c <_strtod_l+0x644>
 800642a:	f1ba 0f01 	cmp.w	sl, #1
 800642e:	d103      	bne.n	8006438 <_strtod_l+0xa20>
 8006430:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006432:	2b00      	cmp	r3, #0
 8006434:	f43f ada5 	beq.w	8005f82 <_strtod_l+0x56a>
 8006438:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80064e8 <_strtod_l+0xad0>
 800643c:	4f35      	ldr	r7, [pc, #212]	@ (8006514 <_strtod_l+0xafc>)
 800643e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006442:	2600      	movs	r6, #0
 8006444:	e7b1      	b.n	80063aa <_strtod_l+0x992>
 8006446:	4f34      	ldr	r7, [pc, #208]	@ (8006518 <_strtod_l+0xb00>)
 8006448:	2600      	movs	r6, #0
 800644a:	e7aa      	b.n	80063a2 <_strtod_l+0x98a>
 800644c:	4b32      	ldr	r3, [pc, #200]	@ (8006518 <_strtod_l+0xb00>)
 800644e:	4630      	mov	r0, r6
 8006450:	4639      	mov	r1, r7
 8006452:	2200      	movs	r2, #0
 8006454:	f7fa f8d8 	bl	8000608 <__aeabi_dmul>
 8006458:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800645a:	4606      	mov	r6, r0
 800645c:	460f      	mov	r7, r1
 800645e:	2b00      	cmp	r3, #0
 8006460:	d09f      	beq.n	80063a2 <_strtod_l+0x98a>
 8006462:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006466:	e7a0      	b.n	80063aa <_strtod_l+0x992>
 8006468:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80064f0 <_strtod_l+0xad8>
 800646c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006470:	ec57 6b17 	vmov	r6, r7, d7
 8006474:	e799      	b.n	80063aa <_strtod_l+0x992>
 8006476:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800647a:	9b08      	ldr	r3, [sp, #32]
 800647c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1c1      	bne.n	8006408 <_strtod_l+0x9f0>
 8006484:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006488:	0d1b      	lsrs	r3, r3, #20
 800648a:	051b      	lsls	r3, r3, #20
 800648c:	429d      	cmp	r5, r3
 800648e:	d1bb      	bne.n	8006408 <_strtod_l+0x9f0>
 8006490:	4630      	mov	r0, r6
 8006492:	4639      	mov	r1, r7
 8006494:	f7fa fc00 	bl	8000c98 <__aeabi_d2lz>
 8006498:	f7fa f888 	bl	80005ac <__aeabi_l2d>
 800649c:	4602      	mov	r2, r0
 800649e:	460b      	mov	r3, r1
 80064a0:	4630      	mov	r0, r6
 80064a2:	4639      	mov	r1, r7
 80064a4:	f7f9 fef8 	bl	8000298 <__aeabi_dsub>
 80064a8:	460b      	mov	r3, r1
 80064aa:	4602      	mov	r2, r0
 80064ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80064b0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80064b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064b6:	ea46 060a 	orr.w	r6, r6, sl
 80064ba:	431e      	orrs	r6, r3
 80064bc:	d06f      	beq.n	800659e <_strtod_l+0xb86>
 80064be:	a30e      	add	r3, pc, #56	@ (adr r3, 80064f8 <_strtod_l+0xae0>)
 80064c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c4:	f7fa fb12 	bl	8000aec <__aeabi_dcmplt>
 80064c8:	2800      	cmp	r0, #0
 80064ca:	f47f accf 	bne.w	8005e6c <_strtod_l+0x454>
 80064ce:	a30c      	add	r3, pc, #48	@ (adr r3, 8006500 <_strtod_l+0xae8>)
 80064d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064d8:	f7fa fb26 	bl	8000b28 <__aeabi_dcmpgt>
 80064dc:	2800      	cmp	r0, #0
 80064de:	d093      	beq.n	8006408 <_strtod_l+0x9f0>
 80064e0:	e4c4      	b.n	8005e6c <_strtod_l+0x454>
 80064e2:	bf00      	nop
 80064e4:	f3af 8000 	nop.w
 80064e8:	00000000 	.word	0x00000000
 80064ec:	bff00000 	.word	0xbff00000
 80064f0:	00000000 	.word	0x00000000
 80064f4:	3ff00000 	.word	0x3ff00000
 80064f8:	94a03595 	.word	0x94a03595
 80064fc:	3fdfffff 	.word	0x3fdfffff
 8006500:	35afe535 	.word	0x35afe535
 8006504:	3fe00000 	.word	0x3fe00000
 8006508:	000fffff 	.word	0x000fffff
 800650c:	7ff00000 	.word	0x7ff00000
 8006510:	7fefffff 	.word	0x7fefffff
 8006514:	3ff00000 	.word	0x3ff00000
 8006518:	3fe00000 	.word	0x3fe00000
 800651c:	7fe00000 	.word	0x7fe00000
 8006520:	7c9fffff 	.word	0x7c9fffff
 8006524:	9b08      	ldr	r3, [sp, #32]
 8006526:	b323      	cbz	r3, 8006572 <_strtod_l+0xb5a>
 8006528:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800652c:	d821      	bhi.n	8006572 <_strtod_l+0xb5a>
 800652e:	a328      	add	r3, pc, #160	@ (adr r3, 80065d0 <_strtod_l+0xbb8>)
 8006530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006534:	4630      	mov	r0, r6
 8006536:	4639      	mov	r1, r7
 8006538:	f7fa fae2 	bl	8000b00 <__aeabi_dcmple>
 800653c:	b1a0      	cbz	r0, 8006568 <_strtod_l+0xb50>
 800653e:	4639      	mov	r1, r7
 8006540:	4630      	mov	r0, r6
 8006542:	f7fa fb39 	bl	8000bb8 <__aeabi_d2uiz>
 8006546:	2801      	cmp	r0, #1
 8006548:	bf38      	it	cc
 800654a:	2001      	movcc	r0, #1
 800654c:	f7f9 ffe2 	bl	8000514 <__aeabi_ui2d>
 8006550:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006552:	4606      	mov	r6, r0
 8006554:	460f      	mov	r7, r1
 8006556:	b9fb      	cbnz	r3, 8006598 <_strtod_l+0xb80>
 8006558:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800655c:	9014      	str	r0, [sp, #80]	@ 0x50
 800655e:	9315      	str	r3, [sp, #84]	@ 0x54
 8006560:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006564:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006568:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800656a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800656e:	1b5b      	subs	r3, r3, r5
 8006570:	9311      	str	r3, [sp, #68]	@ 0x44
 8006572:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006576:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800657a:	f7ff f8f1 	bl	8005760 <__ulp>
 800657e:	4650      	mov	r0, sl
 8006580:	ec53 2b10 	vmov	r2, r3, d0
 8006584:	4659      	mov	r1, fp
 8006586:	f7fa f83f 	bl	8000608 <__aeabi_dmul>
 800658a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800658e:	f7f9 fe85 	bl	800029c <__adddf3>
 8006592:	4682      	mov	sl, r0
 8006594:	468b      	mov	fp, r1
 8006596:	e770      	b.n	800647a <_strtod_l+0xa62>
 8006598:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800659c:	e7e0      	b.n	8006560 <_strtod_l+0xb48>
 800659e:	a30e      	add	r3, pc, #56	@ (adr r3, 80065d8 <_strtod_l+0xbc0>)
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	f7fa faa2 	bl	8000aec <__aeabi_dcmplt>
 80065a8:	e798      	b.n	80064dc <_strtod_l+0xac4>
 80065aa:	2300      	movs	r3, #0
 80065ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80065b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	f7ff ba6d 	b.w	8005a92 <_strtod_l+0x7a>
 80065b8:	2a65      	cmp	r2, #101	@ 0x65
 80065ba:	f43f ab66 	beq.w	8005c8a <_strtod_l+0x272>
 80065be:	2a45      	cmp	r2, #69	@ 0x45
 80065c0:	f43f ab63 	beq.w	8005c8a <_strtod_l+0x272>
 80065c4:	2301      	movs	r3, #1
 80065c6:	f7ff bb9e 	b.w	8005d06 <_strtod_l+0x2ee>
 80065ca:	bf00      	nop
 80065cc:	f3af 8000 	nop.w
 80065d0:	ffc00000 	.word	0xffc00000
 80065d4:	41dfffff 	.word	0x41dfffff
 80065d8:	94a03595 	.word	0x94a03595
 80065dc:	3fcfffff 	.word	0x3fcfffff

080065e0 <_strtod_r>:
 80065e0:	4b01      	ldr	r3, [pc, #4]	@ (80065e8 <_strtod_r+0x8>)
 80065e2:	f7ff ba19 	b.w	8005a18 <_strtod_l>
 80065e6:	bf00      	nop
 80065e8:	20000074 	.word	0x20000074

080065ec <_strtol_l.constprop.0>:
 80065ec:	2b24      	cmp	r3, #36	@ 0x24
 80065ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065f2:	4686      	mov	lr, r0
 80065f4:	4690      	mov	r8, r2
 80065f6:	d801      	bhi.n	80065fc <_strtol_l.constprop.0+0x10>
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d106      	bne.n	800660a <_strtol_l.constprop.0+0x1e>
 80065fc:	f7fd fdae 	bl	800415c <__errno>
 8006600:	2316      	movs	r3, #22
 8006602:	6003      	str	r3, [r0, #0]
 8006604:	2000      	movs	r0, #0
 8006606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800660a:	4834      	ldr	r0, [pc, #208]	@ (80066dc <_strtol_l.constprop.0+0xf0>)
 800660c:	460d      	mov	r5, r1
 800660e:	462a      	mov	r2, r5
 8006610:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006614:	5d06      	ldrb	r6, [r0, r4]
 8006616:	f016 0608 	ands.w	r6, r6, #8
 800661a:	d1f8      	bne.n	800660e <_strtol_l.constprop.0+0x22>
 800661c:	2c2d      	cmp	r4, #45	@ 0x2d
 800661e:	d12d      	bne.n	800667c <_strtol_l.constprop.0+0x90>
 8006620:	782c      	ldrb	r4, [r5, #0]
 8006622:	2601      	movs	r6, #1
 8006624:	1c95      	adds	r5, r2, #2
 8006626:	f033 0210 	bics.w	r2, r3, #16
 800662a:	d109      	bne.n	8006640 <_strtol_l.constprop.0+0x54>
 800662c:	2c30      	cmp	r4, #48	@ 0x30
 800662e:	d12a      	bne.n	8006686 <_strtol_l.constprop.0+0x9a>
 8006630:	782a      	ldrb	r2, [r5, #0]
 8006632:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006636:	2a58      	cmp	r2, #88	@ 0x58
 8006638:	d125      	bne.n	8006686 <_strtol_l.constprop.0+0x9a>
 800663a:	786c      	ldrb	r4, [r5, #1]
 800663c:	2310      	movs	r3, #16
 800663e:	3502      	adds	r5, #2
 8006640:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006644:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8006648:	2200      	movs	r2, #0
 800664a:	fbbc f9f3 	udiv	r9, ip, r3
 800664e:	4610      	mov	r0, r2
 8006650:	fb03 ca19 	mls	sl, r3, r9, ip
 8006654:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006658:	2f09      	cmp	r7, #9
 800665a:	d81b      	bhi.n	8006694 <_strtol_l.constprop.0+0xa8>
 800665c:	463c      	mov	r4, r7
 800665e:	42a3      	cmp	r3, r4
 8006660:	dd27      	ble.n	80066b2 <_strtol_l.constprop.0+0xc6>
 8006662:	1c57      	adds	r7, r2, #1
 8006664:	d007      	beq.n	8006676 <_strtol_l.constprop.0+0x8a>
 8006666:	4581      	cmp	r9, r0
 8006668:	d320      	bcc.n	80066ac <_strtol_l.constprop.0+0xc0>
 800666a:	d101      	bne.n	8006670 <_strtol_l.constprop.0+0x84>
 800666c:	45a2      	cmp	sl, r4
 800666e:	db1d      	blt.n	80066ac <_strtol_l.constprop.0+0xc0>
 8006670:	fb00 4003 	mla	r0, r0, r3, r4
 8006674:	2201      	movs	r2, #1
 8006676:	f815 4b01 	ldrb.w	r4, [r5], #1
 800667a:	e7eb      	b.n	8006654 <_strtol_l.constprop.0+0x68>
 800667c:	2c2b      	cmp	r4, #43	@ 0x2b
 800667e:	bf04      	itt	eq
 8006680:	782c      	ldrbeq	r4, [r5, #0]
 8006682:	1c95      	addeq	r5, r2, #2
 8006684:	e7cf      	b.n	8006626 <_strtol_l.constprop.0+0x3a>
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1da      	bne.n	8006640 <_strtol_l.constprop.0+0x54>
 800668a:	2c30      	cmp	r4, #48	@ 0x30
 800668c:	bf0c      	ite	eq
 800668e:	2308      	moveq	r3, #8
 8006690:	230a      	movne	r3, #10
 8006692:	e7d5      	b.n	8006640 <_strtol_l.constprop.0+0x54>
 8006694:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006698:	2f19      	cmp	r7, #25
 800669a:	d801      	bhi.n	80066a0 <_strtol_l.constprop.0+0xb4>
 800669c:	3c37      	subs	r4, #55	@ 0x37
 800669e:	e7de      	b.n	800665e <_strtol_l.constprop.0+0x72>
 80066a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80066a4:	2f19      	cmp	r7, #25
 80066a6:	d804      	bhi.n	80066b2 <_strtol_l.constprop.0+0xc6>
 80066a8:	3c57      	subs	r4, #87	@ 0x57
 80066aa:	e7d8      	b.n	800665e <_strtol_l.constprop.0+0x72>
 80066ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80066b0:	e7e1      	b.n	8006676 <_strtol_l.constprop.0+0x8a>
 80066b2:	1c53      	adds	r3, r2, #1
 80066b4:	d108      	bne.n	80066c8 <_strtol_l.constprop.0+0xdc>
 80066b6:	2322      	movs	r3, #34	@ 0x22
 80066b8:	f8ce 3000 	str.w	r3, [lr]
 80066bc:	4660      	mov	r0, ip
 80066be:	f1b8 0f00 	cmp.w	r8, #0
 80066c2:	d0a0      	beq.n	8006606 <_strtol_l.constprop.0+0x1a>
 80066c4:	1e69      	subs	r1, r5, #1
 80066c6:	e006      	b.n	80066d6 <_strtol_l.constprop.0+0xea>
 80066c8:	b106      	cbz	r6, 80066cc <_strtol_l.constprop.0+0xe0>
 80066ca:	4240      	negs	r0, r0
 80066cc:	f1b8 0f00 	cmp.w	r8, #0
 80066d0:	d099      	beq.n	8006606 <_strtol_l.constprop.0+0x1a>
 80066d2:	2a00      	cmp	r2, #0
 80066d4:	d1f6      	bne.n	80066c4 <_strtol_l.constprop.0+0xd8>
 80066d6:	f8c8 1000 	str.w	r1, [r8]
 80066da:	e794      	b.n	8006606 <_strtol_l.constprop.0+0x1a>
 80066dc:	08007b41 	.word	0x08007b41

080066e0 <_strtol_r>:
 80066e0:	f7ff bf84 	b.w	80065ec <_strtol_l.constprop.0>

080066e4 <__ssputs_r>:
 80066e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066e8:	688e      	ldr	r6, [r1, #8]
 80066ea:	461f      	mov	r7, r3
 80066ec:	42be      	cmp	r6, r7
 80066ee:	680b      	ldr	r3, [r1, #0]
 80066f0:	4682      	mov	sl, r0
 80066f2:	460c      	mov	r4, r1
 80066f4:	4690      	mov	r8, r2
 80066f6:	d82d      	bhi.n	8006754 <__ssputs_r+0x70>
 80066f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80066fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006700:	d026      	beq.n	8006750 <__ssputs_r+0x6c>
 8006702:	6965      	ldr	r5, [r4, #20]
 8006704:	6909      	ldr	r1, [r1, #16]
 8006706:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800670a:	eba3 0901 	sub.w	r9, r3, r1
 800670e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006712:	1c7b      	adds	r3, r7, #1
 8006714:	444b      	add	r3, r9
 8006716:	106d      	asrs	r5, r5, #1
 8006718:	429d      	cmp	r5, r3
 800671a:	bf38      	it	cc
 800671c:	461d      	movcc	r5, r3
 800671e:	0553      	lsls	r3, r2, #21
 8006720:	d527      	bpl.n	8006772 <__ssputs_r+0x8e>
 8006722:	4629      	mov	r1, r5
 8006724:	f7fe fc1c 	bl	8004f60 <_malloc_r>
 8006728:	4606      	mov	r6, r0
 800672a:	b360      	cbz	r0, 8006786 <__ssputs_r+0xa2>
 800672c:	6921      	ldr	r1, [r4, #16]
 800672e:	464a      	mov	r2, r9
 8006730:	f7fd fd41 	bl	80041b6 <memcpy>
 8006734:	89a3      	ldrh	r3, [r4, #12]
 8006736:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800673a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800673e:	81a3      	strh	r3, [r4, #12]
 8006740:	6126      	str	r6, [r4, #16]
 8006742:	6165      	str	r5, [r4, #20]
 8006744:	444e      	add	r6, r9
 8006746:	eba5 0509 	sub.w	r5, r5, r9
 800674a:	6026      	str	r6, [r4, #0]
 800674c:	60a5      	str	r5, [r4, #8]
 800674e:	463e      	mov	r6, r7
 8006750:	42be      	cmp	r6, r7
 8006752:	d900      	bls.n	8006756 <__ssputs_r+0x72>
 8006754:	463e      	mov	r6, r7
 8006756:	6820      	ldr	r0, [r4, #0]
 8006758:	4632      	mov	r2, r6
 800675a:	4641      	mov	r1, r8
 800675c:	f000 f9c6 	bl	8006aec <memmove>
 8006760:	68a3      	ldr	r3, [r4, #8]
 8006762:	1b9b      	subs	r3, r3, r6
 8006764:	60a3      	str	r3, [r4, #8]
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	4433      	add	r3, r6
 800676a:	6023      	str	r3, [r4, #0]
 800676c:	2000      	movs	r0, #0
 800676e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006772:	462a      	mov	r2, r5
 8006774:	f000 fd7d 	bl	8007272 <_realloc_r>
 8006778:	4606      	mov	r6, r0
 800677a:	2800      	cmp	r0, #0
 800677c:	d1e0      	bne.n	8006740 <__ssputs_r+0x5c>
 800677e:	6921      	ldr	r1, [r4, #16]
 8006780:	4650      	mov	r0, sl
 8006782:	f7fe fb79 	bl	8004e78 <_free_r>
 8006786:	230c      	movs	r3, #12
 8006788:	f8ca 3000 	str.w	r3, [sl]
 800678c:	89a3      	ldrh	r3, [r4, #12]
 800678e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006792:	81a3      	strh	r3, [r4, #12]
 8006794:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006798:	e7e9      	b.n	800676e <__ssputs_r+0x8a>
	...

0800679c <_svfiprintf_r>:
 800679c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a0:	4698      	mov	r8, r3
 80067a2:	898b      	ldrh	r3, [r1, #12]
 80067a4:	061b      	lsls	r3, r3, #24
 80067a6:	b09d      	sub	sp, #116	@ 0x74
 80067a8:	4607      	mov	r7, r0
 80067aa:	460d      	mov	r5, r1
 80067ac:	4614      	mov	r4, r2
 80067ae:	d510      	bpl.n	80067d2 <_svfiprintf_r+0x36>
 80067b0:	690b      	ldr	r3, [r1, #16]
 80067b2:	b973      	cbnz	r3, 80067d2 <_svfiprintf_r+0x36>
 80067b4:	2140      	movs	r1, #64	@ 0x40
 80067b6:	f7fe fbd3 	bl	8004f60 <_malloc_r>
 80067ba:	6028      	str	r0, [r5, #0]
 80067bc:	6128      	str	r0, [r5, #16]
 80067be:	b930      	cbnz	r0, 80067ce <_svfiprintf_r+0x32>
 80067c0:	230c      	movs	r3, #12
 80067c2:	603b      	str	r3, [r7, #0]
 80067c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80067c8:	b01d      	add	sp, #116	@ 0x74
 80067ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ce:	2340      	movs	r3, #64	@ 0x40
 80067d0:	616b      	str	r3, [r5, #20]
 80067d2:	2300      	movs	r3, #0
 80067d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80067d6:	2320      	movs	r3, #32
 80067d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80067dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80067e0:	2330      	movs	r3, #48	@ 0x30
 80067e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006980 <_svfiprintf_r+0x1e4>
 80067e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80067ea:	f04f 0901 	mov.w	r9, #1
 80067ee:	4623      	mov	r3, r4
 80067f0:	469a      	mov	sl, r3
 80067f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067f6:	b10a      	cbz	r2, 80067fc <_svfiprintf_r+0x60>
 80067f8:	2a25      	cmp	r2, #37	@ 0x25
 80067fa:	d1f9      	bne.n	80067f0 <_svfiprintf_r+0x54>
 80067fc:	ebba 0b04 	subs.w	fp, sl, r4
 8006800:	d00b      	beq.n	800681a <_svfiprintf_r+0x7e>
 8006802:	465b      	mov	r3, fp
 8006804:	4622      	mov	r2, r4
 8006806:	4629      	mov	r1, r5
 8006808:	4638      	mov	r0, r7
 800680a:	f7ff ff6b 	bl	80066e4 <__ssputs_r>
 800680e:	3001      	adds	r0, #1
 8006810:	f000 80a7 	beq.w	8006962 <_svfiprintf_r+0x1c6>
 8006814:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006816:	445a      	add	r2, fp
 8006818:	9209      	str	r2, [sp, #36]	@ 0x24
 800681a:	f89a 3000 	ldrb.w	r3, [sl]
 800681e:	2b00      	cmp	r3, #0
 8006820:	f000 809f 	beq.w	8006962 <_svfiprintf_r+0x1c6>
 8006824:	2300      	movs	r3, #0
 8006826:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800682a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800682e:	f10a 0a01 	add.w	sl, sl, #1
 8006832:	9304      	str	r3, [sp, #16]
 8006834:	9307      	str	r3, [sp, #28]
 8006836:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800683a:	931a      	str	r3, [sp, #104]	@ 0x68
 800683c:	4654      	mov	r4, sl
 800683e:	2205      	movs	r2, #5
 8006840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006844:	484e      	ldr	r0, [pc, #312]	@ (8006980 <_svfiprintf_r+0x1e4>)
 8006846:	f7f9 fccb 	bl	80001e0 <memchr>
 800684a:	9a04      	ldr	r2, [sp, #16]
 800684c:	b9d8      	cbnz	r0, 8006886 <_svfiprintf_r+0xea>
 800684e:	06d0      	lsls	r0, r2, #27
 8006850:	bf44      	itt	mi
 8006852:	2320      	movmi	r3, #32
 8006854:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006858:	0711      	lsls	r1, r2, #28
 800685a:	bf44      	itt	mi
 800685c:	232b      	movmi	r3, #43	@ 0x2b
 800685e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006862:	f89a 3000 	ldrb.w	r3, [sl]
 8006866:	2b2a      	cmp	r3, #42	@ 0x2a
 8006868:	d015      	beq.n	8006896 <_svfiprintf_r+0xfa>
 800686a:	9a07      	ldr	r2, [sp, #28]
 800686c:	4654      	mov	r4, sl
 800686e:	2000      	movs	r0, #0
 8006870:	f04f 0c0a 	mov.w	ip, #10
 8006874:	4621      	mov	r1, r4
 8006876:	f811 3b01 	ldrb.w	r3, [r1], #1
 800687a:	3b30      	subs	r3, #48	@ 0x30
 800687c:	2b09      	cmp	r3, #9
 800687e:	d94b      	bls.n	8006918 <_svfiprintf_r+0x17c>
 8006880:	b1b0      	cbz	r0, 80068b0 <_svfiprintf_r+0x114>
 8006882:	9207      	str	r2, [sp, #28]
 8006884:	e014      	b.n	80068b0 <_svfiprintf_r+0x114>
 8006886:	eba0 0308 	sub.w	r3, r0, r8
 800688a:	fa09 f303 	lsl.w	r3, r9, r3
 800688e:	4313      	orrs	r3, r2
 8006890:	9304      	str	r3, [sp, #16]
 8006892:	46a2      	mov	sl, r4
 8006894:	e7d2      	b.n	800683c <_svfiprintf_r+0xa0>
 8006896:	9b03      	ldr	r3, [sp, #12]
 8006898:	1d19      	adds	r1, r3, #4
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	9103      	str	r1, [sp, #12]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	bfbb      	ittet	lt
 80068a2:	425b      	neglt	r3, r3
 80068a4:	f042 0202 	orrlt.w	r2, r2, #2
 80068a8:	9307      	strge	r3, [sp, #28]
 80068aa:	9307      	strlt	r3, [sp, #28]
 80068ac:	bfb8      	it	lt
 80068ae:	9204      	strlt	r2, [sp, #16]
 80068b0:	7823      	ldrb	r3, [r4, #0]
 80068b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80068b4:	d10a      	bne.n	80068cc <_svfiprintf_r+0x130>
 80068b6:	7863      	ldrb	r3, [r4, #1]
 80068b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80068ba:	d132      	bne.n	8006922 <_svfiprintf_r+0x186>
 80068bc:	9b03      	ldr	r3, [sp, #12]
 80068be:	1d1a      	adds	r2, r3, #4
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	9203      	str	r2, [sp, #12]
 80068c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80068c8:	3402      	adds	r4, #2
 80068ca:	9305      	str	r3, [sp, #20]
 80068cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006990 <_svfiprintf_r+0x1f4>
 80068d0:	7821      	ldrb	r1, [r4, #0]
 80068d2:	2203      	movs	r2, #3
 80068d4:	4650      	mov	r0, sl
 80068d6:	f7f9 fc83 	bl	80001e0 <memchr>
 80068da:	b138      	cbz	r0, 80068ec <_svfiprintf_r+0x150>
 80068dc:	9b04      	ldr	r3, [sp, #16]
 80068de:	eba0 000a 	sub.w	r0, r0, sl
 80068e2:	2240      	movs	r2, #64	@ 0x40
 80068e4:	4082      	lsls	r2, r0
 80068e6:	4313      	orrs	r3, r2
 80068e8:	3401      	adds	r4, #1
 80068ea:	9304      	str	r3, [sp, #16]
 80068ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068f0:	4824      	ldr	r0, [pc, #144]	@ (8006984 <_svfiprintf_r+0x1e8>)
 80068f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80068f6:	2206      	movs	r2, #6
 80068f8:	f7f9 fc72 	bl	80001e0 <memchr>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	d036      	beq.n	800696e <_svfiprintf_r+0x1d2>
 8006900:	4b21      	ldr	r3, [pc, #132]	@ (8006988 <_svfiprintf_r+0x1ec>)
 8006902:	bb1b      	cbnz	r3, 800694c <_svfiprintf_r+0x1b0>
 8006904:	9b03      	ldr	r3, [sp, #12]
 8006906:	3307      	adds	r3, #7
 8006908:	f023 0307 	bic.w	r3, r3, #7
 800690c:	3308      	adds	r3, #8
 800690e:	9303      	str	r3, [sp, #12]
 8006910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006912:	4433      	add	r3, r6
 8006914:	9309      	str	r3, [sp, #36]	@ 0x24
 8006916:	e76a      	b.n	80067ee <_svfiprintf_r+0x52>
 8006918:	fb0c 3202 	mla	r2, ip, r2, r3
 800691c:	460c      	mov	r4, r1
 800691e:	2001      	movs	r0, #1
 8006920:	e7a8      	b.n	8006874 <_svfiprintf_r+0xd8>
 8006922:	2300      	movs	r3, #0
 8006924:	3401      	adds	r4, #1
 8006926:	9305      	str	r3, [sp, #20]
 8006928:	4619      	mov	r1, r3
 800692a:	f04f 0c0a 	mov.w	ip, #10
 800692e:	4620      	mov	r0, r4
 8006930:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006934:	3a30      	subs	r2, #48	@ 0x30
 8006936:	2a09      	cmp	r2, #9
 8006938:	d903      	bls.n	8006942 <_svfiprintf_r+0x1a6>
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0c6      	beq.n	80068cc <_svfiprintf_r+0x130>
 800693e:	9105      	str	r1, [sp, #20]
 8006940:	e7c4      	b.n	80068cc <_svfiprintf_r+0x130>
 8006942:	fb0c 2101 	mla	r1, ip, r1, r2
 8006946:	4604      	mov	r4, r0
 8006948:	2301      	movs	r3, #1
 800694a:	e7f0      	b.n	800692e <_svfiprintf_r+0x192>
 800694c:	ab03      	add	r3, sp, #12
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	462a      	mov	r2, r5
 8006952:	4b0e      	ldr	r3, [pc, #56]	@ (800698c <_svfiprintf_r+0x1f0>)
 8006954:	a904      	add	r1, sp, #16
 8006956:	4638      	mov	r0, r7
 8006958:	f7fc fcbc 	bl	80032d4 <_printf_float>
 800695c:	1c42      	adds	r2, r0, #1
 800695e:	4606      	mov	r6, r0
 8006960:	d1d6      	bne.n	8006910 <_svfiprintf_r+0x174>
 8006962:	89ab      	ldrh	r3, [r5, #12]
 8006964:	065b      	lsls	r3, r3, #25
 8006966:	f53f af2d 	bmi.w	80067c4 <_svfiprintf_r+0x28>
 800696a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800696c:	e72c      	b.n	80067c8 <_svfiprintf_r+0x2c>
 800696e:	ab03      	add	r3, sp, #12
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	462a      	mov	r2, r5
 8006974:	4b05      	ldr	r3, [pc, #20]	@ (800698c <_svfiprintf_r+0x1f0>)
 8006976:	a904      	add	r1, sp, #16
 8006978:	4638      	mov	r0, r7
 800697a:	f7fc ff43 	bl	8003804 <_printf_i>
 800697e:	e7ed      	b.n	800695c <_svfiprintf_r+0x1c0>
 8006980:	08007c41 	.word	0x08007c41
 8006984:	08007c4b 	.word	0x08007c4b
 8006988:	080032d5 	.word	0x080032d5
 800698c:	080066e5 	.word	0x080066e5
 8006990:	08007c47 	.word	0x08007c47

08006994 <__sflush_r>:
 8006994:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800699c:	0716      	lsls	r6, r2, #28
 800699e:	4605      	mov	r5, r0
 80069a0:	460c      	mov	r4, r1
 80069a2:	d454      	bmi.n	8006a4e <__sflush_r+0xba>
 80069a4:	684b      	ldr	r3, [r1, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	dc02      	bgt.n	80069b0 <__sflush_r+0x1c>
 80069aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	dd48      	ble.n	8006a42 <__sflush_r+0xae>
 80069b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80069b2:	2e00      	cmp	r6, #0
 80069b4:	d045      	beq.n	8006a42 <__sflush_r+0xae>
 80069b6:	2300      	movs	r3, #0
 80069b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80069bc:	682f      	ldr	r7, [r5, #0]
 80069be:	6a21      	ldr	r1, [r4, #32]
 80069c0:	602b      	str	r3, [r5, #0]
 80069c2:	d030      	beq.n	8006a26 <__sflush_r+0x92>
 80069c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80069c6:	89a3      	ldrh	r3, [r4, #12]
 80069c8:	0759      	lsls	r1, r3, #29
 80069ca:	d505      	bpl.n	80069d8 <__sflush_r+0x44>
 80069cc:	6863      	ldr	r3, [r4, #4]
 80069ce:	1ad2      	subs	r2, r2, r3
 80069d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80069d2:	b10b      	cbz	r3, 80069d8 <__sflush_r+0x44>
 80069d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80069d6:	1ad2      	subs	r2, r2, r3
 80069d8:	2300      	movs	r3, #0
 80069da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80069dc:	6a21      	ldr	r1, [r4, #32]
 80069de:	4628      	mov	r0, r5
 80069e0:	47b0      	blx	r6
 80069e2:	1c43      	adds	r3, r0, #1
 80069e4:	89a3      	ldrh	r3, [r4, #12]
 80069e6:	d106      	bne.n	80069f6 <__sflush_r+0x62>
 80069e8:	6829      	ldr	r1, [r5, #0]
 80069ea:	291d      	cmp	r1, #29
 80069ec:	d82b      	bhi.n	8006a46 <__sflush_r+0xb2>
 80069ee:	4a2a      	ldr	r2, [pc, #168]	@ (8006a98 <__sflush_r+0x104>)
 80069f0:	410a      	asrs	r2, r1
 80069f2:	07d6      	lsls	r6, r2, #31
 80069f4:	d427      	bmi.n	8006a46 <__sflush_r+0xb2>
 80069f6:	2200      	movs	r2, #0
 80069f8:	6062      	str	r2, [r4, #4]
 80069fa:	04d9      	lsls	r1, r3, #19
 80069fc:	6922      	ldr	r2, [r4, #16]
 80069fe:	6022      	str	r2, [r4, #0]
 8006a00:	d504      	bpl.n	8006a0c <__sflush_r+0x78>
 8006a02:	1c42      	adds	r2, r0, #1
 8006a04:	d101      	bne.n	8006a0a <__sflush_r+0x76>
 8006a06:	682b      	ldr	r3, [r5, #0]
 8006a08:	b903      	cbnz	r3, 8006a0c <__sflush_r+0x78>
 8006a0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a0e:	602f      	str	r7, [r5, #0]
 8006a10:	b1b9      	cbz	r1, 8006a42 <__sflush_r+0xae>
 8006a12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a16:	4299      	cmp	r1, r3
 8006a18:	d002      	beq.n	8006a20 <__sflush_r+0x8c>
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	f7fe fa2c 	bl	8004e78 <_free_r>
 8006a20:	2300      	movs	r3, #0
 8006a22:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a24:	e00d      	b.n	8006a42 <__sflush_r+0xae>
 8006a26:	2301      	movs	r3, #1
 8006a28:	4628      	mov	r0, r5
 8006a2a:	47b0      	blx	r6
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	1c50      	adds	r0, r2, #1
 8006a30:	d1c9      	bne.n	80069c6 <__sflush_r+0x32>
 8006a32:	682b      	ldr	r3, [r5, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d0c6      	beq.n	80069c6 <__sflush_r+0x32>
 8006a38:	2b1d      	cmp	r3, #29
 8006a3a:	d001      	beq.n	8006a40 <__sflush_r+0xac>
 8006a3c:	2b16      	cmp	r3, #22
 8006a3e:	d11e      	bne.n	8006a7e <__sflush_r+0xea>
 8006a40:	602f      	str	r7, [r5, #0]
 8006a42:	2000      	movs	r0, #0
 8006a44:	e022      	b.n	8006a8c <__sflush_r+0xf8>
 8006a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a4a:	b21b      	sxth	r3, r3
 8006a4c:	e01b      	b.n	8006a86 <__sflush_r+0xf2>
 8006a4e:	690f      	ldr	r7, [r1, #16]
 8006a50:	2f00      	cmp	r7, #0
 8006a52:	d0f6      	beq.n	8006a42 <__sflush_r+0xae>
 8006a54:	0793      	lsls	r3, r2, #30
 8006a56:	680e      	ldr	r6, [r1, #0]
 8006a58:	bf08      	it	eq
 8006a5a:	694b      	ldreq	r3, [r1, #20]
 8006a5c:	600f      	str	r7, [r1, #0]
 8006a5e:	bf18      	it	ne
 8006a60:	2300      	movne	r3, #0
 8006a62:	eba6 0807 	sub.w	r8, r6, r7
 8006a66:	608b      	str	r3, [r1, #8]
 8006a68:	f1b8 0f00 	cmp.w	r8, #0
 8006a6c:	dde9      	ble.n	8006a42 <__sflush_r+0xae>
 8006a6e:	6a21      	ldr	r1, [r4, #32]
 8006a70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006a72:	4643      	mov	r3, r8
 8006a74:	463a      	mov	r2, r7
 8006a76:	4628      	mov	r0, r5
 8006a78:	47b0      	blx	r6
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	dc08      	bgt.n	8006a90 <__sflush_r+0xfc>
 8006a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a86:	81a3      	strh	r3, [r4, #12]
 8006a88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a90:	4407      	add	r7, r0
 8006a92:	eba8 0800 	sub.w	r8, r8, r0
 8006a96:	e7e7      	b.n	8006a68 <__sflush_r+0xd4>
 8006a98:	dfbffffe 	.word	0xdfbffffe

08006a9c <_fflush_r>:
 8006a9c:	b538      	push	{r3, r4, r5, lr}
 8006a9e:	690b      	ldr	r3, [r1, #16]
 8006aa0:	4605      	mov	r5, r0
 8006aa2:	460c      	mov	r4, r1
 8006aa4:	b913      	cbnz	r3, 8006aac <_fflush_r+0x10>
 8006aa6:	2500      	movs	r5, #0
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	bd38      	pop	{r3, r4, r5, pc}
 8006aac:	b118      	cbz	r0, 8006ab6 <_fflush_r+0x1a>
 8006aae:	6a03      	ldr	r3, [r0, #32]
 8006ab0:	b90b      	cbnz	r3, 8006ab6 <_fflush_r+0x1a>
 8006ab2:	f7fd fa67 	bl	8003f84 <__sinit>
 8006ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d0f3      	beq.n	8006aa6 <_fflush_r+0xa>
 8006abe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006ac0:	07d0      	lsls	r0, r2, #31
 8006ac2:	d404      	bmi.n	8006ace <_fflush_r+0x32>
 8006ac4:	0599      	lsls	r1, r3, #22
 8006ac6:	d402      	bmi.n	8006ace <_fflush_r+0x32>
 8006ac8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006aca:	f7fd fb72 	bl	80041b2 <__retarget_lock_acquire_recursive>
 8006ace:	4628      	mov	r0, r5
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	f7ff ff5f 	bl	8006994 <__sflush_r>
 8006ad6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ad8:	07da      	lsls	r2, r3, #31
 8006ada:	4605      	mov	r5, r0
 8006adc:	d4e4      	bmi.n	8006aa8 <_fflush_r+0xc>
 8006ade:	89a3      	ldrh	r3, [r4, #12]
 8006ae0:	059b      	lsls	r3, r3, #22
 8006ae2:	d4e1      	bmi.n	8006aa8 <_fflush_r+0xc>
 8006ae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ae6:	f7fd fb65 	bl	80041b4 <__retarget_lock_release_recursive>
 8006aea:	e7dd      	b.n	8006aa8 <_fflush_r+0xc>

08006aec <memmove>:
 8006aec:	4288      	cmp	r0, r1
 8006aee:	b510      	push	{r4, lr}
 8006af0:	eb01 0402 	add.w	r4, r1, r2
 8006af4:	d902      	bls.n	8006afc <memmove+0x10>
 8006af6:	4284      	cmp	r4, r0
 8006af8:	4623      	mov	r3, r4
 8006afa:	d807      	bhi.n	8006b0c <memmove+0x20>
 8006afc:	1e43      	subs	r3, r0, #1
 8006afe:	42a1      	cmp	r1, r4
 8006b00:	d008      	beq.n	8006b14 <memmove+0x28>
 8006b02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b0a:	e7f8      	b.n	8006afe <memmove+0x12>
 8006b0c:	4402      	add	r2, r0
 8006b0e:	4601      	mov	r1, r0
 8006b10:	428a      	cmp	r2, r1
 8006b12:	d100      	bne.n	8006b16 <memmove+0x2a>
 8006b14:	bd10      	pop	{r4, pc}
 8006b16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b1e:	e7f7      	b.n	8006b10 <memmove+0x24>

08006b20 <strncmp>:
 8006b20:	b510      	push	{r4, lr}
 8006b22:	b16a      	cbz	r2, 8006b40 <strncmp+0x20>
 8006b24:	3901      	subs	r1, #1
 8006b26:	1884      	adds	r4, r0, r2
 8006b28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b2c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d103      	bne.n	8006b3c <strncmp+0x1c>
 8006b34:	42a0      	cmp	r0, r4
 8006b36:	d001      	beq.n	8006b3c <strncmp+0x1c>
 8006b38:	2a00      	cmp	r2, #0
 8006b3a:	d1f5      	bne.n	8006b28 <strncmp+0x8>
 8006b3c:	1ad0      	subs	r0, r2, r3
 8006b3e:	bd10      	pop	{r4, pc}
 8006b40:	4610      	mov	r0, r2
 8006b42:	e7fc      	b.n	8006b3e <strncmp+0x1e>

08006b44 <_sbrk_r>:
 8006b44:	b538      	push	{r3, r4, r5, lr}
 8006b46:	4d06      	ldr	r5, [pc, #24]	@ (8006b60 <_sbrk_r+0x1c>)
 8006b48:	2300      	movs	r3, #0
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	4608      	mov	r0, r1
 8006b4e:	602b      	str	r3, [r5, #0]
 8006b50:	f7fc fa16 	bl	8002f80 <_sbrk>
 8006b54:	1c43      	adds	r3, r0, #1
 8006b56:	d102      	bne.n	8006b5e <_sbrk_r+0x1a>
 8006b58:	682b      	ldr	r3, [r5, #0]
 8006b5a:	b103      	cbz	r3, 8006b5e <_sbrk_r+0x1a>
 8006b5c:	6023      	str	r3, [r4, #0]
 8006b5e:	bd38      	pop	{r3, r4, r5, pc}
 8006b60:	200040a4 	.word	0x200040a4
 8006b64:	00000000 	.word	0x00000000

08006b68 <nan>:
 8006b68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006b70 <nan+0x8>
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	00000000 	.word	0x00000000
 8006b74:	7ff80000 	.word	0x7ff80000

08006b78 <__assert_func>:
 8006b78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b7a:	4614      	mov	r4, r2
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	4b09      	ldr	r3, [pc, #36]	@ (8006ba4 <__assert_func+0x2c>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4605      	mov	r5, r0
 8006b84:	68d8      	ldr	r0, [r3, #12]
 8006b86:	b954      	cbnz	r4, 8006b9e <__assert_func+0x26>
 8006b88:	4b07      	ldr	r3, [pc, #28]	@ (8006ba8 <__assert_func+0x30>)
 8006b8a:	461c      	mov	r4, r3
 8006b8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b90:	9100      	str	r1, [sp, #0]
 8006b92:	462b      	mov	r3, r5
 8006b94:	4905      	ldr	r1, [pc, #20]	@ (8006bac <__assert_func+0x34>)
 8006b96:	f000 fba7 	bl	80072e8 <fiprintf>
 8006b9a:	f000 fbb7 	bl	800730c <abort>
 8006b9e:	4b04      	ldr	r3, [pc, #16]	@ (8006bb0 <__assert_func+0x38>)
 8006ba0:	e7f4      	b.n	8006b8c <__assert_func+0x14>
 8006ba2:	bf00      	nop
 8006ba4:	20000024 	.word	0x20000024
 8006ba8:	08007c95 	.word	0x08007c95
 8006bac:	08007c67 	.word	0x08007c67
 8006bb0:	08007c5a 	.word	0x08007c5a

08006bb4 <_calloc_r>:
 8006bb4:	b570      	push	{r4, r5, r6, lr}
 8006bb6:	fba1 5402 	umull	r5, r4, r1, r2
 8006bba:	b93c      	cbnz	r4, 8006bcc <_calloc_r+0x18>
 8006bbc:	4629      	mov	r1, r5
 8006bbe:	f7fe f9cf 	bl	8004f60 <_malloc_r>
 8006bc2:	4606      	mov	r6, r0
 8006bc4:	b928      	cbnz	r0, 8006bd2 <_calloc_r+0x1e>
 8006bc6:	2600      	movs	r6, #0
 8006bc8:	4630      	mov	r0, r6
 8006bca:	bd70      	pop	{r4, r5, r6, pc}
 8006bcc:	220c      	movs	r2, #12
 8006bce:	6002      	str	r2, [r0, #0]
 8006bd0:	e7f9      	b.n	8006bc6 <_calloc_r+0x12>
 8006bd2:	462a      	mov	r2, r5
 8006bd4:	4621      	mov	r1, r4
 8006bd6:	f7fd fa6e 	bl	80040b6 <memset>
 8006bda:	e7f5      	b.n	8006bc8 <_calloc_r+0x14>

08006bdc <rshift>:
 8006bdc:	6903      	ldr	r3, [r0, #16]
 8006bde:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006be2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006be6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006bea:	f100 0414 	add.w	r4, r0, #20
 8006bee:	dd45      	ble.n	8006c7c <rshift+0xa0>
 8006bf0:	f011 011f 	ands.w	r1, r1, #31
 8006bf4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006bf8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006bfc:	d10c      	bne.n	8006c18 <rshift+0x3c>
 8006bfe:	f100 0710 	add.w	r7, r0, #16
 8006c02:	4629      	mov	r1, r5
 8006c04:	42b1      	cmp	r1, r6
 8006c06:	d334      	bcc.n	8006c72 <rshift+0x96>
 8006c08:	1a9b      	subs	r3, r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	1eea      	subs	r2, r5, #3
 8006c0e:	4296      	cmp	r6, r2
 8006c10:	bf38      	it	cc
 8006c12:	2300      	movcc	r3, #0
 8006c14:	4423      	add	r3, r4
 8006c16:	e015      	b.n	8006c44 <rshift+0x68>
 8006c18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006c1c:	f1c1 0820 	rsb	r8, r1, #32
 8006c20:	40cf      	lsrs	r7, r1
 8006c22:	f105 0e04 	add.w	lr, r5, #4
 8006c26:	46a1      	mov	r9, r4
 8006c28:	4576      	cmp	r6, lr
 8006c2a:	46f4      	mov	ip, lr
 8006c2c:	d815      	bhi.n	8006c5a <rshift+0x7e>
 8006c2e:	1a9a      	subs	r2, r3, r2
 8006c30:	0092      	lsls	r2, r2, #2
 8006c32:	3a04      	subs	r2, #4
 8006c34:	3501      	adds	r5, #1
 8006c36:	42ae      	cmp	r6, r5
 8006c38:	bf38      	it	cc
 8006c3a:	2200      	movcc	r2, #0
 8006c3c:	18a3      	adds	r3, r4, r2
 8006c3e:	50a7      	str	r7, [r4, r2]
 8006c40:	b107      	cbz	r7, 8006c44 <rshift+0x68>
 8006c42:	3304      	adds	r3, #4
 8006c44:	1b1a      	subs	r2, r3, r4
 8006c46:	42a3      	cmp	r3, r4
 8006c48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006c4c:	bf08      	it	eq
 8006c4e:	2300      	moveq	r3, #0
 8006c50:	6102      	str	r2, [r0, #16]
 8006c52:	bf08      	it	eq
 8006c54:	6143      	streq	r3, [r0, #20]
 8006c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c5a:	f8dc c000 	ldr.w	ip, [ip]
 8006c5e:	fa0c fc08 	lsl.w	ip, ip, r8
 8006c62:	ea4c 0707 	orr.w	r7, ip, r7
 8006c66:	f849 7b04 	str.w	r7, [r9], #4
 8006c6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006c6e:	40cf      	lsrs	r7, r1
 8006c70:	e7da      	b.n	8006c28 <rshift+0x4c>
 8006c72:	f851 cb04 	ldr.w	ip, [r1], #4
 8006c76:	f847 cf04 	str.w	ip, [r7, #4]!
 8006c7a:	e7c3      	b.n	8006c04 <rshift+0x28>
 8006c7c:	4623      	mov	r3, r4
 8006c7e:	e7e1      	b.n	8006c44 <rshift+0x68>

08006c80 <__hexdig_fun>:
 8006c80:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8006c84:	2b09      	cmp	r3, #9
 8006c86:	d802      	bhi.n	8006c8e <__hexdig_fun+0xe>
 8006c88:	3820      	subs	r0, #32
 8006c8a:	b2c0      	uxtb	r0, r0
 8006c8c:	4770      	bx	lr
 8006c8e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006c92:	2b05      	cmp	r3, #5
 8006c94:	d801      	bhi.n	8006c9a <__hexdig_fun+0x1a>
 8006c96:	3847      	subs	r0, #71	@ 0x47
 8006c98:	e7f7      	b.n	8006c8a <__hexdig_fun+0xa>
 8006c9a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006c9e:	2b05      	cmp	r3, #5
 8006ca0:	d801      	bhi.n	8006ca6 <__hexdig_fun+0x26>
 8006ca2:	3827      	subs	r0, #39	@ 0x27
 8006ca4:	e7f1      	b.n	8006c8a <__hexdig_fun+0xa>
 8006ca6:	2000      	movs	r0, #0
 8006ca8:	4770      	bx	lr
	...

08006cac <__gethex>:
 8006cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb0:	b085      	sub	sp, #20
 8006cb2:	468a      	mov	sl, r1
 8006cb4:	9302      	str	r3, [sp, #8]
 8006cb6:	680b      	ldr	r3, [r1, #0]
 8006cb8:	9001      	str	r0, [sp, #4]
 8006cba:	4690      	mov	r8, r2
 8006cbc:	1c9c      	adds	r4, r3, #2
 8006cbe:	46a1      	mov	r9, r4
 8006cc0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006cc4:	2830      	cmp	r0, #48	@ 0x30
 8006cc6:	d0fa      	beq.n	8006cbe <__gethex+0x12>
 8006cc8:	eba9 0303 	sub.w	r3, r9, r3
 8006ccc:	f1a3 0b02 	sub.w	fp, r3, #2
 8006cd0:	f7ff ffd6 	bl	8006c80 <__hexdig_fun>
 8006cd4:	4605      	mov	r5, r0
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	d168      	bne.n	8006dac <__gethex+0x100>
 8006cda:	49a0      	ldr	r1, [pc, #640]	@ (8006f5c <__gethex+0x2b0>)
 8006cdc:	2201      	movs	r2, #1
 8006cde:	4648      	mov	r0, r9
 8006ce0:	f7ff ff1e 	bl	8006b20 <strncmp>
 8006ce4:	4607      	mov	r7, r0
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	d167      	bne.n	8006dba <__gethex+0x10e>
 8006cea:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006cee:	4626      	mov	r6, r4
 8006cf0:	f7ff ffc6 	bl	8006c80 <__hexdig_fun>
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	d062      	beq.n	8006dbe <__gethex+0x112>
 8006cf8:	4623      	mov	r3, r4
 8006cfa:	7818      	ldrb	r0, [r3, #0]
 8006cfc:	2830      	cmp	r0, #48	@ 0x30
 8006cfe:	4699      	mov	r9, r3
 8006d00:	f103 0301 	add.w	r3, r3, #1
 8006d04:	d0f9      	beq.n	8006cfa <__gethex+0x4e>
 8006d06:	f7ff ffbb 	bl	8006c80 <__hexdig_fun>
 8006d0a:	fab0 f580 	clz	r5, r0
 8006d0e:	096d      	lsrs	r5, r5, #5
 8006d10:	f04f 0b01 	mov.w	fp, #1
 8006d14:	464a      	mov	r2, r9
 8006d16:	4616      	mov	r6, r2
 8006d18:	3201      	adds	r2, #1
 8006d1a:	7830      	ldrb	r0, [r6, #0]
 8006d1c:	f7ff ffb0 	bl	8006c80 <__hexdig_fun>
 8006d20:	2800      	cmp	r0, #0
 8006d22:	d1f8      	bne.n	8006d16 <__gethex+0x6a>
 8006d24:	498d      	ldr	r1, [pc, #564]	@ (8006f5c <__gethex+0x2b0>)
 8006d26:	2201      	movs	r2, #1
 8006d28:	4630      	mov	r0, r6
 8006d2a:	f7ff fef9 	bl	8006b20 <strncmp>
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	d13f      	bne.n	8006db2 <__gethex+0x106>
 8006d32:	b944      	cbnz	r4, 8006d46 <__gethex+0x9a>
 8006d34:	1c74      	adds	r4, r6, #1
 8006d36:	4622      	mov	r2, r4
 8006d38:	4616      	mov	r6, r2
 8006d3a:	3201      	adds	r2, #1
 8006d3c:	7830      	ldrb	r0, [r6, #0]
 8006d3e:	f7ff ff9f 	bl	8006c80 <__hexdig_fun>
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d1f8      	bne.n	8006d38 <__gethex+0x8c>
 8006d46:	1ba4      	subs	r4, r4, r6
 8006d48:	00a7      	lsls	r7, r4, #2
 8006d4a:	7833      	ldrb	r3, [r6, #0]
 8006d4c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006d50:	2b50      	cmp	r3, #80	@ 0x50
 8006d52:	d13e      	bne.n	8006dd2 <__gethex+0x126>
 8006d54:	7873      	ldrb	r3, [r6, #1]
 8006d56:	2b2b      	cmp	r3, #43	@ 0x2b
 8006d58:	d033      	beq.n	8006dc2 <__gethex+0x116>
 8006d5a:	2b2d      	cmp	r3, #45	@ 0x2d
 8006d5c:	d034      	beq.n	8006dc8 <__gethex+0x11c>
 8006d5e:	1c71      	adds	r1, r6, #1
 8006d60:	2400      	movs	r4, #0
 8006d62:	7808      	ldrb	r0, [r1, #0]
 8006d64:	f7ff ff8c 	bl	8006c80 <__hexdig_fun>
 8006d68:	1e43      	subs	r3, r0, #1
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b18      	cmp	r3, #24
 8006d6e:	d830      	bhi.n	8006dd2 <__gethex+0x126>
 8006d70:	f1a0 0210 	sub.w	r2, r0, #16
 8006d74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006d78:	f7ff ff82 	bl	8006c80 <__hexdig_fun>
 8006d7c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8006d80:	fa5f fc8c 	uxtb.w	ip, ip
 8006d84:	f1bc 0f18 	cmp.w	ip, #24
 8006d88:	f04f 030a 	mov.w	r3, #10
 8006d8c:	d91e      	bls.n	8006dcc <__gethex+0x120>
 8006d8e:	b104      	cbz	r4, 8006d92 <__gethex+0xe6>
 8006d90:	4252      	negs	r2, r2
 8006d92:	4417      	add	r7, r2
 8006d94:	f8ca 1000 	str.w	r1, [sl]
 8006d98:	b1ed      	cbz	r5, 8006dd6 <__gethex+0x12a>
 8006d9a:	f1bb 0f00 	cmp.w	fp, #0
 8006d9e:	bf0c      	ite	eq
 8006da0:	2506      	moveq	r5, #6
 8006da2:	2500      	movne	r5, #0
 8006da4:	4628      	mov	r0, r5
 8006da6:	b005      	add	sp, #20
 8006da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dac:	2500      	movs	r5, #0
 8006dae:	462c      	mov	r4, r5
 8006db0:	e7b0      	b.n	8006d14 <__gethex+0x68>
 8006db2:	2c00      	cmp	r4, #0
 8006db4:	d1c7      	bne.n	8006d46 <__gethex+0x9a>
 8006db6:	4627      	mov	r7, r4
 8006db8:	e7c7      	b.n	8006d4a <__gethex+0x9e>
 8006dba:	464e      	mov	r6, r9
 8006dbc:	462f      	mov	r7, r5
 8006dbe:	2501      	movs	r5, #1
 8006dc0:	e7c3      	b.n	8006d4a <__gethex+0x9e>
 8006dc2:	2400      	movs	r4, #0
 8006dc4:	1cb1      	adds	r1, r6, #2
 8006dc6:	e7cc      	b.n	8006d62 <__gethex+0xb6>
 8006dc8:	2401      	movs	r4, #1
 8006dca:	e7fb      	b.n	8006dc4 <__gethex+0x118>
 8006dcc:	fb03 0002 	mla	r0, r3, r2, r0
 8006dd0:	e7ce      	b.n	8006d70 <__gethex+0xc4>
 8006dd2:	4631      	mov	r1, r6
 8006dd4:	e7de      	b.n	8006d94 <__gethex+0xe8>
 8006dd6:	eba6 0309 	sub.w	r3, r6, r9
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	4629      	mov	r1, r5
 8006dde:	2b07      	cmp	r3, #7
 8006de0:	dc0a      	bgt.n	8006df8 <__gethex+0x14c>
 8006de2:	9801      	ldr	r0, [sp, #4]
 8006de4:	f7fe f948 	bl	8005078 <_Balloc>
 8006de8:	4604      	mov	r4, r0
 8006dea:	b940      	cbnz	r0, 8006dfe <__gethex+0x152>
 8006dec:	4b5c      	ldr	r3, [pc, #368]	@ (8006f60 <__gethex+0x2b4>)
 8006dee:	4602      	mov	r2, r0
 8006df0:	21e4      	movs	r1, #228	@ 0xe4
 8006df2:	485c      	ldr	r0, [pc, #368]	@ (8006f64 <__gethex+0x2b8>)
 8006df4:	f7ff fec0 	bl	8006b78 <__assert_func>
 8006df8:	3101      	adds	r1, #1
 8006dfa:	105b      	asrs	r3, r3, #1
 8006dfc:	e7ef      	b.n	8006dde <__gethex+0x132>
 8006dfe:	f100 0a14 	add.w	sl, r0, #20
 8006e02:	2300      	movs	r3, #0
 8006e04:	4655      	mov	r5, sl
 8006e06:	469b      	mov	fp, r3
 8006e08:	45b1      	cmp	r9, r6
 8006e0a:	d337      	bcc.n	8006e7c <__gethex+0x1d0>
 8006e0c:	f845 bb04 	str.w	fp, [r5], #4
 8006e10:	eba5 050a 	sub.w	r5, r5, sl
 8006e14:	10ad      	asrs	r5, r5, #2
 8006e16:	6125      	str	r5, [r4, #16]
 8006e18:	4658      	mov	r0, fp
 8006e1a:	f7fe fa1f 	bl	800525c <__hi0bits>
 8006e1e:	016d      	lsls	r5, r5, #5
 8006e20:	f8d8 6000 	ldr.w	r6, [r8]
 8006e24:	1a2d      	subs	r5, r5, r0
 8006e26:	42b5      	cmp	r5, r6
 8006e28:	dd54      	ble.n	8006ed4 <__gethex+0x228>
 8006e2a:	1bad      	subs	r5, r5, r6
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f7fe fdb3 	bl	800599a <__any_on>
 8006e34:	4681      	mov	r9, r0
 8006e36:	b178      	cbz	r0, 8006e58 <__gethex+0x1ac>
 8006e38:	1e6b      	subs	r3, r5, #1
 8006e3a:	1159      	asrs	r1, r3, #5
 8006e3c:	f003 021f 	and.w	r2, r3, #31
 8006e40:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006e44:	f04f 0901 	mov.w	r9, #1
 8006e48:	fa09 f202 	lsl.w	r2, r9, r2
 8006e4c:	420a      	tst	r2, r1
 8006e4e:	d003      	beq.n	8006e58 <__gethex+0x1ac>
 8006e50:	454b      	cmp	r3, r9
 8006e52:	dc36      	bgt.n	8006ec2 <__gethex+0x216>
 8006e54:	f04f 0902 	mov.w	r9, #2
 8006e58:	4629      	mov	r1, r5
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f7ff febe 	bl	8006bdc <rshift>
 8006e60:	442f      	add	r7, r5
 8006e62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e66:	42bb      	cmp	r3, r7
 8006e68:	da42      	bge.n	8006ef0 <__gethex+0x244>
 8006e6a:	9801      	ldr	r0, [sp, #4]
 8006e6c:	4621      	mov	r1, r4
 8006e6e:	f7fe f943 	bl	80050f8 <_Bfree>
 8006e72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e74:	2300      	movs	r3, #0
 8006e76:	6013      	str	r3, [r2, #0]
 8006e78:	25a3      	movs	r5, #163	@ 0xa3
 8006e7a:	e793      	b.n	8006da4 <__gethex+0xf8>
 8006e7c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8006e80:	2a2e      	cmp	r2, #46	@ 0x2e
 8006e82:	d012      	beq.n	8006eaa <__gethex+0x1fe>
 8006e84:	2b20      	cmp	r3, #32
 8006e86:	d104      	bne.n	8006e92 <__gethex+0x1e6>
 8006e88:	f845 bb04 	str.w	fp, [r5], #4
 8006e8c:	f04f 0b00 	mov.w	fp, #0
 8006e90:	465b      	mov	r3, fp
 8006e92:	7830      	ldrb	r0, [r6, #0]
 8006e94:	9303      	str	r3, [sp, #12]
 8006e96:	f7ff fef3 	bl	8006c80 <__hexdig_fun>
 8006e9a:	9b03      	ldr	r3, [sp, #12]
 8006e9c:	f000 000f 	and.w	r0, r0, #15
 8006ea0:	4098      	lsls	r0, r3
 8006ea2:	ea4b 0b00 	orr.w	fp, fp, r0
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	e7ae      	b.n	8006e08 <__gethex+0x15c>
 8006eaa:	45b1      	cmp	r9, r6
 8006eac:	d8ea      	bhi.n	8006e84 <__gethex+0x1d8>
 8006eae:	492b      	ldr	r1, [pc, #172]	@ (8006f5c <__gethex+0x2b0>)
 8006eb0:	9303      	str	r3, [sp, #12]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	4630      	mov	r0, r6
 8006eb6:	f7ff fe33 	bl	8006b20 <strncmp>
 8006eba:	9b03      	ldr	r3, [sp, #12]
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	d1e1      	bne.n	8006e84 <__gethex+0x1d8>
 8006ec0:	e7a2      	b.n	8006e08 <__gethex+0x15c>
 8006ec2:	1ea9      	subs	r1, r5, #2
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f7fe fd68 	bl	800599a <__any_on>
 8006eca:	2800      	cmp	r0, #0
 8006ecc:	d0c2      	beq.n	8006e54 <__gethex+0x1a8>
 8006ece:	f04f 0903 	mov.w	r9, #3
 8006ed2:	e7c1      	b.n	8006e58 <__gethex+0x1ac>
 8006ed4:	da09      	bge.n	8006eea <__gethex+0x23e>
 8006ed6:	1b75      	subs	r5, r6, r5
 8006ed8:	4621      	mov	r1, r4
 8006eda:	9801      	ldr	r0, [sp, #4]
 8006edc:	462a      	mov	r2, r5
 8006ede:	f7fe fb23 	bl	8005528 <__lshift>
 8006ee2:	1b7f      	subs	r7, r7, r5
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	f100 0a14 	add.w	sl, r0, #20
 8006eea:	f04f 0900 	mov.w	r9, #0
 8006eee:	e7b8      	b.n	8006e62 <__gethex+0x1b6>
 8006ef0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006ef4:	42bd      	cmp	r5, r7
 8006ef6:	dd6f      	ble.n	8006fd8 <__gethex+0x32c>
 8006ef8:	1bed      	subs	r5, r5, r7
 8006efa:	42ae      	cmp	r6, r5
 8006efc:	dc34      	bgt.n	8006f68 <__gethex+0x2bc>
 8006efe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d022      	beq.n	8006f4c <__gethex+0x2a0>
 8006f06:	2b03      	cmp	r3, #3
 8006f08:	d024      	beq.n	8006f54 <__gethex+0x2a8>
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d115      	bne.n	8006f3a <__gethex+0x28e>
 8006f0e:	42ae      	cmp	r6, r5
 8006f10:	d113      	bne.n	8006f3a <__gethex+0x28e>
 8006f12:	2e01      	cmp	r6, #1
 8006f14:	d10b      	bne.n	8006f2e <__gethex+0x282>
 8006f16:	9a02      	ldr	r2, [sp, #8]
 8006f18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006f1c:	6013      	str	r3, [r2, #0]
 8006f1e:	2301      	movs	r3, #1
 8006f20:	6123      	str	r3, [r4, #16]
 8006f22:	f8ca 3000 	str.w	r3, [sl]
 8006f26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f28:	2562      	movs	r5, #98	@ 0x62
 8006f2a:	601c      	str	r4, [r3, #0]
 8006f2c:	e73a      	b.n	8006da4 <__gethex+0xf8>
 8006f2e:	1e71      	subs	r1, r6, #1
 8006f30:	4620      	mov	r0, r4
 8006f32:	f7fe fd32 	bl	800599a <__any_on>
 8006f36:	2800      	cmp	r0, #0
 8006f38:	d1ed      	bne.n	8006f16 <__gethex+0x26a>
 8006f3a:	9801      	ldr	r0, [sp, #4]
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	f7fe f8db 	bl	80050f8 <_Bfree>
 8006f42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f44:	2300      	movs	r3, #0
 8006f46:	6013      	str	r3, [r2, #0]
 8006f48:	2550      	movs	r5, #80	@ 0x50
 8006f4a:	e72b      	b.n	8006da4 <__gethex+0xf8>
 8006f4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1f3      	bne.n	8006f3a <__gethex+0x28e>
 8006f52:	e7e0      	b.n	8006f16 <__gethex+0x26a>
 8006f54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1dd      	bne.n	8006f16 <__gethex+0x26a>
 8006f5a:	e7ee      	b.n	8006f3a <__gethex+0x28e>
 8006f5c:	08007ae8 	.word	0x08007ae8
 8006f60:	0800797c 	.word	0x0800797c
 8006f64:	08007c96 	.word	0x08007c96
 8006f68:	1e6f      	subs	r7, r5, #1
 8006f6a:	f1b9 0f00 	cmp.w	r9, #0
 8006f6e:	d130      	bne.n	8006fd2 <__gethex+0x326>
 8006f70:	b127      	cbz	r7, 8006f7c <__gethex+0x2d0>
 8006f72:	4639      	mov	r1, r7
 8006f74:	4620      	mov	r0, r4
 8006f76:	f7fe fd10 	bl	800599a <__any_on>
 8006f7a:	4681      	mov	r9, r0
 8006f7c:	117a      	asrs	r2, r7, #5
 8006f7e:	2301      	movs	r3, #1
 8006f80:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006f84:	f007 071f 	and.w	r7, r7, #31
 8006f88:	40bb      	lsls	r3, r7
 8006f8a:	4213      	tst	r3, r2
 8006f8c:	4629      	mov	r1, r5
 8006f8e:	4620      	mov	r0, r4
 8006f90:	bf18      	it	ne
 8006f92:	f049 0902 	orrne.w	r9, r9, #2
 8006f96:	f7ff fe21 	bl	8006bdc <rshift>
 8006f9a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8006f9e:	1b76      	subs	r6, r6, r5
 8006fa0:	2502      	movs	r5, #2
 8006fa2:	f1b9 0f00 	cmp.w	r9, #0
 8006fa6:	d047      	beq.n	8007038 <__gethex+0x38c>
 8006fa8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d015      	beq.n	8006fdc <__gethex+0x330>
 8006fb0:	2b03      	cmp	r3, #3
 8006fb2:	d017      	beq.n	8006fe4 <__gethex+0x338>
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d109      	bne.n	8006fcc <__gethex+0x320>
 8006fb8:	f019 0f02 	tst.w	r9, #2
 8006fbc:	d006      	beq.n	8006fcc <__gethex+0x320>
 8006fbe:	f8da 3000 	ldr.w	r3, [sl]
 8006fc2:	ea49 0903 	orr.w	r9, r9, r3
 8006fc6:	f019 0f01 	tst.w	r9, #1
 8006fca:	d10e      	bne.n	8006fea <__gethex+0x33e>
 8006fcc:	f045 0510 	orr.w	r5, r5, #16
 8006fd0:	e032      	b.n	8007038 <__gethex+0x38c>
 8006fd2:	f04f 0901 	mov.w	r9, #1
 8006fd6:	e7d1      	b.n	8006f7c <__gethex+0x2d0>
 8006fd8:	2501      	movs	r5, #1
 8006fda:	e7e2      	b.n	8006fa2 <__gethex+0x2f6>
 8006fdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fde:	f1c3 0301 	rsb	r3, r3, #1
 8006fe2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006fe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d0f0      	beq.n	8006fcc <__gethex+0x320>
 8006fea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006fee:	f104 0314 	add.w	r3, r4, #20
 8006ff2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006ff6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006ffa:	f04f 0c00 	mov.w	ip, #0
 8006ffe:	4618      	mov	r0, r3
 8007000:	f853 2b04 	ldr.w	r2, [r3], #4
 8007004:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8007008:	d01b      	beq.n	8007042 <__gethex+0x396>
 800700a:	3201      	adds	r2, #1
 800700c:	6002      	str	r2, [r0, #0]
 800700e:	2d02      	cmp	r5, #2
 8007010:	f104 0314 	add.w	r3, r4, #20
 8007014:	d13c      	bne.n	8007090 <__gethex+0x3e4>
 8007016:	f8d8 2000 	ldr.w	r2, [r8]
 800701a:	3a01      	subs	r2, #1
 800701c:	42b2      	cmp	r2, r6
 800701e:	d109      	bne.n	8007034 <__gethex+0x388>
 8007020:	1171      	asrs	r1, r6, #5
 8007022:	2201      	movs	r2, #1
 8007024:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007028:	f006 061f 	and.w	r6, r6, #31
 800702c:	fa02 f606 	lsl.w	r6, r2, r6
 8007030:	421e      	tst	r6, r3
 8007032:	d13a      	bne.n	80070aa <__gethex+0x3fe>
 8007034:	f045 0520 	orr.w	r5, r5, #32
 8007038:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800703a:	601c      	str	r4, [r3, #0]
 800703c:	9b02      	ldr	r3, [sp, #8]
 800703e:	601f      	str	r7, [r3, #0]
 8007040:	e6b0      	b.n	8006da4 <__gethex+0xf8>
 8007042:	4299      	cmp	r1, r3
 8007044:	f843 cc04 	str.w	ip, [r3, #-4]
 8007048:	d8d9      	bhi.n	8006ffe <__gethex+0x352>
 800704a:	68a3      	ldr	r3, [r4, #8]
 800704c:	459b      	cmp	fp, r3
 800704e:	db17      	blt.n	8007080 <__gethex+0x3d4>
 8007050:	6861      	ldr	r1, [r4, #4]
 8007052:	9801      	ldr	r0, [sp, #4]
 8007054:	3101      	adds	r1, #1
 8007056:	f7fe f80f 	bl	8005078 <_Balloc>
 800705a:	4681      	mov	r9, r0
 800705c:	b918      	cbnz	r0, 8007066 <__gethex+0x3ba>
 800705e:	4b1a      	ldr	r3, [pc, #104]	@ (80070c8 <__gethex+0x41c>)
 8007060:	4602      	mov	r2, r0
 8007062:	2184      	movs	r1, #132	@ 0x84
 8007064:	e6c5      	b.n	8006df2 <__gethex+0x146>
 8007066:	6922      	ldr	r2, [r4, #16]
 8007068:	3202      	adds	r2, #2
 800706a:	f104 010c 	add.w	r1, r4, #12
 800706e:	0092      	lsls	r2, r2, #2
 8007070:	300c      	adds	r0, #12
 8007072:	f7fd f8a0 	bl	80041b6 <memcpy>
 8007076:	4621      	mov	r1, r4
 8007078:	9801      	ldr	r0, [sp, #4]
 800707a:	f7fe f83d 	bl	80050f8 <_Bfree>
 800707e:	464c      	mov	r4, r9
 8007080:	6923      	ldr	r3, [r4, #16]
 8007082:	1c5a      	adds	r2, r3, #1
 8007084:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007088:	6122      	str	r2, [r4, #16]
 800708a:	2201      	movs	r2, #1
 800708c:	615a      	str	r2, [r3, #20]
 800708e:	e7be      	b.n	800700e <__gethex+0x362>
 8007090:	6922      	ldr	r2, [r4, #16]
 8007092:	455a      	cmp	r2, fp
 8007094:	dd0b      	ble.n	80070ae <__gethex+0x402>
 8007096:	2101      	movs	r1, #1
 8007098:	4620      	mov	r0, r4
 800709a:	f7ff fd9f 	bl	8006bdc <rshift>
 800709e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80070a2:	3701      	adds	r7, #1
 80070a4:	42bb      	cmp	r3, r7
 80070a6:	f6ff aee0 	blt.w	8006e6a <__gethex+0x1be>
 80070aa:	2501      	movs	r5, #1
 80070ac:	e7c2      	b.n	8007034 <__gethex+0x388>
 80070ae:	f016 061f 	ands.w	r6, r6, #31
 80070b2:	d0fa      	beq.n	80070aa <__gethex+0x3fe>
 80070b4:	4453      	add	r3, sl
 80070b6:	f1c6 0620 	rsb	r6, r6, #32
 80070ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80070be:	f7fe f8cd 	bl	800525c <__hi0bits>
 80070c2:	42b0      	cmp	r0, r6
 80070c4:	dbe7      	blt.n	8007096 <__gethex+0x3ea>
 80070c6:	e7f0      	b.n	80070aa <__gethex+0x3fe>
 80070c8:	0800797c 	.word	0x0800797c

080070cc <L_shift>:
 80070cc:	f1c2 0208 	rsb	r2, r2, #8
 80070d0:	0092      	lsls	r2, r2, #2
 80070d2:	b570      	push	{r4, r5, r6, lr}
 80070d4:	f1c2 0620 	rsb	r6, r2, #32
 80070d8:	6843      	ldr	r3, [r0, #4]
 80070da:	6804      	ldr	r4, [r0, #0]
 80070dc:	fa03 f506 	lsl.w	r5, r3, r6
 80070e0:	432c      	orrs	r4, r5
 80070e2:	40d3      	lsrs	r3, r2
 80070e4:	6004      	str	r4, [r0, #0]
 80070e6:	f840 3f04 	str.w	r3, [r0, #4]!
 80070ea:	4288      	cmp	r0, r1
 80070ec:	d3f4      	bcc.n	80070d8 <L_shift+0xc>
 80070ee:	bd70      	pop	{r4, r5, r6, pc}

080070f0 <__match>:
 80070f0:	b530      	push	{r4, r5, lr}
 80070f2:	6803      	ldr	r3, [r0, #0]
 80070f4:	3301      	adds	r3, #1
 80070f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070fa:	b914      	cbnz	r4, 8007102 <__match+0x12>
 80070fc:	6003      	str	r3, [r0, #0]
 80070fe:	2001      	movs	r0, #1
 8007100:	bd30      	pop	{r4, r5, pc}
 8007102:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007106:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800710a:	2d19      	cmp	r5, #25
 800710c:	bf98      	it	ls
 800710e:	3220      	addls	r2, #32
 8007110:	42a2      	cmp	r2, r4
 8007112:	d0f0      	beq.n	80070f6 <__match+0x6>
 8007114:	2000      	movs	r0, #0
 8007116:	e7f3      	b.n	8007100 <__match+0x10>

08007118 <__hexnan>:
 8007118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800711c:	680b      	ldr	r3, [r1, #0]
 800711e:	6801      	ldr	r1, [r0, #0]
 8007120:	115e      	asrs	r6, r3, #5
 8007122:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007126:	f013 031f 	ands.w	r3, r3, #31
 800712a:	b087      	sub	sp, #28
 800712c:	bf18      	it	ne
 800712e:	3604      	addne	r6, #4
 8007130:	2500      	movs	r5, #0
 8007132:	1f37      	subs	r7, r6, #4
 8007134:	4682      	mov	sl, r0
 8007136:	4690      	mov	r8, r2
 8007138:	9301      	str	r3, [sp, #4]
 800713a:	f846 5c04 	str.w	r5, [r6, #-4]
 800713e:	46b9      	mov	r9, r7
 8007140:	463c      	mov	r4, r7
 8007142:	9502      	str	r5, [sp, #8]
 8007144:	46ab      	mov	fp, r5
 8007146:	784a      	ldrb	r2, [r1, #1]
 8007148:	1c4b      	adds	r3, r1, #1
 800714a:	9303      	str	r3, [sp, #12]
 800714c:	b342      	cbz	r2, 80071a0 <__hexnan+0x88>
 800714e:	4610      	mov	r0, r2
 8007150:	9105      	str	r1, [sp, #20]
 8007152:	9204      	str	r2, [sp, #16]
 8007154:	f7ff fd94 	bl	8006c80 <__hexdig_fun>
 8007158:	2800      	cmp	r0, #0
 800715a:	d151      	bne.n	8007200 <__hexnan+0xe8>
 800715c:	9a04      	ldr	r2, [sp, #16]
 800715e:	9905      	ldr	r1, [sp, #20]
 8007160:	2a20      	cmp	r2, #32
 8007162:	d818      	bhi.n	8007196 <__hexnan+0x7e>
 8007164:	9b02      	ldr	r3, [sp, #8]
 8007166:	459b      	cmp	fp, r3
 8007168:	dd13      	ble.n	8007192 <__hexnan+0x7a>
 800716a:	454c      	cmp	r4, r9
 800716c:	d206      	bcs.n	800717c <__hexnan+0x64>
 800716e:	2d07      	cmp	r5, #7
 8007170:	dc04      	bgt.n	800717c <__hexnan+0x64>
 8007172:	462a      	mov	r2, r5
 8007174:	4649      	mov	r1, r9
 8007176:	4620      	mov	r0, r4
 8007178:	f7ff ffa8 	bl	80070cc <L_shift>
 800717c:	4544      	cmp	r4, r8
 800717e:	d952      	bls.n	8007226 <__hexnan+0x10e>
 8007180:	2300      	movs	r3, #0
 8007182:	f1a4 0904 	sub.w	r9, r4, #4
 8007186:	f844 3c04 	str.w	r3, [r4, #-4]
 800718a:	f8cd b008 	str.w	fp, [sp, #8]
 800718e:	464c      	mov	r4, r9
 8007190:	461d      	mov	r5, r3
 8007192:	9903      	ldr	r1, [sp, #12]
 8007194:	e7d7      	b.n	8007146 <__hexnan+0x2e>
 8007196:	2a29      	cmp	r2, #41	@ 0x29
 8007198:	d157      	bne.n	800724a <__hexnan+0x132>
 800719a:	3102      	adds	r1, #2
 800719c:	f8ca 1000 	str.w	r1, [sl]
 80071a0:	f1bb 0f00 	cmp.w	fp, #0
 80071a4:	d051      	beq.n	800724a <__hexnan+0x132>
 80071a6:	454c      	cmp	r4, r9
 80071a8:	d206      	bcs.n	80071b8 <__hexnan+0xa0>
 80071aa:	2d07      	cmp	r5, #7
 80071ac:	dc04      	bgt.n	80071b8 <__hexnan+0xa0>
 80071ae:	462a      	mov	r2, r5
 80071b0:	4649      	mov	r1, r9
 80071b2:	4620      	mov	r0, r4
 80071b4:	f7ff ff8a 	bl	80070cc <L_shift>
 80071b8:	4544      	cmp	r4, r8
 80071ba:	d936      	bls.n	800722a <__hexnan+0x112>
 80071bc:	f1a8 0204 	sub.w	r2, r8, #4
 80071c0:	4623      	mov	r3, r4
 80071c2:	f853 1b04 	ldr.w	r1, [r3], #4
 80071c6:	f842 1f04 	str.w	r1, [r2, #4]!
 80071ca:	429f      	cmp	r7, r3
 80071cc:	d2f9      	bcs.n	80071c2 <__hexnan+0xaa>
 80071ce:	1b3b      	subs	r3, r7, r4
 80071d0:	f023 0303 	bic.w	r3, r3, #3
 80071d4:	3304      	adds	r3, #4
 80071d6:	3401      	adds	r4, #1
 80071d8:	3e03      	subs	r6, #3
 80071da:	42b4      	cmp	r4, r6
 80071dc:	bf88      	it	hi
 80071de:	2304      	movhi	r3, #4
 80071e0:	4443      	add	r3, r8
 80071e2:	2200      	movs	r2, #0
 80071e4:	f843 2b04 	str.w	r2, [r3], #4
 80071e8:	429f      	cmp	r7, r3
 80071ea:	d2fb      	bcs.n	80071e4 <__hexnan+0xcc>
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	b91b      	cbnz	r3, 80071f8 <__hexnan+0xe0>
 80071f0:	4547      	cmp	r7, r8
 80071f2:	d128      	bne.n	8007246 <__hexnan+0x12e>
 80071f4:	2301      	movs	r3, #1
 80071f6:	603b      	str	r3, [r7, #0]
 80071f8:	2005      	movs	r0, #5
 80071fa:	b007      	add	sp, #28
 80071fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007200:	3501      	adds	r5, #1
 8007202:	2d08      	cmp	r5, #8
 8007204:	f10b 0b01 	add.w	fp, fp, #1
 8007208:	dd06      	ble.n	8007218 <__hexnan+0x100>
 800720a:	4544      	cmp	r4, r8
 800720c:	d9c1      	bls.n	8007192 <__hexnan+0x7a>
 800720e:	2300      	movs	r3, #0
 8007210:	f844 3c04 	str.w	r3, [r4, #-4]
 8007214:	2501      	movs	r5, #1
 8007216:	3c04      	subs	r4, #4
 8007218:	6822      	ldr	r2, [r4, #0]
 800721a:	f000 000f 	and.w	r0, r0, #15
 800721e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007222:	6020      	str	r0, [r4, #0]
 8007224:	e7b5      	b.n	8007192 <__hexnan+0x7a>
 8007226:	2508      	movs	r5, #8
 8007228:	e7b3      	b.n	8007192 <__hexnan+0x7a>
 800722a:	9b01      	ldr	r3, [sp, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d0dd      	beq.n	80071ec <__hexnan+0xd4>
 8007230:	f1c3 0320 	rsb	r3, r3, #32
 8007234:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007238:	40da      	lsrs	r2, r3
 800723a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800723e:	4013      	ands	r3, r2
 8007240:	f846 3c04 	str.w	r3, [r6, #-4]
 8007244:	e7d2      	b.n	80071ec <__hexnan+0xd4>
 8007246:	3f04      	subs	r7, #4
 8007248:	e7d0      	b.n	80071ec <__hexnan+0xd4>
 800724a:	2004      	movs	r0, #4
 800724c:	e7d5      	b.n	80071fa <__hexnan+0xe2>

0800724e <__ascii_mbtowc>:
 800724e:	b082      	sub	sp, #8
 8007250:	b901      	cbnz	r1, 8007254 <__ascii_mbtowc+0x6>
 8007252:	a901      	add	r1, sp, #4
 8007254:	b142      	cbz	r2, 8007268 <__ascii_mbtowc+0x1a>
 8007256:	b14b      	cbz	r3, 800726c <__ascii_mbtowc+0x1e>
 8007258:	7813      	ldrb	r3, [r2, #0]
 800725a:	600b      	str	r3, [r1, #0]
 800725c:	7812      	ldrb	r2, [r2, #0]
 800725e:	1e10      	subs	r0, r2, #0
 8007260:	bf18      	it	ne
 8007262:	2001      	movne	r0, #1
 8007264:	b002      	add	sp, #8
 8007266:	4770      	bx	lr
 8007268:	4610      	mov	r0, r2
 800726a:	e7fb      	b.n	8007264 <__ascii_mbtowc+0x16>
 800726c:	f06f 0001 	mvn.w	r0, #1
 8007270:	e7f8      	b.n	8007264 <__ascii_mbtowc+0x16>

08007272 <_realloc_r>:
 8007272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007276:	4680      	mov	r8, r0
 8007278:	4615      	mov	r5, r2
 800727a:	460c      	mov	r4, r1
 800727c:	b921      	cbnz	r1, 8007288 <_realloc_r+0x16>
 800727e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007282:	4611      	mov	r1, r2
 8007284:	f7fd be6c 	b.w	8004f60 <_malloc_r>
 8007288:	b92a      	cbnz	r2, 8007296 <_realloc_r+0x24>
 800728a:	f7fd fdf5 	bl	8004e78 <_free_r>
 800728e:	2400      	movs	r4, #0
 8007290:	4620      	mov	r0, r4
 8007292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007296:	f000 f840 	bl	800731a <_malloc_usable_size_r>
 800729a:	4285      	cmp	r5, r0
 800729c:	4606      	mov	r6, r0
 800729e:	d802      	bhi.n	80072a6 <_realloc_r+0x34>
 80072a0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80072a4:	d8f4      	bhi.n	8007290 <_realloc_r+0x1e>
 80072a6:	4629      	mov	r1, r5
 80072a8:	4640      	mov	r0, r8
 80072aa:	f7fd fe59 	bl	8004f60 <_malloc_r>
 80072ae:	4607      	mov	r7, r0
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d0ec      	beq.n	800728e <_realloc_r+0x1c>
 80072b4:	42b5      	cmp	r5, r6
 80072b6:	462a      	mov	r2, r5
 80072b8:	4621      	mov	r1, r4
 80072ba:	bf28      	it	cs
 80072bc:	4632      	movcs	r2, r6
 80072be:	f7fc ff7a 	bl	80041b6 <memcpy>
 80072c2:	4621      	mov	r1, r4
 80072c4:	4640      	mov	r0, r8
 80072c6:	f7fd fdd7 	bl	8004e78 <_free_r>
 80072ca:	463c      	mov	r4, r7
 80072cc:	e7e0      	b.n	8007290 <_realloc_r+0x1e>

080072ce <__ascii_wctomb>:
 80072ce:	4603      	mov	r3, r0
 80072d0:	4608      	mov	r0, r1
 80072d2:	b141      	cbz	r1, 80072e6 <__ascii_wctomb+0x18>
 80072d4:	2aff      	cmp	r2, #255	@ 0xff
 80072d6:	d904      	bls.n	80072e2 <__ascii_wctomb+0x14>
 80072d8:	228a      	movs	r2, #138	@ 0x8a
 80072da:	601a      	str	r2, [r3, #0]
 80072dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072e0:	4770      	bx	lr
 80072e2:	700a      	strb	r2, [r1, #0]
 80072e4:	2001      	movs	r0, #1
 80072e6:	4770      	bx	lr

080072e8 <fiprintf>:
 80072e8:	b40e      	push	{r1, r2, r3}
 80072ea:	b503      	push	{r0, r1, lr}
 80072ec:	4601      	mov	r1, r0
 80072ee:	ab03      	add	r3, sp, #12
 80072f0:	4805      	ldr	r0, [pc, #20]	@ (8007308 <fiprintf+0x20>)
 80072f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80072f6:	6800      	ldr	r0, [r0, #0]
 80072f8:	9301      	str	r3, [sp, #4]
 80072fa:	f000 f83f 	bl	800737c <_vfiprintf_r>
 80072fe:	b002      	add	sp, #8
 8007300:	f85d eb04 	ldr.w	lr, [sp], #4
 8007304:	b003      	add	sp, #12
 8007306:	4770      	bx	lr
 8007308:	20000024 	.word	0x20000024

0800730c <abort>:
 800730c:	b508      	push	{r3, lr}
 800730e:	2006      	movs	r0, #6
 8007310:	f000 fa08 	bl	8007724 <raise>
 8007314:	2001      	movs	r0, #1
 8007316:	f7fb fdbb 	bl	8002e90 <_exit>

0800731a <_malloc_usable_size_r>:
 800731a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800731e:	1f18      	subs	r0, r3, #4
 8007320:	2b00      	cmp	r3, #0
 8007322:	bfbc      	itt	lt
 8007324:	580b      	ldrlt	r3, [r1, r0]
 8007326:	18c0      	addlt	r0, r0, r3
 8007328:	4770      	bx	lr

0800732a <__sfputc_r>:
 800732a:	6893      	ldr	r3, [r2, #8]
 800732c:	3b01      	subs	r3, #1
 800732e:	2b00      	cmp	r3, #0
 8007330:	b410      	push	{r4}
 8007332:	6093      	str	r3, [r2, #8]
 8007334:	da08      	bge.n	8007348 <__sfputc_r+0x1e>
 8007336:	6994      	ldr	r4, [r2, #24]
 8007338:	42a3      	cmp	r3, r4
 800733a:	db01      	blt.n	8007340 <__sfputc_r+0x16>
 800733c:	290a      	cmp	r1, #10
 800733e:	d103      	bne.n	8007348 <__sfputc_r+0x1e>
 8007340:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007344:	f000 b932 	b.w	80075ac <__swbuf_r>
 8007348:	6813      	ldr	r3, [r2, #0]
 800734a:	1c58      	adds	r0, r3, #1
 800734c:	6010      	str	r0, [r2, #0]
 800734e:	7019      	strb	r1, [r3, #0]
 8007350:	4608      	mov	r0, r1
 8007352:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007356:	4770      	bx	lr

08007358 <__sfputs_r>:
 8007358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735a:	4606      	mov	r6, r0
 800735c:	460f      	mov	r7, r1
 800735e:	4614      	mov	r4, r2
 8007360:	18d5      	adds	r5, r2, r3
 8007362:	42ac      	cmp	r4, r5
 8007364:	d101      	bne.n	800736a <__sfputs_r+0x12>
 8007366:	2000      	movs	r0, #0
 8007368:	e007      	b.n	800737a <__sfputs_r+0x22>
 800736a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800736e:	463a      	mov	r2, r7
 8007370:	4630      	mov	r0, r6
 8007372:	f7ff ffda 	bl	800732a <__sfputc_r>
 8007376:	1c43      	adds	r3, r0, #1
 8007378:	d1f3      	bne.n	8007362 <__sfputs_r+0xa>
 800737a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800737c <_vfiprintf_r>:
 800737c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007380:	460d      	mov	r5, r1
 8007382:	b09d      	sub	sp, #116	@ 0x74
 8007384:	4614      	mov	r4, r2
 8007386:	4698      	mov	r8, r3
 8007388:	4606      	mov	r6, r0
 800738a:	b118      	cbz	r0, 8007394 <_vfiprintf_r+0x18>
 800738c:	6a03      	ldr	r3, [r0, #32]
 800738e:	b90b      	cbnz	r3, 8007394 <_vfiprintf_r+0x18>
 8007390:	f7fc fdf8 	bl	8003f84 <__sinit>
 8007394:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007396:	07d9      	lsls	r1, r3, #31
 8007398:	d405      	bmi.n	80073a6 <_vfiprintf_r+0x2a>
 800739a:	89ab      	ldrh	r3, [r5, #12]
 800739c:	059a      	lsls	r2, r3, #22
 800739e:	d402      	bmi.n	80073a6 <_vfiprintf_r+0x2a>
 80073a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073a2:	f7fc ff06 	bl	80041b2 <__retarget_lock_acquire_recursive>
 80073a6:	89ab      	ldrh	r3, [r5, #12]
 80073a8:	071b      	lsls	r3, r3, #28
 80073aa:	d501      	bpl.n	80073b0 <_vfiprintf_r+0x34>
 80073ac:	692b      	ldr	r3, [r5, #16]
 80073ae:	b99b      	cbnz	r3, 80073d8 <_vfiprintf_r+0x5c>
 80073b0:	4629      	mov	r1, r5
 80073b2:	4630      	mov	r0, r6
 80073b4:	f000 f938 	bl	8007628 <__swsetup_r>
 80073b8:	b170      	cbz	r0, 80073d8 <_vfiprintf_r+0x5c>
 80073ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073bc:	07dc      	lsls	r4, r3, #31
 80073be:	d504      	bpl.n	80073ca <_vfiprintf_r+0x4e>
 80073c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073c4:	b01d      	add	sp, #116	@ 0x74
 80073c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ca:	89ab      	ldrh	r3, [r5, #12]
 80073cc:	0598      	lsls	r0, r3, #22
 80073ce:	d4f7      	bmi.n	80073c0 <_vfiprintf_r+0x44>
 80073d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073d2:	f7fc feef 	bl	80041b4 <__retarget_lock_release_recursive>
 80073d6:	e7f3      	b.n	80073c0 <_vfiprintf_r+0x44>
 80073d8:	2300      	movs	r3, #0
 80073da:	9309      	str	r3, [sp, #36]	@ 0x24
 80073dc:	2320      	movs	r3, #32
 80073de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80073e6:	2330      	movs	r3, #48	@ 0x30
 80073e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007598 <_vfiprintf_r+0x21c>
 80073ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073f0:	f04f 0901 	mov.w	r9, #1
 80073f4:	4623      	mov	r3, r4
 80073f6:	469a      	mov	sl, r3
 80073f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073fc:	b10a      	cbz	r2, 8007402 <_vfiprintf_r+0x86>
 80073fe:	2a25      	cmp	r2, #37	@ 0x25
 8007400:	d1f9      	bne.n	80073f6 <_vfiprintf_r+0x7a>
 8007402:	ebba 0b04 	subs.w	fp, sl, r4
 8007406:	d00b      	beq.n	8007420 <_vfiprintf_r+0xa4>
 8007408:	465b      	mov	r3, fp
 800740a:	4622      	mov	r2, r4
 800740c:	4629      	mov	r1, r5
 800740e:	4630      	mov	r0, r6
 8007410:	f7ff ffa2 	bl	8007358 <__sfputs_r>
 8007414:	3001      	adds	r0, #1
 8007416:	f000 80a7 	beq.w	8007568 <_vfiprintf_r+0x1ec>
 800741a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800741c:	445a      	add	r2, fp
 800741e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007420:	f89a 3000 	ldrb.w	r3, [sl]
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 809f 	beq.w	8007568 <_vfiprintf_r+0x1ec>
 800742a:	2300      	movs	r3, #0
 800742c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007430:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007434:	f10a 0a01 	add.w	sl, sl, #1
 8007438:	9304      	str	r3, [sp, #16]
 800743a:	9307      	str	r3, [sp, #28]
 800743c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007440:	931a      	str	r3, [sp, #104]	@ 0x68
 8007442:	4654      	mov	r4, sl
 8007444:	2205      	movs	r2, #5
 8007446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800744a:	4853      	ldr	r0, [pc, #332]	@ (8007598 <_vfiprintf_r+0x21c>)
 800744c:	f7f8 fec8 	bl	80001e0 <memchr>
 8007450:	9a04      	ldr	r2, [sp, #16]
 8007452:	b9d8      	cbnz	r0, 800748c <_vfiprintf_r+0x110>
 8007454:	06d1      	lsls	r1, r2, #27
 8007456:	bf44      	itt	mi
 8007458:	2320      	movmi	r3, #32
 800745a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800745e:	0713      	lsls	r3, r2, #28
 8007460:	bf44      	itt	mi
 8007462:	232b      	movmi	r3, #43	@ 0x2b
 8007464:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007468:	f89a 3000 	ldrb.w	r3, [sl]
 800746c:	2b2a      	cmp	r3, #42	@ 0x2a
 800746e:	d015      	beq.n	800749c <_vfiprintf_r+0x120>
 8007470:	9a07      	ldr	r2, [sp, #28]
 8007472:	4654      	mov	r4, sl
 8007474:	2000      	movs	r0, #0
 8007476:	f04f 0c0a 	mov.w	ip, #10
 800747a:	4621      	mov	r1, r4
 800747c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007480:	3b30      	subs	r3, #48	@ 0x30
 8007482:	2b09      	cmp	r3, #9
 8007484:	d94b      	bls.n	800751e <_vfiprintf_r+0x1a2>
 8007486:	b1b0      	cbz	r0, 80074b6 <_vfiprintf_r+0x13a>
 8007488:	9207      	str	r2, [sp, #28]
 800748a:	e014      	b.n	80074b6 <_vfiprintf_r+0x13a>
 800748c:	eba0 0308 	sub.w	r3, r0, r8
 8007490:	fa09 f303 	lsl.w	r3, r9, r3
 8007494:	4313      	orrs	r3, r2
 8007496:	9304      	str	r3, [sp, #16]
 8007498:	46a2      	mov	sl, r4
 800749a:	e7d2      	b.n	8007442 <_vfiprintf_r+0xc6>
 800749c:	9b03      	ldr	r3, [sp, #12]
 800749e:	1d19      	adds	r1, r3, #4
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	9103      	str	r1, [sp, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	bfbb      	ittet	lt
 80074a8:	425b      	neglt	r3, r3
 80074aa:	f042 0202 	orrlt.w	r2, r2, #2
 80074ae:	9307      	strge	r3, [sp, #28]
 80074b0:	9307      	strlt	r3, [sp, #28]
 80074b2:	bfb8      	it	lt
 80074b4:	9204      	strlt	r2, [sp, #16]
 80074b6:	7823      	ldrb	r3, [r4, #0]
 80074b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80074ba:	d10a      	bne.n	80074d2 <_vfiprintf_r+0x156>
 80074bc:	7863      	ldrb	r3, [r4, #1]
 80074be:	2b2a      	cmp	r3, #42	@ 0x2a
 80074c0:	d132      	bne.n	8007528 <_vfiprintf_r+0x1ac>
 80074c2:	9b03      	ldr	r3, [sp, #12]
 80074c4:	1d1a      	adds	r2, r3, #4
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	9203      	str	r2, [sp, #12]
 80074ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074ce:	3402      	adds	r4, #2
 80074d0:	9305      	str	r3, [sp, #20]
 80074d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80075a8 <_vfiprintf_r+0x22c>
 80074d6:	7821      	ldrb	r1, [r4, #0]
 80074d8:	2203      	movs	r2, #3
 80074da:	4650      	mov	r0, sl
 80074dc:	f7f8 fe80 	bl	80001e0 <memchr>
 80074e0:	b138      	cbz	r0, 80074f2 <_vfiprintf_r+0x176>
 80074e2:	9b04      	ldr	r3, [sp, #16]
 80074e4:	eba0 000a 	sub.w	r0, r0, sl
 80074e8:	2240      	movs	r2, #64	@ 0x40
 80074ea:	4082      	lsls	r2, r0
 80074ec:	4313      	orrs	r3, r2
 80074ee:	3401      	adds	r4, #1
 80074f0:	9304      	str	r3, [sp, #16]
 80074f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074f6:	4829      	ldr	r0, [pc, #164]	@ (800759c <_vfiprintf_r+0x220>)
 80074f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074fc:	2206      	movs	r2, #6
 80074fe:	f7f8 fe6f 	bl	80001e0 <memchr>
 8007502:	2800      	cmp	r0, #0
 8007504:	d03f      	beq.n	8007586 <_vfiprintf_r+0x20a>
 8007506:	4b26      	ldr	r3, [pc, #152]	@ (80075a0 <_vfiprintf_r+0x224>)
 8007508:	bb1b      	cbnz	r3, 8007552 <_vfiprintf_r+0x1d6>
 800750a:	9b03      	ldr	r3, [sp, #12]
 800750c:	3307      	adds	r3, #7
 800750e:	f023 0307 	bic.w	r3, r3, #7
 8007512:	3308      	adds	r3, #8
 8007514:	9303      	str	r3, [sp, #12]
 8007516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007518:	443b      	add	r3, r7
 800751a:	9309      	str	r3, [sp, #36]	@ 0x24
 800751c:	e76a      	b.n	80073f4 <_vfiprintf_r+0x78>
 800751e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007522:	460c      	mov	r4, r1
 8007524:	2001      	movs	r0, #1
 8007526:	e7a8      	b.n	800747a <_vfiprintf_r+0xfe>
 8007528:	2300      	movs	r3, #0
 800752a:	3401      	adds	r4, #1
 800752c:	9305      	str	r3, [sp, #20]
 800752e:	4619      	mov	r1, r3
 8007530:	f04f 0c0a 	mov.w	ip, #10
 8007534:	4620      	mov	r0, r4
 8007536:	f810 2b01 	ldrb.w	r2, [r0], #1
 800753a:	3a30      	subs	r2, #48	@ 0x30
 800753c:	2a09      	cmp	r2, #9
 800753e:	d903      	bls.n	8007548 <_vfiprintf_r+0x1cc>
 8007540:	2b00      	cmp	r3, #0
 8007542:	d0c6      	beq.n	80074d2 <_vfiprintf_r+0x156>
 8007544:	9105      	str	r1, [sp, #20]
 8007546:	e7c4      	b.n	80074d2 <_vfiprintf_r+0x156>
 8007548:	fb0c 2101 	mla	r1, ip, r1, r2
 800754c:	4604      	mov	r4, r0
 800754e:	2301      	movs	r3, #1
 8007550:	e7f0      	b.n	8007534 <_vfiprintf_r+0x1b8>
 8007552:	ab03      	add	r3, sp, #12
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	462a      	mov	r2, r5
 8007558:	4b12      	ldr	r3, [pc, #72]	@ (80075a4 <_vfiprintf_r+0x228>)
 800755a:	a904      	add	r1, sp, #16
 800755c:	4630      	mov	r0, r6
 800755e:	f7fb feb9 	bl	80032d4 <_printf_float>
 8007562:	4607      	mov	r7, r0
 8007564:	1c78      	adds	r0, r7, #1
 8007566:	d1d6      	bne.n	8007516 <_vfiprintf_r+0x19a>
 8007568:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800756a:	07d9      	lsls	r1, r3, #31
 800756c:	d405      	bmi.n	800757a <_vfiprintf_r+0x1fe>
 800756e:	89ab      	ldrh	r3, [r5, #12]
 8007570:	059a      	lsls	r2, r3, #22
 8007572:	d402      	bmi.n	800757a <_vfiprintf_r+0x1fe>
 8007574:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007576:	f7fc fe1d 	bl	80041b4 <__retarget_lock_release_recursive>
 800757a:	89ab      	ldrh	r3, [r5, #12]
 800757c:	065b      	lsls	r3, r3, #25
 800757e:	f53f af1f 	bmi.w	80073c0 <_vfiprintf_r+0x44>
 8007582:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007584:	e71e      	b.n	80073c4 <_vfiprintf_r+0x48>
 8007586:	ab03      	add	r3, sp, #12
 8007588:	9300      	str	r3, [sp, #0]
 800758a:	462a      	mov	r2, r5
 800758c:	4b05      	ldr	r3, [pc, #20]	@ (80075a4 <_vfiprintf_r+0x228>)
 800758e:	a904      	add	r1, sp, #16
 8007590:	4630      	mov	r0, r6
 8007592:	f7fc f937 	bl	8003804 <_printf_i>
 8007596:	e7e4      	b.n	8007562 <_vfiprintf_r+0x1e6>
 8007598:	08007c41 	.word	0x08007c41
 800759c:	08007c4b 	.word	0x08007c4b
 80075a0:	080032d5 	.word	0x080032d5
 80075a4:	08007359 	.word	0x08007359
 80075a8:	08007c47 	.word	0x08007c47

080075ac <__swbuf_r>:
 80075ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ae:	460e      	mov	r6, r1
 80075b0:	4614      	mov	r4, r2
 80075b2:	4605      	mov	r5, r0
 80075b4:	b118      	cbz	r0, 80075be <__swbuf_r+0x12>
 80075b6:	6a03      	ldr	r3, [r0, #32]
 80075b8:	b90b      	cbnz	r3, 80075be <__swbuf_r+0x12>
 80075ba:	f7fc fce3 	bl	8003f84 <__sinit>
 80075be:	69a3      	ldr	r3, [r4, #24]
 80075c0:	60a3      	str	r3, [r4, #8]
 80075c2:	89a3      	ldrh	r3, [r4, #12]
 80075c4:	071a      	lsls	r2, r3, #28
 80075c6:	d501      	bpl.n	80075cc <__swbuf_r+0x20>
 80075c8:	6923      	ldr	r3, [r4, #16]
 80075ca:	b943      	cbnz	r3, 80075de <__swbuf_r+0x32>
 80075cc:	4621      	mov	r1, r4
 80075ce:	4628      	mov	r0, r5
 80075d0:	f000 f82a 	bl	8007628 <__swsetup_r>
 80075d4:	b118      	cbz	r0, 80075de <__swbuf_r+0x32>
 80075d6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80075da:	4638      	mov	r0, r7
 80075dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	6922      	ldr	r2, [r4, #16]
 80075e2:	1a98      	subs	r0, r3, r2
 80075e4:	6963      	ldr	r3, [r4, #20]
 80075e6:	b2f6      	uxtb	r6, r6
 80075e8:	4283      	cmp	r3, r0
 80075ea:	4637      	mov	r7, r6
 80075ec:	dc05      	bgt.n	80075fa <__swbuf_r+0x4e>
 80075ee:	4621      	mov	r1, r4
 80075f0:	4628      	mov	r0, r5
 80075f2:	f7ff fa53 	bl	8006a9c <_fflush_r>
 80075f6:	2800      	cmp	r0, #0
 80075f8:	d1ed      	bne.n	80075d6 <__swbuf_r+0x2a>
 80075fa:	68a3      	ldr	r3, [r4, #8]
 80075fc:	3b01      	subs	r3, #1
 80075fe:	60a3      	str	r3, [r4, #8]
 8007600:	6823      	ldr	r3, [r4, #0]
 8007602:	1c5a      	adds	r2, r3, #1
 8007604:	6022      	str	r2, [r4, #0]
 8007606:	701e      	strb	r6, [r3, #0]
 8007608:	6962      	ldr	r2, [r4, #20]
 800760a:	1c43      	adds	r3, r0, #1
 800760c:	429a      	cmp	r2, r3
 800760e:	d004      	beq.n	800761a <__swbuf_r+0x6e>
 8007610:	89a3      	ldrh	r3, [r4, #12]
 8007612:	07db      	lsls	r3, r3, #31
 8007614:	d5e1      	bpl.n	80075da <__swbuf_r+0x2e>
 8007616:	2e0a      	cmp	r6, #10
 8007618:	d1df      	bne.n	80075da <__swbuf_r+0x2e>
 800761a:	4621      	mov	r1, r4
 800761c:	4628      	mov	r0, r5
 800761e:	f7ff fa3d 	bl	8006a9c <_fflush_r>
 8007622:	2800      	cmp	r0, #0
 8007624:	d0d9      	beq.n	80075da <__swbuf_r+0x2e>
 8007626:	e7d6      	b.n	80075d6 <__swbuf_r+0x2a>

08007628 <__swsetup_r>:
 8007628:	b538      	push	{r3, r4, r5, lr}
 800762a:	4b29      	ldr	r3, [pc, #164]	@ (80076d0 <__swsetup_r+0xa8>)
 800762c:	4605      	mov	r5, r0
 800762e:	6818      	ldr	r0, [r3, #0]
 8007630:	460c      	mov	r4, r1
 8007632:	b118      	cbz	r0, 800763c <__swsetup_r+0x14>
 8007634:	6a03      	ldr	r3, [r0, #32]
 8007636:	b90b      	cbnz	r3, 800763c <__swsetup_r+0x14>
 8007638:	f7fc fca4 	bl	8003f84 <__sinit>
 800763c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007640:	0719      	lsls	r1, r3, #28
 8007642:	d422      	bmi.n	800768a <__swsetup_r+0x62>
 8007644:	06da      	lsls	r2, r3, #27
 8007646:	d407      	bmi.n	8007658 <__swsetup_r+0x30>
 8007648:	2209      	movs	r2, #9
 800764a:	602a      	str	r2, [r5, #0]
 800764c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007650:	81a3      	strh	r3, [r4, #12]
 8007652:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007656:	e033      	b.n	80076c0 <__swsetup_r+0x98>
 8007658:	0758      	lsls	r0, r3, #29
 800765a:	d512      	bpl.n	8007682 <__swsetup_r+0x5a>
 800765c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800765e:	b141      	cbz	r1, 8007672 <__swsetup_r+0x4a>
 8007660:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007664:	4299      	cmp	r1, r3
 8007666:	d002      	beq.n	800766e <__swsetup_r+0x46>
 8007668:	4628      	mov	r0, r5
 800766a:	f7fd fc05 	bl	8004e78 <_free_r>
 800766e:	2300      	movs	r3, #0
 8007670:	6363      	str	r3, [r4, #52]	@ 0x34
 8007672:	89a3      	ldrh	r3, [r4, #12]
 8007674:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007678:	81a3      	strh	r3, [r4, #12]
 800767a:	2300      	movs	r3, #0
 800767c:	6063      	str	r3, [r4, #4]
 800767e:	6923      	ldr	r3, [r4, #16]
 8007680:	6023      	str	r3, [r4, #0]
 8007682:	89a3      	ldrh	r3, [r4, #12]
 8007684:	f043 0308 	orr.w	r3, r3, #8
 8007688:	81a3      	strh	r3, [r4, #12]
 800768a:	6923      	ldr	r3, [r4, #16]
 800768c:	b94b      	cbnz	r3, 80076a2 <__swsetup_r+0x7a>
 800768e:	89a3      	ldrh	r3, [r4, #12]
 8007690:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007694:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007698:	d003      	beq.n	80076a2 <__swsetup_r+0x7a>
 800769a:	4621      	mov	r1, r4
 800769c:	4628      	mov	r0, r5
 800769e:	f000 f883 	bl	80077a8 <__smakebuf_r>
 80076a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076a6:	f013 0201 	ands.w	r2, r3, #1
 80076aa:	d00a      	beq.n	80076c2 <__swsetup_r+0x9a>
 80076ac:	2200      	movs	r2, #0
 80076ae:	60a2      	str	r2, [r4, #8]
 80076b0:	6962      	ldr	r2, [r4, #20]
 80076b2:	4252      	negs	r2, r2
 80076b4:	61a2      	str	r2, [r4, #24]
 80076b6:	6922      	ldr	r2, [r4, #16]
 80076b8:	b942      	cbnz	r2, 80076cc <__swsetup_r+0xa4>
 80076ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80076be:	d1c5      	bne.n	800764c <__swsetup_r+0x24>
 80076c0:	bd38      	pop	{r3, r4, r5, pc}
 80076c2:	0799      	lsls	r1, r3, #30
 80076c4:	bf58      	it	pl
 80076c6:	6962      	ldrpl	r2, [r4, #20]
 80076c8:	60a2      	str	r2, [r4, #8]
 80076ca:	e7f4      	b.n	80076b6 <__swsetup_r+0x8e>
 80076cc:	2000      	movs	r0, #0
 80076ce:	e7f7      	b.n	80076c0 <__swsetup_r+0x98>
 80076d0:	20000024 	.word	0x20000024

080076d4 <_raise_r>:
 80076d4:	291f      	cmp	r1, #31
 80076d6:	b538      	push	{r3, r4, r5, lr}
 80076d8:	4605      	mov	r5, r0
 80076da:	460c      	mov	r4, r1
 80076dc:	d904      	bls.n	80076e8 <_raise_r+0x14>
 80076de:	2316      	movs	r3, #22
 80076e0:	6003      	str	r3, [r0, #0]
 80076e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076e6:	bd38      	pop	{r3, r4, r5, pc}
 80076e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80076ea:	b112      	cbz	r2, 80076f2 <_raise_r+0x1e>
 80076ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80076f0:	b94b      	cbnz	r3, 8007706 <_raise_r+0x32>
 80076f2:	4628      	mov	r0, r5
 80076f4:	f000 f830 	bl	8007758 <_getpid_r>
 80076f8:	4622      	mov	r2, r4
 80076fa:	4601      	mov	r1, r0
 80076fc:	4628      	mov	r0, r5
 80076fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007702:	f000 b817 	b.w	8007734 <_kill_r>
 8007706:	2b01      	cmp	r3, #1
 8007708:	d00a      	beq.n	8007720 <_raise_r+0x4c>
 800770a:	1c59      	adds	r1, r3, #1
 800770c:	d103      	bne.n	8007716 <_raise_r+0x42>
 800770e:	2316      	movs	r3, #22
 8007710:	6003      	str	r3, [r0, #0]
 8007712:	2001      	movs	r0, #1
 8007714:	e7e7      	b.n	80076e6 <_raise_r+0x12>
 8007716:	2100      	movs	r1, #0
 8007718:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800771c:	4620      	mov	r0, r4
 800771e:	4798      	blx	r3
 8007720:	2000      	movs	r0, #0
 8007722:	e7e0      	b.n	80076e6 <_raise_r+0x12>

08007724 <raise>:
 8007724:	4b02      	ldr	r3, [pc, #8]	@ (8007730 <raise+0xc>)
 8007726:	4601      	mov	r1, r0
 8007728:	6818      	ldr	r0, [r3, #0]
 800772a:	f7ff bfd3 	b.w	80076d4 <_raise_r>
 800772e:	bf00      	nop
 8007730:	20000024 	.word	0x20000024

08007734 <_kill_r>:
 8007734:	b538      	push	{r3, r4, r5, lr}
 8007736:	4d07      	ldr	r5, [pc, #28]	@ (8007754 <_kill_r+0x20>)
 8007738:	2300      	movs	r3, #0
 800773a:	4604      	mov	r4, r0
 800773c:	4608      	mov	r0, r1
 800773e:	4611      	mov	r1, r2
 8007740:	602b      	str	r3, [r5, #0]
 8007742:	f7fb fb95 	bl	8002e70 <_kill>
 8007746:	1c43      	adds	r3, r0, #1
 8007748:	d102      	bne.n	8007750 <_kill_r+0x1c>
 800774a:	682b      	ldr	r3, [r5, #0]
 800774c:	b103      	cbz	r3, 8007750 <_kill_r+0x1c>
 800774e:	6023      	str	r3, [r4, #0]
 8007750:	bd38      	pop	{r3, r4, r5, pc}
 8007752:	bf00      	nop
 8007754:	200040a4 	.word	0x200040a4

08007758 <_getpid_r>:
 8007758:	f7fb bb82 	b.w	8002e60 <_getpid>

0800775c <__swhatbuf_r>:
 800775c:	b570      	push	{r4, r5, r6, lr}
 800775e:	460c      	mov	r4, r1
 8007760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007764:	2900      	cmp	r1, #0
 8007766:	b096      	sub	sp, #88	@ 0x58
 8007768:	4615      	mov	r5, r2
 800776a:	461e      	mov	r6, r3
 800776c:	da0d      	bge.n	800778a <__swhatbuf_r+0x2e>
 800776e:	89a3      	ldrh	r3, [r4, #12]
 8007770:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007774:	f04f 0100 	mov.w	r1, #0
 8007778:	bf14      	ite	ne
 800777a:	2340      	movne	r3, #64	@ 0x40
 800777c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007780:	2000      	movs	r0, #0
 8007782:	6031      	str	r1, [r6, #0]
 8007784:	602b      	str	r3, [r5, #0]
 8007786:	b016      	add	sp, #88	@ 0x58
 8007788:	bd70      	pop	{r4, r5, r6, pc}
 800778a:	466a      	mov	r2, sp
 800778c:	f000 f848 	bl	8007820 <_fstat_r>
 8007790:	2800      	cmp	r0, #0
 8007792:	dbec      	blt.n	800776e <__swhatbuf_r+0x12>
 8007794:	9901      	ldr	r1, [sp, #4]
 8007796:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800779a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800779e:	4259      	negs	r1, r3
 80077a0:	4159      	adcs	r1, r3
 80077a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80077a6:	e7eb      	b.n	8007780 <__swhatbuf_r+0x24>

080077a8 <__smakebuf_r>:
 80077a8:	898b      	ldrh	r3, [r1, #12]
 80077aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077ac:	079d      	lsls	r5, r3, #30
 80077ae:	4606      	mov	r6, r0
 80077b0:	460c      	mov	r4, r1
 80077b2:	d507      	bpl.n	80077c4 <__smakebuf_r+0x1c>
 80077b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80077b8:	6023      	str	r3, [r4, #0]
 80077ba:	6123      	str	r3, [r4, #16]
 80077bc:	2301      	movs	r3, #1
 80077be:	6163      	str	r3, [r4, #20]
 80077c0:	b003      	add	sp, #12
 80077c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077c4:	ab01      	add	r3, sp, #4
 80077c6:	466a      	mov	r2, sp
 80077c8:	f7ff ffc8 	bl	800775c <__swhatbuf_r>
 80077cc:	9f00      	ldr	r7, [sp, #0]
 80077ce:	4605      	mov	r5, r0
 80077d0:	4639      	mov	r1, r7
 80077d2:	4630      	mov	r0, r6
 80077d4:	f7fd fbc4 	bl	8004f60 <_malloc_r>
 80077d8:	b948      	cbnz	r0, 80077ee <__smakebuf_r+0x46>
 80077da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077de:	059a      	lsls	r2, r3, #22
 80077e0:	d4ee      	bmi.n	80077c0 <__smakebuf_r+0x18>
 80077e2:	f023 0303 	bic.w	r3, r3, #3
 80077e6:	f043 0302 	orr.w	r3, r3, #2
 80077ea:	81a3      	strh	r3, [r4, #12]
 80077ec:	e7e2      	b.n	80077b4 <__smakebuf_r+0xc>
 80077ee:	89a3      	ldrh	r3, [r4, #12]
 80077f0:	6020      	str	r0, [r4, #0]
 80077f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077f6:	81a3      	strh	r3, [r4, #12]
 80077f8:	9b01      	ldr	r3, [sp, #4]
 80077fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80077fe:	b15b      	cbz	r3, 8007818 <__smakebuf_r+0x70>
 8007800:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007804:	4630      	mov	r0, r6
 8007806:	f000 f81d 	bl	8007844 <_isatty_r>
 800780a:	b128      	cbz	r0, 8007818 <__smakebuf_r+0x70>
 800780c:	89a3      	ldrh	r3, [r4, #12]
 800780e:	f023 0303 	bic.w	r3, r3, #3
 8007812:	f043 0301 	orr.w	r3, r3, #1
 8007816:	81a3      	strh	r3, [r4, #12]
 8007818:	89a3      	ldrh	r3, [r4, #12]
 800781a:	431d      	orrs	r5, r3
 800781c:	81a5      	strh	r5, [r4, #12]
 800781e:	e7cf      	b.n	80077c0 <__smakebuf_r+0x18>

08007820 <_fstat_r>:
 8007820:	b538      	push	{r3, r4, r5, lr}
 8007822:	4d07      	ldr	r5, [pc, #28]	@ (8007840 <_fstat_r+0x20>)
 8007824:	2300      	movs	r3, #0
 8007826:	4604      	mov	r4, r0
 8007828:	4608      	mov	r0, r1
 800782a:	4611      	mov	r1, r2
 800782c:	602b      	str	r3, [r5, #0]
 800782e:	f7fb fb7f 	bl	8002f30 <_fstat>
 8007832:	1c43      	adds	r3, r0, #1
 8007834:	d102      	bne.n	800783c <_fstat_r+0x1c>
 8007836:	682b      	ldr	r3, [r5, #0]
 8007838:	b103      	cbz	r3, 800783c <_fstat_r+0x1c>
 800783a:	6023      	str	r3, [r4, #0]
 800783c:	bd38      	pop	{r3, r4, r5, pc}
 800783e:	bf00      	nop
 8007840:	200040a4 	.word	0x200040a4

08007844 <_isatty_r>:
 8007844:	b538      	push	{r3, r4, r5, lr}
 8007846:	4d06      	ldr	r5, [pc, #24]	@ (8007860 <_isatty_r+0x1c>)
 8007848:	2300      	movs	r3, #0
 800784a:	4604      	mov	r4, r0
 800784c:	4608      	mov	r0, r1
 800784e:	602b      	str	r3, [r5, #0]
 8007850:	f7fb fb7e 	bl	8002f50 <_isatty>
 8007854:	1c43      	adds	r3, r0, #1
 8007856:	d102      	bne.n	800785e <_isatty_r+0x1a>
 8007858:	682b      	ldr	r3, [r5, #0]
 800785a:	b103      	cbz	r3, 800785e <_isatty_r+0x1a>
 800785c:	6023      	str	r3, [r4, #0]
 800785e:	bd38      	pop	{r3, r4, r5, pc}
 8007860:	200040a4 	.word	0x200040a4

08007864 <_init>:
 8007864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007866:	bf00      	nop
 8007868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800786a:	bc08      	pop	{r3}
 800786c:	469e      	mov	lr, r3
 800786e:	4770      	bx	lr

08007870 <_fini>:
 8007870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007872:	bf00      	nop
 8007874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007876:	bc08      	pop	{r3}
 8007878:	469e      	mov	lr, r3
 800787a:	4770      	bx	lr
