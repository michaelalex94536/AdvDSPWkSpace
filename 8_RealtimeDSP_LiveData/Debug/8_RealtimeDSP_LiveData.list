
8_RealtimeDSP_LiveData.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081bc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c70  08008360  08008360  00009360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fd0  08008fd0  0000a258  2**0
                  CONTENTS
  4 .ARM          00000008  08008fd0  08008fd0  00009fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fd8  08008fd8  0000a258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fd8  08008fd8  00009fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008fdc  08008fdc  00009fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000258  20000000  08008fe0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003fb4  20000258  08009238  0000a258  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000420c  08009238  0000b20c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a258  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083aa  00000000  00000000  0000a288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e5c  00000000  00000000  00012632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000738  00000000  00000000  00014490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004a4  00000000  00000000  00014bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f742  00000000  00000000  0001506c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ef8  00000000  00000000  000247ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005f0a7  00000000  00000000  0002d6a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0008c74d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e14  00000000  00000000  0008c800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0008f614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000019f9  00000000  00000000  0008f68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000001c0  00000000  00000000  00091085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000258 	.word	0x20000258
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008344 	.word	0x08008344

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000025c 	.word	0x2000025c
 80001dc:	08008344 	.word	0x08008344

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f103 0208 	add.w	r2, r3, #8
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f103 0208 	add.w	r2, r3, #8
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f103 0208 	add.w	r2, r3, #8
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b085      	sub	sp, #20
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
 8000d66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	68fa      	ldr	r2, [r7, #12]
 8000d72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	683a      	ldr	r2, [r7, #0]
 8000d82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	1c5a      	adds	r2, r3, #1
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	601a      	str	r2, [r3, #0]
}
 8000d9a:	bf00      	nop
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000da6:	b480      	push	{r7}
 8000da8:	b085      	sub	sp, #20
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
 8000dae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000dbc:	d103      	bne.n	8000dc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	691b      	ldr	r3, [r3, #16]
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	e00c      	b.n	8000de0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3308      	adds	r3, #8
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	e002      	b.n	8000dd4 <vListInsert+0x2e>
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d2f6      	bcs.n	8000dce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	683a      	ldr	r2, [r7, #0]
 8000dee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	1c5a      	adds	r2, r3, #1
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	601a      	str	r2, [r3, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	691b      	ldr	r3, [r3, #16]
 8000e24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	6892      	ldr	r2, [r2, #8]
 8000e2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	6852      	ldr	r2, [r2, #4]
 8000e38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d103      	bne.n	8000e4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	1e5a      	subs	r2, r3, #1
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d10b      	bne.n	8000e98 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e84:	f383 8811 	msr	BASEPRI, r3
 8000e88:	f3bf 8f6f 	isb	sy
 8000e8c:	f3bf 8f4f 	dsb	sy
 8000e90:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000e92:	bf00      	nop
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8000e98:	f001 fc5e 	bl	8002758 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ea4:	68f9      	ldr	r1, [r7, #12]
 8000ea6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000ea8:	fb01 f303 	mul.w	r3, r1, r3
 8000eac:	441a      	add	r2, r3
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	68f9      	ldr	r1, [r7, #12]
 8000ecc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000ece:	fb01 f303 	mul.w	r3, r1, r3
 8000ed2:	441a      	add	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	22ff      	movs	r2, #255	@ 0xff
 8000edc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	22ff      	movs	r2, #255	@ 0xff
 8000ee4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d114      	bne.n	8000f18 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	691b      	ldr	r3, [r3, #16]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d01a      	beq.n	8000f2c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	3310      	adds	r3, #16
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 ff34 	bl	8001d68 <xTaskRemoveFromEventList>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d012      	beq.n	8000f2c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000f06:	4b0d      	ldr	r3, [pc, #52]	@ (8000f3c <xQueueGenericReset+0xd0>)
 8000f08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	f3bf 8f4f 	dsb	sy
 8000f12:	f3bf 8f6f 	isb	sy
 8000f16:	e009      	b.n	8000f2c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	3310      	adds	r3, #16
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fef1 	bl	8000d04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	3324      	adds	r3, #36	@ 0x24
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff feec 	bl	8000d04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000f2c:	f001 fc46 	bl	80027bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000f30:	2301      	movs	r3, #1
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	e000ed04 	.word	0xe000ed04

08000f40 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	@ 0x28
 8000f44:	af02      	add	r7, sp, #8
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d10b      	bne.n	8000f6c <xQueueGenericCreate+0x2c>
	__asm volatile
 8000f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f58:	f383 8811 	msr	BASEPRI, r3
 8000f5c:	f3bf 8f6f 	isb	sy
 8000f60:	f3bf 8f4f 	dsb	sy
 8000f64:	613b      	str	r3, [r7, #16]
}
 8000f66:	bf00      	nop
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	fb02 f303 	mul.w	r3, r2, r3
 8000f74:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3350      	adds	r3, #80	@ 0x50
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 fccc 	bl	8002918 <pvPortMalloc>
 8000f80:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d00d      	beq.n	8000fa4 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3350      	adds	r3, #80	@ 0x50
 8000f90:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000f92:	79fa      	ldrb	r2, [r7, #7]
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	68f8      	ldr	r0, [r7, #12]
 8000fa0:	f000 f805 	bl	8000fae <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000fa4:	69bb      	ldr	r3, [r7, #24]
	}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3720      	adds	r7, #32
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b084      	sub	sp, #16
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
 8000fba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d103      	bne.n	8000fca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	e002      	b.n	8000fd0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	68ba      	ldr	r2, [r7, #8]
 8000fda:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000fdc:	2101      	movs	r1, #1
 8000fde:	69b8      	ldr	r0, [r7, #24]
 8000fe0:	f7ff ff44 	bl	8000e6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	78fa      	ldrb	r2, [r7, #3]
 8000fe8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000fec:	bf00      	nop
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08e      	sub	sp, #56	@ 0x38
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
 8001000:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001002:	2300      	movs	r3, #0
 8001004:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800100a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800100c:	2b00      	cmp	r3, #0
 800100e:	d10b      	bne.n	8001028 <xQueueGenericSend+0x34>
	__asm volatile
 8001010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001014:	f383 8811 	msr	BASEPRI, r3
 8001018:	f3bf 8f6f 	isb	sy
 800101c:	f3bf 8f4f 	dsb	sy
 8001020:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001022:	bf00      	nop
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d103      	bne.n	8001036 <xQueueGenericSend+0x42>
 800102e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <xQueueGenericSend+0x46>
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <xQueueGenericSend+0x48>
 800103a:	2300      	movs	r3, #0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d10b      	bne.n	8001058 <xQueueGenericSend+0x64>
	__asm volatile
 8001040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001044:	f383 8811 	msr	BASEPRI, r3
 8001048:	f3bf 8f6f 	isb	sy
 800104c:	f3bf 8f4f 	dsb	sy
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001052:	bf00      	nop
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	2b02      	cmp	r3, #2
 800105c:	d103      	bne.n	8001066 <xQueueGenericSend+0x72>
 800105e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001062:	2b01      	cmp	r3, #1
 8001064:	d101      	bne.n	800106a <xQueueGenericSend+0x76>
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <xQueueGenericSend+0x78>
 800106a:	2300      	movs	r3, #0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d10b      	bne.n	8001088 <xQueueGenericSend+0x94>
	__asm volatile
 8001070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001074:	f383 8811 	msr	BASEPRI, r3
 8001078:	f3bf 8f6f 	isb	sy
 800107c:	f3bf 8f4f 	dsb	sy
 8001080:	623b      	str	r3, [r7, #32]
}
 8001082:	bf00      	nop
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001088:	f001 f80e 	bl	80020a8 <xTaskGetSchedulerState>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d102      	bne.n	8001098 <xQueueGenericSend+0xa4>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <xQueueGenericSend+0xa8>
 8001098:	2301      	movs	r3, #1
 800109a:	e000      	b.n	800109e <xQueueGenericSend+0xaa>
 800109c:	2300      	movs	r3, #0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10b      	bne.n	80010ba <xQueueGenericSend+0xc6>
	__asm volatile
 80010a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010a6:	f383 8811 	msr	BASEPRI, r3
 80010aa:	f3bf 8f6f 	isb	sy
 80010ae:	f3bf 8f4f 	dsb	sy
 80010b2:	61fb      	str	r3, [r7, #28]
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	e7fd      	b.n	80010b6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80010ba:	f001 fb4d 	bl	8002758 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80010be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80010c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d302      	bcc.n	80010d0 <xQueueGenericSend+0xdc>
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d129      	bne.n	8001124 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	68b9      	ldr	r1, [r7, #8]
 80010d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80010d6:	f000 f9b7 	bl	8001448 <prvCopyDataToQueue>
 80010da:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80010dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d010      	beq.n	8001106 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80010e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010e6:	3324      	adds	r3, #36	@ 0x24
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 fe3d 	bl	8001d68 <xTaskRemoveFromEventList>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d013      	beq.n	800111c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80010f4:	4b3f      	ldr	r3, [pc, #252]	@ (80011f4 <xQueueGenericSend+0x200>)
 80010f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	f3bf 8f4f 	dsb	sy
 8001100:	f3bf 8f6f 	isb	sy
 8001104:	e00a      	b.n	800111c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001108:	2b00      	cmp	r3, #0
 800110a:	d007      	beq.n	800111c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800110c:	4b39      	ldr	r3, [pc, #228]	@ (80011f4 <xQueueGenericSend+0x200>)
 800110e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	f3bf 8f4f 	dsb	sy
 8001118:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800111c:	f001 fb4e 	bl	80027bc <vPortExitCritical>
				return pdPASS;
 8001120:	2301      	movs	r3, #1
 8001122:	e063      	b.n	80011ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d103      	bne.n	8001132 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800112a:	f001 fb47 	bl	80027bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800112e:	2300      	movs	r3, #0
 8001130:	e05c      	b.n	80011ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001134:	2b00      	cmp	r3, #0
 8001136:	d106      	bne.n	8001146 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4618      	mov	r0, r3
 800113e:	f000 fe77 	bl	8001e30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001142:	2301      	movs	r3, #1
 8001144:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001146:	f001 fb39 	bl	80027bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800114a:	f000 fc25 	bl	8001998 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800114e:	f001 fb03 	bl	8002758 <vPortEnterCritical>
 8001152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001154:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001158:	b25b      	sxtb	r3, r3
 800115a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800115e:	d103      	bne.n	8001168 <xQueueGenericSend+0x174>
 8001160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001162:	2200      	movs	r2, #0
 8001164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800116a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800116e:	b25b      	sxtb	r3, r3
 8001170:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001174:	d103      	bne.n	800117e <xQueueGenericSend+0x18a>
 8001176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800117e:	f001 fb1d 	bl	80027bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001182:	1d3a      	adds	r2, r7, #4
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4611      	mov	r1, r2
 800118a:	4618      	mov	r0, r3
 800118c:	f000 fe66 	bl	8001e5c <xTaskCheckForTimeOut>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d124      	bne.n	80011e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001196:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001198:	f000 fa28 	bl	80015ec <prvIsQueueFull>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d018      	beq.n	80011d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80011a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011a4:	3310      	adds	r3, #16
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	4611      	mov	r1, r2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 fdb6 	bl	8001d1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80011b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80011b2:	f000 f9b3 	bl	800151c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80011b6:	f000 fbfd 	bl	80019b4 <xTaskResumeAll>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f47f af7c 	bne.w	80010ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80011c2:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <xQueueGenericSend+0x200>)
 80011c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	f3bf 8f4f 	dsb	sy
 80011ce:	f3bf 8f6f 	isb	sy
 80011d2:	e772      	b.n	80010ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80011d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80011d6:	f000 f9a1 	bl	800151c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80011da:	f000 fbeb 	bl	80019b4 <xTaskResumeAll>
 80011de:	e76c      	b.n	80010ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80011e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80011e2:	f000 f99b 	bl	800151c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80011e6:	f000 fbe5 	bl	80019b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80011ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3738      	adds	r7, #56	@ 0x38
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	e000ed04 	.word	0xe000ed04

080011f8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08e      	sub	sp, #56	@ 0x38
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8001202:	2300      	movs	r3, #0
 8001204:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800120a:	2300      	movs	r3, #0
 800120c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800120e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001210:	2b00      	cmp	r3, #0
 8001212:	d10b      	bne.n	800122c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8001214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001218:	f383 8811 	msr	BASEPRI, r3
 800121c:	f3bf 8f6f 	isb	sy
 8001220:	f3bf 8f4f 	dsb	sy
 8001224:	623b      	str	r3, [r7, #32]
}
 8001226:	bf00      	nop
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800122c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800122e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00b      	beq.n	800124c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8001234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001238:	f383 8811 	msr	BASEPRI, r3
 800123c:	f3bf 8f6f 	isb	sy
 8001240:	f3bf 8f4f 	dsb	sy
 8001244:	61fb      	str	r3, [r7, #28]
}
 8001246:	bf00      	nop
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800124c:	f000 ff2c 	bl	80020a8 <xTaskGetSchedulerState>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d102      	bne.n	800125c <xQueueSemaphoreTake+0x64>
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d101      	bne.n	8001260 <xQueueSemaphoreTake+0x68>
 800125c:	2301      	movs	r3, #1
 800125e:	e000      	b.n	8001262 <xQueueSemaphoreTake+0x6a>
 8001260:	2300      	movs	r3, #0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10b      	bne.n	800127e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8001266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800126a:	f383 8811 	msr	BASEPRI, r3
 800126e:	f3bf 8f6f 	isb	sy
 8001272:	f3bf 8f4f 	dsb	sy
 8001276:	61bb      	str	r3, [r7, #24]
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	e7fd      	b.n	800127a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800127e:	f001 fa6b 	bl	8002758 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001286:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800128a:	2b00      	cmp	r3, #0
 800128c:	d024      	beq.n	80012d8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800128e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001290:	1e5a      	subs	r2, r3, #1
 8001292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001294:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d104      	bne.n	80012a8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800129e:	f001 f8af 	bl	8002400 <pvTaskIncrementMutexHeldCount>
 80012a2:	4602      	mov	r2, r0
 80012a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012a6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80012a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00f      	beq.n	80012d0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80012b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012b2:	3310      	adds	r3, #16
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 fd57 	bl	8001d68 <xTaskRemoveFromEventList>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d007      	beq.n	80012d0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80012c0:	4b54      	ldr	r3, [pc, #336]	@ (8001414 <xQueueSemaphoreTake+0x21c>)
 80012c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	f3bf 8f4f 	dsb	sy
 80012cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80012d0:	f001 fa74 	bl	80027bc <vPortExitCritical>
				return pdPASS;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e098      	b.n	800140a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d112      	bne.n	8001304 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80012de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d00b      	beq.n	80012fc <xQueueSemaphoreTake+0x104>
	__asm volatile
 80012e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012e8:	f383 8811 	msr	BASEPRI, r3
 80012ec:	f3bf 8f6f 	isb	sy
 80012f0:	f3bf 8f4f 	dsb	sy
 80012f4:	617b      	str	r3, [r7, #20]
}
 80012f6:	bf00      	nop
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80012fc:	f001 fa5e 	bl	80027bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001300:	2300      	movs	r3, #0
 8001302:	e082      	b.n	800140a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001306:	2b00      	cmp	r3, #0
 8001308:	d106      	bne.n	8001318 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	4618      	mov	r0, r3
 8001310:	f000 fd8e 	bl	8001e30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001314:	2301      	movs	r3, #1
 8001316:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001318:	f001 fa50 	bl	80027bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800131c:	f000 fb3c 	bl	8001998 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001320:	f001 fa1a 	bl	8002758 <vPortEnterCritical>
 8001324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001326:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800132a:	b25b      	sxtb	r3, r3
 800132c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001330:	d103      	bne.n	800133a <xQueueSemaphoreTake+0x142>
 8001332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800133a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800133c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001340:	b25b      	sxtb	r3, r3
 8001342:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001346:	d103      	bne.n	8001350 <xQueueSemaphoreTake+0x158>
 8001348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001350:	f001 fa34 	bl	80027bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001354:	463a      	mov	r2, r7
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f000 fd7d 	bl	8001e5c <xTaskCheckForTimeOut>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d132      	bne.n	80013ce <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001368:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800136a:	f000 f929 	bl	80015c0 <prvIsQueueEmpty>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d026      	beq.n	80013c2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d109      	bne.n	8001390 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800137c:	f001 f9ec 	bl	8002758 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	4618      	mov	r0, r3
 8001386:	f000 fead 	bl	80020e4 <xTaskPriorityInherit>
 800138a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800138c:	f001 fa16 	bl	80027bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001392:	3324      	adds	r3, #36	@ 0x24
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f000 fcbf 	bl	8001d1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800139e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013a0:	f000 f8bc 	bl	800151c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80013a4:	f000 fb06 	bl	80019b4 <xTaskResumeAll>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f47f af67 	bne.w	800127e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80013b0:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <xQueueSemaphoreTake+0x21c>)
 80013b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	f3bf 8f4f 	dsb	sy
 80013bc:	f3bf 8f6f 	isb	sy
 80013c0:	e75d      	b.n	800127e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80013c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013c4:	f000 f8aa 	bl	800151c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80013c8:	f000 faf4 	bl	80019b4 <xTaskResumeAll>
 80013cc:	e757      	b.n	800127e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80013ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013d0:	f000 f8a4 	bl	800151c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80013d4:	f000 faee 	bl	80019b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80013d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013da:	f000 f8f1 	bl	80015c0 <prvIsQueueEmpty>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f43f af4c 	beq.w	800127e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80013e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00d      	beq.n	8001408 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80013ec:	f001 f9b4 	bl	8002758 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80013f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013f2:	f000 f811 	bl	8001418 <prvGetDisinheritPriorityAfterTimeout>
 80013f6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80013f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 ff6e 	bl	80022e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8001404:	f001 f9da 	bl	80027bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001408:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800140a:	4618      	mov	r0, r3
 800140c:	3738      	adds	r7, #56	@ 0x38
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	e000ed04 	.word	0xe000ed04

08001418 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001424:	2b00      	cmp	r3, #0
 8001426:	d006      	beq.n	8001436 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f1c3 0307 	rsb	r3, r3, #7
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	e001      	b.n	800143a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800143a:	68fb      	ldr	r3, [r7, #12]
	}
 800143c:	4618      	mov	r0, r3
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800145c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10d      	bne.n	8001482 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d14d      	bne.n	800150a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	4618      	mov	r0, r3
 8001474:	f000 feac 	bl	80021d0 <xTaskPriorityDisinherit>
 8001478:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	e043      	b.n	800150a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d119      	bne.n	80014bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6858      	ldr	r0, [r3, #4]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001490:	461a      	mov	r2, r3
 8001492:	68b9      	ldr	r1, [r7, #8]
 8001494:	f003 fbfd 	bl	8004c92 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a0:	441a      	add	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d32b      	bcc.n	800150a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	e026      	b.n	800150a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	68d8      	ldr	r0, [r3, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c4:	461a      	mov	r2, r3
 80014c6:	68b9      	ldr	r1, [r7, #8]
 80014c8:	f003 fbe3 	bl	8004c92 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	68da      	ldr	r2, [r3, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d4:	425b      	negs	r3, r3
 80014d6:	441a      	add	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	68da      	ldr	r2, [r3, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d207      	bcs.n	80014f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f0:	425b      	negs	r3, r3
 80014f2:	441a      	add	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d105      	bne.n	800150a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d002      	beq.n	800150a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	3b01      	subs	r3, #1
 8001508:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8001512:	697b      	ldr	r3, [r7, #20]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001524:	f001 f918 	bl	8002758 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800152e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001530:	e011      	b.n	8001556 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001536:	2b00      	cmp	r3, #0
 8001538:	d012      	beq.n	8001560 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3324      	adds	r3, #36	@ 0x24
 800153e:	4618      	mov	r0, r3
 8001540:	f000 fc12 	bl	8001d68 <xTaskRemoveFromEventList>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800154a:	f000 fceb 	bl	8001f24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	3b01      	subs	r3, #1
 8001552:	b2db      	uxtb	r3, r3
 8001554:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155a:	2b00      	cmp	r3, #0
 800155c:	dce9      	bgt.n	8001532 <prvUnlockQueue+0x16>
 800155e:	e000      	b.n	8001562 <prvUnlockQueue+0x46>
					break;
 8001560:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	22ff      	movs	r2, #255	@ 0xff
 8001566:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800156a:	f001 f927 	bl	80027bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800156e:	f001 f8f3 	bl	8002758 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001578:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800157a:	e011      	b.n	80015a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d012      	beq.n	80015aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3310      	adds	r3, #16
 8001588:	4618      	mov	r0, r3
 800158a:	f000 fbed 	bl	8001d68 <xTaskRemoveFromEventList>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001594:	f000 fcc6 	bl	8001f24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001598:	7bbb      	ldrb	r3, [r7, #14]
 800159a:	3b01      	subs	r3, #1
 800159c:	b2db      	uxtb	r3, r3
 800159e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80015a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	dce9      	bgt.n	800157c <prvUnlockQueue+0x60>
 80015a8:	e000      	b.n	80015ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80015aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	22ff      	movs	r2, #255	@ 0xff
 80015b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80015b4:	f001 f902 	bl	80027bc <vPortExitCritical>
}
 80015b8:	bf00      	nop
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80015c8:	f001 f8c6 	bl	8002758 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d102      	bne.n	80015da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80015d4:	2301      	movs	r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	e001      	b.n	80015de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80015de:	f001 f8ed 	bl	80027bc <vPortExitCritical>

	return xReturn;
 80015e2:	68fb      	ldr	r3, [r7, #12]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80015f4:	f001 f8b0 	bl	8002758 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001600:	429a      	cmp	r2, r3
 8001602:	d102      	bne.n	800160a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001604:	2301      	movs	r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	e001      	b.n	800160e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800160e:	f001 f8d5 	bl	80027bc <vPortExitCritical>

	return xReturn;
 8001612:	68fb      	ldr	r3, [r7, #12]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08c      	sub	sp, #48	@ 0x30
 8001620:	af04      	add	r7, sp, #16
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	4613      	mov	r3, r2
 800162a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4618      	mov	r0, r3
 8001632:	f001 f971 	bl	8002918 <pvPortMalloc>
 8001636:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00e      	beq.n	800165c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800163e:	205c      	movs	r0, #92	@ 0x5c
 8001640:	f001 f96a 	bl	8002918 <pvPortMalloc>
 8001644:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	631a      	str	r2, [r3, #48]	@ 0x30
 8001652:	e005      	b.n	8001660 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001654:	6978      	ldr	r0, [r7, #20]
 8001656:	f001 fa2d 	bl	8002ab4 <vPortFree>
 800165a:	e001      	b.n	8001660 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d013      	beq.n	800168e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001666:	88fa      	ldrh	r2, [r7, #6]
 8001668:	2300      	movs	r3, #0
 800166a:	9303      	str	r3, [sp, #12]
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	9302      	str	r3, [sp, #8]
 8001670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001672:	9301      	str	r3, [sp, #4]
 8001674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	68b9      	ldr	r1, [r7, #8]
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f000 f80e 	bl	800169e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001682:	69f8      	ldr	r0, [r7, #28]
 8001684:	f000 f89c 	bl	80017c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001688:	2301      	movs	r3, #1
 800168a:	61bb      	str	r3, [r7, #24]
 800168c:	e002      	b.n	8001694 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800168e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001692:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001694:	69bb      	ldr	r3, [r7, #24]
	}
 8001696:	4618      	mov	r0, r3
 8001698:	3720      	adds	r7, #32
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b088      	sub	sp, #32
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
 80016aa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80016ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016ae:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	461a      	mov	r2, r3
 80016b6:	21a5      	movs	r1, #165	@ 0xa5
 80016b8:	f003 fa6b 	bl	8004b92 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80016bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80016c6:	3b01      	subs	r3, #1
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	f023 0307 	bic.w	r3, r3, #7
 80016d4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d00b      	beq.n	80016f8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80016e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016e4:	f383 8811 	msr	BASEPRI, r3
 80016e8:	f3bf 8f6f 	isb	sy
 80016ec:	f3bf 8f4f 	dsb	sy
 80016f0:	617b      	str	r3, [r7, #20]
}
 80016f2:	bf00      	nop
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d01f      	beq.n	800173e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
 8001702:	e012      	b.n	800172a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	4413      	add	r3, r2
 800170a:	7819      	ldrb	r1, [r3, #0]
 800170c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	4413      	add	r3, r2
 8001712:	3334      	adds	r3, #52	@ 0x34
 8001714:	460a      	mov	r2, r1
 8001716:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001718:	68ba      	ldr	r2, [r7, #8]
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	4413      	add	r3, r2
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d006      	beq.n	8001732 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	3301      	adds	r3, #1
 8001728:	61fb      	str	r3, [r7, #28]
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	2b0f      	cmp	r3, #15
 800172e:	d9e9      	bls.n	8001704 <prvInitialiseNewTask+0x66>
 8001730:	e000      	b.n	8001734 <prvInitialiseNewTask+0x96>
			{
				break;
 8001732:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800173c:	e003      	b.n	8001746 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800173e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001748:	2b06      	cmp	r3, #6
 800174a:	d901      	bls.n	8001750 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800174c:	2306      	movs	r3, #6
 800174e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001752:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001754:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001758:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800175a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800175c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800175e:	2200      	movs	r2, #0
 8001760:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001764:	3304      	adds	r3, #4
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff faec 	bl	8000d44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800176c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800176e:	3318      	adds	r3, #24
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fae7 	bl	8000d44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001778:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800177a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800177c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800177e:	f1c3 0207 	rsb	r2, r3, #7
 8001782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001784:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001788:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800178a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800178c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800178e:	2200      	movs	r2, #0
 8001790:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	68f9      	ldr	r1, [r7, #12]
 800179e:	69b8      	ldr	r0, [r7, #24]
 80017a0:	f000 fea8 	bl	80024f4 <pxPortInitialiseStack>
 80017a4:	4602      	mov	r2, r0
 80017a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80017aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d002      	beq.n	80017b6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80017b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80017b6:	bf00      	nop
 80017b8:	3720      	adds	r7, #32
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80017c8:	f000 ffc6 	bl	8002758 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80017cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001880 <prvAddNewTaskToReadyList+0xc0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	3301      	adds	r3, #1
 80017d2:	4a2b      	ldr	r2, [pc, #172]	@ (8001880 <prvAddNewTaskToReadyList+0xc0>)
 80017d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80017d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001884 <prvAddNewTaskToReadyList+0xc4>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d109      	bne.n	80017f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80017de:	4a29      	ldr	r2, [pc, #164]	@ (8001884 <prvAddNewTaskToReadyList+0xc4>)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80017e4:	4b26      	ldr	r3, [pc, #152]	@ (8001880 <prvAddNewTaskToReadyList+0xc0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d110      	bne.n	800180e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80017ec:	f000 fbbe 	bl	8001f6c <prvInitialiseTaskLists>
 80017f0:	e00d      	b.n	800180e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80017f2:	4b25      	ldr	r3, [pc, #148]	@ (8001888 <prvAddNewTaskToReadyList+0xc8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d109      	bne.n	800180e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80017fa:	4b22      	ldr	r3, [pc, #136]	@ (8001884 <prvAddNewTaskToReadyList+0xc4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001804:	429a      	cmp	r2, r3
 8001806:	d802      	bhi.n	800180e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001808:	4a1e      	ldr	r2, [pc, #120]	@ (8001884 <prvAddNewTaskToReadyList+0xc4>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800180e:	4b1f      	ldr	r3, [pc, #124]	@ (800188c <prvAddNewTaskToReadyList+0xcc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	3301      	adds	r3, #1
 8001814:	4a1d      	ldr	r2, [pc, #116]	@ (800188c <prvAddNewTaskToReadyList+0xcc>)
 8001816:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001818:	4b1c      	ldr	r3, [pc, #112]	@ (800188c <prvAddNewTaskToReadyList+0xcc>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001824:	2201      	movs	r2, #1
 8001826:	409a      	lsls	r2, r3
 8001828:	4b19      	ldr	r3, [pc, #100]	@ (8001890 <prvAddNewTaskToReadyList+0xd0>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4313      	orrs	r3, r2
 800182e:	4a18      	ldr	r2, [pc, #96]	@ (8001890 <prvAddNewTaskToReadyList+0xd0>)
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4a15      	ldr	r2, [pc, #84]	@ (8001894 <prvAddNewTaskToReadyList+0xd4>)
 8001840:	441a      	add	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3304      	adds	r3, #4
 8001846:	4619      	mov	r1, r3
 8001848:	4610      	mov	r0, r2
 800184a:	f7ff fa88 	bl	8000d5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800184e:	f000 ffb5 	bl	80027bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001852:	4b0d      	ldr	r3, [pc, #52]	@ (8001888 <prvAddNewTaskToReadyList+0xc8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00e      	beq.n	8001878 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800185a:	4b0a      	ldr	r3, [pc, #40]	@ (8001884 <prvAddNewTaskToReadyList+0xc4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001864:	429a      	cmp	r2, r3
 8001866:	d207      	bcs.n	8001878 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001868:	4b0b      	ldr	r3, [pc, #44]	@ (8001898 <prvAddNewTaskToReadyList+0xd8>)
 800186a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	f3bf 8f4f 	dsb	sy
 8001874:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000374 	.word	0x20000374
 8001884:	20000274 	.word	0x20000274
 8001888:	20000380 	.word	0x20000380
 800188c:	20000390 	.word	0x20000390
 8001890:	2000037c 	.word	0x2000037c
 8001894:	20000278 	.word	0x20000278
 8001898:	e000ed04 	.word	0xe000ed04

0800189c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d018      	beq.n	80018e0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80018ae:	4b14      	ldr	r3, [pc, #80]	@ (8001900 <vTaskDelay+0x64>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00b      	beq.n	80018ce <vTaskDelay+0x32>
	__asm volatile
 80018b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018ba:	f383 8811 	msr	BASEPRI, r3
 80018be:	f3bf 8f6f 	isb	sy
 80018c2:	f3bf 8f4f 	dsb	sy
 80018c6:	60bb      	str	r3, [r7, #8]
}
 80018c8:	bf00      	nop
 80018ca:	bf00      	nop
 80018cc:	e7fd      	b.n	80018ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80018ce:	f000 f863 	bl	8001998 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80018d2:	2100      	movs	r1, #0
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 fda7 	bl	8002428 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80018da:	f000 f86b 	bl	80019b4 <xTaskResumeAll>
 80018de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d107      	bne.n	80018f6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80018e6:	4b07      	ldr	r3, [pc, #28]	@ (8001904 <vTaskDelay+0x68>)
 80018e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	f3bf 8f4f 	dsb	sy
 80018f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	2000039c 	.word	0x2000039c
 8001904:	e000ed04 	.word	0xe000ed04

08001908 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800190e:	4b1c      	ldr	r3, [pc, #112]	@ (8001980 <vTaskStartScheduler+0x78>)
 8001910:	9301      	str	r3, [sp, #4]
 8001912:	2300      	movs	r3, #0
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2300      	movs	r3, #0
 8001918:	2280      	movs	r2, #128	@ 0x80
 800191a:	491a      	ldr	r1, [pc, #104]	@ (8001984 <vTaskStartScheduler+0x7c>)
 800191c:	481a      	ldr	r0, [pc, #104]	@ (8001988 <vTaskStartScheduler+0x80>)
 800191e:	f7ff fe7d 	bl	800161c <xTaskCreate>
 8001922:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d116      	bne.n	8001958 <vTaskStartScheduler+0x50>
	__asm volatile
 800192a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800192e:	f383 8811 	msr	BASEPRI, r3
 8001932:	f3bf 8f6f 	isb	sy
 8001936:	f3bf 8f4f 	dsb	sy
 800193a:	60bb      	str	r3, [r7, #8]
}
 800193c:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800193e:	4b13      	ldr	r3, [pc, #76]	@ (800198c <vTaskStartScheduler+0x84>)
 8001940:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001944:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001946:	4b12      	ldr	r3, [pc, #72]	@ (8001990 <vTaskStartScheduler+0x88>)
 8001948:	2201      	movs	r2, #1
 800194a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800194c:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <vTaskStartScheduler+0x8c>)
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001952:	f000 fe5d 	bl	8002610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001956:	e00f      	b.n	8001978 <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800195e:	d10b      	bne.n	8001978 <vTaskStartScheduler+0x70>
	__asm volatile
 8001960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001964:	f383 8811 	msr	BASEPRI, r3
 8001968:	f3bf 8f6f 	isb	sy
 800196c:	f3bf 8f4f 	dsb	sy
 8001970:	607b      	str	r3, [r7, #4]
}
 8001972:	bf00      	nop
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <vTaskStartScheduler+0x6c>
}
 8001978:	bf00      	nop
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000398 	.word	0x20000398
 8001984:	08008360 	.word	0x08008360
 8001988:	08001f3d 	.word	0x08001f3d
 800198c:	20000394 	.word	0x20000394
 8001990:	20000380 	.word	0x20000380
 8001994:	20000378 	.word	0x20000378

08001998 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800199c:	4b04      	ldr	r3, [pc, #16]	@ (80019b0 <vTaskSuspendAll+0x18>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	3301      	adds	r3, #1
 80019a2:	4a03      	ldr	r2, [pc, #12]	@ (80019b0 <vTaskSuspendAll+0x18>)
 80019a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	2000039c 	.word	0x2000039c

080019b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80019c2:	4b42      	ldr	r3, [pc, #264]	@ (8001acc <xTaskResumeAll+0x118>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10b      	bne.n	80019e2 <xTaskResumeAll+0x2e>
	__asm volatile
 80019ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019ce:	f383 8811 	msr	BASEPRI, r3
 80019d2:	f3bf 8f6f 	isb	sy
 80019d6:	f3bf 8f4f 	dsb	sy
 80019da:	603b      	str	r3, [r7, #0]
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	e7fd      	b.n	80019de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80019e2:	f000 feb9 	bl	8002758 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80019e6:	4b39      	ldr	r3, [pc, #228]	@ (8001acc <xTaskResumeAll+0x118>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	4a37      	ldr	r2, [pc, #220]	@ (8001acc <xTaskResumeAll+0x118>)
 80019ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019f0:	4b36      	ldr	r3, [pc, #216]	@ (8001acc <xTaskResumeAll+0x118>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d161      	bne.n	8001abc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80019f8:	4b35      	ldr	r3, [pc, #212]	@ (8001ad0 <xTaskResumeAll+0x11c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d05d      	beq.n	8001abc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a00:	e02e      	b.n	8001a60 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a02:	4b34      	ldr	r3, [pc, #208]	@ (8001ad4 <xTaskResumeAll+0x120>)
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	3318      	adds	r3, #24
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fa02 	bl	8000e18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	3304      	adds	r3, #4
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff f9fd 	bl	8000e18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a22:	2201      	movs	r2, #1
 8001a24:	409a      	lsls	r2, r3
 8001a26:	4b2c      	ldr	r3, [pc, #176]	@ (8001ad8 <xTaskResumeAll+0x124>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	4a2a      	ldr	r2, [pc, #168]	@ (8001ad8 <xTaskResumeAll+0x124>)
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4a27      	ldr	r2, [pc, #156]	@ (8001adc <xTaskResumeAll+0x128>)
 8001a3e:	441a      	add	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3304      	adds	r3, #4
 8001a44:	4619      	mov	r1, r3
 8001a46:	4610      	mov	r0, r2
 8001a48:	f7ff f989 	bl	8000d5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a50:	4b23      	ldr	r3, [pc, #140]	@ (8001ae0 <xTaskResumeAll+0x12c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d302      	bcc.n	8001a60 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001a5a:	4b22      	ldr	r3, [pc, #136]	@ (8001ae4 <xTaskResumeAll+0x130>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a60:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad4 <xTaskResumeAll+0x120>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1cc      	bne.n	8001a02 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001a6e:	f000 fafb 	bl	8002068 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001a72:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae8 <xTaskResumeAll+0x134>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d010      	beq.n	8001aa0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001a7e:	f000 f837 	bl	8001af0 <xTaskIncrementTick>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d002      	beq.n	8001a8e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8001a88:	4b16      	ldr	r3, [pc, #88]	@ (8001ae4 <xTaskResumeAll+0x130>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3b01      	subs	r3, #1
 8001a92:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f1      	bne.n	8001a7e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8001a9a:	4b13      	ldr	r3, [pc, #76]	@ (8001ae8 <xTaskResumeAll+0x134>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001aa0:	4b10      	ldr	r3, [pc, #64]	@ (8001ae4 <xTaskResumeAll+0x130>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d009      	beq.n	8001abc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001aac:	4b0f      	ldr	r3, [pc, #60]	@ (8001aec <xTaskResumeAll+0x138>)
 8001aae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	f3bf 8f4f 	dsb	sy
 8001ab8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001abc:	f000 fe7e 	bl	80027bc <vPortExitCritical>

	return xAlreadyYielded;
 8001ac0:	68bb      	ldr	r3, [r7, #8]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	2000039c 	.word	0x2000039c
 8001ad0:	20000374 	.word	0x20000374
 8001ad4:	20000334 	.word	0x20000334
 8001ad8:	2000037c 	.word	0x2000037c
 8001adc:	20000278 	.word	0x20000278
 8001ae0:	20000274 	.word	0x20000274
 8001ae4:	20000388 	.word	0x20000388
 8001ae8:	20000384 	.word	0x20000384
 8001aec:	e000ed04 	.word	0xe000ed04

08001af0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001afa:	4b4f      	ldr	r3, [pc, #316]	@ (8001c38 <xTaskIncrementTick+0x148>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f040 808f 	bne.w	8001c22 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001b04:	4b4d      	ldr	r3, [pc, #308]	@ (8001c3c <xTaskIncrementTick+0x14c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001b0c:	4a4b      	ldr	r2, [pc, #300]	@ (8001c3c <xTaskIncrementTick+0x14c>)
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d121      	bne.n	8001b5c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8001b18:	4b49      	ldr	r3, [pc, #292]	@ (8001c40 <xTaskIncrementTick+0x150>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00b      	beq.n	8001b3a <xTaskIncrementTick+0x4a>
	__asm volatile
 8001b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b26:	f383 8811 	msr	BASEPRI, r3
 8001b2a:	f3bf 8f6f 	isb	sy
 8001b2e:	f3bf 8f4f 	dsb	sy
 8001b32:	603b      	str	r3, [r7, #0]
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	e7fd      	b.n	8001b36 <xTaskIncrementTick+0x46>
 8001b3a:	4b41      	ldr	r3, [pc, #260]	@ (8001c40 <xTaskIncrementTick+0x150>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	4b40      	ldr	r3, [pc, #256]	@ (8001c44 <xTaskIncrementTick+0x154>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a3e      	ldr	r2, [pc, #248]	@ (8001c40 <xTaskIncrementTick+0x150>)
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	4a3e      	ldr	r2, [pc, #248]	@ (8001c44 <xTaskIncrementTick+0x154>)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c48 <xTaskIncrementTick+0x158>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	3301      	adds	r3, #1
 8001b54:	4a3c      	ldr	r2, [pc, #240]	@ (8001c48 <xTaskIncrementTick+0x158>)
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	f000 fa86 	bl	8002068 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c4c <xTaskIncrementTick+0x15c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d348      	bcc.n	8001bf8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b66:	4b36      	ldr	r3, [pc, #216]	@ (8001c40 <xTaskIncrementTick+0x150>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d104      	bne.n	8001b7a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b70:	4b36      	ldr	r3, [pc, #216]	@ (8001c4c <xTaskIncrementTick+0x15c>)
 8001b72:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b76:	601a      	str	r2, [r3, #0]
					break;
 8001b78:	e03e      	b.n	8001bf8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b7a:	4b31      	ldr	r3, [pc, #196]	@ (8001c40 <xTaskIncrementTick+0x150>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d203      	bcs.n	8001b9a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001b92:	4a2e      	ldr	r2, [pc, #184]	@ (8001c4c <xTaskIncrementTick+0x15c>)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001b98:	e02e      	b.n	8001bf8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff f93a 	bl	8000e18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d004      	beq.n	8001bb6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	3318      	adds	r3, #24
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff f931 	bl	8000e18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bba:	2201      	movs	r2, #1
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	4b24      	ldr	r3, [pc, #144]	@ (8001c50 <xTaskIncrementTick+0x160>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	4a22      	ldr	r2, [pc, #136]	@ (8001c50 <xTaskIncrementTick+0x160>)
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4a1f      	ldr	r2, [pc, #124]	@ (8001c54 <xTaskIncrementTick+0x164>)
 8001bd6:	441a      	add	r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	3304      	adds	r3, #4
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4610      	mov	r0, r2
 8001be0:	f7ff f8bd 	bl	8000d5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001be8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c58 <xTaskIncrementTick+0x168>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d3b9      	bcc.n	8001b66 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001bf6:	e7b6      	b.n	8001b66 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001bf8:	4b17      	ldr	r3, [pc, #92]	@ (8001c58 <xTaskIncrementTick+0x168>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bfe:	4915      	ldr	r1, [pc, #84]	@ (8001c54 <xTaskIncrementTick+0x164>)
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	440b      	add	r3, r1
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d901      	bls.n	8001c14 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8001c10:	2301      	movs	r3, #1
 8001c12:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001c14:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <xTaskIncrementTick+0x16c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d007      	beq.n	8001c2c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	e004      	b.n	8001c2c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001c22:	4b0f      	ldr	r3, [pc, #60]	@ (8001c60 <xTaskIncrementTick+0x170>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	3301      	adds	r3, #1
 8001c28:	4a0d      	ldr	r2, [pc, #52]	@ (8001c60 <xTaskIncrementTick+0x170>)
 8001c2a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001c2c:	697b      	ldr	r3, [r7, #20]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	2000039c 	.word	0x2000039c
 8001c3c:	20000378 	.word	0x20000378
 8001c40:	2000032c 	.word	0x2000032c
 8001c44:	20000330 	.word	0x20000330
 8001c48:	2000038c 	.word	0x2000038c
 8001c4c:	20000394 	.word	0x20000394
 8001c50:	2000037c 	.word	0x2000037c
 8001c54:	20000278 	.word	0x20000278
 8001c58:	20000274 	.word	0x20000274
 8001c5c:	20000388 	.word	0x20000388
 8001c60:	20000384 	.word	0x20000384

08001c64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001c64:	b480      	push	{r7}
 8001c66:	b087      	sub	sp, #28
 8001c68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001c6a:	4b27      	ldr	r3, [pc, #156]	@ (8001d08 <vTaskSwitchContext+0xa4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001c72:	4b26      	ldr	r3, [pc, #152]	@ (8001d0c <vTaskSwitchContext+0xa8>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001c78:	e040      	b.n	8001cfc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8001c7a:	4b24      	ldr	r3, [pc, #144]	@ (8001d0c <vTaskSwitchContext+0xa8>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c80:	4b23      	ldr	r3, [pc, #140]	@ (8001d10 <vTaskSwitchContext+0xac>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	fab3 f383 	clz	r3, r3
 8001c8c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001c8e:	7afb      	ldrb	r3, [r7, #11]
 8001c90:	f1c3 031f 	rsb	r3, r3, #31
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	491f      	ldr	r1, [pc, #124]	@ (8001d14 <vTaskSwitchContext+0xb0>)
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10b      	bne.n	8001cc2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8001caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cae:	f383 8811 	msr	BASEPRI, r3
 8001cb2:	f3bf 8f6f 	isb	sy
 8001cb6:	f3bf 8f4f 	dsb	sy
 8001cba:	607b      	str	r3, [r7, #4]
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	e7fd      	b.n	8001cbe <vTaskSwitchContext+0x5a>
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4a11      	ldr	r2, [pc, #68]	@ (8001d14 <vTaskSwitchContext+0xb0>)
 8001cce:	4413      	add	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	3308      	adds	r3, #8
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d104      	bne.n	8001cf2 <vTaskSwitchContext+0x8e>
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	4a07      	ldr	r2, [pc, #28]	@ (8001d18 <vTaskSwitchContext+0xb4>)
 8001cfa:	6013      	str	r3, [r2, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	371c      	adds	r7, #28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	2000039c 	.word	0x2000039c
 8001d0c:	20000388 	.word	0x20000388
 8001d10:	2000037c 	.word	0x2000037c
 8001d14:	20000278 	.word	0x20000278
 8001d18:	20000274 	.word	0x20000274

08001d1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10b      	bne.n	8001d44 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8001d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d30:	f383 8811 	msr	BASEPRI, r3
 8001d34:	f3bf 8f6f 	isb	sy
 8001d38:	f3bf 8f4f 	dsb	sy
 8001d3c:	60fb      	str	r3, [r7, #12]
}
 8001d3e:	bf00      	nop
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001d44:	4b07      	ldr	r3, [pc, #28]	@ (8001d64 <vTaskPlaceOnEventList+0x48>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	3318      	adds	r3, #24
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff f82a 	bl	8000da6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001d52:	2101      	movs	r1, #1
 8001d54:	6838      	ldr	r0, [r7, #0]
 8001d56:	f000 fb67 	bl	8002428 <prvAddCurrentTaskToDelayedList>
}
 8001d5a:	bf00      	nop
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000274 	.word	0x20000274

08001d68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10b      	bne.n	8001d96 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8001d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d82:	f383 8811 	msr	BASEPRI, r3
 8001d86:	f3bf 8f6f 	isb	sy
 8001d8a:	f3bf 8f4f 	dsb	sy
 8001d8e:	60fb      	str	r3, [r7, #12]
}
 8001d90:	bf00      	nop
 8001d92:	bf00      	nop
 8001d94:	e7fd      	b.n	8001d92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	3318      	adds	r3, #24
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff f83c 	bl	8000e18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001da0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e18 <xTaskRemoveFromEventList+0xb0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d11c      	bne.n	8001de2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	3304      	adds	r3, #4
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff f833 	bl	8000e18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db6:	2201      	movs	r2, #1
 8001db8:	409a      	lsls	r2, r3
 8001dba:	4b18      	ldr	r3, [pc, #96]	@ (8001e1c <xTaskRemoveFromEventList+0xb4>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	4a16      	ldr	r2, [pc, #88]	@ (8001e1c <xTaskRemoveFromEventList+0xb4>)
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4a13      	ldr	r2, [pc, #76]	@ (8001e20 <xTaskRemoveFromEventList+0xb8>)
 8001dd2:	441a      	add	r2, r3
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4610      	mov	r0, r2
 8001ddc:	f7fe ffbf 	bl	8000d5e <vListInsertEnd>
 8001de0:	e005      	b.n	8001dee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	3318      	adds	r3, #24
 8001de6:	4619      	mov	r1, r3
 8001de8:	480e      	ldr	r0, [pc, #56]	@ (8001e24 <xTaskRemoveFromEventList+0xbc>)
 8001dea:	f7fe ffb8 	bl	8000d5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001df2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e28 <xTaskRemoveFromEventList+0xc0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d905      	bls.n	8001e08 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001e00:	4b0a      	ldr	r3, [pc, #40]	@ (8001e2c <xTaskRemoveFromEventList+0xc4>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	e001      	b.n	8001e0c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001e0c:	697b      	ldr	r3, [r7, #20]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	2000039c 	.word	0x2000039c
 8001e1c:	2000037c 	.word	0x2000037c
 8001e20:	20000278 	.word	0x20000278
 8001e24:	20000334 	.word	0x20000334
 8001e28:	20000274 	.word	0x20000274
 8001e2c:	20000388 	.word	0x20000388

08001e30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001e38:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <vTaskInternalSetTimeOutState+0x24>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001e40:	4b05      	ldr	r3, [pc, #20]	@ (8001e58 <vTaskInternalSetTimeOutState+0x28>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	605a      	str	r2, [r3, #4]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	2000038c 	.word	0x2000038c
 8001e58:	20000378 	.word	0x20000378

08001e5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10b      	bne.n	8001e84 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8001e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e70:	f383 8811 	msr	BASEPRI, r3
 8001e74:	f3bf 8f6f 	isb	sy
 8001e78:	f3bf 8f4f 	dsb	sy
 8001e7c:	613b      	str	r3, [r7, #16]
}
 8001e7e:	bf00      	nop
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10b      	bne.n	8001ea2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8001e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e8e:	f383 8811 	msr	BASEPRI, r3
 8001e92:	f3bf 8f6f 	isb	sy
 8001e96:	f3bf 8f4f 	dsb	sy
 8001e9a:	60fb      	str	r3, [r7, #12]
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	e7fd      	b.n	8001e9e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8001ea2:	f000 fc59 	bl	8002758 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f1c <xTaskCheckForTimeOut+0xc0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ebe:	d102      	bne.n	8001ec6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61fb      	str	r3, [r7, #28]
 8001ec4:	e023      	b.n	8001f0e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <xTaskCheckForTimeOut+0xc4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d007      	beq.n	8001ee2 <xTaskCheckForTimeOut+0x86>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d302      	bcc.n	8001ee2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001edc:	2301      	movs	r3, #1
 8001ede:	61fb      	str	r3, [r7, #28]
 8001ee0:	e015      	b.n	8001f0e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d20b      	bcs.n	8001f04 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	1ad2      	subs	r2, r2, r3
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ff99 	bl	8001e30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
 8001f02:	e004      	b.n	8001f0e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001f0e:	f000 fc55 	bl	80027bc <vPortExitCritical>

	return xReturn;
 8001f12:	69fb      	ldr	r3, [r7, #28]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3720      	adds	r7, #32
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000378 	.word	0x20000378
 8001f20:	2000038c 	.word	0x2000038c

08001f24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001f28:	4b03      	ldr	r3, [pc, #12]	@ (8001f38 <vTaskMissedYield+0x14>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]
}
 8001f2e:	bf00      	nop
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	20000388 	.word	0x20000388

08001f3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001f44:	f000 f852 	bl	8001fec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001f48:	4b06      	ldr	r3, [pc, #24]	@ (8001f64 <prvIdleTask+0x28>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d9f9      	bls.n	8001f44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001f50:	4b05      	ldr	r3, [pc, #20]	@ (8001f68 <prvIdleTask+0x2c>)
 8001f52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	f3bf 8f4f 	dsb	sy
 8001f5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001f60:	e7f0      	b.n	8001f44 <prvIdleTask+0x8>
 8001f62:	bf00      	nop
 8001f64:	20000278 	.word	0x20000278
 8001f68:	e000ed04 	.word	0xe000ed04

08001f6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001f72:	2300      	movs	r3, #0
 8001f74:	607b      	str	r3, [r7, #4]
 8001f76:	e00c      	b.n	8001f92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4a12      	ldr	r2, [pc, #72]	@ (8001fcc <prvInitialiseTaskLists+0x60>)
 8001f84:	4413      	add	r3, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe febc 	bl	8000d04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b06      	cmp	r3, #6
 8001f96:	d9ef      	bls.n	8001f78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001f98:	480d      	ldr	r0, [pc, #52]	@ (8001fd0 <prvInitialiseTaskLists+0x64>)
 8001f9a:	f7fe feb3 	bl	8000d04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001f9e:	480d      	ldr	r0, [pc, #52]	@ (8001fd4 <prvInitialiseTaskLists+0x68>)
 8001fa0:	f7fe feb0 	bl	8000d04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001fa4:	480c      	ldr	r0, [pc, #48]	@ (8001fd8 <prvInitialiseTaskLists+0x6c>)
 8001fa6:	f7fe fead 	bl	8000d04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001faa:	480c      	ldr	r0, [pc, #48]	@ (8001fdc <prvInitialiseTaskLists+0x70>)
 8001fac:	f7fe feaa 	bl	8000d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001fb0:	480b      	ldr	r0, [pc, #44]	@ (8001fe0 <prvInitialiseTaskLists+0x74>)
 8001fb2:	f7fe fea7 	bl	8000d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe4 <prvInitialiseTaskLists+0x78>)
 8001fb8:	4a05      	ldr	r2, [pc, #20]	@ (8001fd0 <prvInitialiseTaskLists+0x64>)
 8001fba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe8 <prvInitialiseTaskLists+0x7c>)
 8001fbe:	4a05      	ldr	r2, [pc, #20]	@ (8001fd4 <prvInitialiseTaskLists+0x68>)
 8001fc0:	601a      	str	r2, [r3, #0]
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000278 	.word	0x20000278
 8001fd0:	20000304 	.word	0x20000304
 8001fd4:	20000318 	.word	0x20000318
 8001fd8:	20000334 	.word	0x20000334
 8001fdc:	20000348 	.word	0x20000348
 8001fe0:	20000360 	.word	0x20000360
 8001fe4:	2000032c 	.word	0x2000032c
 8001fe8:	20000330 	.word	0x20000330

08001fec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ff2:	e019      	b.n	8002028 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001ff4:	f000 fbb0 	bl	8002758 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ff8:	4b10      	ldr	r3, [pc, #64]	@ (800203c <prvCheckTasksWaitingTermination+0x50>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3304      	adds	r3, #4
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe ff07 	bl	8000e18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800200a:	4b0d      	ldr	r3, [pc, #52]	@ (8002040 <prvCheckTasksWaitingTermination+0x54>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	3b01      	subs	r3, #1
 8002010:	4a0b      	ldr	r2, [pc, #44]	@ (8002040 <prvCheckTasksWaitingTermination+0x54>)
 8002012:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002014:	4b0b      	ldr	r3, [pc, #44]	@ (8002044 <prvCheckTasksWaitingTermination+0x58>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	3b01      	subs	r3, #1
 800201a:	4a0a      	ldr	r2, [pc, #40]	@ (8002044 <prvCheckTasksWaitingTermination+0x58>)
 800201c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800201e:	f000 fbcd 	bl	80027bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f810 	bl	8002048 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002028:	4b06      	ldr	r3, [pc, #24]	@ (8002044 <prvCheckTasksWaitingTermination+0x58>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1e1      	bne.n	8001ff4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002030:	bf00      	nop
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000348 	.word	0x20000348
 8002040:	20000374 	.word	0x20000374
 8002044:	2000035c 	.word	0x2000035c

08002048 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002054:	4618      	mov	r0, r3
 8002056:	f000 fd2d 	bl	8002ab4 <vPortFree>
			vPortFree( pxTCB );
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 fd2a 	bl	8002ab4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800206e:	4b0c      	ldr	r3, [pc, #48]	@ (80020a0 <prvResetNextTaskUnblockTime+0x38>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d104      	bne.n	8002082 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002078:	4b0a      	ldr	r3, [pc, #40]	@ (80020a4 <prvResetNextTaskUnblockTime+0x3c>)
 800207a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800207e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002080:	e008      	b.n	8002094 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002082:	4b07      	ldr	r3, [pc, #28]	@ (80020a0 <prvResetNextTaskUnblockTime+0x38>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	4a04      	ldr	r2, [pc, #16]	@ (80020a4 <prvResetNextTaskUnblockTime+0x3c>)
 8002092:	6013      	str	r3, [r2, #0]
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	2000032c 	.word	0x2000032c
 80020a4:	20000394 	.word	0x20000394

080020a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80020ae:	4b0b      	ldr	r3, [pc, #44]	@ (80020dc <xTaskGetSchedulerState+0x34>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d102      	bne.n	80020bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80020b6:	2301      	movs	r3, #1
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	e008      	b.n	80020ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020bc:	4b08      	ldr	r3, [pc, #32]	@ (80020e0 <xTaskGetSchedulerState+0x38>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d102      	bne.n	80020ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80020c4:	2302      	movs	r3, #2
 80020c6:	607b      	str	r3, [r7, #4]
 80020c8:	e001      	b.n	80020ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80020ca:	2300      	movs	r3, #0
 80020cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80020ce:	687b      	ldr	r3, [r7, #4]
	}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	20000380 	.word	0x20000380
 80020e0:	2000039c 	.word	0x2000039c

080020e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d05e      	beq.n	80021b8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020fe:	4b31      	ldr	r3, [pc, #196]	@ (80021c4 <xTaskPriorityInherit+0xe0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002104:	429a      	cmp	r2, r3
 8002106:	d24e      	bcs.n	80021a6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	2b00      	cmp	r3, #0
 800210e:	db06      	blt.n	800211e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002110:	4b2c      	ldr	r3, [pc, #176]	@ (80021c4 <xTaskPriorityInherit+0xe0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002116:	f1c3 0207 	rsb	r2, r3, #7
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	6959      	ldr	r1, [r3, #20]
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4a26      	ldr	r2, [pc, #152]	@ (80021c8 <xTaskPriorityInherit+0xe4>)
 8002130:	4413      	add	r3, r2
 8002132:	4299      	cmp	r1, r3
 8002134:	d12f      	bne.n	8002196 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	3304      	adds	r3, #4
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fe6c 	bl	8000e18 <uxListRemove>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10a      	bne.n	800215c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214a:	2201      	movs	r2, #1
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43da      	mvns	r2, r3
 8002152:	4b1e      	ldr	r3, [pc, #120]	@ (80021cc <xTaskPriorityInherit+0xe8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4013      	ands	r3, r2
 8002158:	4a1c      	ldr	r2, [pc, #112]	@ (80021cc <xTaskPriorityInherit+0xe8>)
 800215a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800215c:	4b19      	ldr	r3, [pc, #100]	@ (80021c4 <xTaskPriorityInherit+0xe0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216a:	2201      	movs	r2, #1
 800216c:	409a      	lsls	r2, r3
 800216e:	4b17      	ldr	r3, [pc, #92]	@ (80021cc <xTaskPriorityInherit+0xe8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4313      	orrs	r3, r2
 8002174:	4a15      	ldr	r2, [pc, #84]	@ (80021cc <xTaskPriorityInherit+0xe8>)
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4a10      	ldr	r2, [pc, #64]	@ (80021c8 <xTaskPriorityInherit+0xe4>)
 8002186:	441a      	add	r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	3304      	adds	r3, #4
 800218c:	4619      	mov	r1, r3
 800218e:	4610      	mov	r0, r2
 8002190:	f7fe fde5 	bl	8000d5e <vListInsertEnd>
 8002194:	e004      	b.n	80021a0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002196:	4b0b      	ldr	r3, [pc, #44]	@ (80021c4 <xTaskPriorityInherit+0xe0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80021a0:	2301      	movs	r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	e008      	b.n	80021b8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80021aa:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <xTaskPriorityInherit+0xe0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d201      	bcs.n	80021b8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80021b4:	2301      	movs	r3, #1
 80021b6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80021b8:	68fb      	ldr	r3, [r7, #12]
	}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000274 	.word	0x20000274
 80021c8:	20000278 	.word	0x20000278
 80021cc:	2000037c 	.word	0x2000037c

080021d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d070      	beq.n	80022c8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80021e6:	4b3b      	ldr	r3, [pc, #236]	@ (80022d4 <xTaskPriorityDisinherit+0x104>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d00b      	beq.n	8002208 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80021f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021f4:	f383 8811 	msr	BASEPRI, r3
 80021f8:	f3bf 8f6f 	isb	sy
 80021fc:	f3bf 8f4f 	dsb	sy
 8002200:	60fb      	str	r3, [r7, #12]
}
 8002202:	bf00      	nop
 8002204:	bf00      	nop
 8002206:	e7fd      	b.n	8002204 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10b      	bne.n	8002228 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8002210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002214:	f383 8811 	msr	BASEPRI, r3
 8002218:	f3bf 8f6f 	isb	sy
 800221c:	f3bf 8f4f 	dsb	sy
 8002220:	60bb      	str	r3, [r7, #8]
}
 8002222:	bf00      	nop
 8002224:	bf00      	nop
 8002226:	e7fd      	b.n	8002224 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800222c:	1e5a      	subs	r2, r3, #1
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223a:	429a      	cmp	r2, r3
 800223c:	d044      	beq.n	80022c8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002242:	2b00      	cmp	r3, #0
 8002244:	d140      	bne.n	80022c8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	3304      	adds	r3, #4
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe fde4 	bl	8000e18 <uxListRemove>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d115      	bne.n	8002282 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800225a:	491f      	ldr	r1, [pc, #124]	@ (80022d8 <xTaskPriorityDisinherit+0x108>)
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10a      	bne.n	8002282 <xTaskPriorityDisinherit+0xb2>
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002270:	2201      	movs	r2, #1
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43da      	mvns	r2, r3
 8002278:	4b18      	ldr	r3, [pc, #96]	@ (80022dc <xTaskPriorityDisinherit+0x10c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4013      	ands	r3, r2
 800227e:	4a17      	ldr	r2, [pc, #92]	@ (80022dc <xTaskPriorityDisinherit+0x10c>)
 8002280:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228e:	f1c3 0207 	rsb	r2, r3, #7
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229a:	2201      	movs	r2, #1
 800229c:	409a      	lsls	r2, r3
 800229e:	4b0f      	ldr	r3, [pc, #60]	@ (80022dc <xTaskPriorityDisinherit+0x10c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	4a0d      	ldr	r2, [pc, #52]	@ (80022dc <xTaskPriorityDisinherit+0x10c>)
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4a08      	ldr	r2, [pc, #32]	@ (80022d8 <xTaskPriorityDisinherit+0x108>)
 80022b6:	441a      	add	r2, r3
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	3304      	adds	r3, #4
 80022bc:	4619      	mov	r1, r3
 80022be:	4610      	mov	r0, r2
 80022c0:	f7fe fd4d 	bl	8000d5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80022c4:	2301      	movs	r3, #1
 80022c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80022c8:	697b      	ldr	r3, [r7, #20]
	}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000274 	.word	0x20000274
 80022d8:	20000278 	.word	0x20000278
 80022dc:	2000037c 	.word	0x2000037c

080022e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80022ee:	2301      	movs	r3, #1
 80022f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d079      	beq.n	80023ec <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10b      	bne.n	8002318 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8002300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002304:	f383 8811 	msr	BASEPRI, r3
 8002308:	f3bf 8f6f 	isb	sy
 800230c:	f3bf 8f4f 	dsb	sy
 8002310:	60fb      	str	r3, [r7, #12]
}
 8002312:	bf00      	nop
 8002314:	bf00      	nop
 8002316:	e7fd      	b.n	8002314 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d902      	bls.n	8002328 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	61fb      	str	r3, [r7, #28]
 8002326:	e002      	b.n	800232e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	429a      	cmp	r2, r3
 8002336:	d059      	beq.n	80023ec <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	429a      	cmp	r2, r3
 8002340:	d154      	bne.n	80023ec <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8002342:	4b2c      	ldr	r3, [pc, #176]	@ (80023f4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	429a      	cmp	r2, r3
 800234a:	d10b      	bne.n	8002364 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800234c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002350:	f383 8811 	msr	BASEPRI, r3
 8002354:	f3bf 8f6f 	isb	sy
 8002358:	f3bf 8f4f 	dsb	sy
 800235c:	60bb      	str	r3, [r7, #8]
}
 800235e:	bf00      	nop
 8002360:	bf00      	nop
 8002362:	e7fd      	b.n	8002360 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002368:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	69fa      	ldr	r2, [r7, #28]
 800236e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	2b00      	cmp	r3, #0
 8002376:	db04      	blt.n	8002382 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f1c3 0207 	rsb	r2, r3, #7
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	6959      	ldr	r1, [r3, #20]
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4a19      	ldr	r2, [pc, #100]	@ (80023f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8002392:	4413      	add	r3, r2
 8002394:	4299      	cmp	r1, r3
 8002396:	d129      	bne.n	80023ec <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	3304      	adds	r3, #4
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe fd3b 	bl	8000e18 <uxListRemove>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10a      	bne.n	80023be <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ac:	2201      	movs	r2, #1
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43da      	mvns	r2, r3
 80023b4:	4b11      	ldr	r3, [pc, #68]	@ (80023fc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4013      	ands	r3, r2
 80023ba:	4a10      	ldr	r2, [pc, #64]	@ (80023fc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80023bc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c2:	2201      	movs	r2, #1
 80023c4:	409a      	lsls	r2, r3
 80023c6:	4b0d      	ldr	r3, [pc, #52]	@ (80023fc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	4a0b      	ldr	r2, [pc, #44]	@ (80023fc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023d4:	4613      	mov	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4a06      	ldr	r2, [pc, #24]	@ (80023f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80023de:	441a      	add	r2, r3
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	3304      	adds	r3, #4
 80023e4:	4619      	mov	r1, r3
 80023e6:	4610      	mov	r0, r2
 80023e8:	f7fe fcb9 	bl	8000d5e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80023ec:	bf00      	nop
 80023ee:	3720      	adds	r7, #32
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000274 	.word	0x20000274
 80023f8:	20000278 	.word	0x20000278
 80023fc:	2000037c 	.word	0x2000037c

08002400 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002404:	4b07      	ldr	r3, [pc, #28]	@ (8002424 <pvTaskIncrementMutexHeldCount+0x24>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d004      	beq.n	8002416 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800240c:	4b05      	ldr	r3, [pc, #20]	@ (8002424 <pvTaskIncrementMutexHeldCount+0x24>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002412:	3201      	adds	r2, #1
 8002414:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8002416:	4b03      	ldr	r3, [pc, #12]	@ (8002424 <pvTaskIncrementMutexHeldCount+0x24>)
 8002418:	681b      	ldr	r3, [r3, #0]
	}
 800241a:	4618      	mov	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	20000274 	.word	0x20000274

08002428 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002432:	4b29      	ldr	r3, [pc, #164]	@ (80024d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002438:	4b28      	ldr	r3, [pc, #160]	@ (80024dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	3304      	adds	r3, #4
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe fcea 	bl	8000e18 <uxListRemove>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10b      	bne.n	8002462 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800244a:	4b24      	ldr	r3, [pc, #144]	@ (80024dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002450:	2201      	movs	r2, #1
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43da      	mvns	r2, r3
 8002458:	4b21      	ldr	r3, [pc, #132]	@ (80024e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4013      	ands	r3, r2
 800245e:	4a20      	ldr	r2, [pc, #128]	@ (80024e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002460:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002468:	d10a      	bne.n	8002480 <prvAddCurrentTaskToDelayedList+0x58>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d007      	beq.n	8002480 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002470:	4b1a      	ldr	r3, [pc, #104]	@ (80024dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	3304      	adds	r3, #4
 8002476:	4619      	mov	r1, r3
 8002478:	481a      	ldr	r0, [pc, #104]	@ (80024e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800247a:	f7fe fc70 	bl	8000d5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800247e:	e026      	b.n	80024ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4413      	add	r3, r2
 8002486:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002488:	4b14      	ldr	r3, [pc, #80]	@ (80024dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	429a      	cmp	r2, r3
 8002496:	d209      	bcs.n	80024ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002498:	4b13      	ldr	r3, [pc, #76]	@ (80024e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4b0f      	ldr	r3, [pc, #60]	@ (80024dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	3304      	adds	r3, #4
 80024a2:	4619      	mov	r1, r3
 80024a4:	4610      	mov	r0, r2
 80024a6:	f7fe fc7e 	bl	8000da6 <vListInsert>
}
 80024aa:	e010      	b.n	80024ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024ac:	4b0f      	ldr	r3, [pc, #60]	@ (80024ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b0a      	ldr	r3, [pc, #40]	@ (80024dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	3304      	adds	r3, #4
 80024b6:	4619      	mov	r1, r3
 80024b8:	4610      	mov	r0, r2
 80024ba:	f7fe fc74 	bl	8000da6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80024be:	4b0c      	ldr	r3, [pc, #48]	@ (80024f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d202      	bcs.n	80024ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80024c8:	4a09      	ldr	r2, [pc, #36]	@ (80024f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	6013      	str	r3, [r2, #0]
}
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000378 	.word	0x20000378
 80024dc:	20000274 	.word	0x20000274
 80024e0:	2000037c 	.word	0x2000037c
 80024e4:	20000360 	.word	0x20000360
 80024e8:	20000330 	.word	0x20000330
 80024ec:	2000032c 	.word	0x2000032c
 80024f0:	20000394 	.word	0x20000394

080024f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	3b04      	subs	r3, #4
 8002504:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800250c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	3b04      	subs	r3, #4
 8002512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f023 0201 	bic.w	r2, r3, #1
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	3b04      	subs	r3, #4
 8002522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002524:	4a0c      	ldr	r2, [pc, #48]	@ (8002558 <pxPortInitialiseStack+0x64>)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	3b14      	subs	r3, #20
 800252e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	3b04      	subs	r3, #4
 800253a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f06f 0202 	mvn.w	r2, #2
 8002542:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	3b20      	subs	r3, #32
 8002548:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800254a:	68fb      	ldr	r3, [r7, #12]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	0800255d 	.word	0x0800255d

0800255c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002566:	4b13      	ldr	r3, [pc, #76]	@ (80025b4 <prvTaskExitError+0x58>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800256e:	d00b      	beq.n	8002588 <prvTaskExitError+0x2c>
	__asm volatile
 8002570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002574:	f383 8811 	msr	BASEPRI, r3
 8002578:	f3bf 8f6f 	isb	sy
 800257c:	f3bf 8f4f 	dsb	sy
 8002580:	60fb      	str	r3, [r7, #12]
}
 8002582:	bf00      	nop
 8002584:	bf00      	nop
 8002586:	e7fd      	b.n	8002584 <prvTaskExitError+0x28>
	__asm volatile
 8002588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800258c:	f383 8811 	msr	BASEPRI, r3
 8002590:	f3bf 8f6f 	isb	sy
 8002594:	f3bf 8f4f 	dsb	sy
 8002598:	60bb      	str	r3, [r7, #8]
}
 800259a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800259c:	bf00      	nop
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0fc      	beq.n	800259e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80025a4:	bf00      	nop
 80025a6:	bf00      	nop
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	20000000 	.word	0x20000000
	...

080025c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80025c0:	4b07      	ldr	r3, [pc, #28]	@ (80025e0 <pxCurrentTCBConst2>)
 80025c2:	6819      	ldr	r1, [r3, #0]
 80025c4:	6808      	ldr	r0, [r1, #0]
 80025c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025ca:	f380 8809 	msr	PSP, r0
 80025ce:	f3bf 8f6f 	isb	sy
 80025d2:	f04f 0000 	mov.w	r0, #0
 80025d6:	f380 8811 	msr	BASEPRI, r0
 80025da:	4770      	bx	lr
 80025dc:	f3af 8000 	nop.w

080025e0 <pxCurrentTCBConst2>:
 80025e0:	20000274 	.word	0x20000274
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop

080025e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80025e8:	4808      	ldr	r0, [pc, #32]	@ (800260c <prvPortStartFirstTask+0x24>)
 80025ea:	6800      	ldr	r0, [r0, #0]
 80025ec:	6800      	ldr	r0, [r0, #0]
 80025ee:	f380 8808 	msr	MSP, r0
 80025f2:	f04f 0000 	mov.w	r0, #0
 80025f6:	f380 8814 	msr	CONTROL, r0
 80025fa:	b662      	cpsie	i
 80025fc:	b661      	cpsie	f
 80025fe:	f3bf 8f4f 	dsb	sy
 8002602:	f3bf 8f6f 	isb	sy
 8002606:	df00      	svc	0
 8002608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800260a:	bf00      	nop
 800260c:	e000ed08 	.word	0xe000ed08

08002610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002616:	4b47      	ldr	r3, [pc, #284]	@ (8002734 <xPortStartScheduler+0x124>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a47      	ldr	r2, [pc, #284]	@ (8002738 <xPortStartScheduler+0x128>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d10b      	bne.n	8002638 <xPortStartScheduler+0x28>
	__asm volatile
 8002620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002624:	f383 8811 	msr	BASEPRI, r3
 8002628:	f3bf 8f6f 	isb	sy
 800262c:	f3bf 8f4f 	dsb	sy
 8002630:	613b      	str	r3, [r7, #16]
}
 8002632:	bf00      	nop
 8002634:	bf00      	nop
 8002636:	e7fd      	b.n	8002634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002638:	4b3e      	ldr	r3, [pc, #248]	@ (8002734 <xPortStartScheduler+0x124>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a3f      	ldr	r2, [pc, #252]	@ (800273c <xPortStartScheduler+0x12c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d10b      	bne.n	800265a <xPortStartScheduler+0x4a>
	__asm volatile
 8002642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002646:	f383 8811 	msr	BASEPRI, r3
 800264a:	f3bf 8f6f 	isb	sy
 800264e:	f3bf 8f4f 	dsb	sy
 8002652:	60fb      	str	r3, [r7, #12]
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	e7fd      	b.n	8002656 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800265a:	4b39      	ldr	r3, [pc, #228]	@ (8002740 <xPortStartScheduler+0x130>)
 800265c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	22ff      	movs	r2, #255	@ 0xff
 800266a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800267c:	b2da      	uxtb	r2, r3
 800267e:	4b31      	ldr	r3, [pc, #196]	@ (8002744 <xPortStartScheduler+0x134>)
 8002680:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002682:	4b31      	ldr	r3, [pc, #196]	@ (8002748 <xPortStartScheduler+0x138>)
 8002684:	2207      	movs	r2, #7
 8002686:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002688:	e009      	b.n	800269e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800268a:	4b2f      	ldr	r3, [pc, #188]	@ (8002748 <xPortStartScheduler+0x138>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	3b01      	subs	r3, #1
 8002690:	4a2d      	ldr	r2, [pc, #180]	@ (8002748 <xPortStartScheduler+0x138>)
 8002692:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002694:	78fb      	ldrb	r3, [r7, #3]
 8002696:	b2db      	uxtb	r3, r3
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	b2db      	uxtb	r3, r3
 800269c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800269e:	78fb      	ldrb	r3, [r7, #3]
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a6:	2b80      	cmp	r3, #128	@ 0x80
 80026a8:	d0ef      	beq.n	800268a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80026aa:	4b27      	ldr	r3, [pc, #156]	@ (8002748 <xPortStartScheduler+0x138>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f1c3 0307 	rsb	r3, r3, #7
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d00b      	beq.n	80026ce <xPortStartScheduler+0xbe>
	__asm volatile
 80026b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026ba:	f383 8811 	msr	BASEPRI, r3
 80026be:	f3bf 8f6f 	isb	sy
 80026c2:	f3bf 8f4f 	dsb	sy
 80026c6:	60bb      	str	r3, [r7, #8]
}
 80026c8:	bf00      	nop
 80026ca:	bf00      	nop
 80026cc:	e7fd      	b.n	80026ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80026ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002748 <xPortStartScheduler+0x138>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	021b      	lsls	r3, r3, #8
 80026d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002748 <xPortStartScheduler+0x138>)
 80026d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80026d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002748 <xPortStartScheduler+0x138>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80026e0:	4a19      	ldr	r2, [pc, #100]	@ (8002748 <xPortStartScheduler+0x138>)
 80026e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80026ec:	4b17      	ldr	r3, [pc, #92]	@ (800274c <xPortStartScheduler+0x13c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a16      	ldr	r2, [pc, #88]	@ (800274c <xPortStartScheduler+0x13c>)
 80026f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80026f8:	4b14      	ldr	r3, [pc, #80]	@ (800274c <xPortStartScheduler+0x13c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a13      	ldr	r2, [pc, #76]	@ (800274c <xPortStartScheduler+0x13c>)
 80026fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002702:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002704:	f000 f8da 	bl	80028bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002708:	4b11      	ldr	r3, [pc, #68]	@ (8002750 <xPortStartScheduler+0x140>)
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800270e:	f000 f8f9 	bl	8002904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002712:	4b10      	ldr	r3, [pc, #64]	@ (8002754 <xPortStartScheduler+0x144>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a0f      	ldr	r2, [pc, #60]	@ (8002754 <xPortStartScheduler+0x144>)
 8002718:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800271c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800271e:	f7ff ff63 	bl	80025e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002722:	f7ff fa9f 	bl	8001c64 <vTaskSwitchContext>
	prvTaskExitError();
 8002726:	f7ff ff19 	bl	800255c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	e000ed00 	.word	0xe000ed00
 8002738:	410fc271 	.word	0x410fc271
 800273c:	410fc270 	.word	0x410fc270
 8002740:	e000e400 	.word	0xe000e400
 8002744:	200003a0 	.word	0x200003a0
 8002748:	200003a4 	.word	0x200003a4
 800274c:	e000ed20 	.word	0xe000ed20
 8002750:	20000000 	.word	0x20000000
 8002754:	e000ef34 	.word	0xe000ef34

08002758 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
	__asm volatile
 800275e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002762:	f383 8811 	msr	BASEPRI, r3
 8002766:	f3bf 8f6f 	isb	sy
 800276a:	f3bf 8f4f 	dsb	sy
 800276e:	607b      	str	r3, [r7, #4]
}
 8002770:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002772:	4b10      	ldr	r3, [pc, #64]	@ (80027b4 <vPortEnterCritical+0x5c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3301      	adds	r3, #1
 8002778:	4a0e      	ldr	r2, [pc, #56]	@ (80027b4 <vPortEnterCritical+0x5c>)
 800277a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800277c:	4b0d      	ldr	r3, [pc, #52]	@ (80027b4 <vPortEnterCritical+0x5c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d110      	bne.n	80027a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002784:	4b0c      	ldr	r3, [pc, #48]	@ (80027b8 <vPortEnterCritical+0x60>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800278e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002792:	f383 8811 	msr	BASEPRI, r3
 8002796:	f3bf 8f6f 	isb	sy
 800279a:	f3bf 8f4f 	dsb	sy
 800279e:	603b      	str	r3, [r7, #0]
}
 80027a0:	bf00      	nop
 80027a2:	bf00      	nop
 80027a4:	e7fd      	b.n	80027a2 <vPortEnterCritical+0x4a>
	}
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	20000000 	.word	0x20000000
 80027b8:	e000ed04 	.word	0xe000ed04

080027bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80027c2:	4b12      	ldr	r3, [pc, #72]	@ (800280c <vPortExitCritical+0x50>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10b      	bne.n	80027e2 <vPortExitCritical+0x26>
	__asm volatile
 80027ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027ce:	f383 8811 	msr	BASEPRI, r3
 80027d2:	f3bf 8f6f 	isb	sy
 80027d6:	f3bf 8f4f 	dsb	sy
 80027da:	607b      	str	r3, [r7, #4]
}
 80027dc:	bf00      	nop
 80027de:	bf00      	nop
 80027e0:	e7fd      	b.n	80027de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80027e2:	4b0a      	ldr	r3, [pc, #40]	@ (800280c <vPortExitCritical+0x50>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	4a08      	ldr	r2, [pc, #32]	@ (800280c <vPortExitCritical+0x50>)
 80027ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80027ec:	4b07      	ldr	r3, [pc, #28]	@ (800280c <vPortExitCritical+0x50>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d105      	bne.n	8002800 <vPortExitCritical+0x44>
 80027f4:	2300      	movs	r3, #0
 80027f6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80027fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	20000000 	.word	0x20000000

08002810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002810:	f3ef 8009 	mrs	r0, PSP
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	4b15      	ldr	r3, [pc, #84]	@ (8002870 <pxCurrentTCBConst>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	f01e 0f10 	tst.w	lr, #16
 8002820:	bf08      	it	eq
 8002822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800282a:	6010      	str	r0, [r2, #0]
 800282c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002830:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002834:	f380 8811 	msr	BASEPRI, r0
 8002838:	f3bf 8f4f 	dsb	sy
 800283c:	f3bf 8f6f 	isb	sy
 8002840:	f7ff fa10 	bl	8001c64 <vTaskSwitchContext>
 8002844:	f04f 0000 	mov.w	r0, #0
 8002848:	f380 8811 	msr	BASEPRI, r0
 800284c:	bc09      	pop	{r0, r3}
 800284e:	6819      	ldr	r1, [r3, #0]
 8002850:	6808      	ldr	r0, [r1, #0]
 8002852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002856:	f01e 0f10 	tst.w	lr, #16
 800285a:	bf08      	it	eq
 800285c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002860:	f380 8809 	msr	PSP, r0
 8002864:	f3bf 8f6f 	isb	sy
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	f3af 8000 	nop.w

08002870 <pxCurrentTCBConst>:
 8002870:	20000274 	.word	0x20000274
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002874:	bf00      	nop
 8002876:	bf00      	nop

08002878 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
	__asm volatile
 800287e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002882:	f383 8811 	msr	BASEPRI, r3
 8002886:	f3bf 8f6f 	isb	sy
 800288a:	f3bf 8f4f 	dsb	sy
 800288e:	607b      	str	r3, [r7, #4]
}
 8002890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002892:	f7ff f92d 	bl	8001af0 <xTaskIncrementTick>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800289c:	4b06      	ldr	r3, [pc, #24]	@ (80028b8 <SysTick_Handler+0x40>)
 800289e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	2300      	movs	r3, #0
 80028a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	f383 8811 	msr	BASEPRI, r3
}
 80028ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	e000ed04 	.word	0xe000ed04

080028bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80028c0:	4b0b      	ldr	r3, [pc, #44]	@ (80028f0 <vPortSetupTimerInterrupt+0x34>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80028c6:	4b0b      	ldr	r3, [pc, #44]	@ (80028f4 <vPortSetupTimerInterrupt+0x38>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80028cc:	4b0a      	ldr	r3, [pc, #40]	@ (80028f8 <vPortSetupTimerInterrupt+0x3c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a0a      	ldr	r2, [pc, #40]	@ (80028fc <vPortSetupTimerInterrupt+0x40>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	099b      	lsrs	r3, r3, #6
 80028d8:	4a09      	ldr	r2, [pc, #36]	@ (8002900 <vPortSetupTimerInterrupt+0x44>)
 80028da:	3b01      	subs	r3, #1
 80028dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80028de:	4b04      	ldr	r3, [pc, #16]	@ (80028f0 <vPortSetupTimerInterrupt+0x34>)
 80028e0:	2207      	movs	r2, #7
 80028e2:	601a      	str	r2, [r3, #0]
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000e010 	.word	0xe000e010
 80028f4:	e000e018 	.word	0xe000e018
 80028f8:	2000008c 	.word	0x2000008c
 80028fc:	10624dd3 	.word	0x10624dd3
 8002900:	e000e014 	.word	0xe000e014

08002904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002904:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002914 <vPortEnableVFP+0x10>
 8002908:	6801      	ldr	r1, [r0, #0]
 800290a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800290e:	6001      	str	r1, [r0, #0]
 8002910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002912:	bf00      	nop
 8002914:	e000ed88 	.word	0xe000ed88

08002918 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08a      	sub	sp, #40	@ 0x28
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002920:	2300      	movs	r3, #0
 8002922:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002924:	f7ff f838 	bl	8001998 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002928:	4b5c      	ldr	r3, [pc, #368]	@ (8002a9c <pvPortMalloc+0x184>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002930:	f000 f924 	bl	8002b7c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002934:	4b5a      	ldr	r3, [pc, #360]	@ (8002aa0 <pvPortMalloc+0x188>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4013      	ands	r3, r2
 800293c:	2b00      	cmp	r3, #0
 800293e:	f040 8095 	bne.w	8002a6c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d01e      	beq.n	8002986 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002948:	2208      	movs	r2, #8
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4413      	add	r3, r2
 800294e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	2b00      	cmp	r3, #0
 8002958:	d015      	beq.n	8002986 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f023 0307 	bic.w	r3, r3, #7
 8002960:	3308      	adds	r3, #8
 8002962:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00b      	beq.n	8002986 <pvPortMalloc+0x6e>
	__asm volatile
 800296e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002972:	f383 8811 	msr	BASEPRI, r3
 8002976:	f3bf 8f6f 	isb	sy
 800297a:	f3bf 8f4f 	dsb	sy
 800297e:	617b      	str	r3, [r7, #20]
}
 8002980:	bf00      	nop
 8002982:	bf00      	nop
 8002984:	e7fd      	b.n	8002982 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d06f      	beq.n	8002a6c <pvPortMalloc+0x154>
 800298c:	4b45      	ldr	r3, [pc, #276]	@ (8002aa4 <pvPortMalloc+0x18c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	429a      	cmp	r2, r3
 8002994:	d86a      	bhi.n	8002a6c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002996:	4b44      	ldr	r3, [pc, #272]	@ (8002aa8 <pvPortMalloc+0x190>)
 8002998:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800299a:	4b43      	ldr	r3, [pc, #268]	@ (8002aa8 <pvPortMalloc+0x190>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029a0:	e004      	b.n	80029ac <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80029a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d903      	bls.n	80029be <pvPortMalloc+0xa6>
 80029b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f1      	bne.n	80029a2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80029be:	4b37      	ldr	r3, [pc, #220]	@ (8002a9c <pvPortMalloc+0x184>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d051      	beq.n	8002a6c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2208      	movs	r2, #8
 80029ce:	4413      	add	r3, r2
 80029d0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80029d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80029da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	1ad2      	subs	r2, r2, r3
 80029e2:	2308      	movs	r3, #8
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d920      	bls.n	8002a2c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80029ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4413      	add	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00b      	beq.n	8002a14 <pvPortMalloc+0xfc>
	__asm volatile
 80029fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a00:	f383 8811 	msr	BASEPRI, r3
 8002a04:	f3bf 8f6f 	isb	sy
 8002a08:	f3bf 8f4f 	dsb	sy
 8002a0c:	613b      	str	r3, [r7, #16]
}
 8002a0e:	bf00      	nop
 8002a10:	bf00      	nop
 8002a12:	e7fd      	b.n	8002a10 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	1ad2      	subs	r2, r2, r3
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002a26:	69b8      	ldr	r0, [r7, #24]
 8002a28:	f000 f90a 	bl	8002c40 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa4 <pvPortMalloc+0x18c>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	4a1b      	ldr	r2, [pc, #108]	@ (8002aa4 <pvPortMalloc+0x18c>)
 8002a38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa4 <pvPortMalloc+0x18c>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002aac <pvPortMalloc+0x194>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d203      	bcs.n	8002a4e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002a46:	4b17      	ldr	r3, [pc, #92]	@ (8002aa4 <pvPortMalloc+0x18c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a18      	ldr	r2, [pc, #96]	@ (8002aac <pvPortMalloc+0x194>)
 8002a4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	4b13      	ldr	r3, [pc, #76]	@ (8002aa0 <pvPortMalloc+0x188>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002a62:	4b13      	ldr	r3, [pc, #76]	@ (8002ab0 <pvPortMalloc+0x198>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	3301      	adds	r3, #1
 8002a68:	4a11      	ldr	r2, [pc, #68]	@ (8002ab0 <pvPortMalloc+0x198>)
 8002a6a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002a6c:	f7fe ffa2 	bl	80019b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00b      	beq.n	8002a92 <pvPortMalloc+0x17a>
	__asm volatile
 8002a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a7e:	f383 8811 	msr	BASEPRI, r3
 8002a82:	f3bf 8f6f 	isb	sy
 8002a86:	f3bf 8f4f 	dsb	sy
 8002a8a:	60fb      	str	r3, [r7, #12]
}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	e7fd      	b.n	8002a8e <pvPortMalloc+0x176>
	return pvReturn;
 8002a92:	69fb      	ldr	r3, [r7, #28]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3728      	adds	r7, #40	@ 0x28
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	20003fb0 	.word	0x20003fb0
 8002aa0:	20003fc4 	.word	0x20003fc4
 8002aa4:	20003fb4 	.word	0x20003fb4
 8002aa8:	20003fa8 	.word	0x20003fa8
 8002aac:	20003fb8 	.word	0x20003fb8
 8002ab0:	20003fbc 	.word	0x20003fbc

08002ab4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d04f      	beq.n	8002b66 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002ac6:	2308      	movs	r3, #8
 8002ac8:	425b      	negs	r3, r3
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	4413      	add	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	4b25      	ldr	r3, [pc, #148]	@ (8002b70 <vPortFree+0xbc>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10b      	bne.n	8002afa <vPortFree+0x46>
	__asm volatile
 8002ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ae6:	f383 8811 	msr	BASEPRI, r3
 8002aea:	f3bf 8f6f 	isb	sy
 8002aee:	f3bf 8f4f 	dsb	sy
 8002af2:	60fb      	str	r3, [r7, #12]
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	e7fd      	b.n	8002af6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00b      	beq.n	8002b1a <vPortFree+0x66>
	__asm volatile
 8002b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b06:	f383 8811 	msr	BASEPRI, r3
 8002b0a:	f3bf 8f6f 	isb	sy
 8002b0e:	f3bf 8f4f 	dsb	sy
 8002b12:	60bb      	str	r3, [r7, #8]
}
 8002b14:	bf00      	nop
 8002b16:	bf00      	nop
 8002b18:	e7fd      	b.n	8002b16 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	4b14      	ldr	r3, [pc, #80]	@ (8002b70 <vPortFree+0xbc>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d01e      	beq.n	8002b66 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d11a      	bne.n	8002b66 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	4b0e      	ldr	r3, [pc, #56]	@ (8002b70 <vPortFree+0xbc>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002b40:	f7fe ff2a 	bl	8001998 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	4b0a      	ldr	r3, [pc, #40]	@ (8002b74 <vPortFree+0xc0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	4a09      	ldr	r2, [pc, #36]	@ (8002b74 <vPortFree+0xc0>)
 8002b50:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b52:	6938      	ldr	r0, [r7, #16]
 8002b54:	f000 f874 	bl	8002c40 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002b58:	4b07      	ldr	r3, [pc, #28]	@ (8002b78 <vPortFree+0xc4>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	4a06      	ldr	r2, [pc, #24]	@ (8002b78 <vPortFree+0xc4>)
 8002b60:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002b62:	f7fe ff27 	bl	80019b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002b66:	bf00      	nop
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20003fc4 	.word	0x20003fc4
 8002b74:	20003fb4 	.word	0x20003fb4
 8002b78:	20003fc0 	.word	0x20003fc0

08002b7c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002b82:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8002b86:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002b88:	4b27      	ldr	r3, [pc, #156]	@ (8002c28 <prvHeapInit+0xac>)
 8002b8a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00c      	beq.n	8002bb0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	3307      	adds	r3, #7
 8002b9a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f023 0307 	bic.w	r3, r3, #7
 8002ba2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	4a1f      	ldr	r2, [pc, #124]	@ (8002c28 <prvHeapInit+0xac>)
 8002bac:	4413      	add	r3, r2
 8002bae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c2c <prvHeapInit+0xb0>)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002bba:	4b1c      	ldr	r3, [pc, #112]	@ (8002c2c <prvHeapInit+0xb0>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002bc8:	2208      	movs	r2, #8
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0307 	bic.w	r3, r3, #7
 8002bd6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4a15      	ldr	r2, [pc, #84]	@ (8002c30 <prvHeapInit+0xb4>)
 8002bdc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002bde:	4b14      	ldr	r3, [pc, #80]	@ (8002c30 <prvHeapInit+0xb4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2200      	movs	r2, #0
 8002be4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002be6:	4b12      	ldr	r3, [pc, #72]	@ (8002c30 <prvHeapInit+0xb4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	1ad2      	subs	r2, r2, r3
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c30 <prvHeapInit+0xb4>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	4a0a      	ldr	r2, [pc, #40]	@ (8002c34 <prvHeapInit+0xb8>)
 8002c0a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	4a09      	ldr	r2, [pc, #36]	@ (8002c38 <prvHeapInit+0xbc>)
 8002c12:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002c14:	4b09      	ldr	r3, [pc, #36]	@ (8002c3c <prvHeapInit+0xc0>)
 8002c16:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002c1a:	601a      	str	r2, [r3, #0]
}
 8002c1c:	bf00      	nop
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	200003a8 	.word	0x200003a8
 8002c2c:	20003fa8 	.word	0x20003fa8
 8002c30:	20003fb0 	.word	0x20003fb0
 8002c34:	20003fb8 	.word	0x20003fb8
 8002c38:	20003fb4 	.word	0x20003fb4
 8002c3c:	20003fc4 	.word	0x20003fc4

08002c40 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002c48:	4b28      	ldr	r3, [pc, #160]	@ (8002cec <prvInsertBlockIntoFreeList+0xac>)
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	e002      	b.n	8002c54 <prvInsertBlockIntoFreeList+0x14>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d8f7      	bhi.n	8002c4e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	4413      	add	r3, r2
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d108      	bne.n	8002c82 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	441a      	add	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	441a      	add	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d118      	bne.n	8002cc8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	4b15      	ldr	r3, [pc, #84]	@ (8002cf0 <prvInsertBlockIntoFreeList+0xb0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d00d      	beq.n	8002cbe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	441a      	add	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e008      	b.n	8002cd0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf0 <prvInsertBlockIntoFreeList+0xb0>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	e003      	b.n	8002cd0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d002      	beq.n	8002cde <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	20003fa8 	.word	0x20003fa8
 8002cf0:	20003fb0 	.word	0x20003fb0

08002cf4 <pa1_adc_init>:
#define CR1_EOCIE		(1U<<5)



void pa1_adc_init(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
	/***Configure the ADC GPIO pin ***/

	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8002cf8:	4b14      	ldr	r3, [pc, #80]	@ (8002d4c <pa1_adc_init+0x58>)
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfc:	4a13      	ldr	r2, [pc, #76]	@ (8002d4c <pa1_adc_init+0x58>)
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set the mode of PA1 to analog*/
	GPIOA->MODER |=(1U<<2);
 8002d04:	4b12      	ldr	r3, [pc, #72]	@ (8002d50 <pa1_adc_init+0x5c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a11      	ldr	r2, [pc, #68]	@ (8002d50 <pa1_adc_init+0x5c>)
 8002d0a:	f043 0304 	orr.w	r3, r3, #4
 8002d0e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<3);
 8002d10:	4b0f      	ldr	r3, [pc, #60]	@ (8002d50 <pa1_adc_init+0x5c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a0e      	ldr	r2, [pc, #56]	@ (8002d50 <pa1_adc_init+0x5c>)
 8002d16:	f043 0308 	orr.w	r3, r3, #8
 8002d1a:	6013      	str	r3, [r2, #0]
	/***Configure the ADC module***/
	/*Enable clock access to ADC */
	RCC->APB2ENR |= ADC1EN;
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d4c <pa1_adc_init+0x58>)
 8002d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d20:	4a0a      	ldr	r2, [pc, #40]	@ (8002d4c <pa1_adc_init+0x58>)
 8002d22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d26:	6453      	str	r3, [r2, #68]	@ 0x44

	/*Conversion sequence start*/
	ADC1->SQR3 = ADC_CH1;
 8002d28:	4b0a      	ldr	r3, [pc, #40]	@ (8002d54 <pa1_adc_init+0x60>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	635a      	str	r2, [r3, #52]	@ 0x34

	/*Conversion sequence length*/
	ADC1->SQR1 = ADC_SEQ_LEN_1;
 8002d2e:	4b09      	ldr	r3, [pc, #36]	@ (8002d54 <pa1_adc_init+0x60>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	62da      	str	r2, [r3, #44]	@ 0x2c

	/*Enable ADC module*/
	ADC1->CR2 |= CR2_AD0N;
 8002d34:	4b07      	ldr	r3, [pc, #28]	@ (8002d54 <pa1_adc_init+0x60>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	4a06      	ldr	r2, [pc, #24]	@ (8002d54 <pa1_adc_init+0x60>)
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	6093      	str	r3, [r2, #8]
}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40020000 	.word	0x40020000
 8002d54:	40012000 	.word	0x40012000

08002d58 <start_conversion>:


void start_conversion(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
	/*Enable continuous conversion*/
	ADC1->CR2 |= CR2_CONT;
 8002d5c:	4b08      	ldr	r3, [pc, #32]	@ (8002d80 <start_conversion+0x28>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	4a07      	ldr	r2, [pc, #28]	@ (8002d80 <start_conversion+0x28>)
 8002d62:	f043 0302 	orr.w	r3, r3, #2
 8002d66:	6093      	str	r3, [r2, #8]
	/*Start adc conversion*/
	ADC1->CR2 |= CR2_SWSTART;
 8002d68:	4b05      	ldr	r3, [pc, #20]	@ (8002d80 <start_conversion+0x28>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4a04      	ldr	r2, [pc, #16]	@ (8002d80 <start_conversion+0x28>)
 8002d6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002d72:	6093      	str	r3, [r2, #8]
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40012000 	.word	0x40012000

08002d84 <adc_read>:



uint32_t adc_read(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
	/*Wait for conversion to be complete*/
	while(!(ADC1->SR & SR_EOC)){}
 8002d88:	bf00      	nop
 8002d8a:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <adc_read+0x20>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f9      	beq.n	8002d8a <adc_read+0x6>

	/*Read converted result*/
	return (ADC1->DR);
 8002d96:	4b03      	ldr	r3, [pc, #12]	@ (8002da4 <adc_read+0x20>)
 8002d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	40012000 	.word	0x40012000

08002da8 <lowpass_filter_init>:
q15_t lowpass_filter_state[FILTER_TAPS + FILTER_BLOCK_LEN];

arm_fir_instance_q15 lowpass_filter_set;

void lowpass_filter_init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af02      	add	r7, sp, #8
	/*Convert impulse response to q*/
	arm_float_to_q15(LP_1HZ_2HZ_IMPULSE_RESPONSE, q15_LP_1HZ_2HZ_IMPULSE_RESPONSE, IMP_RSP_LENGTH);
 8002dae:	221f      	movs	r2, #31
 8002db0:	4907      	ldr	r1, [pc, #28]	@ (8002dd0 <lowpass_filter_init+0x28>)
 8002db2:	4808      	ldr	r0, [pc, #32]	@ (8002dd4 <lowpass_filter_init+0x2c>)
 8002db4:	f000 fbe8 	bl	8003588 <arm_float_to_q15>


	arm_fir_init_q15(&lowpass_filter_set,
 8002db8:	2301      	movs	r3, #1
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <lowpass_filter_init+0x30>)
 8002dbe:	4a04      	ldr	r2, [pc, #16]	@ (8002dd0 <lowpass_filter_init+0x28>)
 8002dc0:	2120      	movs	r1, #32
 8002dc2:	4806      	ldr	r0, [pc, #24]	@ (8002ddc <lowpass_filter_init+0x34>)
 8002dc4:	f000 fe2a 	bl	8003a1c <arm_fir_init_q15>
						FILTER_TAPS,
						q15_LP_1HZ_2HZ_IMPULSE_RESPONSE,
						lowpass_filter_state,
						FILTER_BLOCK_LEN);

}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20003fc8 	.word	0x20003fc8
 8002dd4:	20000010 	.word	0x20000010
 8002dd8:	20004008 	.word	0x20004008
 8002ddc:	2000404c 	.word	0x2000404c

08002de0 <lowpass_filter_exec>:

q15_t lowpass_filter_exec(q15_t * input)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
	q15_t out;
	arm_fir_q15(&lowpass_filter_set, input, &out, FILTER_BLOCK_LEN);
 8002de8:	f107 020e 	add.w	r2, r7, #14
 8002dec:	2301      	movs	r3, #1
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4804      	ldr	r0, [pc, #16]	@ (8002e04 <lowpass_filter_exec+0x24>)
 8002df2:	f000 fc61 	bl	80036b8 <arm_fir_q15>

	return out;
 8002df6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	2000404c 	.word	0x2000404c

08002e08 <main>:
q15_t filtered_sig_sample;

const TickType_t _10ms = pdMS_TO_TICKS(10);

int main(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af02      	add	r7, sp, #8
	// Enable FPU
	fpu_enable();
 8002e0e:	f000 f913 	bl	8003038 <fpu_enable>

	// Initialize the UART
	uart2_tx_init();
 8002e12:	f000 fb01 	bl	8003418 <uart2_tx_init>

	// Initialize the ADC
	pa1_adc_init();
 8002e16:	f7ff ff6d 	bl	8002cf4 <pa1_adc_init>

	// Start ADC conversion
	start_conversion();
 8002e1a:	f7ff ff9d 	bl	8002d58 <start_conversion>

	// Create several tasks
	xTaskCreate(data_acq_task, "Create signals", 100, NULL, Task1_priority, NULL);
 8002e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8002e9c <main+0x94>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	2300      	movs	r3, #0
 8002e26:	9301      	str	r3, [sp, #4]
 8002e28:	9200      	str	r2, [sp, #0]
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	2264      	movs	r2, #100	@ 0x64
 8002e2e:	491c      	ldr	r1, [pc, #112]	@ (8002ea0 <main+0x98>)
 8002e30:	481c      	ldr	r0, [pc, #112]	@ (8002ea4 <main+0x9c>)
 8002e32:	f7fe fbf3 	bl	800161c <xTaskCreate>
	xTaskCreate(data_disp_task, "Display signals", 100, NULL, Task2_priority, NULL);
 8002e36:	4b1c      	ldr	r3, [pc, #112]	@ (8002ea8 <main+0xa0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	9200      	str	r2, [sp, #0]
 8002e42:	2300      	movs	r3, #0
 8002e44:	2264      	movs	r2, #100	@ 0x64
 8002e46:	4919      	ldr	r1, [pc, #100]	@ (8002eac <main+0xa4>)
 8002e48:	4819      	ldr	r0, [pc, #100]	@ (8002eb0 <main+0xa8>)
 8002e4a:	f7fe fbe7 	bl	800161c <xTaskCreate>
	xTaskCreate(data_proc_task, "Process signals", 100, NULL, Task3_priority, NULL);
 8002e4e:	4b19      	ldr	r3, [pc, #100]	@ (8002eb4 <main+0xac>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	2300      	movs	r3, #0
 8002e56:	9301      	str	r3, [sp, #4]
 8002e58:	9200      	str	r2, [sp, #0]
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	2264      	movs	r2, #100	@ 0x64
 8002e5e:	4916      	ldr	r1, [pc, #88]	@ (8002eb8 <main+0xb0>)
 8002e60:	4816      	ldr	r0, [pc, #88]	@ (8002ebc <main+0xb4>)
 8002e62:	f7fe fbdb 	bl	800161c <xTaskCreate>


	// Initialize the low pass filter here
	lowpass_filter_init();
 8002e66:	f7ff ff9f 	bl	8002da8 <lowpass_filter_init>

	// Initialize the signal (and noise) generators here
	sine_gen_init_q15(&signal_desc, SIGNAL_FREQ, SAMPLING_FREQ);
 8002e6a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e6e:	210a      	movs	r1, #10
 8002e70:	4813      	ldr	r0, [pc, #76]	@ (8002ec0 <main+0xb8>)
 8002e72:	f000 f8f5 	bl	8003060 <sine_gen_init_q15>
	sine_gen_init_q15(&noise_desc, NOISE_FREQ, SAMPLING_FREQ);
 8002e76:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e7a:	2132      	movs	r1, #50	@ 0x32
 8002e7c:	4811      	ldr	r0, [pc, #68]	@ (8002ec4 <main+0xbc>)
 8002e7e:	f000 f8ef 	bl	8003060 <sine_gen_init_q15>


	//Create the semaphore (Must be done before the task scheduler starts!)
	xBinarySemaphore = xSemaphoreCreateBinary();
 8002e82:	2203      	movs	r2, #3
 8002e84:	2100      	movs	r1, #0
 8002e86:	2001      	movs	r0, #1
 8002e88:	f7fe f85a 	bl	8000f40 <xQueueGenericCreate>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	4a0e      	ldr	r2, [pc, #56]	@ (8002ec8 <main+0xc0>)
 8002e90:	6013      	str	r3, [r2, #0]

	// Must start the scheduler or nothing happens!
	vTaskStartScheduler();
 8002e92:	f7fe fd39 	bl	8001908 <vTaskStartScheduler>


	while(1)
 8002e96:	bf00      	nop
 8002e98:	e7fd      	b.n	8002e96 <main+0x8e>
 8002e9a:	bf00      	nop
 8002e9c:	20000004 	.word	0x20000004
 8002ea0:	08008368 	.word	0x08008368
 8002ea4:	08002ecd 	.word	0x08002ecd
 8002ea8:	20000008 	.word	0x20000008
 8002eac:	08008378 	.word	0x08008378
 8002eb0:	08002fe1 	.word	0x08002fe1
 8002eb4:	2000000c 	.word	0x2000000c
 8002eb8:	08008388 	.word	0x08008388
 8002ebc:	08002f65 	.word	0x08002f65
 8002ec0:	2000406c 	.word	0x2000406c
 8002ec4:	20004090 	.word	0x20004090
 8002ec8:	20004068 	.word	0x20004068

08002ecc <data_acq_task>:
} // End of main

// Definition of the first task - it gives the semaphore initially
// This task samples the ADC on PA1
void data_acq_task(void *pvParameters)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
	xSemaphoreGive(xBinarySemaphore);
 8002ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8002f48 <data_acq_task+0x7c>)
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	2300      	movs	r3, #0
 8002eda:	2200      	movs	r2, #0
 8002edc:	2100      	movs	r1, #0
 8002ede:	f7fe f889 	bl	8000ff4 <xQueueGenericSend>

	while(1)
	{
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 8002ee2:	4b19      	ldr	r3, [pc, #100]	@ (8002f48 <data_acq_task+0x7c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fe f984 	bl	80011f8 <xQueueSemaphoreTake>

		g_adc_value = adc_read();
 8002ef0:	f7ff ff48 	bl	8002d84 <adc_read>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	4a15      	ldr	r2, [pc, #84]	@ (8002f4c <data_acq_task+0x80>)
 8002ef8:	6013      	str	r3, [r2, #0]

		sine_sig_sample = sine_calc_sample_q15(&signal_desc)/2;
 8002efa:	4815      	ldr	r0, [pc, #84]	@ (8002f50 <data_acq_task+0x84>)
 8002efc:	f000 f994 	bl	8003228 <sine_calc_sample_q15>
 8002f00:	4603      	mov	r3, r0
 8002f02:	0fda      	lsrs	r2, r3, #31
 8002f04:	4413      	add	r3, r2
 8002f06:	105b      	asrs	r3, r3, #1
 8002f08:	b21a      	sxth	r2, r3
 8002f0a:	4b12      	ldr	r3, [pc, #72]	@ (8002f54 <data_acq_task+0x88>)
 8002f0c:	801a      	strh	r2, [r3, #0]
		noise_sig_sample = sine_calc_sample_q15(&noise_desc)/8;
 8002f0e:	4812      	ldr	r0, [pc, #72]	@ (8002f58 <data_acq_task+0x8c>)
 8002f10:	f000 f98a 	bl	8003228 <sine_calc_sample_q15>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	da00      	bge.n	8002f1c <data_acq_task+0x50>
 8002f1a:	3307      	adds	r3, #7
 8002f1c:	10db      	asrs	r3, r3, #3
 8002f1e:	b21a      	sxth	r2, r3
 8002f20:	4b0e      	ldr	r3, [pc, #56]	@ (8002f5c <data_acq_task+0x90>)
 8002f22:	801a      	strh	r2, [r3, #0]

		Task1_profiler++;
 8002f24:	4b0e      	ldr	r3, [pc, #56]	@ (8002f60 <data_acq_task+0x94>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	4a0d      	ldr	r2, [pc, #52]	@ (8002f60 <data_acq_task+0x94>)
 8002f2c:	6013      	str	r3, [r2, #0]

		xSemaphoreGive(xBinarySemaphore);
 8002f2e:	4b06      	ldr	r3, [pc, #24]	@ (8002f48 <data_acq_task+0x7c>)
 8002f30:	6818      	ldr	r0, [r3, #0]
 8002f32:	2300      	movs	r3, #0
 8002f34:	2200      	movs	r2, #0
 8002f36:	2100      	movs	r1, #0
 8002f38:	f7fe f85c 	bl	8000ff4 <xQueueGenericSend>
		vTaskDelay(_10ms);
 8002f3c:	230a      	movs	r3, #10
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fe fcac 	bl	800189c <vTaskDelay>
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 8002f44:	bf00      	nop
 8002f46:	e7cc      	b.n	8002ee2 <data_acq_task+0x16>
 8002f48:	20004068 	.word	0x20004068
 8002f4c:	20004058 	.word	0x20004058
 8002f50:	2000406c 	.word	0x2000406c
 8002f54:	200040b4 	.word	0x200040b4
 8002f58:	20004090 	.word	0x20004090
 8002f5c:	200040b6 	.word	0x200040b6
 8002f60:	2000405c 	.word	0x2000405c

08002f64 <data_proc_task>:


// Definition of the second task
// Add the sine wave and noise signals to create the corrupt signal, then filter it
void data_proc_task(void *pvParameters)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 8002f6c:	4b16      	ldr	r3, [pc, #88]	@ (8002fc8 <data_proc_task+0x64>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fe f93f 	bl	80011f8 <xQueueSemaphoreTake>

		corrupt_sig_sample = sine_sig_sample + noise_sig_sample;
 8002f7a:	4b14      	ldr	r3, [pc, #80]	@ (8002fcc <data_proc_task+0x68>)
 8002f7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	4b13      	ldr	r3, [pc, #76]	@ (8002fd0 <data_proc_task+0x6c>)
 8002f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	b21a      	sxth	r2, r3
 8002f90:	4b10      	ldr	r3, [pc, #64]	@ (8002fd4 <data_proc_task+0x70>)
 8002f92:	801a      	strh	r2, [r3, #0]

		filtered_sig_sample = lowpass_filter_exec(&corrupt_sig_sample);
 8002f94:	480f      	ldr	r0, [pc, #60]	@ (8002fd4 <data_proc_task+0x70>)
 8002f96:	f7ff ff23 	bl	8002de0 <lowpass_filter_exec>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd8 <data_proc_task+0x74>)
 8002fa0:	801a      	strh	r2, [r3, #0]

		Task2_profiler++;
 8002fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8002fdc <data_proc_task+0x78>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	4a0c      	ldr	r2, [pc, #48]	@ (8002fdc <data_proc_task+0x78>)
 8002faa:	6013      	str	r3, [r2, #0]

		xSemaphoreGive(xBinarySemaphore);
 8002fac:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <data_proc_task+0x64>)
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	f7fe f81d 	bl	8000ff4 <xQueueGenericSend>
		vTaskDelay(_10ms);
 8002fba:	230a      	movs	r3, #10
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fe fc6d 	bl	800189c <vTaskDelay>
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 8002fc2:	bf00      	nop
 8002fc4:	e7d2      	b.n	8002f6c <data_proc_task+0x8>
 8002fc6:	bf00      	nop
 8002fc8:	20004068 	.word	0x20004068
 8002fcc:	200040b4 	.word	0x200040b4
 8002fd0:	200040b6 	.word	0x200040b6
 8002fd4:	200040b8 	.word	0x200040b8
 8002fd8:	200040ba 	.word	0x200040ba
 8002fdc:	20004060 	.word	0x20004060

08002fe0 <data_disp_task>:
}

// Definition of the third task
// This task displays the various signals
void data_disp_task(void *pvParameters)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 8002fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8003028 <data_disp_task+0x48>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fe f901 	bl	80011f8 <xQueueSemaphoreTake>
		// printf("%d\t ", (int)sine_sig_sample);      // Original uncorrupted signal
		// printf("%d\t", (int)noise_sig_sample);		// Noisy signal
		// printf("%d\t", (int)corrupt_sig_sample);	// Noise-corrupted signal
		// printf("%d\n\r", (int)filtered_sig_sample); // Post-filtered signal

		printf("%d\n\r", (int)g_adc_value); // Post-filtered signal
 8002ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800302c <data_disp_task+0x4c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	480c      	ldr	r0, [pc, #48]	@ (8003030 <data_disp_task+0x50>)
 8002ffe:	f001 fd53 	bl	8004aa8 <iprintf>

		Task3_profiler++;
 8003002:	4b0c      	ldr	r3, [pc, #48]	@ (8003034 <data_disp_task+0x54>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	3301      	adds	r3, #1
 8003008:	4a0a      	ldr	r2, [pc, #40]	@ (8003034 <data_disp_task+0x54>)
 800300a:	6013      	str	r3, [r2, #0]

		xSemaphoreGive(xBinarySemaphore);
 800300c:	4b06      	ldr	r3, [pc, #24]	@ (8003028 <data_disp_task+0x48>)
 800300e:	6818      	ldr	r0, [r3, #0]
 8003010:	2300      	movs	r3, #0
 8003012:	2200      	movs	r2, #0
 8003014:	2100      	movs	r1, #0
 8003016:	f7fd ffed 	bl	8000ff4 <xQueueGenericSend>
		vTaskDelay(_10ms);
 800301a:	230a      	movs	r3, #10
 800301c:	4618      	mov	r0, r3
 800301e:	f7fe fc3d 	bl	800189c <vTaskDelay>
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 8003022:	bf00      	nop
 8003024:	e7e0      	b.n	8002fe8 <data_disp_task+0x8>
 8003026:	bf00      	nop
 8003028:	20004068 	.word	0x20004068
 800302c:	20004058 	.word	0x20004058
 8003030:	08008398 	.word	0x08008398
 8003034:	20004064 	.word	0x20004064

08003038 <fpu_enable>:
}



static void fpu_enable(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
	// Enable FPU - Set bits 20, 21, 22, 23 to "1" - See page 264 of Cortex-M4 Devices Users Guide
	SCB->CPACR |= ((3UL << 20) | (3UL << 22));
 800303c:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <fpu_enable+0x20>)
 800303e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003042:	4a05      	ldr	r2, [pc, #20]	@ (8003058 <fpu_enable+0x20>)
 8003044:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003048:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 800304c:	bf00      	nop
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	e000ed00 	.word	0xe000ed00
 800305c:	00000000 	.word	0x00000000

08003060 <sine_gen_init_q15>:

#include "sine_generator.h"


void sine_gen_init_q15(sine_generator_q15_t *sine_desc,  q15_t sine_freq, q15_t sample_freq)
{
 8003060:	b5b0      	push	{r4, r5, r7, lr}
 8003062:	b08a      	sub	sp, #40	@ 0x28
 8003064:	af02      	add	r7, sp, #8
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	807b      	strh	r3, [r7, #2]
 800306c:	4613      	mov	r3, r2
 800306e:	803b      	strh	r3, [r7, #0]
	//  Variables to hold intermediate sine values and coefficients
	float32_t y[4];
	float32_t coeff4;
	float32_t coeff5;

	y[0] = 0.0;
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	613b      	str	r3, [r7, #16]

	// Calculate sine values normalized by sampling frequency for first three harmonics
	y[1] = arm_sin_f32(2.0 * PI * sine_freq/sample_freq);
 8003076:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800307a:	4618      	mov	r0, r3
 800307c:	f7fd fa5a 	bl	8000534 <__aeabi_i2d>
 8003080:	a363      	add	r3, pc, #396	@ (adr r3, 8003210 <sine_gen_init_q15+0x1b0>)
 8003082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003086:	f7fd fabf 	bl	8000608 <__aeabi_dmul>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4614      	mov	r4, r2
 8003090:	461d      	mov	r5, r3
 8003092:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003096:	4618      	mov	r0, r3
 8003098:	f7fd fa4c 	bl	8000534 <__aeabi_i2d>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4620      	mov	r0, r4
 80030a2:	4629      	mov	r1, r5
 80030a4:	f7fd fbda 	bl	800085c <__aeabi_ddiv>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4610      	mov	r0, r2
 80030ae:	4619      	mov	r1, r3
 80030b0:	f7fd fda2 	bl	8000bf8 <__aeabi_d2f>
 80030b4:	4603      	mov	r3, r0
 80030b6:	ee00 3a10 	vmov	s0, r3
 80030ba:	f000 fd79 	bl	8003bb0 <arm_sin_f32>
 80030be:	eef0 7a40 	vmov.f32	s15, s0
 80030c2:	edc7 7a05 	vstr	s15, [r7, #20]
	y[2] = arm_sin_f32(4.0 * PI * sine_freq/sample_freq);
 80030c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fd fa32 	bl	8000534 <__aeabi_i2d>
 80030d0:	a351      	add	r3, pc, #324	@ (adr r3, 8003218 <sine_gen_init_q15+0x1b8>)
 80030d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d6:	f7fd fa97 	bl	8000608 <__aeabi_dmul>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	4614      	mov	r4, r2
 80030e0:	461d      	mov	r5, r3
 80030e2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fd fa24 	bl	8000534 <__aeabi_i2d>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4620      	mov	r0, r4
 80030f2:	4629      	mov	r1, r5
 80030f4:	f7fd fbb2 	bl	800085c <__aeabi_ddiv>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4610      	mov	r0, r2
 80030fe:	4619      	mov	r1, r3
 8003100:	f7fd fd7a 	bl	8000bf8 <__aeabi_d2f>
 8003104:	4603      	mov	r3, r0
 8003106:	ee00 3a10 	vmov	s0, r3
 800310a:	f000 fd51 	bl	8003bb0 <arm_sin_f32>
 800310e:	eef0 7a40 	vmov.f32	s15, s0
 8003112:	edc7 7a06 	vstr	s15, [r7, #24]
	y[3] = arm_sin_f32(6.0 * PI * sine_freq/sample_freq);
 8003116:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800311a:	4618      	mov	r0, r3
 800311c:	f7fd fa0a 	bl	8000534 <__aeabi_i2d>
 8003120:	a33f      	add	r3, pc, #252	@ (adr r3, 8003220 <sine_gen_init_q15+0x1c0>)
 8003122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003126:	f7fd fa6f 	bl	8000608 <__aeabi_dmul>
 800312a:	4602      	mov	r2, r0
 800312c:	460b      	mov	r3, r1
 800312e:	4614      	mov	r4, r2
 8003130:	461d      	mov	r5, r3
 8003132:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003136:	4618      	mov	r0, r3
 8003138:	f7fd f9fc 	bl	8000534 <__aeabi_i2d>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4620      	mov	r0, r4
 8003142:	4629      	mov	r1, r5
 8003144:	f7fd fb8a 	bl	800085c <__aeabi_ddiv>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4610      	mov	r0, r2
 800314e:	4619      	mov	r1, r3
 8003150:	f7fd fd52 	bl	8000bf8 <__aeabi_d2f>
 8003154:	4603      	mov	r3, r0
 8003156:	ee00 3a10 	vmov	s0, r3
 800315a:	f000 fd29 	bl	8003bb0 <arm_sin_f32>
 800315e:	eef0 7a40 	vmov.f32	s15, s0
 8003162:	edc7 7a07 	vstr	s15, [r7, #28]

	// Calculate coefficients for sine wave generator
	coeff4 = (y[2]/y[1])/2.0;
 8003166:	edd7 6a06 	vldr	s13, [r7, #24]
 800316a:	edd7 7a05 	vldr	s15, [r7, #20]
 800316e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003172:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003176:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800317a:	edc7 7a03 	vstr	s15, [r7, #12]
	coeff5 = ((y[1] * y[3] - y[2] * y[2])/(y[1] * y[1]))/2.0;
 800317e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003182:	edd7 7a07 	vldr	s15, [r7, #28]
 8003186:	ee27 7a27 	vmul.f32	s14, s14, s15
 800318a:	edd7 6a06 	vldr	s13, [r7, #24]
 800318e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003192:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003196:	ee77 6a67 	vsub.f32	s13, s14, s15
 800319a:	ed97 7a05 	vldr	s14, [r7, #20]
 800319e:	edd7 7a05 	vldr	s15, [r7, #20]
 80031a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031aa:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80031ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031b2:	edc7 7a02 	vstr	s15, [r7, #8]

	// Convert floats to q data type
	arm_float_to_q15(&coeff4, &(sine_desc->coeff[4]), 1);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f103 0118 	add.w	r1, r3, #24
 80031bc:	f107 030c 	add.w	r3, r7, #12
 80031c0:	2201      	movs	r2, #1
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 f9e0 	bl	8003588 <arm_float_to_q15>
	arm_float_to_q15(&coeff5, &(sine_desc->coeff[5]), 1);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f103 011a 	add.w	r1, r3, #26
 80031ce:	f107 0308 	add.w	r3, r7, #8
 80031d2:	2201      	movs	r2, #1
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 f9d7 	bl	8003588 <arm_float_to_q15>

	// Initialize biquad filter for sine wave generator
	arm_biquad_cascade_df1_init_q15(&(sine_desc->iir_sine_generator_instance), 1, sine_desc->coeff, sine_desc->state, 1);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f103 0210 	add.w	r2, r3, #16
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	331c      	adds	r3, #28
 80031e6:	2101      	movs	r1, #1
 80031e8:	9100      	str	r1, [sp, #0]
 80031ea:	2101      	movs	r1, #1
 80031ec:	f000 fcd0 	bl	8003b90 <arm_biquad_cascade_df1_init_q15>

	// Initialize state variables
	arm_float_to_q15(&y[1], &(sine_desc->state[3]), 1);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f103 0122 	add.w	r1, r3, #34	@ 0x22
 80031f6:	f107 0310 	add.w	r3, r7, #16
 80031fa:	3304      	adds	r3, #4
 80031fc:	2201      	movs	r2, #1
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 f9c2 	bl	8003588 <arm_float_to_q15>

}
 8003204:	bf00      	nop
 8003206:	3720      	adds	r7, #32
 8003208:	46bd      	mov	sp, r7
 800320a:	bdb0      	pop	{r4, r5, r7, pc}
 800320c:	f3af 8000 	nop.w
 8003210:	60000000 	.word	0x60000000
 8003214:	401921fb 	.word	0x401921fb
 8003218:	60000000 	.word	0x60000000
 800321c:	402921fb 	.word	0x402921fb
 8003220:	88000000 	.word	0x88000000
 8003224:	4032d97c 	.word	0x4032d97c

08003228 <sine_calc_sample_q15>:


q15_t sine_calc_sample_q15(sine_generator_q15_t *sine_desc)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
	q15_t input, output;

	input = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	81fb      	strh	r3, [r7, #14]

	// Generate one sample of the sine wave using biquad filter
	arm_biquad_cascade_df1_q15(&(sine_desc->iir_sine_generator_instance), &input, &output, 1);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f107 020c 	add.w	r2, r7, #12
 800323a:	f107 010e 	add.w	r1, r7, #14
 800323e:	2301      	movs	r3, #1
 8003240:	f000 fc02 	bl	8003a48 <arm_biquad_cascade_df1_q15>

	return (output);
 8003244:	f9b7 300c 	ldrsh.w	r3, [r7, #12]

}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return 1;
 8003254:	2301      	movs	r3, #1
}
 8003256:	4618      	mov	r0, r3
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <_kill>:

int _kill(int pid, int sig)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800326a:	f001 fce5 	bl	8004c38 <__errno>
 800326e:	4603      	mov	r3, r0
 8003270:	2216      	movs	r2, #22
 8003272:	601a      	str	r2, [r3, #0]
  return -1;
 8003274:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003278:	4618      	mov	r0, r3
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <_exit>:

void _exit (int status)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003288:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7ff ffe7 	bl	8003260 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003292:	bf00      	nop
 8003294:	e7fd      	b.n	8003292 <_exit+0x12>

08003296 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b086      	sub	sp, #24
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	e00a      	b.n	80032be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032a8:	f3af 8000 	nop.w
 80032ac:	4601      	mov	r1, r0
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	60ba      	str	r2, [r7, #8]
 80032b4:	b2ca      	uxtb	r2, r1
 80032b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	3301      	adds	r3, #1
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	dbf0      	blt.n	80032a8 <_read+0x12>
  }

  return len;
 80032c6:	687b      	ldr	r3, [r7, #4]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	e009      	b.n	80032f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	60ba      	str	r2, [r7, #8]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 f888 	bl	8003400 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	3301      	adds	r3, #1
 80032f4:	617b      	str	r3, [r7, #20]
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	dbf1      	blt.n	80032e2 <_write+0x12>
  }
  return len;
 80032fe:	687b      	ldr	r3, [r7, #4]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <_close>:

int _close(int file)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003310:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003314:	4618      	mov	r0, r3
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003330:	605a      	str	r2, [r3, #4]
  return 0;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <_isatty>:

int _isatty(int file)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003348:	2301      	movs	r3, #1
}
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003356:	b480      	push	{r7}
 8003358:	b085      	sub	sp, #20
 800335a:	af00      	add	r7, sp, #0
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003378:	4a14      	ldr	r2, [pc, #80]	@ (80033cc <_sbrk+0x5c>)
 800337a:	4b15      	ldr	r3, [pc, #84]	@ (80033d0 <_sbrk+0x60>)
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003384:	4b13      	ldr	r3, [pc, #76]	@ (80033d4 <_sbrk+0x64>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d102      	bne.n	8003392 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800338c:	4b11      	ldr	r3, [pc, #68]	@ (80033d4 <_sbrk+0x64>)
 800338e:	4a12      	ldr	r2, [pc, #72]	@ (80033d8 <_sbrk+0x68>)
 8003390:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003392:	4b10      	ldr	r3, [pc, #64]	@ (80033d4 <_sbrk+0x64>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4413      	add	r3, r2
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	429a      	cmp	r2, r3
 800339e:	d207      	bcs.n	80033b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033a0:	f001 fc4a 	bl	8004c38 <__errno>
 80033a4:	4603      	mov	r3, r0
 80033a6:	220c      	movs	r2, #12
 80033a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80033ae:	e009      	b.n	80033c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033b0:	4b08      	ldr	r3, [pc, #32]	@ (80033d4 <_sbrk+0x64>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033b6:	4b07      	ldr	r3, [pc, #28]	@ (80033d4 <_sbrk+0x64>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	4a05      	ldr	r2, [pc, #20]	@ (80033d4 <_sbrk+0x64>)
 80033c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033c2:	68fb      	ldr	r3, [r7, #12]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	20020000 	.word	0x20020000
 80033d0:	00000400 	.word	0x00000400
 80033d4:	200040bc 	.word	0x200040bc
 80033d8:	20004210 	.word	0x20004210

080033dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033e0:	4b06      	ldr	r3, [pc, #24]	@ (80033fc <SystemInit+0x20>)
 80033e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e6:	4a05      	ldr	r2, [pc, #20]	@ (80033fc <SystemInit+0x20>)
 80033e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033f0:	bf00      	nop
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	e000ed00 	.word	0xe000ed00

08003400 <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate);

void uart2_write(int ch);

int __io_putchar(int ch)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f87b 	bl	8003504 <uart2_write>

	return ch;
 800340e:	687b      	ldr	r3, [r7, #4]

}
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <uart2_tx_init>:

// Function to initialize UART2
void uart2_tx_init(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
	/****** [1] Configure UART2 Pins on Port A, PA2 (Tx) and PA3 (Rx) ******/
	/*  Enable clock access to GPIOA on AHB1 bus  */
	RCC->AHB1ENR |= GPIOAEN;
 800341c:	4b21      	ldr	r3, [pc, #132]	@ (80034a4 <uart2_tx_init+0x8c>)
 800341e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003420:	4a20      	ldr	r2, [pc, #128]	@ (80034a4 <uart2_tx_init+0x8c>)
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	6313      	str	r3, [r2, #48]	@ 0x30

	/*  Set PA2 mode to alternate function mode. (Set bits 5 and 4 to 0b10) */
	GPIOA->MODER |= (1U << 5);
 8003428:	4b1f      	ldr	r3, [pc, #124]	@ (80034a8 <uart2_tx_init+0x90>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a1e      	ldr	r2, [pc, #120]	@ (80034a8 <uart2_tx_init+0x90>)
 800342e:	f043 0320 	orr.w	r3, r3, #32
 8003432:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U << 4);
 8003434:	4b1c      	ldr	r3, [pc, #112]	@ (80034a8 <uart2_tx_init+0x90>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a1b      	ldr	r2, [pc, #108]	@ (80034a8 <uart2_tx_init+0x90>)
 800343a:	f023 0310 	bic.w	r3, r3, #16
 800343e:	6013      	str	r3, [r2, #0]

	/*  Set PA2 alternate function mode to UART_TX (AF07) . (Set bits 11, 10, 9, 8 to 0b0111, respectively.) */
	/*  Note this is in the alternate function low register, since we are working with PA2  */
	/*  Also note that the AF low register is AFR[0] and the AF high register is AFR[1]  */
	GPIOA->AFR[0] |= (1U << 8);
 8003440:	4b19      	ldr	r3, [pc, #100]	@ (80034a8 <uart2_tx_init+0x90>)
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	4a18      	ldr	r2, [pc, #96]	@ (80034a8 <uart2_tx_init+0x90>)
 8003446:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800344a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 9);
 800344c:	4b16      	ldr	r3, [pc, #88]	@ (80034a8 <uart2_tx_init+0x90>)
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	4a15      	ldr	r2, [pc, #84]	@ (80034a8 <uart2_tx_init+0x90>)
 8003452:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003456:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 10);
 8003458:	4b13      	ldr	r3, [pc, #76]	@ (80034a8 <uart2_tx_init+0x90>)
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	4a12      	ldr	r2, [pc, #72]	@ (80034a8 <uart2_tx_init+0x90>)
 800345e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003462:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U << 11);
 8003464:	4b10      	ldr	r3, [pc, #64]	@ (80034a8 <uart2_tx_init+0x90>)
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	4a0f      	ldr	r2, [pc, #60]	@ (80034a8 <uart2_tx_init+0x90>)
 800346a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800346e:	6213      	str	r3, [r2, #32]


	/****** [2] Configure UART  ******/
	/*  Enable clock access to UART2 on APB1*/
	RCC->APB1ENR |= UART2EN;
 8003470:	4b0c      	ldr	r3, [pc, #48]	@ (80034a4 <uart2_tx_init+0x8c>)
 8003472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003474:	4a0b      	ldr	r2, [pc, #44]	@ (80034a4 <uart2_tx_init+0x8c>)
 8003476:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800347a:	6413      	str	r3, [r2, #64]	@ 0x40

	/*  Configure baud rate  */
	uart2_set_baudrate(APB1_CLK, UART_BAUDRATE);
 800347c:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8003480:	480a      	ldr	r0, [pc, #40]	@ (80034ac <uart2_tx_init+0x94>)
 8003482:	f000 f817 	bl	80034b4 <uart2_set_baudrate>

	/*  Configure data transfer direction for Tx  */
	USART2->CR1 |= CR1_TE;
 8003486:	4b0a      	ldr	r3, [pc, #40]	@ (80034b0 <uart2_tx_init+0x98>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	4a09      	ldr	r2, [pc, #36]	@ (80034b0 <uart2_tx_init+0x98>)
 800348c:	f043 0308 	orr.w	r3, r3, #8
 8003490:	60d3      	str	r3, [r2, #12]

	/*  Enable UART module */
	USART2->CR1 |= CR1_UE;
 8003492:	4b07      	ldr	r3, [pc, #28]	@ (80034b0 <uart2_tx_init+0x98>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	4a06      	ldr	r2, [pc, #24]	@ (80034b0 <uart2_tx_init+0x98>)
 8003498:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800349c:	60d3      	str	r3, [r2, #12]

}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40023800 	.word	0x40023800
 80034a8:	40020000 	.word	0x40020000
 80034ac:	00f42400 	.word	0x00f42400
 80034b0:	40004400 	.word	0x40004400

080034b4 <uart2_set_baudrate>:

static void uart2_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk, baudrate);
 80034be:	6839      	ldr	r1, [r7, #0]
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f80b 	bl	80034dc <compute_uart_bd>
 80034c6:	4603      	mov	r3, r0
 80034c8:	461a      	mov	r2, r3
 80034ca:	4b03      	ldr	r3, [pc, #12]	@ (80034d8 <uart2_set_baudrate+0x24>)
 80034cc:	609a      	str	r2, [r3, #8]
}
 80034ce:	bf00      	nop
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40004400 	.word	0x40004400

080034dc <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
	return ((baudrate/2U) + periph_clk)/baudrate;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	085a      	lsrs	r2, r3, #1
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	441a      	add	r2, r3
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f4:	b29b      	uxth	r3, r3
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
	...

08003504 <uart2_write>:

void uart2_write(int ch)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
	/*  First, make sure data transmit register is empty - need to read the USART status register, SR */
	/*  Read the status register  */
	while(!(USART2->SR & SR_TXE) ) {}// Sit here until SR bit is a "1" (Data has been transferred)
 800350c:	bf00      	nop
 800350e:	4b08      	ldr	r3, [pc, #32]	@ (8003530 <uart2_write+0x2c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f9      	beq.n	800350e <uart2_write+0xa>

	/*  Write to the transmit data register.  */
	USART2->DR = (ch & 0xFF);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a04      	ldr	r2, [pc, #16]	@ (8003530 <uart2_write+0x2c>)
 800351e:	b2db      	uxtb	r3, r3
 8003520:	6053      	str	r3, [r2, #4]
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40004400 	.word	0x40004400

08003534 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003534:	480d      	ldr	r0, [pc, #52]	@ (800356c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003536:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003538:	f7ff ff50 	bl	80033dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800353c:	480c      	ldr	r0, [pc, #48]	@ (8003570 <LoopForever+0x6>)
  ldr r1, =_edata
 800353e:	490d      	ldr	r1, [pc, #52]	@ (8003574 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003540:	4a0d      	ldr	r2, [pc, #52]	@ (8003578 <LoopForever+0xe>)
  movs r3, #0
 8003542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003544:	e002      	b.n	800354c <LoopCopyDataInit>

08003546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800354a:	3304      	adds	r3, #4

0800354c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800354c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800354e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003550:	d3f9      	bcc.n	8003546 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003552:	4a0a      	ldr	r2, [pc, #40]	@ (800357c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003554:	4c0a      	ldr	r4, [pc, #40]	@ (8003580 <LoopForever+0x16>)
  movs r3, #0
 8003556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003558:	e001      	b.n	800355e <LoopFillZerobss>

0800355a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800355a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800355c:	3204      	adds	r2, #4

0800355e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800355e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003560:	d3fb      	bcc.n	800355a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003562:	f001 fb6f 	bl	8004c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003566:	f7ff fc4f 	bl	8002e08 <main>

0800356a <LoopForever>:

LoopForever:
  b LoopForever
 800356a:	e7fe      	b.n	800356a <LoopForever>
  ldr   r0, =_estack
 800356c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003574:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8003578:	08008fe0 	.word	0x08008fe0
  ldr r2, =_sbss
 800357c:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8003580:	2000420c 	.word	0x2000420c

08003584 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003584:	e7fe      	b.n	8003584 <ADC_IRQHandler>
	...

08003588 <arm_float_to_q15>:
 8003588:	b4f0      	push	{r4, r5, r6, r7}
 800358a:	0897      	lsrs	r7, r2, #2
 800358c:	d06e      	beq.n	800366c <arm_float_to_q15+0xe4>
 800358e:	eddf 5a49 	vldr	s11, [pc, #292]	@ 80036b4 <arm_float_to_q15+0x12c>
 8003592:	f100 0510 	add.w	r5, r0, #16
 8003596:	f101 0408 	add.w	r4, r1, #8
 800359a:	463e      	mov	r6, r7
 800359c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80035a0:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
 80035a4:	ed55 7a04 	vldr	s15, [r5, #-16]
 80035a8:	ee27 7aa5 	vmul.f32	s14, s15, s11
 80035ac:	3510      	adds	r5, #16
 80035ae:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80035b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b6:	bfd4      	ite	le
 80035b8:	eef0 7a66 	vmovle.f32	s15, s13
 80035bc:	eef0 7a46 	vmovgt.f32	s15, s12
 80035c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035c4:	3408      	adds	r4, #8
 80035c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035ca:	ee17 3a90 	vmov	r3, s15
 80035ce:	f303 030f 	ssat	r3, #16, r3
 80035d2:	f824 3c10 	strh.w	r3, [r4, #-16]
 80035d6:	ed55 7a07 	vldr	s15, [r5, #-28]	@ 0xffffffe4
 80035da:	ee27 7aa5 	vmul.f32	s14, s15, s11
 80035de:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80035e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e6:	bfd4      	ite	le
 80035e8:	eef0 7a66 	vmovle.f32	s15, s13
 80035ec:	eef0 7a46 	vmovgt.f32	s15, s12
 80035f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035f8:	ee17 3a90 	vmov	r3, s15
 80035fc:	f303 030f 	ssat	r3, #16, r3
 8003600:	f824 3c0e 	strh.w	r3, [r4, #-14]
 8003604:	ed55 7a06 	vldr	s15, [r5, #-24]	@ 0xffffffe8
 8003608:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800360c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8003610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003614:	bfd4      	ite	le
 8003616:	eef0 7a66 	vmovle.f32	s15, s13
 800361a:	eef0 7a46 	vmovgt.f32	s15, s12
 800361e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003622:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003626:	ee17 3a90 	vmov	r3, s15
 800362a:	f303 030f 	ssat	r3, #16, r3
 800362e:	f824 3c0c 	strh.w	r3, [r4, #-12]
 8003632:	ed55 7a05 	vldr	s15, [r5, #-20]	@ 0xffffffec
 8003636:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800363a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800363e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003642:	bfd4      	ite	le
 8003644:	eef0 7a66 	vmovle.f32	s15, s13
 8003648:	eef0 7a46 	vmovgt.f32	s15, s12
 800364c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003650:	3e01      	subs	r6, #1
 8003652:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003656:	ee17 3a90 	vmov	r3, s15
 800365a:	f303 030f 	ssat	r3, #16, r3
 800365e:	f824 3c0a 	strh.w	r3, [r4, #-10]
 8003662:	d19f      	bne.n	80035a4 <arm_float_to_q15+0x1c>
 8003664:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 8003668:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800366c:	f012 0203 	ands.w	r2, r2, #3
 8003670:	d01e      	beq.n	80036b0 <arm_float_to_q15+0x128>
 8003672:	eddf 5a10 	vldr	s11, [pc, #64]	@ 80036b4 <arm_float_to_q15+0x12c>
 8003676:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800367a:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
 800367e:	ecf0 7a01 	vldmia	r0!, {s15}
 8003682:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8003686:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800368a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800368e:	bfd4      	ite	le
 8003690:	eef0 7a66 	vmovle.f32	s15, s13
 8003694:	eef0 7a46 	vmovgt.f32	s15, s12
 8003698:	ee77 7a87 	vadd.f32	s15, s15, s14
 800369c:	3a01      	subs	r2, #1
 800369e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036a2:	ee17 3a90 	vmov	r3, s15
 80036a6:	f303 030f 	ssat	r3, #16, r3
 80036aa:	f821 3b02 	strh.w	r3, [r1], #2
 80036ae:	d1e6      	bne.n	800367e <arm_float_to_q15+0xf6>
 80036b0:	bcf0      	pop	{r4, r5, r6, r7}
 80036b2:	4770      	bx	lr
 80036b4:	47000000 	.word	0x47000000

080036b8 <arm_fir_q15>:
 80036b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036bc:	4605      	mov	r5, r0
 80036be:	b099      	sub	sp, #100	@ 0x64
 80036c0:	686c      	ldr	r4, [r5, #4]
 80036c2:	9016      	str	r0, [sp, #88]	@ 0x58
 80036c4:	8800      	ldrh	r0, [r0, #0]
 80036c6:	9410      	str	r4, [sp, #64]	@ 0x40
 80036c8:	4626      	mov	r6, r4
 80036ca:	f100 4c00 	add.w	ip, r0, #2147483648	@ 0x80000000
 80036ce:	68ac      	ldr	r4, [r5, #8]
 80036d0:	9317      	str	r3, [sp, #92]	@ 0x5c
 80036d2:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80036d6:	461f      	mov	r7, r3
 80036d8:	940c      	str	r4, [sp, #48]	@ 0x30
 80036da:	4623      	mov	r3, r4
 80036dc:	eb06 044c 	add.w	r4, r6, ip, lsl #1
 80036e0:	4625      	mov	r5, r4
 80036e2:	9411      	str	r4, [sp, #68]	@ 0x44
 80036e4:	08bc      	lsrs	r4, r7, #2
 80036e6:	9014      	str	r0, [sp, #80]	@ 0x50
 80036e8:	9112      	str	r1, [sp, #72]	@ 0x48
 80036ea:	9213      	str	r2, [sp, #76]	@ 0x4c
 80036ec:	9415      	str	r4, [sp, #84]	@ 0x54
 80036ee:	f000 80e8 	beq.w	80038c2 <arm_fir_q15+0x20a>
 80036f2:	4627      	mov	r7, r4
 80036f4:	4604      	mov	r4, r0
 80036f6:	0880      	lsrs	r0, r0, #2
 80036f8:	900b      	str	r0, [sp, #44]	@ 0x2c
 80036fa:	00c0      	lsls	r0, r0, #3
 80036fc:	4403      	add	r3, r0
 80036fe:	930e      	str	r3, [sp, #56]	@ 0x38
 8003700:	f004 0303 	and.w	r3, r4, #3
 8003704:	930d      	str	r3, [sp, #52]	@ 0x34
 8003706:	f105 0308 	add.w	r3, r5, #8
 800370a:	9305      	str	r3, [sp, #20]
 800370c:	460b      	mov	r3, r1
 800370e:	3308      	adds	r3, #8
 8003710:	9306      	str	r3, [sp, #24]
 8003712:	4613      	mov	r3, r2
 8003714:	3308      	adds	r3, #8
 8003716:	9309      	str	r3, [sp, #36]	@ 0x24
 8003718:	f106 0308 	add.w	r3, r6, #8
 800371c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800371e:	9307      	str	r3, [sp, #28]
 8003720:	9708      	str	r7, [sp, #32]
 8003722:	9a06      	ldr	r2, [sp, #24]
 8003724:	9c05      	ldr	r4, [sp, #20]
 8003726:	f932 3c08 	ldrsh.w	r3, [r2, #-8]
 800372a:	f824 3c08 	strh.w	r3, [r4, #-8]
 800372e:	f932 3c06 	ldrsh.w	r3, [r2, #-6]
 8003732:	f824 3c06 	strh.w	r3, [r4, #-6]
 8003736:	4611      	mov	r1, r2
 8003738:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800373a:	f931 3c04 	ldrsh.w	r3, [r1, #-4]
 800373e:	f824 3c04 	strh.w	r3, [r4, #-4]
 8003742:	9a07      	ldr	r2, [sp, #28]
 8003744:	f931 3c02 	ldrsh.w	r3, [r1, #-2]
 8003748:	f824 3c02 	strh.w	r3, [r4, #-2]
 800374c:	f852 9c08 	ldr.w	r9, [r2, #-8]
 8003750:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8003754:	4613      	mov	r3, r2
 8003756:	4692      	mov	sl, r2
 8003758:	2e00      	cmp	r6, #0
 800375a:	f000 8135 	beq.w	80039c8 <arm_fir_q15+0x310>
 800375e:	3308      	adds	r3, #8
 8003760:	469b      	mov	fp, r3
 8003762:	930a      	str	r3, [sp, #40]	@ 0x28
 8003764:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003766:	f8cd b000 	str.w	fp, [sp]
 800376a:	2000      	movs	r0, #0
 800376c:	f103 0a08 	add.w	sl, r3, #8
 8003770:	fa1f f388 	uxth.w	r3, r8
 8003774:	4607      	mov	r7, r0
 8003776:	9001      	str	r0, [sp, #4]
 8003778:	4605      	mov	r5, r0
 800377a:	4604      	mov	r4, r0
 800377c:	4684      	mov	ip, r0
 800377e:	4686      	mov	lr, r0
 8003780:	9603      	str	r6, [sp, #12]
 8003782:	464a      	mov	r2, r9
 8003784:	9002      	str	r0, [sp, #8]
 8003786:	469b      	mov	fp, r3
 8003788:	f85a 3c08 	ldr.w	r3, [sl, #-8]
 800378c:	fbc2 cec3 	smlald	ip, lr, r2, r3
 8003790:	9e01      	ldr	r6, [sp, #4]
 8003792:	fbc8 76c3 	smlald	r7, r6, r8, r3
 8003796:	4621      	mov	r1, r4
 8003798:	0c12      	lsrs	r2, r2, #16
 800379a:	9c00      	ldr	r4, [sp, #0]
 800379c:	0412      	lsls	r2, r2, #16
 800379e:	ea4b 0902 	orr.w	r9, fp, r2
 80037a2:	f854 2c08 	ldr.w	r2, [r4, #-8]
 80037a6:	fbc9 51d3 	smlaldx	r5, r1, r9, r3
 80037aa:	ea4f 4918 	mov.w	r9, r8, lsr #16
 80037ae:	fa1f fb82 	uxth.w	fp, r2
 80037b2:	ea4f 4909 	mov.w	r9, r9, lsl #16
 80037b6:	9104      	str	r1, [sp, #16]
 80037b8:	ea4b 0909 	orr.w	r9, fp, r9
 80037bc:	9902      	ldr	r1, [sp, #8]
 80037be:	fbc9 01d3 	smlaldx	r0, r1, r9, r3
 80037c2:	f85a 3c04 	ldr.w	r3, [sl, #-4]
 80037c6:	fbc8 cec3 	smlald	ip, lr, r8, r3
 80037ca:	f854 8c04 	ldr.w	r8, [r4, #-4]
 80037ce:	fbc2 76c3 	smlald	r7, r6, r2, r3
 80037d2:	9601      	str	r6, [sp, #4]
 80037d4:	9c04      	ldr	r4, [sp, #16]
 80037d6:	fbc9 54d3 	smlaldx	r5, r4, r9, r3
 80037da:	0c16      	lsrs	r6, r2, #16
 80037dc:	fa1f fb88 	uxth.w	fp, r8
 80037e0:	0436      	lsls	r6, r6, #16
 80037e2:	ea4b 0606 	orr.w	r6, fp, r6
 80037e6:	fbc6 01d3 	smlaldx	r0, r1, r6, r3
 80037ea:	9b00      	ldr	r3, [sp, #0]
 80037ec:	9102      	str	r1, [sp, #8]
 80037ee:	3308      	adds	r3, #8
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	9b03      	ldr	r3, [sp, #12]
 80037f4:	3b01      	subs	r3, #1
 80037f6:	f10a 0a08 	add.w	sl, sl, #8
 80037fa:	9303      	str	r3, [sp, #12]
 80037fc:	d1c4      	bne.n	8003788 <arm_fir_q15+0xd0>
 80037fe:	4691      	mov	r9, r2
 8003800:	9b07      	ldr	r3, [sp, #28]
 8003802:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8003804:	4413      	add	r3, r2
 8003806:	469a      	mov	sl, r3
 8003808:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800380a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800380c:	b1ca      	cbz	r2, 8003842 <arm_fir_q15+0x18a>
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	fbc9 cec3 	smlald	ip, lr, r9, r3
 8003814:	9e01      	ldr	r6, [sp, #4]
 8003816:	fbc8 76c3 	smlald	r7, r6, r8, r3
 800381a:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800381e:	fa1f f288 	uxth.w	r2, r8
 8003822:	ea4f 4909 	mov.w	r9, r9, lsl #16
 8003826:	9601      	str	r6, [sp, #4]
 8003828:	ea42 0909 	orr.w	r9, r2, r9
 800382c:	f8da 6000 	ldr.w	r6, [sl]
 8003830:	fbc9 54d3 	smlaldx	r5, r4, r9, r3
 8003834:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8003838:	0412      	lsls	r2, r2, #16
 800383a:	b2b6      	uxth	r6, r6
 800383c:	4316      	orrs	r6, r2
 800383e:	fbc6 01d3 	smlaldx	r0, r1, r6, r3
 8003842:	9b01      	ldr	r3, [sp, #4]
 8003844:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003846:	ea4f 3cdc 	mov.w	ip, ip, lsr #15
 800384a:	0bff      	lsrs	r7, r7, #15
 800384c:	ea47 4743 	orr.w	r7, r7, r3, lsl #17
 8003850:	ea4c 4c4e 	orr.w	ip, ip, lr, lsl #17
 8003854:	f307 070f 	ssat	r7, #16, r7
 8003858:	f30c 0c0f 	ssat	ip, #16, ip
 800385c:	b2bf      	uxth	r7, r7
 800385e:	fa1f fc8c 	uxth.w	ip, ip
 8003862:	0bed      	lsrs	r5, r5, #15
 8003864:	0bc0      	lsrs	r0, r0, #15
 8003866:	ea45 4544 	orr.w	r5, r5, r4, lsl #17
 800386a:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
 800386e:	f305 050f 	ssat	r5, #16, r5
 8003872:	f300 000f 	ssat	r0, #16, r0
 8003876:	ea4c 4505 	orr.w	r5, ip, r5, lsl #16
 800387a:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
 800387e:	4613      	mov	r3, r2
 8003880:	f842 5c08 	str.w	r5, [r2, #-8]
 8003884:	f842 7c04 	str.w	r7, [r2, #-4]
 8003888:	9a05      	ldr	r2, [sp, #20]
 800388a:	3308      	adds	r3, #8
 800388c:	3208      	adds	r2, #8
 800388e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003890:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003892:	9205      	str	r2, [sp, #20]
 8003894:	9307      	str	r3, [sp, #28]
 8003896:	9a06      	ldr	r2, [sp, #24]
 8003898:	9b08      	ldr	r3, [sp, #32]
 800389a:	3208      	adds	r2, #8
 800389c:	3b01      	subs	r3, #1
 800389e:	9206      	str	r2, [sp, #24]
 80038a0:	9308      	str	r3, [sp, #32]
 80038a2:	f47f af3e 	bne.w	8003722 <arm_fir_q15+0x6a>
 80038a6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80038a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	441a      	add	r2, r3
 80038ae:	9211      	str	r2, [sp, #68]	@ 0x44
 80038b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80038b2:	441a      	add	r2, r3
 80038b4:	9212      	str	r2, [sp, #72]	@ 0x48
 80038b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80038b8:	441a      	add	r2, r3
 80038ba:	9213      	str	r2, [sp, #76]	@ 0x4c
 80038bc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80038be:	441a      	add	r2, r3
 80038c0:	9210      	str	r2, [sp, #64]	@ 0x40
 80038c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80038c4:	f013 0303 	ands.w	r3, r3, #3
 80038c8:	9302      	str	r3, [sp, #8]
 80038ca:	d03f      	beq.n	800394c <arm_fir_q15+0x294>
 80038cc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80038ce:	f1a2 0c02 	sub.w	ip, r2, #2
 80038d2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80038d4:	f102 0904 	add.w	r9, r2, #4
 80038d8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80038da:	f8cd 9004 	str.w	r9, [sp, #4]
 80038de:	ea4f 0852 	mov.w	r8, r2, lsr #1
 80038e2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80038e4:	f8cd 8000 	str.w	r8, [sp]
 80038e8:	f8dd 904c 	ldr.w	r9, [sp, #76]	@ 0x4c
 80038ec:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 80038f0:	f102 0e04 	add.w	lr, r2, #4
 80038f4:	461f      	mov	r7, r3
 80038f6:	f938 3b02 	ldrsh.w	r3, [r8], #2
 80038fa:	9a01      	ldr	r2, [sp, #4]
 80038fc:	9900      	ldr	r1, [sp, #0]
 80038fe:	f82c 3f02 	strh.w	r3, [ip, #2]!
 8003902:	2400      	movs	r4, #0
 8003904:	4673      	mov	r3, lr
 8003906:	2500      	movs	r5, #0
 8003908:	f933 bc04 	ldrsh.w	fp, [r3, #-4]
 800390c:	f932 ac04 	ldrsh.w	sl, [r2, #-4]
 8003910:	f933 6c02 	ldrsh.w	r6, [r3, #-2]
 8003914:	f932 0c02 	ldrsh.w	r0, [r2, #-2]
 8003918:	fbcb 458a 	smlalbb	r4, r5, fp, sl
 800391c:	3901      	subs	r1, #1
 800391e:	f103 0304 	add.w	r3, r3, #4
 8003922:	fbc6 4580 	smlalbb	r4, r5, r6, r0
 8003926:	f102 0204 	add.w	r2, r2, #4
 800392a:	d1ed      	bne.n	8003908 <arm_fir_q15+0x250>
 800392c:	0be3      	lsrs	r3, r4, #15
 800392e:	3f01      	subs	r7, #1
 8003930:	ea43 4345 	orr.w	r3, r3, r5, lsl #17
 8003934:	f10e 0e02 	add.w	lr, lr, #2
 8003938:	f303 030f 	ssat	r3, #16, r3
 800393c:	f829 3b02 	strh.w	r3, [r9], #2
 8003940:	d1d9      	bne.n	80038f6 <arm_fir_q15+0x23e>
 8003942:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003944:	9a02      	ldr	r2, [sp, #8]
 8003946:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800394a:	9310      	str	r3, [sp, #64]	@ 0x40
 800394c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800394e:	1e5f      	subs	r7, r3, #1
 8003950:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003952:	08bd      	lsrs	r5, r7, #2
 8003954:	685e      	ldr	r6, [r3, #4]
 8003956:	d029      	beq.n	80039ac <arm_fir_q15+0x2f4>
 8003958:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800395a:	4602      	mov	r2, r0
 800395c:	f106 0310 	add.w	r3, r6, #16
 8003960:	3210      	adds	r2, #16
 8003962:	4296      	cmp	r6, r2
 8003964:	bf38      	it	cc
 8003966:	4298      	cmpcc	r0, r3
 8003968:	bf2c      	ite	cs
 800396a:	2301      	movcs	r3, #1
 800396c:	2300      	movcc	r3, #0
 800396e:	2d02      	cmp	r5, #2
 8003970:	bf94      	ite	ls
 8003972:	2300      	movls	r3, #0
 8003974:	f003 0301 	andhi.w	r3, r3, #1
 8003978:	b39b      	cbz	r3, 80039e2 <arm_fir_q15+0x32a>
 800397a:	4603      	mov	r3, r0
 800397c:	4333      	orrs	r3, r6
 800397e:	079b      	lsls	r3, r3, #30
 8003980:	d12f      	bne.n	80039e2 <arm_fir_q15+0x32a>
 8003982:	f100 0208 	add.w	r2, r0, #8
 8003986:	f106 0308 	add.w	r3, r6, #8
 800398a:	2100      	movs	r1, #0
 800398c:	e912 0011 	ldmdb	r2, {r0, r4}
 8003990:	3101      	adds	r1, #1
 8003992:	428d      	cmp	r5, r1
 8003994:	e903 0011 	stmdb	r3, {r0, r4}
 8003998:	f102 0208 	add.w	r2, r2, #8
 800399c:	f103 0308 	add.w	r3, r3, #8
 80039a0:	d1f4      	bne.n	800398c <arm_fir_q15+0x2d4>
 80039a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80039a4:	00ed      	lsls	r5, r5, #3
 80039a6:	442b      	add	r3, r5
 80039a8:	442e      	add	r6, r5
 80039aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80039ac:	f017 0303 	ands.w	r3, r7, #3
 80039b0:	d007      	beq.n	80039c2 <arm_fir_q15+0x30a>
 80039b2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80039b4:	3e02      	subs	r6, #2
 80039b6:	f932 1b02 	ldrsh.w	r1, [r2], #2
 80039ba:	f826 1f02 	strh.w	r1, [r6, #2]!
 80039be:	3b01      	subs	r3, #1
 80039c0:	d1f9      	bne.n	80039b6 <arm_fir_q15+0x2fe>
 80039c2:	b019      	add	sp, #100	@ 0x64
 80039c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039c8:	f10a 0208 	add.w	r2, sl, #8
 80039cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80039ce:	9601      	str	r6, [sp, #4]
 80039d0:	4630      	mov	r0, r6
 80039d2:	4631      	mov	r1, r6
 80039d4:	4637      	mov	r7, r6
 80039d6:	4635      	mov	r5, r6
 80039d8:	46b6      	mov	lr, r6
 80039da:	4634      	mov	r4, r6
 80039dc:	46b4      	mov	ip, r6
 80039de:	920a      	str	r2, [sp, #40]	@ 0x28
 80039e0:	e713      	b.n	800380a <arm_fir_q15+0x152>
 80039e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80039e4:	f106 0208 	add.w	r2, r6, #8
 80039e8:	3308      	adds	r3, #8
 80039ea:	4629      	mov	r1, r5
 80039ec:	f933 0c08 	ldrsh.w	r0, [r3, #-8]
 80039f0:	f822 0c08 	strh.w	r0, [r2, #-8]
 80039f4:	f933 0c06 	ldrsh.w	r0, [r3, #-6]
 80039f8:	f822 0c06 	strh.w	r0, [r2, #-6]
 80039fc:	f933 0c04 	ldrsh.w	r0, [r3, #-4]
 8003a00:	f822 0c04 	strh.w	r0, [r2, #-4]
 8003a04:	f933 0c02 	ldrsh.w	r0, [r3, #-2]
 8003a08:	f822 0c02 	strh.w	r0, [r2, #-2]
 8003a0c:	3901      	subs	r1, #1
 8003a0e:	f103 0308 	add.w	r3, r3, #8
 8003a12:	f102 0208 	add.w	r2, r2, #8
 8003a16:	d1e9      	bne.n	80039ec <arm_fir_q15+0x334>
 8003a18:	e7c3      	b.n	80039a2 <arm_fir_q15+0x2ea>
 8003a1a:	bf00      	nop

08003a1c <arm_fir_init_q15>:
 8003a1c:	b570      	push	{r4, r5, r6, lr}
 8003a1e:	f011 0501 	ands.w	r5, r1, #1
 8003a22:	d10e      	bne.n	8003a42 <arm_fir_init_q15+0x26>
 8003a24:	461e      	mov	r6, r3
 8003a26:	4613      	mov	r3, r2
 8003a28:	9a04      	ldr	r2, [sp, #16]
 8003a2a:	8001      	strh	r1, [r0, #0]
 8003a2c:	4604      	mov	r4, r0
 8003a2e:	188a      	adds	r2, r1, r2
 8003a30:	6083      	str	r3, [r0, #8]
 8003a32:	0052      	lsls	r2, r2, #1
 8003a34:	4629      	mov	r1, r5
 8003a36:	4630      	mov	r0, r6
 8003a38:	f001 f8ab 	bl	8004b92 <memset>
 8003a3c:	6066      	str	r6, [r4, #4]
 8003a3e:	4628      	mov	r0, r5
 8003a40:	bd70      	pop	{r4, r5, r6, pc}
 8003a42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a46:	bd70      	pop	{r4, r5, r6, pc}

08003a48 <arm_biquad_cascade_df1_q15>:
 8003a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a4c:	b08b      	sub	sp, #44	@ 0x2c
 8003a4e:	f990 800c 	ldrsb.w	r8, [r0, #12]
 8003a52:	6885      	ldr	r5, [r0, #8]
 8003a54:	6844      	ldr	r4, [r0, #4]
 8003a56:	f990 0000 	ldrsb.w	r0, [r0]
 8003a5a:	9004      	str	r0, [sp, #16]
 8003a5c:	0858      	lsrs	r0, r3, #1
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	9006      	str	r0, [sp, #24]
 8003a64:	9307      	str	r3, [sp, #28]
 8003a66:	0080      	lsls	r0, r0, #2
 8003a68:	4613      	mov	r3, r2
 8003a6a:	4403      	add	r3, r0
 8003a6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a6e:	f105 030c 	add.w	r3, r5, #12
 8003a72:	f1c8 080f 	rsb	r8, r8, #15
 8003a76:	9303      	str	r3, [sp, #12]
 8003a78:	f104 0308 	add.w	r3, r4, #8
 8003a7c:	9205      	str	r2, [sp, #20]
 8003a7e:	9008      	str	r0, [sp, #32]
 8003a80:	9101      	str	r1, [sp, #4]
 8003a82:	f1c8 0a20 	rsb	sl, r8, #32
 8003a86:	9302      	str	r3, [sp, #8]
 8003a88:	9a03      	ldr	r2, [sp, #12]
 8003a8a:	9902      	ldr	r1, [sp, #8]
 8003a8c:	f852 5c0c 	ldr.w	r5, [r2, #-12]
 8003a90:	f852 4c08 	ldr.w	r4, [r2, #-8]
 8003a94:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8003a98:	e911 000c 	ldmdb	r1, {r2, r3}
 8003a9c:	9906      	ldr	r1, [sp, #24]
 8003a9e:	2900      	cmp	r1, #0
 8003aa0:	d074      	beq.n	8003b8c <arm_biquad_cascade_df1_q15+0x144>
 8003aa2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8003aa6:	f8dd c014 	ldr.w	ip, [sp, #20]
 8003aaa:	468e      	mov	lr, r1
 8003aac:	4693      	mov	fp, r2
 8003aae:	4619      	mov	r1, r3
 8003ab0:	f859 6b04 	ldr.w	r6, [r9], #4
 8003ab4:	fb25 f706 	smuad	r7, r5, r6
 8003ab8:	17fb      	asrs	r3, r7, #31
 8003aba:	461a      	mov	r2, r3
 8003abc:	463b      	mov	r3, r7
 8003abe:	fbc4 32cb 	smlald	r3, r2, r4, fp
 8003ac2:	4617      	mov	r7, r2
 8003ac4:	fbc0 37c1 	smlald	r3, r7, r0, r1
 8003ac8:	fa07 f70a 	lsl.w	r7, r7, sl
 8003acc:	fa23 f308 	lsr.w	r3, r3, r8
 8003ad0:	431f      	orrs	r7, r3
 8003ad2:	b2b2      	uxth	r2, r6
 8003ad4:	f307 070f 	ssat	r7, #16, r7
 8003ad8:	b2bf      	uxth	r7, r7
 8003ada:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8003ade:	ea42 4b0b 	orr.w	fp, r2, fp, lsl #16
 8003ae2:	fb25 f116 	smuadx	r1, r5, r6
 8003ae6:	17cb      	asrs	r3, r1, #31
 8003ae8:	fbc4 13cb 	smlald	r1, r3, r4, fp
 8003aec:	fbc0 13c7 	smlald	r1, r3, r0, r7
 8003af0:	fa21 f108 	lsr.w	r1, r1, r8
 8003af4:	fa03 f30a 	lsl.w	r3, r3, sl
 8003af8:	b2ba      	uxth	r2, r7
 8003afa:	430b      	orrs	r3, r1
 8003afc:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
 8003b00:	f303 030f 	ssat	r3, #16, r3
 8003b04:	f1be 0e01 	subs.w	lr, lr, #1
 8003b08:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003b0c:	b299      	uxth	r1, r3
 8003b0e:	ea4b 4b16 	orr.w	fp, fp, r6, lsr #16
 8003b12:	f84c 2b04 	str.w	r2, [ip], #4
 8003b16:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8003b1a:	d1c9      	bne.n	8003ab0 <arm_biquad_cascade_df1_q15+0x68>
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	9e08      	ldr	r6, [sp, #32]
 8003b20:	9901      	ldr	r1, [sp, #4]
 8003b22:	4431      	add	r1, r6
 8003b24:	9101      	str	r1, [sp, #4]
 8003b26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003b28:	465a      	mov	r2, fp
 8003b2a:	9e07      	ldr	r6, [sp, #28]
 8003b2c:	b1d6      	cbz	r6, 8003b64 <arm_biquad_cascade_df1_q15+0x11c>
 8003b2e:	9e01      	ldr	r6, [sp, #4]
 8003b30:	f9b6 e000 	ldrsh.w	lr, [r6]
 8003b34:	fb25 f50e 	smuad	r5, r5, lr
 8003b38:	17ef      	asrs	r7, r5, #31
 8003b3a:	463e      	mov	r6, r7
 8003b3c:	fbc4 56c2 	smlald	r5, r6, r4, r2
 8003b40:	fbc0 56c3 	smlald	r5, r6, r0, r3
 8003b44:	fa06 f60a 	lsl.w	r6, r6, sl
 8003b48:	fa25 f508 	lsr.w	r5, r5, r8
 8003b4c:	ea46 0005 	orr.w	r0, r6, r5
 8003b50:	fa1f fe8e 	uxth.w	lr, lr
 8003b54:	f300 000f 	ssat	r0, #16, r0
 8003b58:	b284      	uxth	r4, r0
 8003b5a:	8008      	strh	r0, [r1, #0]
 8003b5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8003b60:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 8003b64:	9802      	ldr	r0, [sp, #8]
 8003b66:	f840 3c04 	str.w	r3, [r0, #-4]
 8003b6a:	9b03      	ldr	r3, [sp, #12]
 8003b6c:	f840 2c08 	str.w	r2, [r0, #-8]
 8003b70:	330c      	adds	r3, #12
 8003b72:	9303      	str	r3, [sp, #12]
 8003b74:	f100 0308 	add.w	r3, r0, #8
 8003b78:	9302      	str	r3, [sp, #8]
 8003b7a:	9b05      	ldr	r3, [sp, #20]
 8003b7c:	9301      	str	r3, [sp, #4]
 8003b7e:	9b04      	ldr	r3, [sp, #16]
 8003b80:	3b01      	subs	r3, #1
 8003b82:	9304      	str	r3, [sp, #16]
 8003b84:	d180      	bne.n	8003a88 <arm_biquad_cascade_df1_q15+0x40>
 8003b86:	b00b      	add	sp, #44	@ 0x2c
 8003b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b8c:	9905      	ldr	r1, [sp, #20]
 8003b8e:	e7cc      	b.n	8003b2a <arm_biquad_cascade_df1_q15+0xe2>

08003b90 <arm_biquad_cascade_df1_init_q15>:
 8003b90:	b538      	push	{r3, r4, r5, lr}
 8003b92:	461d      	mov	r5, r3
 8003b94:	4604      	mov	r4, r0
 8003b96:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 8003b9a:	6082      	str	r2, [r0, #8]
 8003b9c:	7001      	strb	r1, [r0, #0]
 8003b9e:	00ca      	lsls	r2, r1, #3
 8003ba0:	7303      	strb	r3, [r0, #12]
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	4628      	mov	r0, r5
 8003ba6:	f000 fff4 	bl	8004b92 <memset>
 8003baa:	6065      	str	r5, [r4, #4]
 8003bac:	bd38      	pop	{r3, r4, r5, pc}
 8003bae:	bf00      	nop

08003bb0 <arm_sin_f32>:
 8003bb0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb8:	d42c      	bmi.n	8003c14 <arm_sin_f32+0x64>
 8003bba:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8003c3c <arm_sin_f32+0x8c>
 8003bbe:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003bc2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003bc6:	d432      	bmi.n	8003c2e <arm_sin_f32+0x7e>
 8003bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bcc:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8003c40 <arm_sin_f32+0x90>
 8003bd0:	4a1c      	ldr	r2, [pc, #112]	@ (8003c44 <arm_sin_f32+0x94>)
 8003bd2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003bd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bda:	ee20 0a26 	vmul.f32	s0, s0, s13
 8003bde:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8003be2:	ee17 3a90 	vmov	r3, s15
 8003be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bea:	ee07 3a90 	vmov	s15, r3
 8003bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bf2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8003bf6:	ee70 7a67 	vsub.f32	s15, s0, s15
 8003bfa:	edd1 6a01 	vldr	s13, [r1, #4]
 8003bfe:	ed91 0a00 	vldr	s0, [r1]
 8003c02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c0a:	ee27 0a00 	vmul.f32	s0, s14, s0
 8003c0e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003c12:	4770      	bx	lr
 8003c14:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8003c48 <arm_sin_f32+0x98>
 8003c18:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c20:	da0b      	bge.n	8003c3a <arm_sin_f32+0x8a>
 8003c22:	eddf 7a06 	vldr	s15, [pc, #24]	@ 8003c3c <arm_sin_f32+0x8c>
 8003c26:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003c2a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003c2e:	ee17 3a90 	vmov	r3, s15
 8003c32:	3b01      	subs	r3, #1
 8003c34:	ee07 3a90 	vmov	s15, r3
 8003c38:	e7c6      	b.n	8003bc8 <arm_sin_f32+0x18>
 8003c3a:	4770      	bx	lr
 8003c3c:	3e22f983 	.word	0x3e22f983
 8003c40:	44000000 	.word	0x44000000
 8003c44:	080083a0 	.word	0x080083a0
 8003c48:	b44c02cd 	.word	0xb44c02cd

08003c4c <__cvt>:
 8003c4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c50:	ec57 6b10 	vmov	r6, r7, d0
 8003c54:	2f00      	cmp	r7, #0
 8003c56:	460c      	mov	r4, r1
 8003c58:	4619      	mov	r1, r3
 8003c5a:	463b      	mov	r3, r7
 8003c5c:	bfbb      	ittet	lt
 8003c5e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003c62:	461f      	movlt	r7, r3
 8003c64:	2300      	movge	r3, #0
 8003c66:	232d      	movlt	r3, #45	@ 0x2d
 8003c68:	700b      	strb	r3, [r1, #0]
 8003c6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c6c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003c70:	4691      	mov	r9, r2
 8003c72:	f023 0820 	bic.w	r8, r3, #32
 8003c76:	bfbc      	itt	lt
 8003c78:	4632      	movlt	r2, r6
 8003c7a:	4616      	movlt	r6, r2
 8003c7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003c80:	d005      	beq.n	8003c8e <__cvt+0x42>
 8003c82:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003c86:	d100      	bne.n	8003c8a <__cvt+0x3e>
 8003c88:	3401      	adds	r4, #1
 8003c8a:	2102      	movs	r1, #2
 8003c8c:	e000      	b.n	8003c90 <__cvt+0x44>
 8003c8e:	2103      	movs	r1, #3
 8003c90:	ab03      	add	r3, sp, #12
 8003c92:	9301      	str	r3, [sp, #4]
 8003c94:	ab02      	add	r3, sp, #8
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	ec47 6b10 	vmov	d0, r6, r7
 8003c9c:	4653      	mov	r3, sl
 8003c9e:	4622      	mov	r2, r4
 8003ca0:	f001 f896 	bl	8004dd0 <_dtoa_r>
 8003ca4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003ca8:	4605      	mov	r5, r0
 8003caa:	d119      	bne.n	8003ce0 <__cvt+0x94>
 8003cac:	f019 0f01 	tst.w	r9, #1
 8003cb0:	d00e      	beq.n	8003cd0 <__cvt+0x84>
 8003cb2:	eb00 0904 	add.w	r9, r0, r4
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	2300      	movs	r3, #0
 8003cba:	4630      	mov	r0, r6
 8003cbc:	4639      	mov	r1, r7
 8003cbe:	f7fc ff0b 	bl	8000ad8 <__aeabi_dcmpeq>
 8003cc2:	b108      	cbz	r0, 8003cc8 <__cvt+0x7c>
 8003cc4:	f8cd 900c 	str.w	r9, [sp, #12]
 8003cc8:	2230      	movs	r2, #48	@ 0x30
 8003cca:	9b03      	ldr	r3, [sp, #12]
 8003ccc:	454b      	cmp	r3, r9
 8003cce:	d31e      	bcc.n	8003d0e <__cvt+0xc2>
 8003cd0:	9b03      	ldr	r3, [sp, #12]
 8003cd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003cd4:	1b5b      	subs	r3, r3, r5
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	b004      	add	sp, #16
 8003cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ce0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003ce4:	eb00 0904 	add.w	r9, r0, r4
 8003ce8:	d1e5      	bne.n	8003cb6 <__cvt+0x6a>
 8003cea:	7803      	ldrb	r3, [r0, #0]
 8003cec:	2b30      	cmp	r3, #48	@ 0x30
 8003cee:	d10a      	bne.n	8003d06 <__cvt+0xba>
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	4630      	mov	r0, r6
 8003cf6:	4639      	mov	r1, r7
 8003cf8:	f7fc feee 	bl	8000ad8 <__aeabi_dcmpeq>
 8003cfc:	b918      	cbnz	r0, 8003d06 <__cvt+0xba>
 8003cfe:	f1c4 0401 	rsb	r4, r4, #1
 8003d02:	f8ca 4000 	str.w	r4, [sl]
 8003d06:	f8da 3000 	ldr.w	r3, [sl]
 8003d0a:	4499      	add	r9, r3
 8003d0c:	e7d3      	b.n	8003cb6 <__cvt+0x6a>
 8003d0e:	1c59      	adds	r1, r3, #1
 8003d10:	9103      	str	r1, [sp, #12]
 8003d12:	701a      	strb	r2, [r3, #0]
 8003d14:	e7d9      	b.n	8003cca <__cvt+0x7e>

08003d16 <__exponent>:
 8003d16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d18:	2900      	cmp	r1, #0
 8003d1a:	bfba      	itte	lt
 8003d1c:	4249      	neglt	r1, r1
 8003d1e:	232d      	movlt	r3, #45	@ 0x2d
 8003d20:	232b      	movge	r3, #43	@ 0x2b
 8003d22:	2909      	cmp	r1, #9
 8003d24:	7002      	strb	r2, [r0, #0]
 8003d26:	7043      	strb	r3, [r0, #1]
 8003d28:	dd29      	ble.n	8003d7e <__exponent+0x68>
 8003d2a:	f10d 0307 	add.w	r3, sp, #7
 8003d2e:	461d      	mov	r5, r3
 8003d30:	270a      	movs	r7, #10
 8003d32:	461a      	mov	r2, r3
 8003d34:	fbb1 f6f7 	udiv	r6, r1, r7
 8003d38:	fb07 1416 	mls	r4, r7, r6, r1
 8003d3c:	3430      	adds	r4, #48	@ 0x30
 8003d3e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003d42:	460c      	mov	r4, r1
 8003d44:	2c63      	cmp	r4, #99	@ 0x63
 8003d46:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8003d4a:	4631      	mov	r1, r6
 8003d4c:	dcf1      	bgt.n	8003d32 <__exponent+0x1c>
 8003d4e:	3130      	adds	r1, #48	@ 0x30
 8003d50:	1e94      	subs	r4, r2, #2
 8003d52:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003d56:	1c41      	adds	r1, r0, #1
 8003d58:	4623      	mov	r3, r4
 8003d5a:	42ab      	cmp	r3, r5
 8003d5c:	d30a      	bcc.n	8003d74 <__exponent+0x5e>
 8003d5e:	f10d 0309 	add.w	r3, sp, #9
 8003d62:	1a9b      	subs	r3, r3, r2
 8003d64:	42ac      	cmp	r4, r5
 8003d66:	bf88      	it	hi
 8003d68:	2300      	movhi	r3, #0
 8003d6a:	3302      	adds	r3, #2
 8003d6c:	4403      	add	r3, r0
 8003d6e:	1a18      	subs	r0, r3, r0
 8003d70:	b003      	add	sp, #12
 8003d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d74:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003d78:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003d7c:	e7ed      	b.n	8003d5a <__exponent+0x44>
 8003d7e:	2330      	movs	r3, #48	@ 0x30
 8003d80:	3130      	adds	r1, #48	@ 0x30
 8003d82:	7083      	strb	r3, [r0, #2]
 8003d84:	70c1      	strb	r1, [r0, #3]
 8003d86:	1d03      	adds	r3, r0, #4
 8003d88:	e7f1      	b.n	8003d6e <__exponent+0x58>
	...

08003d8c <_printf_float>:
 8003d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d90:	b08d      	sub	sp, #52	@ 0x34
 8003d92:	460c      	mov	r4, r1
 8003d94:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003d98:	4616      	mov	r6, r2
 8003d9a:	461f      	mov	r7, r3
 8003d9c:	4605      	mov	r5, r0
 8003d9e:	f000 ff01 	bl	8004ba4 <_localeconv_r>
 8003da2:	6803      	ldr	r3, [r0, #0]
 8003da4:	9304      	str	r3, [sp, #16]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fc fa6a 	bl	8000280 <strlen>
 8003dac:	2300      	movs	r3, #0
 8003dae:	930a      	str	r3, [sp, #40]	@ 0x28
 8003db0:	f8d8 3000 	ldr.w	r3, [r8]
 8003db4:	9005      	str	r0, [sp, #20]
 8003db6:	3307      	adds	r3, #7
 8003db8:	f023 0307 	bic.w	r3, r3, #7
 8003dbc:	f103 0208 	add.w	r2, r3, #8
 8003dc0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003dc4:	f8d4 b000 	ldr.w	fp, [r4]
 8003dc8:	f8c8 2000 	str.w	r2, [r8]
 8003dcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003dd0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003dd4:	9307      	str	r3, [sp, #28]
 8003dd6:	f8cd 8018 	str.w	r8, [sp, #24]
 8003dda:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003dde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003de2:	4b9c      	ldr	r3, [pc, #624]	@ (8004054 <_printf_float+0x2c8>)
 8003de4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003de8:	f7fc fea8 	bl	8000b3c <__aeabi_dcmpun>
 8003dec:	bb70      	cbnz	r0, 8003e4c <_printf_float+0xc0>
 8003dee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003df2:	4b98      	ldr	r3, [pc, #608]	@ (8004054 <_printf_float+0x2c8>)
 8003df4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003df8:	f7fc fe82 	bl	8000b00 <__aeabi_dcmple>
 8003dfc:	bb30      	cbnz	r0, 8003e4c <_printf_float+0xc0>
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2300      	movs	r3, #0
 8003e02:	4640      	mov	r0, r8
 8003e04:	4649      	mov	r1, r9
 8003e06:	f7fc fe71 	bl	8000aec <__aeabi_dcmplt>
 8003e0a:	b110      	cbz	r0, 8003e12 <_printf_float+0x86>
 8003e0c:	232d      	movs	r3, #45	@ 0x2d
 8003e0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e12:	4a91      	ldr	r2, [pc, #580]	@ (8004058 <_printf_float+0x2cc>)
 8003e14:	4b91      	ldr	r3, [pc, #580]	@ (800405c <_printf_float+0x2d0>)
 8003e16:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003e1a:	bf94      	ite	ls
 8003e1c:	4690      	movls	r8, r2
 8003e1e:	4698      	movhi	r8, r3
 8003e20:	2303      	movs	r3, #3
 8003e22:	6123      	str	r3, [r4, #16]
 8003e24:	f02b 0304 	bic.w	r3, fp, #4
 8003e28:	6023      	str	r3, [r4, #0]
 8003e2a:	f04f 0900 	mov.w	r9, #0
 8003e2e:	9700      	str	r7, [sp, #0]
 8003e30:	4633      	mov	r3, r6
 8003e32:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003e34:	4621      	mov	r1, r4
 8003e36:	4628      	mov	r0, r5
 8003e38:	f000 f9d2 	bl	80041e0 <_printf_common>
 8003e3c:	3001      	adds	r0, #1
 8003e3e:	f040 808d 	bne.w	8003f5c <_printf_float+0x1d0>
 8003e42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e46:	b00d      	add	sp, #52	@ 0x34
 8003e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e4c:	4642      	mov	r2, r8
 8003e4e:	464b      	mov	r3, r9
 8003e50:	4640      	mov	r0, r8
 8003e52:	4649      	mov	r1, r9
 8003e54:	f7fc fe72 	bl	8000b3c <__aeabi_dcmpun>
 8003e58:	b140      	cbz	r0, 8003e6c <_printf_float+0xe0>
 8003e5a:	464b      	mov	r3, r9
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	bfbc      	itt	lt
 8003e60:	232d      	movlt	r3, #45	@ 0x2d
 8003e62:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003e66:	4a7e      	ldr	r2, [pc, #504]	@ (8004060 <_printf_float+0x2d4>)
 8003e68:	4b7e      	ldr	r3, [pc, #504]	@ (8004064 <_printf_float+0x2d8>)
 8003e6a:	e7d4      	b.n	8003e16 <_printf_float+0x8a>
 8003e6c:	6863      	ldr	r3, [r4, #4]
 8003e6e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003e72:	9206      	str	r2, [sp, #24]
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	d13b      	bne.n	8003ef0 <_printf_float+0x164>
 8003e78:	2306      	movs	r3, #6
 8003e7a:	6063      	str	r3, [r4, #4]
 8003e7c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003e80:	2300      	movs	r3, #0
 8003e82:	6022      	str	r2, [r4, #0]
 8003e84:	9303      	str	r3, [sp, #12]
 8003e86:	ab0a      	add	r3, sp, #40	@ 0x28
 8003e88:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003e8c:	ab09      	add	r3, sp, #36	@ 0x24
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	6861      	ldr	r1, [r4, #4]
 8003e92:	ec49 8b10 	vmov	d0, r8, r9
 8003e96:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003e9a:	4628      	mov	r0, r5
 8003e9c:	f7ff fed6 	bl	8003c4c <__cvt>
 8003ea0:	9b06      	ldr	r3, [sp, #24]
 8003ea2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003ea4:	2b47      	cmp	r3, #71	@ 0x47
 8003ea6:	4680      	mov	r8, r0
 8003ea8:	d129      	bne.n	8003efe <_printf_float+0x172>
 8003eaa:	1cc8      	adds	r0, r1, #3
 8003eac:	db02      	blt.n	8003eb4 <_printf_float+0x128>
 8003eae:	6863      	ldr	r3, [r4, #4]
 8003eb0:	4299      	cmp	r1, r3
 8003eb2:	dd41      	ble.n	8003f38 <_printf_float+0x1ac>
 8003eb4:	f1aa 0a02 	sub.w	sl, sl, #2
 8003eb8:	fa5f fa8a 	uxtb.w	sl, sl
 8003ebc:	3901      	subs	r1, #1
 8003ebe:	4652      	mov	r2, sl
 8003ec0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003ec4:	9109      	str	r1, [sp, #36]	@ 0x24
 8003ec6:	f7ff ff26 	bl	8003d16 <__exponent>
 8003eca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003ecc:	1813      	adds	r3, r2, r0
 8003ece:	2a01      	cmp	r2, #1
 8003ed0:	4681      	mov	r9, r0
 8003ed2:	6123      	str	r3, [r4, #16]
 8003ed4:	dc02      	bgt.n	8003edc <_printf_float+0x150>
 8003ed6:	6822      	ldr	r2, [r4, #0]
 8003ed8:	07d2      	lsls	r2, r2, #31
 8003eda:	d501      	bpl.n	8003ee0 <_printf_float+0x154>
 8003edc:	3301      	adds	r3, #1
 8003ede:	6123      	str	r3, [r4, #16]
 8003ee0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0a2      	beq.n	8003e2e <_printf_float+0xa2>
 8003ee8:	232d      	movs	r3, #45	@ 0x2d
 8003eea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003eee:	e79e      	b.n	8003e2e <_printf_float+0xa2>
 8003ef0:	9a06      	ldr	r2, [sp, #24]
 8003ef2:	2a47      	cmp	r2, #71	@ 0x47
 8003ef4:	d1c2      	bne.n	8003e7c <_printf_float+0xf0>
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1c0      	bne.n	8003e7c <_printf_float+0xf0>
 8003efa:	2301      	movs	r3, #1
 8003efc:	e7bd      	b.n	8003e7a <_printf_float+0xee>
 8003efe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003f02:	d9db      	bls.n	8003ebc <_printf_float+0x130>
 8003f04:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003f08:	d118      	bne.n	8003f3c <_printf_float+0x1b0>
 8003f0a:	2900      	cmp	r1, #0
 8003f0c:	6863      	ldr	r3, [r4, #4]
 8003f0e:	dd0b      	ble.n	8003f28 <_printf_float+0x19c>
 8003f10:	6121      	str	r1, [r4, #16]
 8003f12:	b913      	cbnz	r3, 8003f1a <_printf_float+0x18e>
 8003f14:	6822      	ldr	r2, [r4, #0]
 8003f16:	07d0      	lsls	r0, r2, #31
 8003f18:	d502      	bpl.n	8003f20 <_printf_float+0x194>
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	440b      	add	r3, r1
 8003f1e:	6123      	str	r3, [r4, #16]
 8003f20:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003f22:	f04f 0900 	mov.w	r9, #0
 8003f26:	e7db      	b.n	8003ee0 <_printf_float+0x154>
 8003f28:	b913      	cbnz	r3, 8003f30 <_printf_float+0x1a4>
 8003f2a:	6822      	ldr	r2, [r4, #0]
 8003f2c:	07d2      	lsls	r2, r2, #31
 8003f2e:	d501      	bpl.n	8003f34 <_printf_float+0x1a8>
 8003f30:	3302      	adds	r3, #2
 8003f32:	e7f4      	b.n	8003f1e <_printf_float+0x192>
 8003f34:	2301      	movs	r3, #1
 8003f36:	e7f2      	b.n	8003f1e <_printf_float+0x192>
 8003f38:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003f3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f3e:	4299      	cmp	r1, r3
 8003f40:	db05      	blt.n	8003f4e <_printf_float+0x1c2>
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	6121      	str	r1, [r4, #16]
 8003f46:	07d8      	lsls	r0, r3, #31
 8003f48:	d5ea      	bpl.n	8003f20 <_printf_float+0x194>
 8003f4a:	1c4b      	adds	r3, r1, #1
 8003f4c:	e7e7      	b.n	8003f1e <_printf_float+0x192>
 8003f4e:	2900      	cmp	r1, #0
 8003f50:	bfd4      	ite	le
 8003f52:	f1c1 0202 	rsble	r2, r1, #2
 8003f56:	2201      	movgt	r2, #1
 8003f58:	4413      	add	r3, r2
 8003f5a:	e7e0      	b.n	8003f1e <_printf_float+0x192>
 8003f5c:	6823      	ldr	r3, [r4, #0]
 8003f5e:	055a      	lsls	r2, r3, #21
 8003f60:	d407      	bmi.n	8003f72 <_printf_float+0x1e6>
 8003f62:	6923      	ldr	r3, [r4, #16]
 8003f64:	4642      	mov	r2, r8
 8003f66:	4631      	mov	r1, r6
 8003f68:	4628      	mov	r0, r5
 8003f6a:	47b8      	blx	r7
 8003f6c:	3001      	adds	r0, #1
 8003f6e:	d12b      	bne.n	8003fc8 <_printf_float+0x23c>
 8003f70:	e767      	b.n	8003e42 <_printf_float+0xb6>
 8003f72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003f76:	f240 80dd 	bls.w	8004134 <_printf_float+0x3a8>
 8003f7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2300      	movs	r3, #0
 8003f82:	f7fc fda9 	bl	8000ad8 <__aeabi_dcmpeq>
 8003f86:	2800      	cmp	r0, #0
 8003f88:	d033      	beq.n	8003ff2 <_printf_float+0x266>
 8003f8a:	4a37      	ldr	r2, [pc, #220]	@ (8004068 <_printf_float+0x2dc>)
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	4631      	mov	r1, r6
 8003f90:	4628      	mov	r0, r5
 8003f92:	47b8      	blx	r7
 8003f94:	3001      	adds	r0, #1
 8003f96:	f43f af54 	beq.w	8003e42 <_printf_float+0xb6>
 8003f9a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003f9e:	4543      	cmp	r3, r8
 8003fa0:	db02      	blt.n	8003fa8 <_printf_float+0x21c>
 8003fa2:	6823      	ldr	r3, [r4, #0]
 8003fa4:	07d8      	lsls	r0, r3, #31
 8003fa6:	d50f      	bpl.n	8003fc8 <_printf_float+0x23c>
 8003fa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fac:	4631      	mov	r1, r6
 8003fae:	4628      	mov	r0, r5
 8003fb0:	47b8      	blx	r7
 8003fb2:	3001      	adds	r0, #1
 8003fb4:	f43f af45 	beq.w	8003e42 <_printf_float+0xb6>
 8003fb8:	f04f 0900 	mov.w	r9, #0
 8003fbc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003fc0:	f104 0a1a 	add.w	sl, r4, #26
 8003fc4:	45c8      	cmp	r8, r9
 8003fc6:	dc09      	bgt.n	8003fdc <_printf_float+0x250>
 8003fc8:	6823      	ldr	r3, [r4, #0]
 8003fca:	079b      	lsls	r3, r3, #30
 8003fcc:	f100 8103 	bmi.w	80041d6 <_printf_float+0x44a>
 8003fd0:	68e0      	ldr	r0, [r4, #12]
 8003fd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003fd4:	4298      	cmp	r0, r3
 8003fd6:	bfb8      	it	lt
 8003fd8:	4618      	movlt	r0, r3
 8003fda:	e734      	b.n	8003e46 <_printf_float+0xba>
 8003fdc:	2301      	movs	r3, #1
 8003fde:	4652      	mov	r2, sl
 8003fe0:	4631      	mov	r1, r6
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	47b8      	blx	r7
 8003fe6:	3001      	adds	r0, #1
 8003fe8:	f43f af2b 	beq.w	8003e42 <_printf_float+0xb6>
 8003fec:	f109 0901 	add.w	r9, r9, #1
 8003ff0:	e7e8      	b.n	8003fc4 <_printf_float+0x238>
 8003ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	dc39      	bgt.n	800406c <_printf_float+0x2e0>
 8003ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8004068 <_printf_float+0x2dc>)
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	4631      	mov	r1, r6
 8003ffe:	4628      	mov	r0, r5
 8004000:	47b8      	blx	r7
 8004002:	3001      	adds	r0, #1
 8004004:	f43f af1d 	beq.w	8003e42 <_printf_float+0xb6>
 8004008:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800400c:	ea59 0303 	orrs.w	r3, r9, r3
 8004010:	d102      	bne.n	8004018 <_printf_float+0x28c>
 8004012:	6823      	ldr	r3, [r4, #0]
 8004014:	07d9      	lsls	r1, r3, #31
 8004016:	d5d7      	bpl.n	8003fc8 <_printf_float+0x23c>
 8004018:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800401c:	4631      	mov	r1, r6
 800401e:	4628      	mov	r0, r5
 8004020:	47b8      	blx	r7
 8004022:	3001      	adds	r0, #1
 8004024:	f43f af0d 	beq.w	8003e42 <_printf_float+0xb6>
 8004028:	f04f 0a00 	mov.w	sl, #0
 800402c:	f104 0b1a 	add.w	fp, r4, #26
 8004030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004032:	425b      	negs	r3, r3
 8004034:	4553      	cmp	r3, sl
 8004036:	dc01      	bgt.n	800403c <_printf_float+0x2b0>
 8004038:	464b      	mov	r3, r9
 800403a:	e793      	b.n	8003f64 <_printf_float+0x1d8>
 800403c:	2301      	movs	r3, #1
 800403e:	465a      	mov	r2, fp
 8004040:	4631      	mov	r1, r6
 8004042:	4628      	mov	r0, r5
 8004044:	47b8      	blx	r7
 8004046:	3001      	adds	r0, #1
 8004048:	f43f aefb 	beq.w	8003e42 <_printf_float+0xb6>
 800404c:	f10a 0a01 	add.w	sl, sl, #1
 8004050:	e7ee      	b.n	8004030 <_printf_float+0x2a4>
 8004052:	bf00      	nop
 8004054:	7fefffff 	.word	0x7fefffff
 8004058:	08008ba4 	.word	0x08008ba4
 800405c:	08008ba8 	.word	0x08008ba8
 8004060:	08008bac 	.word	0x08008bac
 8004064:	08008bb0 	.word	0x08008bb0
 8004068:	08008bb4 	.word	0x08008bb4
 800406c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800406e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004072:	4553      	cmp	r3, sl
 8004074:	bfa8      	it	ge
 8004076:	4653      	movge	r3, sl
 8004078:	2b00      	cmp	r3, #0
 800407a:	4699      	mov	r9, r3
 800407c:	dc36      	bgt.n	80040ec <_printf_float+0x360>
 800407e:	f04f 0b00 	mov.w	fp, #0
 8004082:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004086:	f104 021a 	add.w	r2, r4, #26
 800408a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800408c:	9306      	str	r3, [sp, #24]
 800408e:	eba3 0309 	sub.w	r3, r3, r9
 8004092:	455b      	cmp	r3, fp
 8004094:	dc31      	bgt.n	80040fa <_printf_float+0x36e>
 8004096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004098:	459a      	cmp	sl, r3
 800409a:	dc3a      	bgt.n	8004112 <_printf_float+0x386>
 800409c:	6823      	ldr	r3, [r4, #0]
 800409e:	07da      	lsls	r2, r3, #31
 80040a0:	d437      	bmi.n	8004112 <_printf_float+0x386>
 80040a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040a4:	ebaa 0903 	sub.w	r9, sl, r3
 80040a8:	9b06      	ldr	r3, [sp, #24]
 80040aa:	ebaa 0303 	sub.w	r3, sl, r3
 80040ae:	4599      	cmp	r9, r3
 80040b0:	bfa8      	it	ge
 80040b2:	4699      	movge	r9, r3
 80040b4:	f1b9 0f00 	cmp.w	r9, #0
 80040b8:	dc33      	bgt.n	8004122 <_printf_float+0x396>
 80040ba:	f04f 0800 	mov.w	r8, #0
 80040be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80040c2:	f104 0b1a 	add.w	fp, r4, #26
 80040c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040c8:	ebaa 0303 	sub.w	r3, sl, r3
 80040cc:	eba3 0309 	sub.w	r3, r3, r9
 80040d0:	4543      	cmp	r3, r8
 80040d2:	f77f af79 	ble.w	8003fc8 <_printf_float+0x23c>
 80040d6:	2301      	movs	r3, #1
 80040d8:	465a      	mov	r2, fp
 80040da:	4631      	mov	r1, r6
 80040dc:	4628      	mov	r0, r5
 80040de:	47b8      	blx	r7
 80040e0:	3001      	adds	r0, #1
 80040e2:	f43f aeae 	beq.w	8003e42 <_printf_float+0xb6>
 80040e6:	f108 0801 	add.w	r8, r8, #1
 80040ea:	e7ec      	b.n	80040c6 <_printf_float+0x33a>
 80040ec:	4642      	mov	r2, r8
 80040ee:	4631      	mov	r1, r6
 80040f0:	4628      	mov	r0, r5
 80040f2:	47b8      	blx	r7
 80040f4:	3001      	adds	r0, #1
 80040f6:	d1c2      	bne.n	800407e <_printf_float+0x2f2>
 80040f8:	e6a3      	b.n	8003e42 <_printf_float+0xb6>
 80040fa:	2301      	movs	r3, #1
 80040fc:	4631      	mov	r1, r6
 80040fe:	4628      	mov	r0, r5
 8004100:	9206      	str	r2, [sp, #24]
 8004102:	47b8      	blx	r7
 8004104:	3001      	adds	r0, #1
 8004106:	f43f ae9c 	beq.w	8003e42 <_printf_float+0xb6>
 800410a:	9a06      	ldr	r2, [sp, #24]
 800410c:	f10b 0b01 	add.w	fp, fp, #1
 8004110:	e7bb      	b.n	800408a <_printf_float+0x2fe>
 8004112:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004116:	4631      	mov	r1, r6
 8004118:	4628      	mov	r0, r5
 800411a:	47b8      	blx	r7
 800411c:	3001      	adds	r0, #1
 800411e:	d1c0      	bne.n	80040a2 <_printf_float+0x316>
 8004120:	e68f      	b.n	8003e42 <_printf_float+0xb6>
 8004122:	9a06      	ldr	r2, [sp, #24]
 8004124:	464b      	mov	r3, r9
 8004126:	4442      	add	r2, r8
 8004128:	4631      	mov	r1, r6
 800412a:	4628      	mov	r0, r5
 800412c:	47b8      	blx	r7
 800412e:	3001      	adds	r0, #1
 8004130:	d1c3      	bne.n	80040ba <_printf_float+0x32e>
 8004132:	e686      	b.n	8003e42 <_printf_float+0xb6>
 8004134:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004138:	f1ba 0f01 	cmp.w	sl, #1
 800413c:	dc01      	bgt.n	8004142 <_printf_float+0x3b6>
 800413e:	07db      	lsls	r3, r3, #31
 8004140:	d536      	bpl.n	80041b0 <_printf_float+0x424>
 8004142:	2301      	movs	r3, #1
 8004144:	4642      	mov	r2, r8
 8004146:	4631      	mov	r1, r6
 8004148:	4628      	mov	r0, r5
 800414a:	47b8      	blx	r7
 800414c:	3001      	adds	r0, #1
 800414e:	f43f ae78 	beq.w	8003e42 <_printf_float+0xb6>
 8004152:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004156:	4631      	mov	r1, r6
 8004158:	4628      	mov	r0, r5
 800415a:	47b8      	blx	r7
 800415c:	3001      	adds	r0, #1
 800415e:	f43f ae70 	beq.w	8003e42 <_printf_float+0xb6>
 8004162:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004166:	2200      	movs	r2, #0
 8004168:	2300      	movs	r3, #0
 800416a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800416e:	f7fc fcb3 	bl	8000ad8 <__aeabi_dcmpeq>
 8004172:	b9c0      	cbnz	r0, 80041a6 <_printf_float+0x41a>
 8004174:	4653      	mov	r3, sl
 8004176:	f108 0201 	add.w	r2, r8, #1
 800417a:	4631      	mov	r1, r6
 800417c:	4628      	mov	r0, r5
 800417e:	47b8      	blx	r7
 8004180:	3001      	adds	r0, #1
 8004182:	d10c      	bne.n	800419e <_printf_float+0x412>
 8004184:	e65d      	b.n	8003e42 <_printf_float+0xb6>
 8004186:	2301      	movs	r3, #1
 8004188:	465a      	mov	r2, fp
 800418a:	4631      	mov	r1, r6
 800418c:	4628      	mov	r0, r5
 800418e:	47b8      	blx	r7
 8004190:	3001      	adds	r0, #1
 8004192:	f43f ae56 	beq.w	8003e42 <_printf_float+0xb6>
 8004196:	f108 0801 	add.w	r8, r8, #1
 800419a:	45d0      	cmp	r8, sl
 800419c:	dbf3      	blt.n	8004186 <_printf_float+0x3fa>
 800419e:	464b      	mov	r3, r9
 80041a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80041a4:	e6df      	b.n	8003f66 <_printf_float+0x1da>
 80041a6:	f04f 0800 	mov.w	r8, #0
 80041aa:	f104 0b1a 	add.w	fp, r4, #26
 80041ae:	e7f4      	b.n	800419a <_printf_float+0x40e>
 80041b0:	2301      	movs	r3, #1
 80041b2:	4642      	mov	r2, r8
 80041b4:	e7e1      	b.n	800417a <_printf_float+0x3ee>
 80041b6:	2301      	movs	r3, #1
 80041b8:	464a      	mov	r2, r9
 80041ba:	4631      	mov	r1, r6
 80041bc:	4628      	mov	r0, r5
 80041be:	47b8      	blx	r7
 80041c0:	3001      	adds	r0, #1
 80041c2:	f43f ae3e 	beq.w	8003e42 <_printf_float+0xb6>
 80041c6:	f108 0801 	add.w	r8, r8, #1
 80041ca:	68e3      	ldr	r3, [r4, #12]
 80041cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80041ce:	1a5b      	subs	r3, r3, r1
 80041d0:	4543      	cmp	r3, r8
 80041d2:	dcf0      	bgt.n	80041b6 <_printf_float+0x42a>
 80041d4:	e6fc      	b.n	8003fd0 <_printf_float+0x244>
 80041d6:	f04f 0800 	mov.w	r8, #0
 80041da:	f104 0919 	add.w	r9, r4, #25
 80041de:	e7f4      	b.n	80041ca <_printf_float+0x43e>

080041e0 <_printf_common>:
 80041e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041e4:	4616      	mov	r6, r2
 80041e6:	4698      	mov	r8, r3
 80041e8:	688a      	ldr	r2, [r1, #8]
 80041ea:	690b      	ldr	r3, [r1, #16]
 80041ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041f0:	4293      	cmp	r3, r2
 80041f2:	bfb8      	it	lt
 80041f4:	4613      	movlt	r3, r2
 80041f6:	6033      	str	r3, [r6, #0]
 80041f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80041fc:	4607      	mov	r7, r0
 80041fe:	460c      	mov	r4, r1
 8004200:	b10a      	cbz	r2, 8004206 <_printf_common+0x26>
 8004202:	3301      	adds	r3, #1
 8004204:	6033      	str	r3, [r6, #0]
 8004206:	6823      	ldr	r3, [r4, #0]
 8004208:	0699      	lsls	r1, r3, #26
 800420a:	bf42      	ittt	mi
 800420c:	6833      	ldrmi	r3, [r6, #0]
 800420e:	3302      	addmi	r3, #2
 8004210:	6033      	strmi	r3, [r6, #0]
 8004212:	6825      	ldr	r5, [r4, #0]
 8004214:	f015 0506 	ands.w	r5, r5, #6
 8004218:	d106      	bne.n	8004228 <_printf_common+0x48>
 800421a:	f104 0a19 	add.w	sl, r4, #25
 800421e:	68e3      	ldr	r3, [r4, #12]
 8004220:	6832      	ldr	r2, [r6, #0]
 8004222:	1a9b      	subs	r3, r3, r2
 8004224:	42ab      	cmp	r3, r5
 8004226:	dc26      	bgt.n	8004276 <_printf_common+0x96>
 8004228:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800422c:	6822      	ldr	r2, [r4, #0]
 800422e:	3b00      	subs	r3, #0
 8004230:	bf18      	it	ne
 8004232:	2301      	movne	r3, #1
 8004234:	0692      	lsls	r2, r2, #26
 8004236:	d42b      	bmi.n	8004290 <_printf_common+0xb0>
 8004238:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800423c:	4641      	mov	r1, r8
 800423e:	4638      	mov	r0, r7
 8004240:	47c8      	blx	r9
 8004242:	3001      	adds	r0, #1
 8004244:	d01e      	beq.n	8004284 <_printf_common+0xa4>
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	6922      	ldr	r2, [r4, #16]
 800424a:	f003 0306 	and.w	r3, r3, #6
 800424e:	2b04      	cmp	r3, #4
 8004250:	bf02      	ittt	eq
 8004252:	68e5      	ldreq	r5, [r4, #12]
 8004254:	6833      	ldreq	r3, [r6, #0]
 8004256:	1aed      	subeq	r5, r5, r3
 8004258:	68a3      	ldr	r3, [r4, #8]
 800425a:	bf0c      	ite	eq
 800425c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004260:	2500      	movne	r5, #0
 8004262:	4293      	cmp	r3, r2
 8004264:	bfc4      	itt	gt
 8004266:	1a9b      	subgt	r3, r3, r2
 8004268:	18ed      	addgt	r5, r5, r3
 800426a:	2600      	movs	r6, #0
 800426c:	341a      	adds	r4, #26
 800426e:	42b5      	cmp	r5, r6
 8004270:	d11a      	bne.n	80042a8 <_printf_common+0xc8>
 8004272:	2000      	movs	r0, #0
 8004274:	e008      	b.n	8004288 <_printf_common+0xa8>
 8004276:	2301      	movs	r3, #1
 8004278:	4652      	mov	r2, sl
 800427a:	4641      	mov	r1, r8
 800427c:	4638      	mov	r0, r7
 800427e:	47c8      	blx	r9
 8004280:	3001      	adds	r0, #1
 8004282:	d103      	bne.n	800428c <_printf_common+0xac>
 8004284:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800428c:	3501      	adds	r5, #1
 800428e:	e7c6      	b.n	800421e <_printf_common+0x3e>
 8004290:	18e1      	adds	r1, r4, r3
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	2030      	movs	r0, #48	@ 0x30
 8004296:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800429a:	4422      	add	r2, r4
 800429c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042a4:	3302      	adds	r3, #2
 80042a6:	e7c7      	b.n	8004238 <_printf_common+0x58>
 80042a8:	2301      	movs	r3, #1
 80042aa:	4622      	mov	r2, r4
 80042ac:	4641      	mov	r1, r8
 80042ae:	4638      	mov	r0, r7
 80042b0:	47c8      	blx	r9
 80042b2:	3001      	adds	r0, #1
 80042b4:	d0e6      	beq.n	8004284 <_printf_common+0xa4>
 80042b6:	3601      	adds	r6, #1
 80042b8:	e7d9      	b.n	800426e <_printf_common+0x8e>
	...

080042bc <_printf_i>:
 80042bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042c0:	7e0f      	ldrb	r7, [r1, #24]
 80042c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042c4:	2f78      	cmp	r7, #120	@ 0x78
 80042c6:	4691      	mov	r9, r2
 80042c8:	4680      	mov	r8, r0
 80042ca:	460c      	mov	r4, r1
 80042cc:	469a      	mov	sl, r3
 80042ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042d2:	d807      	bhi.n	80042e4 <_printf_i+0x28>
 80042d4:	2f62      	cmp	r7, #98	@ 0x62
 80042d6:	d80a      	bhi.n	80042ee <_printf_i+0x32>
 80042d8:	2f00      	cmp	r7, #0
 80042da:	f000 80d2 	beq.w	8004482 <_printf_i+0x1c6>
 80042de:	2f58      	cmp	r7, #88	@ 0x58
 80042e0:	f000 80b9 	beq.w	8004456 <_printf_i+0x19a>
 80042e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042ec:	e03a      	b.n	8004364 <_printf_i+0xa8>
 80042ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042f2:	2b15      	cmp	r3, #21
 80042f4:	d8f6      	bhi.n	80042e4 <_printf_i+0x28>
 80042f6:	a101      	add	r1, pc, #4	@ (adr r1, 80042fc <_printf_i+0x40>)
 80042f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042fc:	08004355 	.word	0x08004355
 8004300:	08004369 	.word	0x08004369
 8004304:	080042e5 	.word	0x080042e5
 8004308:	080042e5 	.word	0x080042e5
 800430c:	080042e5 	.word	0x080042e5
 8004310:	080042e5 	.word	0x080042e5
 8004314:	08004369 	.word	0x08004369
 8004318:	080042e5 	.word	0x080042e5
 800431c:	080042e5 	.word	0x080042e5
 8004320:	080042e5 	.word	0x080042e5
 8004324:	080042e5 	.word	0x080042e5
 8004328:	08004469 	.word	0x08004469
 800432c:	08004393 	.word	0x08004393
 8004330:	08004423 	.word	0x08004423
 8004334:	080042e5 	.word	0x080042e5
 8004338:	080042e5 	.word	0x080042e5
 800433c:	0800448b 	.word	0x0800448b
 8004340:	080042e5 	.word	0x080042e5
 8004344:	08004393 	.word	0x08004393
 8004348:	080042e5 	.word	0x080042e5
 800434c:	080042e5 	.word	0x080042e5
 8004350:	0800442b 	.word	0x0800442b
 8004354:	6833      	ldr	r3, [r6, #0]
 8004356:	1d1a      	adds	r2, r3, #4
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6032      	str	r2, [r6, #0]
 800435c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004360:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004364:	2301      	movs	r3, #1
 8004366:	e09d      	b.n	80044a4 <_printf_i+0x1e8>
 8004368:	6833      	ldr	r3, [r6, #0]
 800436a:	6820      	ldr	r0, [r4, #0]
 800436c:	1d19      	adds	r1, r3, #4
 800436e:	6031      	str	r1, [r6, #0]
 8004370:	0606      	lsls	r6, r0, #24
 8004372:	d501      	bpl.n	8004378 <_printf_i+0xbc>
 8004374:	681d      	ldr	r5, [r3, #0]
 8004376:	e003      	b.n	8004380 <_printf_i+0xc4>
 8004378:	0645      	lsls	r5, r0, #25
 800437a:	d5fb      	bpl.n	8004374 <_printf_i+0xb8>
 800437c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004380:	2d00      	cmp	r5, #0
 8004382:	da03      	bge.n	800438c <_printf_i+0xd0>
 8004384:	232d      	movs	r3, #45	@ 0x2d
 8004386:	426d      	negs	r5, r5
 8004388:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800438c:	4859      	ldr	r0, [pc, #356]	@ (80044f4 <_printf_i+0x238>)
 800438e:	230a      	movs	r3, #10
 8004390:	e011      	b.n	80043b6 <_printf_i+0xfa>
 8004392:	6821      	ldr	r1, [r4, #0]
 8004394:	6833      	ldr	r3, [r6, #0]
 8004396:	0608      	lsls	r0, r1, #24
 8004398:	f853 5b04 	ldr.w	r5, [r3], #4
 800439c:	d402      	bmi.n	80043a4 <_printf_i+0xe8>
 800439e:	0649      	lsls	r1, r1, #25
 80043a0:	bf48      	it	mi
 80043a2:	b2ad      	uxthmi	r5, r5
 80043a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80043a6:	4853      	ldr	r0, [pc, #332]	@ (80044f4 <_printf_i+0x238>)
 80043a8:	6033      	str	r3, [r6, #0]
 80043aa:	bf14      	ite	ne
 80043ac:	230a      	movne	r3, #10
 80043ae:	2308      	moveq	r3, #8
 80043b0:	2100      	movs	r1, #0
 80043b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043b6:	6866      	ldr	r6, [r4, #4]
 80043b8:	60a6      	str	r6, [r4, #8]
 80043ba:	2e00      	cmp	r6, #0
 80043bc:	bfa2      	ittt	ge
 80043be:	6821      	ldrge	r1, [r4, #0]
 80043c0:	f021 0104 	bicge.w	r1, r1, #4
 80043c4:	6021      	strge	r1, [r4, #0]
 80043c6:	b90d      	cbnz	r5, 80043cc <_printf_i+0x110>
 80043c8:	2e00      	cmp	r6, #0
 80043ca:	d04b      	beq.n	8004464 <_printf_i+0x1a8>
 80043cc:	4616      	mov	r6, r2
 80043ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80043d2:	fb03 5711 	mls	r7, r3, r1, r5
 80043d6:	5dc7      	ldrb	r7, [r0, r7]
 80043d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043dc:	462f      	mov	r7, r5
 80043de:	42bb      	cmp	r3, r7
 80043e0:	460d      	mov	r5, r1
 80043e2:	d9f4      	bls.n	80043ce <_printf_i+0x112>
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d10b      	bne.n	8004400 <_printf_i+0x144>
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	07df      	lsls	r7, r3, #31
 80043ec:	d508      	bpl.n	8004400 <_printf_i+0x144>
 80043ee:	6923      	ldr	r3, [r4, #16]
 80043f0:	6861      	ldr	r1, [r4, #4]
 80043f2:	4299      	cmp	r1, r3
 80043f4:	bfde      	ittt	le
 80043f6:	2330      	movle	r3, #48	@ 0x30
 80043f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043fc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004400:	1b92      	subs	r2, r2, r6
 8004402:	6122      	str	r2, [r4, #16]
 8004404:	f8cd a000 	str.w	sl, [sp]
 8004408:	464b      	mov	r3, r9
 800440a:	aa03      	add	r2, sp, #12
 800440c:	4621      	mov	r1, r4
 800440e:	4640      	mov	r0, r8
 8004410:	f7ff fee6 	bl	80041e0 <_printf_common>
 8004414:	3001      	adds	r0, #1
 8004416:	d14a      	bne.n	80044ae <_printf_i+0x1f2>
 8004418:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800441c:	b004      	add	sp, #16
 800441e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	f043 0320 	orr.w	r3, r3, #32
 8004428:	6023      	str	r3, [r4, #0]
 800442a:	4833      	ldr	r0, [pc, #204]	@ (80044f8 <_printf_i+0x23c>)
 800442c:	2778      	movs	r7, #120	@ 0x78
 800442e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	6831      	ldr	r1, [r6, #0]
 8004436:	061f      	lsls	r7, r3, #24
 8004438:	f851 5b04 	ldr.w	r5, [r1], #4
 800443c:	d402      	bmi.n	8004444 <_printf_i+0x188>
 800443e:	065f      	lsls	r7, r3, #25
 8004440:	bf48      	it	mi
 8004442:	b2ad      	uxthmi	r5, r5
 8004444:	6031      	str	r1, [r6, #0]
 8004446:	07d9      	lsls	r1, r3, #31
 8004448:	bf44      	itt	mi
 800444a:	f043 0320 	orrmi.w	r3, r3, #32
 800444e:	6023      	strmi	r3, [r4, #0]
 8004450:	b11d      	cbz	r5, 800445a <_printf_i+0x19e>
 8004452:	2310      	movs	r3, #16
 8004454:	e7ac      	b.n	80043b0 <_printf_i+0xf4>
 8004456:	4827      	ldr	r0, [pc, #156]	@ (80044f4 <_printf_i+0x238>)
 8004458:	e7e9      	b.n	800442e <_printf_i+0x172>
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	f023 0320 	bic.w	r3, r3, #32
 8004460:	6023      	str	r3, [r4, #0]
 8004462:	e7f6      	b.n	8004452 <_printf_i+0x196>
 8004464:	4616      	mov	r6, r2
 8004466:	e7bd      	b.n	80043e4 <_printf_i+0x128>
 8004468:	6833      	ldr	r3, [r6, #0]
 800446a:	6825      	ldr	r5, [r4, #0]
 800446c:	6961      	ldr	r1, [r4, #20]
 800446e:	1d18      	adds	r0, r3, #4
 8004470:	6030      	str	r0, [r6, #0]
 8004472:	062e      	lsls	r6, r5, #24
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	d501      	bpl.n	800447c <_printf_i+0x1c0>
 8004478:	6019      	str	r1, [r3, #0]
 800447a:	e002      	b.n	8004482 <_printf_i+0x1c6>
 800447c:	0668      	lsls	r0, r5, #25
 800447e:	d5fb      	bpl.n	8004478 <_printf_i+0x1bc>
 8004480:	8019      	strh	r1, [r3, #0]
 8004482:	2300      	movs	r3, #0
 8004484:	6123      	str	r3, [r4, #16]
 8004486:	4616      	mov	r6, r2
 8004488:	e7bc      	b.n	8004404 <_printf_i+0x148>
 800448a:	6833      	ldr	r3, [r6, #0]
 800448c:	1d1a      	adds	r2, r3, #4
 800448e:	6032      	str	r2, [r6, #0]
 8004490:	681e      	ldr	r6, [r3, #0]
 8004492:	6862      	ldr	r2, [r4, #4]
 8004494:	2100      	movs	r1, #0
 8004496:	4630      	mov	r0, r6
 8004498:	f7fb fea2 	bl	80001e0 <memchr>
 800449c:	b108      	cbz	r0, 80044a2 <_printf_i+0x1e6>
 800449e:	1b80      	subs	r0, r0, r6
 80044a0:	6060      	str	r0, [r4, #4]
 80044a2:	6863      	ldr	r3, [r4, #4]
 80044a4:	6123      	str	r3, [r4, #16]
 80044a6:	2300      	movs	r3, #0
 80044a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044ac:	e7aa      	b.n	8004404 <_printf_i+0x148>
 80044ae:	6923      	ldr	r3, [r4, #16]
 80044b0:	4632      	mov	r2, r6
 80044b2:	4649      	mov	r1, r9
 80044b4:	4640      	mov	r0, r8
 80044b6:	47d0      	blx	sl
 80044b8:	3001      	adds	r0, #1
 80044ba:	d0ad      	beq.n	8004418 <_printf_i+0x15c>
 80044bc:	6823      	ldr	r3, [r4, #0]
 80044be:	079b      	lsls	r3, r3, #30
 80044c0:	d413      	bmi.n	80044ea <_printf_i+0x22e>
 80044c2:	68e0      	ldr	r0, [r4, #12]
 80044c4:	9b03      	ldr	r3, [sp, #12]
 80044c6:	4298      	cmp	r0, r3
 80044c8:	bfb8      	it	lt
 80044ca:	4618      	movlt	r0, r3
 80044cc:	e7a6      	b.n	800441c <_printf_i+0x160>
 80044ce:	2301      	movs	r3, #1
 80044d0:	4632      	mov	r2, r6
 80044d2:	4649      	mov	r1, r9
 80044d4:	4640      	mov	r0, r8
 80044d6:	47d0      	blx	sl
 80044d8:	3001      	adds	r0, #1
 80044da:	d09d      	beq.n	8004418 <_printf_i+0x15c>
 80044dc:	3501      	adds	r5, #1
 80044de:	68e3      	ldr	r3, [r4, #12]
 80044e0:	9903      	ldr	r1, [sp, #12]
 80044e2:	1a5b      	subs	r3, r3, r1
 80044e4:	42ab      	cmp	r3, r5
 80044e6:	dcf2      	bgt.n	80044ce <_printf_i+0x212>
 80044e8:	e7eb      	b.n	80044c2 <_printf_i+0x206>
 80044ea:	2500      	movs	r5, #0
 80044ec:	f104 0619 	add.w	r6, r4, #25
 80044f0:	e7f5      	b.n	80044de <_printf_i+0x222>
 80044f2:	bf00      	nop
 80044f4:	08008bb6 	.word	0x08008bb6
 80044f8:	08008bc7 	.word	0x08008bc7

080044fc <_scanf_float>:
 80044fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004500:	b087      	sub	sp, #28
 8004502:	4617      	mov	r7, r2
 8004504:	9303      	str	r3, [sp, #12]
 8004506:	688b      	ldr	r3, [r1, #8]
 8004508:	1e5a      	subs	r2, r3, #1
 800450a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800450e:	bf81      	itttt	hi
 8004510:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004514:	eb03 0b05 	addhi.w	fp, r3, r5
 8004518:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800451c:	608b      	strhi	r3, [r1, #8]
 800451e:	680b      	ldr	r3, [r1, #0]
 8004520:	460a      	mov	r2, r1
 8004522:	f04f 0500 	mov.w	r5, #0
 8004526:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800452a:	f842 3b1c 	str.w	r3, [r2], #28
 800452e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004532:	4680      	mov	r8, r0
 8004534:	460c      	mov	r4, r1
 8004536:	bf98      	it	ls
 8004538:	f04f 0b00 	movls.w	fp, #0
 800453c:	9201      	str	r2, [sp, #4]
 800453e:	4616      	mov	r6, r2
 8004540:	46aa      	mov	sl, r5
 8004542:	46a9      	mov	r9, r5
 8004544:	9502      	str	r5, [sp, #8]
 8004546:	68a2      	ldr	r2, [r4, #8]
 8004548:	b152      	cbz	r2, 8004560 <_scanf_float+0x64>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	2b4e      	cmp	r3, #78	@ 0x4e
 8004550:	d864      	bhi.n	800461c <_scanf_float+0x120>
 8004552:	2b40      	cmp	r3, #64	@ 0x40
 8004554:	d83c      	bhi.n	80045d0 <_scanf_float+0xd4>
 8004556:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800455a:	b2c8      	uxtb	r0, r1
 800455c:	280e      	cmp	r0, #14
 800455e:	d93a      	bls.n	80045d6 <_scanf_float+0xda>
 8004560:	f1b9 0f00 	cmp.w	r9, #0
 8004564:	d003      	beq.n	800456e <_scanf_float+0x72>
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800456c:	6023      	str	r3, [r4, #0]
 800456e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004572:	f1ba 0f01 	cmp.w	sl, #1
 8004576:	f200 8117 	bhi.w	80047a8 <_scanf_float+0x2ac>
 800457a:	9b01      	ldr	r3, [sp, #4]
 800457c:	429e      	cmp	r6, r3
 800457e:	f200 8108 	bhi.w	8004792 <_scanf_float+0x296>
 8004582:	2001      	movs	r0, #1
 8004584:	b007      	add	sp, #28
 8004586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800458a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800458e:	2a0d      	cmp	r2, #13
 8004590:	d8e6      	bhi.n	8004560 <_scanf_float+0x64>
 8004592:	a101      	add	r1, pc, #4	@ (adr r1, 8004598 <_scanf_float+0x9c>)
 8004594:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004598:	080046df 	.word	0x080046df
 800459c:	08004561 	.word	0x08004561
 80045a0:	08004561 	.word	0x08004561
 80045a4:	08004561 	.word	0x08004561
 80045a8:	0800473f 	.word	0x0800473f
 80045ac:	08004717 	.word	0x08004717
 80045b0:	08004561 	.word	0x08004561
 80045b4:	08004561 	.word	0x08004561
 80045b8:	080046ed 	.word	0x080046ed
 80045bc:	08004561 	.word	0x08004561
 80045c0:	08004561 	.word	0x08004561
 80045c4:	08004561 	.word	0x08004561
 80045c8:	08004561 	.word	0x08004561
 80045cc:	080046a5 	.word	0x080046a5
 80045d0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80045d4:	e7db      	b.n	800458e <_scanf_float+0x92>
 80045d6:	290e      	cmp	r1, #14
 80045d8:	d8c2      	bhi.n	8004560 <_scanf_float+0x64>
 80045da:	a001      	add	r0, pc, #4	@ (adr r0, 80045e0 <_scanf_float+0xe4>)
 80045dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80045e0:	08004695 	.word	0x08004695
 80045e4:	08004561 	.word	0x08004561
 80045e8:	08004695 	.word	0x08004695
 80045ec:	0800472b 	.word	0x0800472b
 80045f0:	08004561 	.word	0x08004561
 80045f4:	0800463d 	.word	0x0800463d
 80045f8:	0800467b 	.word	0x0800467b
 80045fc:	0800467b 	.word	0x0800467b
 8004600:	0800467b 	.word	0x0800467b
 8004604:	0800467b 	.word	0x0800467b
 8004608:	0800467b 	.word	0x0800467b
 800460c:	0800467b 	.word	0x0800467b
 8004610:	0800467b 	.word	0x0800467b
 8004614:	0800467b 	.word	0x0800467b
 8004618:	0800467b 	.word	0x0800467b
 800461c:	2b6e      	cmp	r3, #110	@ 0x6e
 800461e:	d809      	bhi.n	8004634 <_scanf_float+0x138>
 8004620:	2b60      	cmp	r3, #96	@ 0x60
 8004622:	d8b2      	bhi.n	800458a <_scanf_float+0x8e>
 8004624:	2b54      	cmp	r3, #84	@ 0x54
 8004626:	d07b      	beq.n	8004720 <_scanf_float+0x224>
 8004628:	2b59      	cmp	r3, #89	@ 0x59
 800462a:	d199      	bne.n	8004560 <_scanf_float+0x64>
 800462c:	2d07      	cmp	r5, #7
 800462e:	d197      	bne.n	8004560 <_scanf_float+0x64>
 8004630:	2508      	movs	r5, #8
 8004632:	e02c      	b.n	800468e <_scanf_float+0x192>
 8004634:	2b74      	cmp	r3, #116	@ 0x74
 8004636:	d073      	beq.n	8004720 <_scanf_float+0x224>
 8004638:	2b79      	cmp	r3, #121	@ 0x79
 800463a:	e7f6      	b.n	800462a <_scanf_float+0x12e>
 800463c:	6821      	ldr	r1, [r4, #0]
 800463e:	05c8      	lsls	r0, r1, #23
 8004640:	d51b      	bpl.n	800467a <_scanf_float+0x17e>
 8004642:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004646:	6021      	str	r1, [r4, #0]
 8004648:	f109 0901 	add.w	r9, r9, #1
 800464c:	f1bb 0f00 	cmp.w	fp, #0
 8004650:	d003      	beq.n	800465a <_scanf_float+0x15e>
 8004652:	3201      	adds	r2, #1
 8004654:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8004658:	60a2      	str	r2, [r4, #8]
 800465a:	68a3      	ldr	r3, [r4, #8]
 800465c:	3b01      	subs	r3, #1
 800465e:	60a3      	str	r3, [r4, #8]
 8004660:	6923      	ldr	r3, [r4, #16]
 8004662:	3301      	adds	r3, #1
 8004664:	6123      	str	r3, [r4, #16]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	3b01      	subs	r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	607b      	str	r3, [r7, #4]
 800466e:	f340 8087 	ble.w	8004780 <_scanf_float+0x284>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	3301      	adds	r3, #1
 8004676:	603b      	str	r3, [r7, #0]
 8004678:	e765      	b.n	8004546 <_scanf_float+0x4a>
 800467a:	eb1a 0105 	adds.w	r1, sl, r5
 800467e:	f47f af6f 	bne.w	8004560 <_scanf_float+0x64>
 8004682:	6822      	ldr	r2, [r4, #0]
 8004684:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004688:	6022      	str	r2, [r4, #0]
 800468a:	460d      	mov	r5, r1
 800468c:	468a      	mov	sl, r1
 800468e:	f806 3b01 	strb.w	r3, [r6], #1
 8004692:	e7e2      	b.n	800465a <_scanf_float+0x15e>
 8004694:	6822      	ldr	r2, [r4, #0]
 8004696:	0610      	lsls	r0, r2, #24
 8004698:	f57f af62 	bpl.w	8004560 <_scanf_float+0x64>
 800469c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046a0:	6022      	str	r2, [r4, #0]
 80046a2:	e7f4      	b.n	800468e <_scanf_float+0x192>
 80046a4:	f1ba 0f00 	cmp.w	sl, #0
 80046a8:	d10e      	bne.n	80046c8 <_scanf_float+0x1cc>
 80046aa:	f1b9 0f00 	cmp.w	r9, #0
 80046ae:	d10e      	bne.n	80046ce <_scanf_float+0x1d2>
 80046b0:	6822      	ldr	r2, [r4, #0]
 80046b2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80046b6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80046ba:	d108      	bne.n	80046ce <_scanf_float+0x1d2>
 80046bc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80046c0:	6022      	str	r2, [r4, #0]
 80046c2:	f04f 0a01 	mov.w	sl, #1
 80046c6:	e7e2      	b.n	800468e <_scanf_float+0x192>
 80046c8:	f1ba 0f02 	cmp.w	sl, #2
 80046cc:	d055      	beq.n	800477a <_scanf_float+0x27e>
 80046ce:	2d01      	cmp	r5, #1
 80046d0:	d002      	beq.n	80046d8 <_scanf_float+0x1dc>
 80046d2:	2d04      	cmp	r5, #4
 80046d4:	f47f af44 	bne.w	8004560 <_scanf_float+0x64>
 80046d8:	3501      	adds	r5, #1
 80046da:	b2ed      	uxtb	r5, r5
 80046dc:	e7d7      	b.n	800468e <_scanf_float+0x192>
 80046de:	f1ba 0f01 	cmp.w	sl, #1
 80046e2:	f47f af3d 	bne.w	8004560 <_scanf_float+0x64>
 80046e6:	f04f 0a02 	mov.w	sl, #2
 80046ea:	e7d0      	b.n	800468e <_scanf_float+0x192>
 80046ec:	b97d      	cbnz	r5, 800470e <_scanf_float+0x212>
 80046ee:	f1b9 0f00 	cmp.w	r9, #0
 80046f2:	f47f af38 	bne.w	8004566 <_scanf_float+0x6a>
 80046f6:	6822      	ldr	r2, [r4, #0]
 80046f8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80046fc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004700:	f040 8108 	bne.w	8004914 <_scanf_float+0x418>
 8004704:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004708:	6022      	str	r2, [r4, #0]
 800470a:	2501      	movs	r5, #1
 800470c:	e7bf      	b.n	800468e <_scanf_float+0x192>
 800470e:	2d03      	cmp	r5, #3
 8004710:	d0e2      	beq.n	80046d8 <_scanf_float+0x1dc>
 8004712:	2d05      	cmp	r5, #5
 8004714:	e7de      	b.n	80046d4 <_scanf_float+0x1d8>
 8004716:	2d02      	cmp	r5, #2
 8004718:	f47f af22 	bne.w	8004560 <_scanf_float+0x64>
 800471c:	2503      	movs	r5, #3
 800471e:	e7b6      	b.n	800468e <_scanf_float+0x192>
 8004720:	2d06      	cmp	r5, #6
 8004722:	f47f af1d 	bne.w	8004560 <_scanf_float+0x64>
 8004726:	2507      	movs	r5, #7
 8004728:	e7b1      	b.n	800468e <_scanf_float+0x192>
 800472a:	6822      	ldr	r2, [r4, #0]
 800472c:	0591      	lsls	r1, r2, #22
 800472e:	f57f af17 	bpl.w	8004560 <_scanf_float+0x64>
 8004732:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004736:	6022      	str	r2, [r4, #0]
 8004738:	f8cd 9008 	str.w	r9, [sp, #8]
 800473c:	e7a7      	b.n	800468e <_scanf_float+0x192>
 800473e:	6822      	ldr	r2, [r4, #0]
 8004740:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004744:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004748:	d006      	beq.n	8004758 <_scanf_float+0x25c>
 800474a:	0550      	lsls	r0, r2, #21
 800474c:	f57f af08 	bpl.w	8004560 <_scanf_float+0x64>
 8004750:	f1b9 0f00 	cmp.w	r9, #0
 8004754:	f000 80de 	beq.w	8004914 <_scanf_float+0x418>
 8004758:	0591      	lsls	r1, r2, #22
 800475a:	bf58      	it	pl
 800475c:	9902      	ldrpl	r1, [sp, #8]
 800475e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004762:	bf58      	it	pl
 8004764:	eba9 0101 	subpl.w	r1, r9, r1
 8004768:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800476c:	bf58      	it	pl
 800476e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004772:	6022      	str	r2, [r4, #0]
 8004774:	f04f 0900 	mov.w	r9, #0
 8004778:	e789      	b.n	800468e <_scanf_float+0x192>
 800477a:	f04f 0a03 	mov.w	sl, #3
 800477e:	e786      	b.n	800468e <_scanf_float+0x192>
 8004780:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004784:	4639      	mov	r1, r7
 8004786:	4640      	mov	r0, r8
 8004788:	4798      	blx	r3
 800478a:	2800      	cmp	r0, #0
 800478c:	f43f aedb 	beq.w	8004546 <_scanf_float+0x4a>
 8004790:	e6e6      	b.n	8004560 <_scanf_float+0x64>
 8004792:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004796:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800479a:	463a      	mov	r2, r7
 800479c:	4640      	mov	r0, r8
 800479e:	4798      	blx	r3
 80047a0:	6923      	ldr	r3, [r4, #16]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	6123      	str	r3, [r4, #16]
 80047a6:	e6e8      	b.n	800457a <_scanf_float+0x7e>
 80047a8:	1e6b      	subs	r3, r5, #1
 80047aa:	2b06      	cmp	r3, #6
 80047ac:	d824      	bhi.n	80047f8 <_scanf_float+0x2fc>
 80047ae:	2d02      	cmp	r5, #2
 80047b0:	d836      	bhi.n	8004820 <_scanf_float+0x324>
 80047b2:	9b01      	ldr	r3, [sp, #4]
 80047b4:	429e      	cmp	r6, r3
 80047b6:	f67f aee4 	bls.w	8004582 <_scanf_float+0x86>
 80047ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80047be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80047c2:	463a      	mov	r2, r7
 80047c4:	4640      	mov	r0, r8
 80047c6:	4798      	blx	r3
 80047c8:	6923      	ldr	r3, [r4, #16]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	6123      	str	r3, [r4, #16]
 80047ce:	e7f0      	b.n	80047b2 <_scanf_float+0x2b6>
 80047d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80047d4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80047d8:	463a      	mov	r2, r7
 80047da:	4640      	mov	r0, r8
 80047dc:	4798      	blx	r3
 80047de:	6923      	ldr	r3, [r4, #16]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	6123      	str	r3, [r4, #16]
 80047e4:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80047e8:	fa5f fa8a 	uxtb.w	sl, sl
 80047ec:	f1ba 0f02 	cmp.w	sl, #2
 80047f0:	d1ee      	bne.n	80047d0 <_scanf_float+0x2d4>
 80047f2:	3d03      	subs	r5, #3
 80047f4:	b2ed      	uxtb	r5, r5
 80047f6:	1b76      	subs	r6, r6, r5
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	05da      	lsls	r2, r3, #23
 80047fc:	d530      	bpl.n	8004860 <_scanf_float+0x364>
 80047fe:	055b      	lsls	r3, r3, #21
 8004800:	d511      	bpl.n	8004826 <_scanf_float+0x32a>
 8004802:	9b01      	ldr	r3, [sp, #4]
 8004804:	429e      	cmp	r6, r3
 8004806:	f67f aebc 	bls.w	8004582 <_scanf_float+0x86>
 800480a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800480e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004812:	463a      	mov	r2, r7
 8004814:	4640      	mov	r0, r8
 8004816:	4798      	blx	r3
 8004818:	6923      	ldr	r3, [r4, #16]
 800481a:	3b01      	subs	r3, #1
 800481c:	6123      	str	r3, [r4, #16]
 800481e:	e7f0      	b.n	8004802 <_scanf_float+0x306>
 8004820:	46aa      	mov	sl, r5
 8004822:	46b3      	mov	fp, r6
 8004824:	e7de      	b.n	80047e4 <_scanf_float+0x2e8>
 8004826:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800482a:	6923      	ldr	r3, [r4, #16]
 800482c:	2965      	cmp	r1, #101	@ 0x65
 800482e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004832:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8004836:	6123      	str	r3, [r4, #16]
 8004838:	d00c      	beq.n	8004854 <_scanf_float+0x358>
 800483a:	2945      	cmp	r1, #69	@ 0x45
 800483c:	d00a      	beq.n	8004854 <_scanf_float+0x358>
 800483e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004842:	463a      	mov	r2, r7
 8004844:	4640      	mov	r0, r8
 8004846:	4798      	blx	r3
 8004848:	6923      	ldr	r3, [r4, #16]
 800484a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800484e:	3b01      	subs	r3, #1
 8004850:	1eb5      	subs	r5, r6, #2
 8004852:	6123      	str	r3, [r4, #16]
 8004854:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004858:	463a      	mov	r2, r7
 800485a:	4640      	mov	r0, r8
 800485c:	4798      	blx	r3
 800485e:	462e      	mov	r6, r5
 8004860:	6822      	ldr	r2, [r4, #0]
 8004862:	f012 0210 	ands.w	r2, r2, #16
 8004866:	d001      	beq.n	800486c <_scanf_float+0x370>
 8004868:	2000      	movs	r0, #0
 800486a:	e68b      	b.n	8004584 <_scanf_float+0x88>
 800486c:	7032      	strb	r2, [r6, #0]
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004878:	d11c      	bne.n	80048b4 <_scanf_float+0x3b8>
 800487a:	9b02      	ldr	r3, [sp, #8]
 800487c:	454b      	cmp	r3, r9
 800487e:	eba3 0209 	sub.w	r2, r3, r9
 8004882:	d123      	bne.n	80048cc <_scanf_float+0x3d0>
 8004884:	9901      	ldr	r1, [sp, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	4640      	mov	r0, r8
 800488a:	f002 fc19 	bl	80070c0 <_strtod_r>
 800488e:	9b03      	ldr	r3, [sp, #12]
 8004890:	6821      	ldr	r1, [r4, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f011 0f02 	tst.w	r1, #2
 8004898:	ec57 6b10 	vmov	r6, r7, d0
 800489c:	f103 0204 	add.w	r2, r3, #4
 80048a0:	d01f      	beq.n	80048e2 <_scanf_float+0x3e6>
 80048a2:	9903      	ldr	r1, [sp, #12]
 80048a4:	600a      	str	r2, [r1, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	e9c3 6700 	strd	r6, r7, [r3]
 80048ac:	68e3      	ldr	r3, [r4, #12]
 80048ae:	3301      	adds	r3, #1
 80048b0:	60e3      	str	r3, [r4, #12]
 80048b2:	e7d9      	b.n	8004868 <_scanf_float+0x36c>
 80048b4:	9b04      	ldr	r3, [sp, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0e4      	beq.n	8004884 <_scanf_float+0x388>
 80048ba:	9905      	ldr	r1, [sp, #20]
 80048bc:	230a      	movs	r3, #10
 80048be:	3101      	adds	r1, #1
 80048c0:	4640      	mov	r0, r8
 80048c2:	f002 fc7d 	bl	80071c0 <_strtol_r>
 80048c6:	9b04      	ldr	r3, [sp, #16]
 80048c8:	9e05      	ldr	r6, [sp, #20]
 80048ca:	1ac2      	subs	r2, r0, r3
 80048cc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80048d0:	429e      	cmp	r6, r3
 80048d2:	bf28      	it	cs
 80048d4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80048d8:	4910      	ldr	r1, [pc, #64]	@ (800491c <_scanf_float+0x420>)
 80048da:	4630      	mov	r0, r6
 80048dc:	f000 f8f6 	bl	8004acc <siprintf>
 80048e0:	e7d0      	b.n	8004884 <_scanf_float+0x388>
 80048e2:	f011 0f04 	tst.w	r1, #4
 80048e6:	9903      	ldr	r1, [sp, #12]
 80048e8:	600a      	str	r2, [r1, #0]
 80048ea:	d1dc      	bne.n	80048a6 <_scanf_float+0x3aa>
 80048ec:	681d      	ldr	r5, [r3, #0]
 80048ee:	4632      	mov	r2, r6
 80048f0:	463b      	mov	r3, r7
 80048f2:	4630      	mov	r0, r6
 80048f4:	4639      	mov	r1, r7
 80048f6:	f7fc f921 	bl	8000b3c <__aeabi_dcmpun>
 80048fa:	b128      	cbz	r0, 8004908 <_scanf_float+0x40c>
 80048fc:	4808      	ldr	r0, [pc, #32]	@ (8004920 <_scanf_float+0x424>)
 80048fe:	f000 f9d7 	bl	8004cb0 <nanf>
 8004902:	ed85 0a00 	vstr	s0, [r5]
 8004906:	e7d1      	b.n	80048ac <_scanf_float+0x3b0>
 8004908:	4630      	mov	r0, r6
 800490a:	4639      	mov	r1, r7
 800490c:	f7fc f974 	bl	8000bf8 <__aeabi_d2f>
 8004910:	6028      	str	r0, [r5, #0]
 8004912:	e7cb      	b.n	80048ac <_scanf_float+0x3b0>
 8004914:	f04f 0900 	mov.w	r9, #0
 8004918:	e629      	b.n	800456e <_scanf_float+0x72>
 800491a:	bf00      	nop
 800491c:	08008bd8 	.word	0x08008bd8
 8004920:	08008f6d 	.word	0x08008f6d

08004924 <std>:
 8004924:	2300      	movs	r3, #0
 8004926:	b510      	push	{r4, lr}
 8004928:	4604      	mov	r4, r0
 800492a:	e9c0 3300 	strd	r3, r3, [r0]
 800492e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004932:	6083      	str	r3, [r0, #8]
 8004934:	8181      	strh	r1, [r0, #12]
 8004936:	6643      	str	r3, [r0, #100]	@ 0x64
 8004938:	81c2      	strh	r2, [r0, #14]
 800493a:	6183      	str	r3, [r0, #24]
 800493c:	4619      	mov	r1, r3
 800493e:	2208      	movs	r2, #8
 8004940:	305c      	adds	r0, #92	@ 0x5c
 8004942:	f000 f926 	bl	8004b92 <memset>
 8004946:	4b0d      	ldr	r3, [pc, #52]	@ (800497c <std+0x58>)
 8004948:	6263      	str	r3, [r4, #36]	@ 0x24
 800494a:	4b0d      	ldr	r3, [pc, #52]	@ (8004980 <std+0x5c>)
 800494c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800494e:	4b0d      	ldr	r3, [pc, #52]	@ (8004984 <std+0x60>)
 8004950:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004952:	4b0d      	ldr	r3, [pc, #52]	@ (8004988 <std+0x64>)
 8004954:	6323      	str	r3, [r4, #48]	@ 0x30
 8004956:	4b0d      	ldr	r3, [pc, #52]	@ (800498c <std+0x68>)
 8004958:	6224      	str	r4, [r4, #32]
 800495a:	429c      	cmp	r4, r3
 800495c:	d006      	beq.n	800496c <std+0x48>
 800495e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004962:	4294      	cmp	r4, r2
 8004964:	d002      	beq.n	800496c <std+0x48>
 8004966:	33d0      	adds	r3, #208	@ 0xd0
 8004968:	429c      	cmp	r4, r3
 800496a:	d105      	bne.n	8004978 <std+0x54>
 800496c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004974:	f000 b98a 	b.w	8004c8c <__retarget_lock_init_recursive>
 8004978:	bd10      	pop	{r4, pc}
 800497a:	bf00      	nop
 800497c:	08004b0d 	.word	0x08004b0d
 8004980:	08004b2f 	.word	0x08004b2f
 8004984:	08004b67 	.word	0x08004b67
 8004988:	08004b8b 	.word	0x08004b8b
 800498c:	200040c0 	.word	0x200040c0

08004990 <stdio_exit_handler>:
 8004990:	4a02      	ldr	r2, [pc, #8]	@ (800499c <stdio_exit_handler+0xc>)
 8004992:	4903      	ldr	r1, [pc, #12]	@ (80049a0 <stdio_exit_handler+0x10>)
 8004994:	4803      	ldr	r0, [pc, #12]	@ (80049a4 <stdio_exit_handler+0x14>)
 8004996:	f000 b869 	b.w	8004a6c <_fwalk_sglue>
 800499a:	bf00      	nop
 800499c:	20000090 	.word	0x20000090
 80049a0:	08007801 	.word	0x08007801
 80049a4:	200000a0 	.word	0x200000a0

080049a8 <cleanup_stdio>:
 80049a8:	6841      	ldr	r1, [r0, #4]
 80049aa:	4b0c      	ldr	r3, [pc, #48]	@ (80049dc <cleanup_stdio+0x34>)
 80049ac:	4299      	cmp	r1, r3
 80049ae:	b510      	push	{r4, lr}
 80049b0:	4604      	mov	r4, r0
 80049b2:	d001      	beq.n	80049b8 <cleanup_stdio+0x10>
 80049b4:	f002 ff24 	bl	8007800 <_fflush_r>
 80049b8:	68a1      	ldr	r1, [r4, #8]
 80049ba:	4b09      	ldr	r3, [pc, #36]	@ (80049e0 <cleanup_stdio+0x38>)
 80049bc:	4299      	cmp	r1, r3
 80049be:	d002      	beq.n	80049c6 <cleanup_stdio+0x1e>
 80049c0:	4620      	mov	r0, r4
 80049c2:	f002 ff1d 	bl	8007800 <_fflush_r>
 80049c6:	68e1      	ldr	r1, [r4, #12]
 80049c8:	4b06      	ldr	r3, [pc, #24]	@ (80049e4 <cleanup_stdio+0x3c>)
 80049ca:	4299      	cmp	r1, r3
 80049cc:	d004      	beq.n	80049d8 <cleanup_stdio+0x30>
 80049ce:	4620      	mov	r0, r4
 80049d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049d4:	f002 bf14 	b.w	8007800 <_fflush_r>
 80049d8:	bd10      	pop	{r4, pc}
 80049da:	bf00      	nop
 80049dc:	200040c0 	.word	0x200040c0
 80049e0:	20004128 	.word	0x20004128
 80049e4:	20004190 	.word	0x20004190

080049e8 <global_stdio_init.part.0>:
 80049e8:	b510      	push	{r4, lr}
 80049ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004a18 <global_stdio_init.part.0+0x30>)
 80049ec:	4c0b      	ldr	r4, [pc, #44]	@ (8004a1c <global_stdio_init.part.0+0x34>)
 80049ee:	4a0c      	ldr	r2, [pc, #48]	@ (8004a20 <global_stdio_init.part.0+0x38>)
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	4620      	mov	r0, r4
 80049f4:	2200      	movs	r2, #0
 80049f6:	2104      	movs	r1, #4
 80049f8:	f7ff ff94 	bl	8004924 <std>
 80049fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004a00:	2201      	movs	r2, #1
 8004a02:	2109      	movs	r1, #9
 8004a04:	f7ff ff8e 	bl	8004924 <std>
 8004a08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a12:	2112      	movs	r1, #18
 8004a14:	f7ff bf86 	b.w	8004924 <std>
 8004a18:	200041f8 	.word	0x200041f8
 8004a1c:	200040c0 	.word	0x200040c0
 8004a20:	08004991 	.word	0x08004991

08004a24 <__sfp_lock_acquire>:
 8004a24:	4801      	ldr	r0, [pc, #4]	@ (8004a2c <__sfp_lock_acquire+0x8>)
 8004a26:	f000 b932 	b.w	8004c8e <__retarget_lock_acquire_recursive>
 8004a2a:	bf00      	nop
 8004a2c:	20004201 	.word	0x20004201

08004a30 <__sfp_lock_release>:
 8004a30:	4801      	ldr	r0, [pc, #4]	@ (8004a38 <__sfp_lock_release+0x8>)
 8004a32:	f000 b92d 	b.w	8004c90 <__retarget_lock_release_recursive>
 8004a36:	bf00      	nop
 8004a38:	20004201 	.word	0x20004201

08004a3c <__sinit>:
 8004a3c:	b510      	push	{r4, lr}
 8004a3e:	4604      	mov	r4, r0
 8004a40:	f7ff fff0 	bl	8004a24 <__sfp_lock_acquire>
 8004a44:	6a23      	ldr	r3, [r4, #32]
 8004a46:	b11b      	cbz	r3, 8004a50 <__sinit+0x14>
 8004a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a4c:	f7ff bff0 	b.w	8004a30 <__sfp_lock_release>
 8004a50:	4b04      	ldr	r3, [pc, #16]	@ (8004a64 <__sinit+0x28>)
 8004a52:	6223      	str	r3, [r4, #32]
 8004a54:	4b04      	ldr	r3, [pc, #16]	@ (8004a68 <__sinit+0x2c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1f5      	bne.n	8004a48 <__sinit+0xc>
 8004a5c:	f7ff ffc4 	bl	80049e8 <global_stdio_init.part.0>
 8004a60:	e7f2      	b.n	8004a48 <__sinit+0xc>
 8004a62:	bf00      	nop
 8004a64:	080049a9 	.word	0x080049a9
 8004a68:	200041f8 	.word	0x200041f8

08004a6c <_fwalk_sglue>:
 8004a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a70:	4607      	mov	r7, r0
 8004a72:	4688      	mov	r8, r1
 8004a74:	4614      	mov	r4, r2
 8004a76:	2600      	movs	r6, #0
 8004a78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a7c:	f1b9 0901 	subs.w	r9, r9, #1
 8004a80:	d505      	bpl.n	8004a8e <_fwalk_sglue+0x22>
 8004a82:	6824      	ldr	r4, [r4, #0]
 8004a84:	2c00      	cmp	r4, #0
 8004a86:	d1f7      	bne.n	8004a78 <_fwalk_sglue+0xc>
 8004a88:	4630      	mov	r0, r6
 8004a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a8e:	89ab      	ldrh	r3, [r5, #12]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d907      	bls.n	8004aa4 <_fwalk_sglue+0x38>
 8004a94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	d003      	beq.n	8004aa4 <_fwalk_sglue+0x38>
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	4638      	mov	r0, r7
 8004aa0:	47c0      	blx	r8
 8004aa2:	4306      	orrs	r6, r0
 8004aa4:	3568      	adds	r5, #104	@ 0x68
 8004aa6:	e7e9      	b.n	8004a7c <_fwalk_sglue+0x10>

08004aa8 <iprintf>:
 8004aa8:	b40f      	push	{r0, r1, r2, r3}
 8004aaa:	b507      	push	{r0, r1, r2, lr}
 8004aac:	4906      	ldr	r1, [pc, #24]	@ (8004ac8 <iprintf+0x20>)
 8004aae:	ab04      	add	r3, sp, #16
 8004ab0:	6808      	ldr	r0, [r1, #0]
 8004ab2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ab6:	6881      	ldr	r1, [r0, #8]
 8004ab8:	9301      	str	r3, [sp, #4]
 8004aba:	f002 fd05 	bl	80074c8 <_vfiprintf_r>
 8004abe:	b003      	add	sp, #12
 8004ac0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ac4:	b004      	add	sp, #16
 8004ac6:	4770      	bx	lr
 8004ac8:	2000009c 	.word	0x2000009c

08004acc <siprintf>:
 8004acc:	b40e      	push	{r1, r2, r3}
 8004ace:	b500      	push	{lr}
 8004ad0:	b09c      	sub	sp, #112	@ 0x70
 8004ad2:	ab1d      	add	r3, sp, #116	@ 0x74
 8004ad4:	9002      	str	r0, [sp, #8]
 8004ad6:	9006      	str	r0, [sp, #24]
 8004ad8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004adc:	4809      	ldr	r0, [pc, #36]	@ (8004b04 <siprintf+0x38>)
 8004ade:	9107      	str	r1, [sp, #28]
 8004ae0:	9104      	str	r1, [sp, #16]
 8004ae2:	4909      	ldr	r1, [pc, #36]	@ (8004b08 <siprintf+0x3c>)
 8004ae4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ae8:	9105      	str	r1, [sp, #20]
 8004aea:	6800      	ldr	r0, [r0, #0]
 8004aec:	9301      	str	r3, [sp, #4]
 8004aee:	a902      	add	r1, sp, #8
 8004af0:	f002 fbc4 	bl	800727c <_svfiprintf_r>
 8004af4:	9b02      	ldr	r3, [sp, #8]
 8004af6:	2200      	movs	r2, #0
 8004af8:	701a      	strb	r2, [r3, #0]
 8004afa:	b01c      	add	sp, #112	@ 0x70
 8004afc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b00:	b003      	add	sp, #12
 8004b02:	4770      	bx	lr
 8004b04:	2000009c 	.word	0x2000009c
 8004b08:	ffff0208 	.word	0xffff0208

08004b0c <__sread>:
 8004b0c:	b510      	push	{r4, lr}
 8004b0e:	460c      	mov	r4, r1
 8004b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b14:	f000 f86c 	bl	8004bf0 <_read_r>
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	bfab      	itete	ge
 8004b1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004b1e:	89a3      	ldrhlt	r3, [r4, #12]
 8004b20:	181b      	addge	r3, r3, r0
 8004b22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004b26:	bfac      	ite	ge
 8004b28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004b2a:	81a3      	strhlt	r3, [r4, #12]
 8004b2c:	bd10      	pop	{r4, pc}

08004b2e <__swrite>:
 8004b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b32:	461f      	mov	r7, r3
 8004b34:	898b      	ldrh	r3, [r1, #12]
 8004b36:	05db      	lsls	r3, r3, #23
 8004b38:	4605      	mov	r5, r0
 8004b3a:	460c      	mov	r4, r1
 8004b3c:	4616      	mov	r6, r2
 8004b3e:	d505      	bpl.n	8004b4c <__swrite+0x1e>
 8004b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b44:	2302      	movs	r3, #2
 8004b46:	2200      	movs	r2, #0
 8004b48:	f000 f840 	bl	8004bcc <_lseek_r>
 8004b4c:	89a3      	ldrh	r3, [r4, #12]
 8004b4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b56:	81a3      	strh	r3, [r4, #12]
 8004b58:	4632      	mov	r2, r6
 8004b5a:	463b      	mov	r3, r7
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b62:	f000 b857 	b.w	8004c14 <_write_r>

08004b66 <__sseek>:
 8004b66:	b510      	push	{r4, lr}
 8004b68:	460c      	mov	r4, r1
 8004b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b6e:	f000 f82d 	bl	8004bcc <_lseek_r>
 8004b72:	1c43      	adds	r3, r0, #1
 8004b74:	89a3      	ldrh	r3, [r4, #12]
 8004b76:	bf15      	itete	ne
 8004b78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004b7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004b7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004b82:	81a3      	strheq	r3, [r4, #12]
 8004b84:	bf18      	it	ne
 8004b86:	81a3      	strhne	r3, [r4, #12]
 8004b88:	bd10      	pop	{r4, pc}

08004b8a <__sclose>:
 8004b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b8e:	f000 b80d 	b.w	8004bac <_close_r>

08004b92 <memset>:
 8004b92:	4402      	add	r2, r0
 8004b94:	4603      	mov	r3, r0
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d100      	bne.n	8004b9c <memset+0xa>
 8004b9a:	4770      	bx	lr
 8004b9c:	f803 1b01 	strb.w	r1, [r3], #1
 8004ba0:	e7f9      	b.n	8004b96 <memset+0x4>
	...

08004ba4 <_localeconv_r>:
 8004ba4:	4800      	ldr	r0, [pc, #0]	@ (8004ba8 <_localeconv_r+0x4>)
 8004ba6:	4770      	bx	lr
 8004ba8:	200001dc 	.word	0x200001dc

08004bac <_close_r>:
 8004bac:	b538      	push	{r3, r4, r5, lr}
 8004bae:	4d06      	ldr	r5, [pc, #24]	@ (8004bc8 <_close_r+0x1c>)
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	4604      	mov	r4, r0
 8004bb4:	4608      	mov	r0, r1
 8004bb6:	602b      	str	r3, [r5, #0]
 8004bb8:	f7fe fba6 	bl	8003308 <_close>
 8004bbc:	1c43      	adds	r3, r0, #1
 8004bbe:	d102      	bne.n	8004bc6 <_close_r+0x1a>
 8004bc0:	682b      	ldr	r3, [r5, #0]
 8004bc2:	b103      	cbz	r3, 8004bc6 <_close_r+0x1a>
 8004bc4:	6023      	str	r3, [r4, #0]
 8004bc6:	bd38      	pop	{r3, r4, r5, pc}
 8004bc8:	200041fc 	.word	0x200041fc

08004bcc <_lseek_r>:
 8004bcc:	b538      	push	{r3, r4, r5, lr}
 8004bce:	4d07      	ldr	r5, [pc, #28]	@ (8004bec <_lseek_r+0x20>)
 8004bd0:	4604      	mov	r4, r0
 8004bd2:	4608      	mov	r0, r1
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	602a      	str	r2, [r5, #0]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	f7fe fbbb 	bl	8003356 <_lseek>
 8004be0:	1c43      	adds	r3, r0, #1
 8004be2:	d102      	bne.n	8004bea <_lseek_r+0x1e>
 8004be4:	682b      	ldr	r3, [r5, #0]
 8004be6:	b103      	cbz	r3, 8004bea <_lseek_r+0x1e>
 8004be8:	6023      	str	r3, [r4, #0]
 8004bea:	bd38      	pop	{r3, r4, r5, pc}
 8004bec:	200041fc 	.word	0x200041fc

08004bf0 <_read_r>:
 8004bf0:	b538      	push	{r3, r4, r5, lr}
 8004bf2:	4d07      	ldr	r5, [pc, #28]	@ (8004c10 <_read_r+0x20>)
 8004bf4:	4604      	mov	r4, r0
 8004bf6:	4608      	mov	r0, r1
 8004bf8:	4611      	mov	r1, r2
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	602a      	str	r2, [r5, #0]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	f7fe fb49 	bl	8003296 <_read>
 8004c04:	1c43      	adds	r3, r0, #1
 8004c06:	d102      	bne.n	8004c0e <_read_r+0x1e>
 8004c08:	682b      	ldr	r3, [r5, #0]
 8004c0a:	b103      	cbz	r3, 8004c0e <_read_r+0x1e>
 8004c0c:	6023      	str	r3, [r4, #0]
 8004c0e:	bd38      	pop	{r3, r4, r5, pc}
 8004c10:	200041fc 	.word	0x200041fc

08004c14 <_write_r>:
 8004c14:	b538      	push	{r3, r4, r5, lr}
 8004c16:	4d07      	ldr	r5, [pc, #28]	@ (8004c34 <_write_r+0x20>)
 8004c18:	4604      	mov	r4, r0
 8004c1a:	4608      	mov	r0, r1
 8004c1c:	4611      	mov	r1, r2
 8004c1e:	2200      	movs	r2, #0
 8004c20:	602a      	str	r2, [r5, #0]
 8004c22:	461a      	mov	r2, r3
 8004c24:	f7fe fb54 	bl	80032d0 <_write>
 8004c28:	1c43      	adds	r3, r0, #1
 8004c2a:	d102      	bne.n	8004c32 <_write_r+0x1e>
 8004c2c:	682b      	ldr	r3, [r5, #0]
 8004c2e:	b103      	cbz	r3, 8004c32 <_write_r+0x1e>
 8004c30:	6023      	str	r3, [r4, #0]
 8004c32:	bd38      	pop	{r3, r4, r5, pc}
 8004c34:	200041fc 	.word	0x200041fc

08004c38 <__errno>:
 8004c38:	4b01      	ldr	r3, [pc, #4]	@ (8004c40 <__errno+0x8>)
 8004c3a:	6818      	ldr	r0, [r3, #0]
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	2000009c 	.word	0x2000009c

08004c44 <__libc_init_array>:
 8004c44:	b570      	push	{r4, r5, r6, lr}
 8004c46:	4d0d      	ldr	r5, [pc, #52]	@ (8004c7c <__libc_init_array+0x38>)
 8004c48:	4c0d      	ldr	r4, [pc, #52]	@ (8004c80 <__libc_init_array+0x3c>)
 8004c4a:	1b64      	subs	r4, r4, r5
 8004c4c:	10a4      	asrs	r4, r4, #2
 8004c4e:	2600      	movs	r6, #0
 8004c50:	42a6      	cmp	r6, r4
 8004c52:	d109      	bne.n	8004c68 <__libc_init_array+0x24>
 8004c54:	4d0b      	ldr	r5, [pc, #44]	@ (8004c84 <__libc_init_array+0x40>)
 8004c56:	4c0c      	ldr	r4, [pc, #48]	@ (8004c88 <__libc_init_array+0x44>)
 8004c58:	f003 fb74 	bl	8008344 <_init>
 8004c5c:	1b64      	subs	r4, r4, r5
 8004c5e:	10a4      	asrs	r4, r4, #2
 8004c60:	2600      	movs	r6, #0
 8004c62:	42a6      	cmp	r6, r4
 8004c64:	d105      	bne.n	8004c72 <__libc_init_array+0x2e>
 8004c66:	bd70      	pop	{r4, r5, r6, pc}
 8004c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c6c:	4798      	blx	r3
 8004c6e:	3601      	adds	r6, #1
 8004c70:	e7ee      	b.n	8004c50 <__libc_init_array+0xc>
 8004c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c76:	4798      	blx	r3
 8004c78:	3601      	adds	r6, #1
 8004c7a:	e7f2      	b.n	8004c62 <__libc_init_array+0x1e>
 8004c7c:	08008fd8 	.word	0x08008fd8
 8004c80:	08008fd8 	.word	0x08008fd8
 8004c84:	08008fd8 	.word	0x08008fd8
 8004c88:	08008fdc 	.word	0x08008fdc

08004c8c <__retarget_lock_init_recursive>:
 8004c8c:	4770      	bx	lr

08004c8e <__retarget_lock_acquire_recursive>:
 8004c8e:	4770      	bx	lr

08004c90 <__retarget_lock_release_recursive>:
 8004c90:	4770      	bx	lr

08004c92 <memcpy>:
 8004c92:	440a      	add	r2, r1
 8004c94:	4291      	cmp	r1, r2
 8004c96:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004c9a:	d100      	bne.n	8004c9e <memcpy+0xc>
 8004c9c:	4770      	bx	lr
 8004c9e:	b510      	push	{r4, lr}
 8004ca0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ca4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ca8:	4291      	cmp	r1, r2
 8004caa:	d1f9      	bne.n	8004ca0 <memcpy+0xe>
 8004cac:	bd10      	pop	{r4, pc}
	...

08004cb0 <nanf>:
 8004cb0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004cb8 <nanf+0x8>
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	7fc00000 	.word	0x7fc00000

08004cbc <quorem>:
 8004cbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc0:	6903      	ldr	r3, [r0, #16]
 8004cc2:	690c      	ldr	r4, [r1, #16]
 8004cc4:	42a3      	cmp	r3, r4
 8004cc6:	4607      	mov	r7, r0
 8004cc8:	db7e      	blt.n	8004dc8 <quorem+0x10c>
 8004cca:	3c01      	subs	r4, #1
 8004ccc:	f101 0814 	add.w	r8, r1, #20
 8004cd0:	00a3      	lsls	r3, r4, #2
 8004cd2:	f100 0514 	add.w	r5, r0, #20
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004cdc:	9301      	str	r3, [sp, #4]
 8004cde:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ce2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004cee:	fbb2 f6f3 	udiv	r6, r2, r3
 8004cf2:	d32e      	bcc.n	8004d52 <quorem+0x96>
 8004cf4:	f04f 0a00 	mov.w	sl, #0
 8004cf8:	46c4      	mov	ip, r8
 8004cfa:	46ae      	mov	lr, r5
 8004cfc:	46d3      	mov	fp, sl
 8004cfe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004d02:	b298      	uxth	r0, r3
 8004d04:	fb06 a000 	mla	r0, r6, r0, sl
 8004d08:	0c02      	lsrs	r2, r0, #16
 8004d0a:	0c1b      	lsrs	r3, r3, #16
 8004d0c:	fb06 2303 	mla	r3, r6, r3, r2
 8004d10:	f8de 2000 	ldr.w	r2, [lr]
 8004d14:	b280      	uxth	r0, r0
 8004d16:	b292      	uxth	r2, r2
 8004d18:	1a12      	subs	r2, r2, r0
 8004d1a:	445a      	add	r2, fp
 8004d1c:	f8de 0000 	ldr.w	r0, [lr]
 8004d20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004d2a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004d2e:	b292      	uxth	r2, r2
 8004d30:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004d34:	45e1      	cmp	r9, ip
 8004d36:	f84e 2b04 	str.w	r2, [lr], #4
 8004d3a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004d3e:	d2de      	bcs.n	8004cfe <quorem+0x42>
 8004d40:	9b00      	ldr	r3, [sp, #0]
 8004d42:	58eb      	ldr	r3, [r5, r3]
 8004d44:	b92b      	cbnz	r3, 8004d52 <quorem+0x96>
 8004d46:	9b01      	ldr	r3, [sp, #4]
 8004d48:	3b04      	subs	r3, #4
 8004d4a:	429d      	cmp	r5, r3
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	d32f      	bcc.n	8004db0 <quorem+0xf4>
 8004d50:	613c      	str	r4, [r7, #16]
 8004d52:	4638      	mov	r0, r7
 8004d54:	f001 f9c4 	bl	80060e0 <__mcmp>
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	db25      	blt.n	8004da8 <quorem+0xec>
 8004d5c:	4629      	mov	r1, r5
 8004d5e:	2000      	movs	r0, #0
 8004d60:	f858 2b04 	ldr.w	r2, [r8], #4
 8004d64:	f8d1 c000 	ldr.w	ip, [r1]
 8004d68:	fa1f fe82 	uxth.w	lr, r2
 8004d6c:	fa1f f38c 	uxth.w	r3, ip
 8004d70:	eba3 030e 	sub.w	r3, r3, lr
 8004d74:	4403      	add	r3, r0
 8004d76:	0c12      	lsrs	r2, r2, #16
 8004d78:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004d7c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d86:	45c1      	cmp	r9, r8
 8004d88:	f841 3b04 	str.w	r3, [r1], #4
 8004d8c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004d90:	d2e6      	bcs.n	8004d60 <quorem+0xa4>
 8004d92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d9a:	b922      	cbnz	r2, 8004da6 <quorem+0xea>
 8004d9c:	3b04      	subs	r3, #4
 8004d9e:	429d      	cmp	r5, r3
 8004da0:	461a      	mov	r2, r3
 8004da2:	d30b      	bcc.n	8004dbc <quorem+0x100>
 8004da4:	613c      	str	r4, [r7, #16]
 8004da6:	3601      	adds	r6, #1
 8004da8:	4630      	mov	r0, r6
 8004daa:	b003      	add	sp, #12
 8004dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db0:	6812      	ldr	r2, [r2, #0]
 8004db2:	3b04      	subs	r3, #4
 8004db4:	2a00      	cmp	r2, #0
 8004db6:	d1cb      	bne.n	8004d50 <quorem+0x94>
 8004db8:	3c01      	subs	r4, #1
 8004dba:	e7c6      	b.n	8004d4a <quorem+0x8e>
 8004dbc:	6812      	ldr	r2, [r2, #0]
 8004dbe:	3b04      	subs	r3, #4
 8004dc0:	2a00      	cmp	r2, #0
 8004dc2:	d1ef      	bne.n	8004da4 <quorem+0xe8>
 8004dc4:	3c01      	subs	r4, #1
 8004dc6:	e7ea      	b.n	8004d9e <quorem+0xe2>
 8004dc8:	2000      	movs	r0, #0
 8004dca:	e7ee      	b.n	8004daa <quorem+0xee>
 8004dcc:	0000      	movs	r0, r0
	...

08004dd0 <_dtoa_r>:
 8004dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dd4:	69c7      	ldr	r7, [r0, #28]
 8004dd6:	b099      	sub	sp, #100	@ 0x64
 8004dd8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004ddc:	ec55 4b10 	vmov	r4, r5, d0
 8004de0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004de2:	9109      	str	r1, [sp, #36]	@ 0x24
 8004de4:	4683      	mov	fp, r0
 8004de6:	920e      	str	r2, [sp, #56]	@ 0x38
 8004de8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004dea:	b97f      	cbnz	r7, 8004e0c <_dtoa_r+0x3c>
 8004dec:	2010      	movs	r0, #16
 8004dee:	f000 fdfd 	bl	80059ec <malloc>
 8004df2:	4602      	mov	r2, r0
 8004df4:	f8cb 001c 	str.w	r0, [fp, #28]
 8004df8:	b920      	cbnz	r0, 8004e04 <_dtoa_r+0x34>
 8004dfa:	4ba7      	ldr	r3, [pc, #668]	@ (8005098 <_dtoa_r+0x2c8>)
 8004dfc:	21ef      	movs	r1, #239	@ 0xef
 8004dfe:	48a7      	ldr	r0, [pc, #668]	@ (800509c <_dtoa_r+0x2cc>)
 8004e00:	f002 fdfe 	bl	8007a00 <__assert_func>
 8004e04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004e08:	6007      	str	r7, [r0, #0]
 8004e0a:	60c7      	str	r7, [r0, #12]
 8004e0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004e10:	6819      	ldr	r1, [r3, #0]
 8004e12:	b159      	cbz	r1, 8004e2c <_dtoa_r+0x5c>
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	604a      	str	r2, [r1, #4]
 8004e18:	2301      	movs	r3, #1
 8004e1a:	4093      	lsls	r3, r2
 8004e1c:	608b      	str	r3, [r1, #8]
 8004e1e:	4658      	mov	r0, fp
 8004e20:	f000 feda 	bl	8005bd8 <_Bfree>
 8004e24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	1e2b      	subs	r3, r5, #0
 8004e2e:	bfb9      	ittee	lt
 8004e30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004e34:	9303      	strlt	r3, [sp, #12]
 8004e36:	2300      	movge	r3, #0
 8004e38:	6033      	strge	r3, [r6, #0]
 8004e3a:	9f03      	ldr	r7, [sp, #12]
 8004e3c:	4b98      	ldr	r3, [pc, #608]	@ (80050a0 <_dtoa_r+0x2d0>)
 8004e3e:	bfbc      	itt	lt
 8004e40:	2201      	movlt	r2, #1
 8004e42:	6032      	strlt	r2, [r6, #0]
 8004e44:	43bb      	bics	r3, r7
 8004e46:	d112      	bne.n	8004e6e <_dtoa_r+0x9e>
 8004e48:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004e4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004e4e:	6013      	str	r3, [r2, #0]
 8004e50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004e54:	4323      	orrs	r3, r4
 8004e56:	f000 854d 	beq.w	80058f4 <_dtoa_r+0xb24>
 8004e5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004e5c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80050b4 <_dtoa_r+0x2e4>
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 854f 	beq.w	8005904 <_dtoa_r+0xb34>
 8004e66:	f10a 0303 	add.w	r3, sl, #3
 8004e6a:	f000 bd49 	b.w	8005900 <_dtoa_r+0xb30>
 8004e6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004e72:	2200      	movs	r2, #0
 8004e74:	ec51 0b17 	vmov	r0, r1, d7
 8004e78:	2300      	movs	r3, #0
 8004e7a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8004e7e:	f7fb fe2b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e82:	4680      	mov	r8, r0
 8004e84:	b158      	cbz	r0, 8004e9e <_dtoa_r+0xce>
 8004e86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004e88:	2301      	movs	r3, #1
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004e8e:	b113      	cbz	r3, 8004e96 <_dtoa_r+0xc6>
 8004e90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004e92:	4b84      	ldr	r3, [pc, #528]	@ (80050a4 <_dtoa_r+0x2d4>)
 8004e94:	6013      	str	r3, [r2, #0]
 8004e96:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80050b8 <_dtoa_r+0x2e8>
 8004e9a:	f000 bd33 	b.w	8005904 <_dtoa_r+0xb34>
 8004e9e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004ea2:	aa16      	add	r2, sp, #88	@ 0x58
 8004ea4:	a917      	add	r1, sp, #92	@ 0x5c
 8004ea6:	4658      	mov	r0, fp
 8004ea8:	f001 fa3a 	bl	8006320 <__d2b>
 8004eac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004eb0:	4681      	mov	r9, r0
 8004eb2:	2e00      	cmp	r6, #0
 8004eb4:	d077      	beq.n	8004fa6 <_dtoa_r+0x1d6>
 8004eb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004eb8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ec0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004ec4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004ec8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004ecc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	4b74      	ldr	r3, [pc, #464]	@ (80050a8 <_dtoa_r+0x2d8>)
 8004ed6:	f7fb f9df 	bl	8000298 <__aeabi_dsub>
 8004eda:	a369      	add	r3, pc, #420	@ (adr r3, 8005080 <_dtoa_r+0x2b0>)
 8004edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee0:	f7fb fb92 	bl	8000608 <__aeabi_dmul>
 8004ee4:	a368      	add	r3, pc, #416	@ (adr r3, 8005088 <_dtoa_r+0x2b8>)
 8004ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eea:	f7fb f9d7 	bl	800029c <__adddf3>
 8004eee:	4604      	mov	r4, r0
 8004ef0:	4630      	mov	r0, r6
 8004ef2:	460d      	mov	r5, r1
 8004ef4:	f7fb fb1e 	bl	8000534 <__aeabi_i2d>
 8004ef8:	a365      	add	r3, pc, #404	@ (adr r3, 8005090 <_dtoa_r+0x2c0>)
 8004efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efe:	f7fb fb83 	bl	8000608 <__aeabi_dmul>
 8004f02:	4602      	mov	r2, r0
 8004f04:	460b      	mov	r3, r1
 8004f06:	4620      	mov	r0, r4
 8004f08:	4629      	mov	r1, r5
 8004f0a:	f7fb f9c7 	bl	800029c <__adddf3>
 8004f0e:	4604      	mov	r4, r0
 8004f10:	460d      	mov	r5, r1
 8004f12:	f7fb fe29 	bl	8000b68 <__aeabi_d2iz>
 8004f16:	2200      	movs	r2, #0
 8004f18:	4607      	mov	r7, r0
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	4629      	mov	r1, r5
 8004f20:	f7fb fde4 	bl	8000aec <__aeabi_dcmplt>
 8004f24:	b140      	cbz	r0, 8004f38 <_dtoa_r+0x168>
 8004f26:	4638      	mov	r0, r7
 8004f28:	f7fb fb04 	bl	8000534 <__aeabi_i2d>
 8004f2c:	4622      	mov	r2, r4
 8004f2e:	462b      	mov	r3, r5
 8004f30:	f7fb fdd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f34:	b900      	cbnz	r0, 8004f38 <_dtoa_r+0x168>
 8004f36:	3f01      	subs	r7, #1
 8004f38:	2f16      	cmp	r7, #22
 8004f3a:	d851      	bhi.n	8004fe0 <_dtoa_r+0x210>
 8004f3c:	4b5b      	ldr	r3, [pc, #364]	@ (80050ac <_dtoa_r+0x2dc>)
 8004f3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f4a:	f7fb fdcf 	bl	8000aec <__aeabi_dcmplt>
 8004f4e:	2800      	cmp	r0, #0
 8004f50:	d048      	beq.n	8004fe4 <_dtoa_r+0x214>
 8004f52:	3f01      	subs	r7, #1
 8004f54:	2300      	movs	r3, #0
 8004f56:	9312      	str	r3, [sp, #72]	@ 0x48
 8004f58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004f5a:	1b9b      	subs	r3, r3, r6
 8004f5c:	1e5a      	subs	r2, r3, #1
 8004f5e:	bf44      	itt	mi
 8004f60:	f1c3 0801 	rsbmi	r8, r3, #1
 8004f64:	2300      	movmi	r3, #0
 8004f66:	9208      	str	r2, [sp, #32]
 8004f68:	bf54      	ite	pl
 8004f6a:	f04f 0800 	movpl.w	r8, #0
 8004f6e:	9308      	strmi	r3, [sp, #32]
 8004f70:	2f00      	cmp	r7, #0
 8004f72:	db39      	blt.n	8004fe8 <_dtoa_r+0x218>
 8004f74:	9b08      	ldr	r3, [sp, #32]
 8004f76:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004f78:	443b      	add	r3, r7
 8004f7a:	9308      	str	r3, [sp, #32]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f82:	2b09      	cmp	r3, #9
 8004f84:	d864      	bhi.n	8005050 <_dtoa_r+0x280>
 8004f86:	2b05      	cmp	r3, #5
 8004f88:	bfc4      	itt	gt
 8004f8a:	3b04      	subgt	r3, #4
 8004f8c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f90:	f1a3 0302 	sub.w	r3, r3, #2
 8004f94:	bfcc      	ite	gt
 8004f96:	2400      	movgt	r4, #0
 8004f98:	2401      	movle	r4, #1
 8004f9a:	2b03      	cmp	r3, #3
 8004f9c:	d863      	bhi.n	8005066 <_dtoa_r+0x296>
 8004f9e:	e8df f003 	tbb	[pc, r3]
 8004fa2:	372a      	.short	0x372a
 8004fa4:	5535      	.short	0x5535
 8004fa6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004faa:	441e      	add	r6, r3
 8004fac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004fb0:	2b20      	cmp	r3, #32
 8004fb2:	bfc1      	itttt	gt
 8004fb4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004fb8:	409f      	lslgt	r7, r3
 8004fba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004fbe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004fc2:	bfd6      	itet	le
 8004fc4:	f1c3 0320 	rsble	r3, r3, #32
 8004fc8:	ea47 0003 	orrgt.w	r0, r7, r3
 8004fcc:	fa04 f003 	lslle.w	r0, r4, r3
 8004fd0:	f7fb faa0 	bl	8000514 <__aeabi_ui2d>
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004fda:	3e01      	subs	r6, #1
 8004fdc:	9214      	str	r2, [sp, #80]	@ 0x50
 8004fde:	e777      	b.n	8004ed0 <_dtoa_r+0x100>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e7b8      	b.n	8004f56 <_dtoa_r+0x186>
 8004fe4:	9012      	str	r0, [sp, #72]	@ 0x48
 8004fe6:	e7b7      	b.n	8004f58 <_dtoa_r+0x188>
 8004fe8:	427b      	negs	r3, r7
 8004fea:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fec:	2300      	movs	r3, #0
 8004fee:	eba8 0807 	sub.w	r8, r8, r7
 8004ff2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004ff4:	e7c4      	b.n	8004f80 <_dtoa_r+0x1b0>
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ffa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	dc35      	bgt.n	800506c <_dtoa_r+0x29c>
 8005000:	2301      	movs	r3, #1
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	9307      	str	r3, [sp, #28]
 8005006:	461a      	mov	r2, r3
 8005008:	920e      	str	r2, [sp, #56]	@ 0x38
 800500a:	e00b      	b.n	8005024 <_dtoa_r+0x254>
 800500c:	2301      	movs	r3, #1
 800500e:	e7f3      	b.n	8004ff8 <_dtoa_r+0x228>
 8005010:	2300      	movs	r3, #0
 8005012:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005014:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005016:	18fb      	adds	r3, r7, r3
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	3301      	adds	r3, #1
 800501c:	2b01      	cmp	r3, #1
 800501e:	9307      	str	r3, [sp, #28]
 8005020:	bfb8      	it	lt
 8005022:	2301      	movlt	r3, #1
 8005024:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005028:	2100      	movs	r1, #0
 800502a:	2204      	movs	r2, #4
 800502c:	f102 0514 	add.w	r5, r2, #20
 8005030:	429d      	cmp	r5, r3
 8005032:	d91f      	bls.n	8005074 <_dtoa_r+0x2a4>
 8005034:	6041      	str	r1, [r0, #4]
 8005036:	4658      	mov	r0, fp
 8005038:	f000 fd8e 	bl	8005b58 <_Balloc>
 800503c:	4682      	mov	sl, r0
 800503e:	2800      	cmp	r0, #0
 8005040:	d13c      	bne.n	80050bc <_dtoa_r+0x2ec>
 8005042:	4b1b      	ldr	r3, [pc, #108]	@ (80050b0 <_dtoa_r+0x2e0>)
 8005044:	4602      	mov	r2, r0
 8005046:	f240 11af 	movw	r1, #431	@ 0x1af
 800504a:	e6d8      	b.n	8004dfe <_dtoa_r+0x2e>
 800504c:	2301      	movs	r3, #1
 800504e:	e7e0      	b.n	8005012 <_dtoa_r+0x242>
 8005050:	2401      	movs	r4, #1
 8005052:	2300      	movs	r3, #0
 8005054:	9309      	str	r3, [sp, #36]	@ 0x24
 8005056:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005058:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	9307      	str	r3, [sp, #28]
 8005060:	2200      	movs	r2, #0
 8005062:	2312      	movs	r3, #18
 8005064:	e7d0      	b.n	8005008 <_dtoa_r+0x238>
 8005066:	2301      	movs	r3, #1
 8005068:	930b      	str	r3, [sp, #44]	@ 0x2c
 800506a:	e7f5      	b.n	8005058 <_dtoa_r+0x288>
 800506c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	9307      	str	r3, [sp, #28]
 8005072:	e7d7      	b.n	8005024 <_dtoa_r+0x254>
 8005074:	3101      	adds	r1, #1
 8005076:	0052      	lsls	r2, r2, #1
 8005078:	e7d8      	b.n	800502c <_dtoa_r+0x25c>
 800507a:	bf00      	nop
 800507c:	f3af 8000 	nop.w
 8005080:	636f4361 	.word	0x636f4361
 8005084:	3fd287a7 	.word	0x3fd287a7
 8005088:	8b60c8b3 	.word	0x8b60c8b3
 800508c:	3fc68a28 	.word	0x3fc68a28
 8005090:	509f79fb 	.word	0x509f79fb
 8005094:	3fd34413 	.word	0x3fd34413
 8005098:	08008bea 	.word	0x08008bea
 800509c:	08008c01 	.word	0x08008c01
 80050a0:	7ff00000 	.word	0x7ff00000
 80050a4:	08008bb5 	.word	0x08008bb5
 80050a8:	3ff80000 	.word	0x3ff80000
 80050ac:	08008cf8 	.word	0x08008cf8
 80050b0:	08008c59 	.word	0x08008c59
 80050b4:	08008be6 	.word	0x08008be6
 80050b8:	08008bb4 	.word	0x08008bb4
 80050bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80050c0:	6018      	str	r0, [r3, #0]
 80050c2:	9b07      	ldr	r3, [sp, #28]
 80050c4:	2b0e      	cmp	r3, #14
 80050c6:	f200 80a4 	bhi.w	8005212 <_dtoa_r+0x442>
 80050ca:	2c00      	cmp	r4, #0
 80050cc:	f000 80a1 	beq.w	8005212 <_dtoa_r+0x442>
 80050d0:	2f00      	cmp	r7, #0
 80050d2:	dd33      	ble.n	800513c <_dtoa_r+0x36c>
 80050d4:	4bad      	ldr	r3, [pc, #692]	@ (800538c <_dtoa_r+0x5bc>)
 80050d6:	f007 020f 	and.w	r2, r7, #15
 80050da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050de:	ed93 7b00 	vldr	d7, [r3]
 80050e2:	05f8      	lsls	r0, r7, #23
 80050e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80050e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80050ec:	d516      	bpl.n	800511c <_dtoa_r+0x34c>
 80050ee:	4ba8      	ldr	r3, [pc, #672]	@ (8005390 <_dtoa_r+0x5c0>)
 80050f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80050f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80050f8:	f7fb fbb0 	bl	800085c <__aeabi_ddiv>
 80050fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005100:	f004 040f 	and.w	r4, r4, #15
 8005104:	2603      	movs	r6, #3
 8005106:	4da2      	ldr	r5, [pc, #648]	@ (8005390 <_dtoa_r+0x5c0>)
 8005108:	b954      	cbnz	r4, 8005120 <_dtoa_r+0x350>
 800510a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800510e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005112:	f7fb fba3 	bl	800085c <__aeabi_ddiv>
 8005116:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800511a:	e028      	b.n	800516e <_dtoa_r+0x39e>
 800511c:	2602      	movs	r6, #2
 800511e:	e7f2      	b.n	8005106 <_dtoa_r+0x336>
 8005120:	07e1      	lsls	r1, r4, #31
 8005122:	d508      	bpl.n	8005136 <_dtoa_r+0x366>
 8005124:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005128:	e9d5 2300 	ldrd	r2, r3, [r5]
 800512c:	f7fb fa6c 	bl	8000608 <__aeabi_dmul>
 8005130:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005134:	3601      	adds	r6, #1
 8005136:	1064      	asrs	r4, r4, #1
 8005138:	3508      	adds	r5, #8
 800513a:	e7e5      	b.n	8005108 <_dtoa_r+0x338>
 800513c:	f000 80d2 	beq.w	80052e4 <_dtoa_r+0x514>
 8005140:	427c      	negs	r4, r7
 8005142:	4b92      	ldr	r3, [pc, #584]	@ (800538c <_dtoa_r+0x5bc>)
 8005144:	4d92      	ldr	r5, [pc, #584]	@ (8005390 <_dtoa_r+0x5c0>)
 8005146:	f004 020f 	and.w	r2, r4, #15
 800514a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800514e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005152:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005156:	f7fb fa57 	bl	8000608 <__aeabi_dmul>
 800515a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800515e:	1124      	asrs	r4, r4, #4
 8005160:	2300      	movs	r3, #0
 8005162:	2602      	movs	r6, #2
 8005164:	2c00      	cmp	r4, #0
 8005166:	f040 80b2 	bne.w	80052ce <_dtoa_r+0x4fe>
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1d3      	bne.n	8005116 <_dtoa_r+0x346>
 800516e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005170:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 80b7 	beq.w	80052e8 <_dtoa_r+0x518>
 800517a:	4b86      	ldr	r3, [pc, #536]	@ (8005394 <_dtoa_r+0x5c4>)
 800517c:	2200      	movs	r2, #0
 800517e:	4620      	mov	r0, r4
 8005180:	4629      	mov	r1, r5
 8005182:	f7fb fcb3 	bl	8000aec <__aeabi_dcmplt>
 8005186:	2800      	cmp	r0, #0
 8005188:	f000 80ae 	beq.w	80052e8 <_dtoa_r+0x518>
 800518c:	9b07      	ldr	r3, [sp, #28]
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 80aa 	beq.w	80052e8 <_dtoa_r+0x518>
 8005194:	9b00      	ldr	r3, [sp, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	dd37      	ble.n	800520a <_dtoa_r+0x43a>
 800519a:	1e7b      	subs	r3, r7, #1
 800519c:	9304      	str	r3, [sp, #16]
 800519e:	4620      	mov	r0, r4
 80051a0:	4b7d      	ldr	r3, [pc, #500]	@ (8005398 <_dtoa_r+0x5c8>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	4629      	mov	r1, r5
 80051a6:	f7fb fa2f 	bl	8000608 <__aeabi_dmul>
 80051aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051ae:	9c00      	ldr	r4, [sp, #0]
 80051b0:	3601      	adds	r6, #1
 80051b2:	4630      	mov	r0, r6
 80051b4:	f7fb f9be 	bl	8000534 <__aeabi_i2d>
 80051b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051bc:	f7fb fa24 	bl	8000608 <__aeabi_dmul>
 80051c0:	4b76      	ldr	r3, [pc, #472]	@ (800539c <_dtoa_r+0x5cc>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	f7fb f86a 	bl	800029c <__adddf3>
 80051c8:	4605      	mov	r5, r0
 80051ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80051ce:	2c00      	cmp	r4, #0
 80051d0:	f040 808d 	bne.w	80052ee <_dtoa_r+0x51e>
 80051d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051d8:	4b71      	ldr	r3, [pc, #452]	@ (80053a0 <_dtoa_r+0x5d0>)
 80051da:	2200      	movs	r2, #0
 80051dc:	f7fb f85c 	bl	8000298 <__aeabi_dsub>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80051e8:	462a      	mov	r2, r5
 80051ea:	4633      	mov	r3, r6
 80051ec:	f7fb fc9c 	bl	8000b28 <__aeabi_dcmpgt>
 80051f0:	2800      	cmp	r0, #0
 80051f2:	f040 828b 	bne.w	800570c <_dtoa_r+0x93c>
 80051f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051fa:	462a      	mov	r2, r5
 80051fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005200:	f7fb fc74 	bl	8000aec <__aeabi_dcmplt>
 8005204:	2800      	cmp	r0, #0
 8005206:	f040 8128 	bne.w	800545a <_dtoa_r+0x68a>
 800520a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800520e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005212:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005214:	2b00      	cmp	r3, #0
 8005216:	f2c0 815a 	blt.w	80054ce <_dtoa_r+0x6fe>
 800521a:	2f0e      	cmp	r7, #14
 800521c:	f300 8157 	bgt.w	80054ce <_dtoa_r+0x6fe>
 8005220:	4b5a      	ldr	r3, [pc, #360]	@ (800538c <_dtoa_r+0x5bc>)
 8005222:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005226:	ed93 7b00 	vldr	d7, [r3]
 800522a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800522c:	2b00      	cmp	r3, #0
 800522e:	ed8d 7b00 	vstr	d7, [sp]
 8005232:	da03      	bge.n	800523c <_dtoa_r+0x46c>
 8005234:	9b07      	ldr	r3, [sp, #28]
 8005236:	2b00      	cmp	r3, #0
 8005238:	f340 8101 	ble.w	800543e <_dtoa_r+0x66e>
 800523c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005240:	4656      	mov	r6, sl
 8005242:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005246:	4620      	mov	r0, r4
 8005248:	4629      	mov	r1, r5
 800524a:	f7fb fb07 	bl	800085c <__aeabi_ddiv>
 800524e:	f7fb fc8b 	bl	8000b68 <__aeabi_d2iz>
 8005252:	4680      	mov	r8, r0
 8005254:	f7fb f96e 	bl	8000534 <__aeabi_i2d>
 8005258:	e9dd 2300 	ldrd	r2, r3, [sp]
 800525c:	f7fb f9d4 	bl	8000608 <__aeabi_dmul>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4620      	mov	r0, r4
 8005266:	4629      	mov	r1, r5
 8005268:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800526c:	f7fb f814 	bl	8000298 <__aeabi_dsub>
 8005270:	f806 4b01 	strb.w	r4, [r6], #1
 8005274:	9d07      	ldr	r5, [sp, #28]
 8005276:	eba6 040a 	sub.w	r4, r6, sl
 800527a:	42a5      	cmp	r5, r4
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	f040 8117 	bne.w	80054b2 <_dtoa_r+0x6e2>
 8005284:	f7fb f80a 	bl	800029c <__adddf3>
 8005288:	e9dd 2300 	ldrd	r2, r3, [sp]
 800528c:	4604      	mov	r4, r0
 800528e:	460d      	mov	r5, r1
 8005290:	f7fb fc4a 	bl	8000b28 <__aeabi_dcmpgt>
 8005294:	2800      	cmp	r0, #0
 8005296:	f040 80f9 	bne.w	800548c <_dtoa_r+0x6bc>
 800529a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800529e:	4620      	mov	r0, r4
 80052a0:	4629      	mov	r1, r5
 80052a2:	f7fb fc19 	bl	8000ad8 <__aeabi_dcmpeq>
 80052a6:	b118      	cbz	r0, 80052b0 <_dtoa_r+0x4e0>
 80052a8:	f018 0f01 	tst.w	r8, #1
 80052ac:	f040 80ee 	bne.w	800548c <_dtoa_r+0x6bc>
 80052b0:	4649      	mov	r1, r9
 80052b2:	4658      	mov	r0, fp
 80052b4:	f000 fc90 	bl	8005bd8 <_Bfree>
 80052b8:	2300      	movs	r3, #0
 80052ba:	7033      	strb	r3, [r6, #0]
 80052bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80052be:	3701      	adds	r7, #1
 80052c0:	601f      	str	r7, [r3, #0]
 80052c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 831d 	beq.w	8005904 <_dtoa_r+0xb34>
 80052ca:	601e      	str	r6, [r3, #0]
 80052cc:	e31a      	b.n	8005904 <_dtoa_r+0xb34>
 80052ce:	07e2      	lsls	r2, r4, #31
 80052d0:	d505      	bpl.n	80052de <_dtoa_r+0x50e>
 80052d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80052d6:	f7fb f997 	bl	8000608 <__aeabi_dmul>
 80052da:	3601      	adds	r6, #1
 80052dc:	2301      	movs	r3, #1
 80052de:	1064      	asrs	r4, r4, #1
 80052e0:	3508      	adds	r5, #8
 80052e2:	e73f      	b.n	8005164 <_dtoa_r+0x394>
 80052e4:	2602      	movs	r6, #2
 80052e6:	e742      	b.n	800516e <_dtoa_r+0x39e>
 80052e8:	9c07      	ldr	r4, [sp, #28]
 80052ea:	9704      	str	r7, [sp, #16]
 80052ec:	e761      	b.n	80051b2 <_dtoa_r+0x3e2>
 80052ee:	4b27      	ldr	r3, [pc, #156]	@ (800538c <_dtoa_r+0x5bc>)
 80052f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80052f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80052f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80052fa:	4454      	add	r4, sl
 80052fc:	2900      	cmp	r1, #0
 80052fe:	d053      	beq.n	80053a8 <_dtoa_r+0x5d8>
 8005300:	4928      	ldr	r1, [pc, #160]	@ (80053a4 <_dtoa_r+0x5d4>)
 8005302:	2000      	movs	r0, #0
 8005304:	f7fb faaa 	bl	800085c <__aeabi_ddiv>
 8005308:	4633      	mov	r3, r6
 800530a:	462a      	mov	r2, r5
 800530c:	f7fa ffc4 	bl	8000298 <__aeabi_dsub>
 8005310:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005314:	4656      	mov	r6, sl
 8005316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800531a:	f7fb fc25 	bl	8000b68 <__aeabi_d2iz>
 800531e:	4605      	mov	r5, r0
 8005320:	f7fb f908 	bl	8000534 <__aeabi_i2d>
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800532c:	f7fa ffb4 	bl	8000298 <__aeabi_dsub>
 8005330:	3530      	adds	r5, #48	@ 0x30
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800533a:	f806 5b01 	strb.w	r5, [r6], #1
 800533e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005342:	f7fb fbd3 	bl	8000aec <__aeabi_dcmplt>
 8005346:	2800      	cmp	r0, #0
 8005348:	d171      	bne.n	800542e <_dtoa_r+0x65e>
 800534a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800534e:	4911      	ldr	r1, [pc, #68]	@ (8005394 <_dtoa_r+0x5c4>)
 8005350:	2000      	movs	r0, #0
 8005352:	f7fa ffa1 	bl	8000298 <__aeabi_dsub>
 8005356:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800535a:	f7fb fbc7 	bl	8000aec <__aeabi_dcmplt>
 800535e:	2800      	cmp	r0, #0
 8005360:	f040 8095 	bne.w	800548e <_dtoa_r+0x6be>
 8005364:	42a6      	cmp	r6, r4
 8005366:	f43f af50 	beq.w	800520a <_dtoa_r+0x43a>
 800536a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800536e:	4b0a      	ldr	r3, [pc, #40]	@ (8005398 <_dtoa_r+0x5c8>)
 8005370:	2200      	movs	r2, #0
 8005372:	f7fb f949 	bl	8000608 <__aeabi_dmul>
 8005376:	4b08      	ldr	r3, [pc, #32]	@ (8005398 <_dtoa_r+0x5c8>)
 8005378:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800537c:	2200      	movs	r2, #0
 800537e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005382:	f7fb f941 	bl	8000608 <__aeabi_dmul>
 8005386:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800538a:	e7c4      	b.n	8005316 <_dtoa_r+0x546>
 800538c:	08008cf8 	.word	0x08008cf8
 8005390:	08008cd0 	.word	0x08008cd0
 8005394:	3ff00000 	.word	0x3ff00000
 8005398:	40240000 	.word	0x40240000
 800539c:	401c0000 	.word	0x401c0000
 80053a0:	40140000 	.word	0x40140000
 80053a4:	3fe00000 	.word	0x3fe00000
 80053a8:	4631      	mov	r1, r6
 80053aa:	4628      	mov	r0, r5
 80053ac:	f7fb f92c 	bl	8000608 <__aeabi_dmul>
 80053b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80053b4:	9415      	str	r4, [sp, #84]	@ 0x54
 80053b6:	4656      	mov	r6, sl
 80053b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053bc:	f7fb fbd4 	bl	8000b68 <__aeabi_d2iz>
 80053c0:	4605      	mov	r5, r0
 80053c2:	f7fb f8b7 	bl	8000534 <__aeabi_i2d>
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053ce:	f7fa ff63 	bl	8000298 <__aeabi_dsub>
 80053d2:	3530      	adds	r5, #48	@ 0x30
 80053d4:	f806 5b01 	strb.w	r5, [r6], #1
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	42a6      	cmp	r6, r4
 80053de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80053e2:	f04f 0200 	mov.w	r2, #0
 80053e6:	d124      	bne.n	8005432 <_dtoa_r+0x662>
 80053e8:	4bac      	ldr	r3, [pc, #688]	@ (800569c <_dtoa_r+0x8cc>)
 80053ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80053ee:	f7fa ff55 	bl	800029c <__adddf3>
 80053f2:	4602      	mov	r2, r0
 80053f4:	460b      	mov	r3, r1
 80053f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053fa:	f7fb fb95 	bl	8000b28 <__aeabi_dcmpgt>
 80053fe:	2800      	cmp	r0, #0
 8005400:	d145      	bne.n	800548e <_dtoa_r+0x6be>
 8005402:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005406:	49a5      	ldr	r1, [pc, #660]	@ (800569c <_dtoa_r+0x8cc>)
 8005408:	2000      	movs	r0, #0
 800540a:	f7fa ff45 	bl	8000298 <__aeabi_dsub>
 800540e:	4602      	mov	r2, r0
 8005410:	460b      	mov	r3, r1
 8005412:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005416:	f7fb fb69 	bl	8000aec <__aeabi_dcmplt>
 800541a:	2800      	cmp	r0, #0
 800541c:	f43f aef5 	beq.w	800520a <_dtoa_r+0x43a>
 8005420:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005422:	1e73      	subs	r3, r6, #1
 8005424:	9315      	str	r3, [sp, #84]	@ 0x54
 8005426:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800542a:	2b30      	cmp	r3, #48	@ 0x30
 800542c:	d0f8      	beq.n	8005420 <_dtoa_r+0x650>
 800542e:	9f04      	ldr	r7, [sp, #16]
 8005430:	e73e      	b.n	80052b0 <_dtoa_r+0x4e0>
 8005432:	4b9b      	ldr	r3, [pc, #620]	@ (80056a0 <_dtoa_r+0x8d0>)
 8005434:	f7fb f8e8 	bl	8000608 <__aeabi_dmul>
 8005438:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800543c:	e7bc      	b.n	80053b8 <_dtoa_r+0x5e8>
 800543e:	d10c      	bne.n	800545a <_dtoa_r+0x68a>
 8005440:	4b98      	ldr	r3, [pc, #608]	@ (80056a4 <_dtoa_r+0x8d4>)
 8005442:	2200      	movs	r2, #0
 8005444:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005448:	f7fb f8de 	bl	8000608 <__aeabi_dmul>
 800544c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005450:	f7fb fb60 	bl	8000b14 <__aeabi_dcmpge>
 8005454:	2800      	cmp	r0, #0
 8005456:	f000 8157 	beq.w	8005708 <_dtoa_r+0x938>
 800545a:	2400      	movs	r4, #0
 800545c:	4625      	mov	r5, r4
 800545e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005460:	43db      	mvns	r3, r3
 8005462:	9304      	str	r3, [sp, #16]
 8005464:	4656      	mov	r6, sl
 8005466:	2700      	movs	r7, #0
 8005468:	4621      	mov	r1, r4
 800546a:	4658      	mov	r0, fp
 800546c:	f000 fbb4 	bl	8005bd8 <_Bfree>
 8005470:	2d00      	cmp	r5, #0
 8005472:	d0dc      	beq.n	800542e <_dtoa_r+0x65e>
 8005474:	b12f      	cbz	r7, 8005482 <_dtoa_r+0x6b2>
 8005476:	42af      	cmp	r7, r5
 8005478:	d003      	beq.n	8005482 <_dtoa_r+0x6b2>
 800547a:	4639      	mov	r1, r7
 800547c:	4658      	mov	r0, fp
 800547e:	f000 fbab 	bl	8005bd8 <_Bfree>
 8005482:	4629      	mov	r1, r5
 8005484:	4658      	mov	r0, fp
 8005486:	f000 fba7 	bl	8005bd8 <_Bfree>
 800548a:	e7d0      	b.n	800542e <_dtoa_r+0x65e>
 800548c:	9704      	str	r7, [sp, #16]
 800548e:	4633      	mov	r3, r6
 8005490:	461e      	mov	r6, r3
 8005492:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005496:	2a39      	cmp	r2, #57	@ 0x39
 8005498:	d107      	bne.n	80054aa <_dtoa_r+0x6da>
 800549a:	459a      	cmp	sl, r3
 800549c:	d1f8      	bne.n	8005490 <_dtoa_r+0x6c0>
 800549e:	9a04      	ldr	r2, [sp, #16]
 80054a0:	3201      	adds	r2, #1
 80054a2:	9204      	str	r2, [sp, #16]
 80054a4:	2230      	movs	r2, #48	@ 0x30
 80054a6:	f88a 2000 	strb.w	r2, [sl]
 80054aa:	781a      	ldrb	r2, [r3, #0]
 80054ac:	3201      	adds	r2, #1
 80054ae:	701a      	strb	r2, [r3, #0]
 80054b0:	e7bd      	b.n	800542e <_dtoa_r+0x65e>
 80054b2:	4b7b      	ldr	r3, [pc, #492]	@ (80056a0 <_dtoa_r+0x8d0>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	f7fb f8a7 	bl	8000608 <__aeabi_dmul>
 80054ba:	2200      	movs	r2, #0
 80054bc:	2300      	movs	r3, #0
 80054be:	4604      	mov	r4, r0
 80054c0:	460d      	mov	r5, r1
 80054c2:	f7fb fb09 	bl	8000ad8 <__aeabi_dcmpeq>
 80054c6:	2800      	cmp	r0, #0
 80054c8:	f43f aebb 	beq.w	8005242 <_dtoa_r+0x472>
 80054cc:	e6f0      	b.n	80052b0 <_dtoa_r+0x4e0>
 80054ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80054d0:	2a00      	cmp	r2, #0
 80054d2:	f000 80db 	beq.w	800568c <_dtoa_r+0x8bc>
 80054d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054d8:	2a01      	cmp	r2, #1
 80054da:	f300 80bf 	bgt.w	800565c <_dtoa_r+0x88c>
 80054de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80054e0:	2a00      	cmp	r2, #0
 80054e2:	f000 80b7 	beq.w	8005654 <_dtoa_r+0x884>
 80054e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80054ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80054ec:	4646      	mov	r6, r8
 80054ee:	9a08      	ldr	r2, [sp, #32]
 80054f0:	2101      	movs	r1, #1
 80054f2:	441a      	add	r2, r3
 80054f4:	4658      	mov	r0, fp
 80054f6:	4498      	add	r8, r3
 80054f8:	9208      	str	r2, [sp, #32]
 80054fa:	f000 fc6b 	bl	8005dd4 <__i2b>
 80054fe:	4605      	mov	r5, r0
 8005500:	b15e      	cbz	r6, 800551a <_dtoa_r+0x74a>
 8005502:	9b08      	ldr	r3, [sp, #32]
 8005504:	2b00      	cmp	r3, #0
 8005506:	dd08      	ble.n	800551a <_dtoa_r+0x74a>
 8005508:	42b3      	cmp	r3, r6
 800550a:	9a08      	ldr	r2, [sp, #32]
 800550c:	bfa8      	it	ge
 800550e:	4633      	movge	r3, r6
 8005510:	eba8 0803 	sub.w	r8, r8, r3
 8005514:	1af6      	subs	r6, r6, r3
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	9308      	str	r3, [sp, #32]
 800551a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800551c:	b1f3      	cbz	r3, 800555c <_dtoa_r+0x78c>
 800551e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 80b7 	beq.w	8005694 <_dtoa_r+0x8c4>
 8005526:	b18c      	cbz	r4, 800554c <_dtoa_r+0x77c>
 8005528:	4629      	mov	r1, r5
 800552a:	4622      	mov	r2, r4
 800552c:	4658      	mov	r0, fp
 800552e:	f000 fd11 	bl	8005f54 <__pow5mult>
 8005532:	464a      	mov	r2, r9
 8005534:	4601      	mov	r1, r0
 8005536:	4605      	mov	r5, r0
 8005538:	4658      	mov	r0, fp
 800553a:	f000 fc61 	bl	8005e00 <__multiply>
 800553e:	4649      	mov	r1, r9
 8005540:	9004      	str	r0, [sp, #16]
 8005542:	4658      	mov	r0, fp
 8005544:	f000 fb48 	bl	8005bd8 <_Bfree>
 8005548:	9b04      	ldr	r3, [sp, #16]
 800554a:	4699      	mov	r9, r3
 800554c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800554e:	1b1a      	subs	r2, r3, r4
 8005550:	d004      	beq.n	800555c <_dtoa_r+0x78c>
 8005552:	4649      	mov	r1, r9
 8005554:	4658      	mov	r0, fp
 8005556:	f000 fcfd 	bl	8005f54 <__pow5mult>
 800555a:	4681      	mov	r9, r0
 800555c:	2101      	movs	r1, #1
 800555e:	4658      	mov	r0, fp
 8005560:	f000 fc38 	bl	8005dd4 <__i2b>
 8005564:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005566:	4604      	mov	r4, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 81cf 	beq.w	800590c <_dtoa_r+0xb3c>
 800556e:	461a      	mov	r2, r3
 8005570:	4601      	mov	r1, r0
 8005572:	4658      	mov	r0, fp
 8005574:	f000 fcee 	bl	8005f54 <__pow5mult>
 8005578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800557a:	2b01      	cmp	r3, #1
 800557c:	4604      	mov	r4, r0
 800557e:	f300 8095 	bgt.w	80056ac <_dtoa_r+0x8dc>
 8005582:	9b02      	ldr	r3, [sp, #8]
 8005584:	2b00      	cmp	r3, #0
 8005586:	f040 8087 	bne.w	8005698 <_dtoa_r+0x8c8>
 800558a:	9b03      	ldr	r3, [sp, #12]
 800558c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005590:	2b00      	cmp	r3, #0
 8005592:	f040 8089 	bne.w	80056a8 <_dtoa_r+0x8d8>
 8005596:	9b03      	ldr	r3, [sp, #12]
 8005598:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800559c:	0d1b      	lsrs	r3, r3, #20
 800559e:	051b      	lsls	r3, r3, #20
 80055a0:	b12b      	cbz	r3, 80055ae <_dtoa_r+0x7de>
 80055a2:	9b08      	ldr	r3, [sp, #32]
 80055a4:	3301      	adds	r3, #1
 80055a6:	9308      	str	r3, [sp, #32]
 80055a8:	f108 0801 	add.w	r8, r8, #1
 80055ac:	2301      	movs	r3, #1
 80055ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80055b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 81b0 	beq.w	8005918 <_dtoa_r+0xb48>
 80055b8:	6923      	ldr	r3, [r4, #16]
 80055ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80055be:	6918      	ldr	r0, [r3, #16]
 80055c0:	f000 fbbc 	bl	8005d3c <__hi0bits>
 80055c4:	f1c0 0020 	rsb	r0, r0, #32
 80055c8:	9b08      	ldr	r3, [sp, #32]
 80055ca:	4418      	add	r0, r3
 80055cc:	f010 001f 	ands.w	r0, r0, #31
 80055d0:	d077      	beq.n	80056c2 <_dtoa_r+0x8f2>
 80055d2:	f1c0 0320 	rsb	r3, r0, #32
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	dd6b      	ble.n	80056b2 <_dtoa_r+0x8e2>
 80055da:	9b08      	ldr	r3, [sp, #32]
 80055dc:	f1c0 001c 	rsb	r0, r0, #28
 80055e0:	4403      	add	r3, r0
 80055e2:	4480      	add	r8, r0
 80055e4:	4406      	add	r6, r0
 80055e6:	9308      	str	r3, [sp, #32]
 80055e8:	f1b8 0f00 	cmp.w	r8, #0
 80055ec:	dd05      	ble.n	80055fa <_dtoa_r+0x82a>
 80055ee:	4649      	mov	r1, r9
 80055f0:	4642      	mov	r2, r8
 80055f2:	4658      	mov	r0, fp
 80055f4:	f000 fd08 	bl	8006008 <__lshift>
 80055f8:	4681      	mov	r9, r0
 80055fa:	9b08      	ldr	r3, [sp, #32]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	dd05      	ble.n	800560c <_dtoa_r+0x83c>
 8005600:	4621      	mov	r1, r4
 8005602:	461a      	mov	r2, r3
 8005604:	4658      	mov	r0, fp
 8005606:	f000 fcff 	bl	8006008 <__lshift>
 800560a:	4604      	mov	r4, r0
 800560c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800560e:	2b00      	cmp	r3, #0
 8005610:	d059      	beq.n	80056c6 <_dtoa_r+0x8f6>
 8005612:	4621      	mov	r1, r4
 8005614:	4648      	mov	r0, r9
 8005616:	f000 fd63 	bl	80060e0 <__mcmp>
 800561a:	2800      	cmp	r0, #0
 800561c:	da53      	bge.n	80056c6 <_dtoa_r+0x8f6>
 800561e:	1e7b      	subs	r3, r7, #1
 8005620:	9304      	str	r3, [sp, #16]
 8005622:	4649      	mov	r1, r9
 8005624:	2300      	movs	r3, #0
 8005626:	220a      	movs	r2, #10
 8005628:	4658      	mov	r0, fp
 800562a:	f000 faf7 	bl	8005c1c <__multadd>
 800562e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005630:	4681      	mov	r9, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 8172 	beq.w	800591c <_dtoa_r+0xb4c>
 8005638:	2300      	movs	r3, #0
 800563a:	4629      	mov	r1, r5
 800563c:	220a      	movs	r2, #10
 800563e:	4658      	mov	r0, fp
 8005640:	f000 faec 	bl	8005c1c <__multadd>
 8005644:	9b00      	ldr	r3, [sp, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	4605      	mov	r5, r0
 800564a:	dc67      	bgt.n	800571c <_dtoa_r+0x94c>
 800564c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800564e:	2b02      	cmp	r3, #2
 8005650:	dc41      	bgt.n	80056d6 <_dtoa_r+0x906>
 8005652:	e063      	b.n	800571c <_dtoa_r+0x94c>
 8005654:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005656:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800565a:	e746      	b.n	80054ea <_dtoa_r+0x71a>
 800565c:	9b07      	ldr	r3, [sp, #28]
 800565e:	1e5c      	subs	r4, r3, #1
 8005660:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005662:	42a3      	cmp	r3, r4
 8005664:	bfbf      	itttt	lt
 8005666:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005668:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800566a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800566c:	1ae3      	sublt	r3, r4, r3
 800566e:	bfb4      	ite	lt
 8005670:	18d2      	addlt	r2, r2, r3
 8005672:	1b1c      	subge	r4, r3, r4
 8005674:	9b07      	ldr	r3, [sp, #28]
 8005676:	bfbc      	itt	lt
 8005678:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800567a:	2400      	movlt	r4, #0
 800567c:	2b00      	cmp	r3, #0
 800567e:	bfb5      	itete	lt
 8005680:	eba8 0603 	sublt.w	r6, r8, r3
 8005684:	9b07      	ldrge	r3, [sp, #28]
 8005686:	2300      	movlt	r3, #0
 8005688:	4646      	movge	r6, r8
 800568a:	e730      	b.n	80054ee <_dtoa_r+0x71e>
 800568c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800568e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005690:	4646      	mov	r6, r8
 8005692:	e735      	b.n	8005500 <_dtoa_r+0x730>
 8005694:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005696:	e75c      	b.n	8005552 <_dtoa_r+0x782>
 8005698:	2300      	movs	r3, #0
 800569a:	e788      	b.n	80055ae <_dtoa_r+0x7de>
 800569c:	3fe00000 	.word	0x3fe00000
 80056a0:	40240000 	.word	0x40240000
 80056a4:	40140000 	.word	0x40140000
 80056a8:	9b02      	ldr	r3, [sp, #8]
 80056aa:	e780      	b.n	80055ae <_dtoa_r+0x7de>
 80056ac:	2300      	movs	r3, #0
 80056ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80056b0:	e782      	b.n	80055b8 <_dtoa_r+0x7e8>
 80056b2:	d099      	beq.n	80055e8 <_dtoa_r+0x818>
 80056b4:	9a08      	ldr	r2, [sp, #32]
 80056b6:	331c      	adds	r3, #28
 80056b8:	441a      	add	r2, r3
 80056ba:	4498      	add	r8, r3
 80056bc:	441e      	add	r6, r3
 80056be:	9208      	str	r2, [sp, #32]
 80056c0:	e792      	b.n	80055e8 <_dtoa_r+0x818>
 80056c2:	4603      	mov	r3, r0
 80056c4:	e7f6      	b.n	80056b4 <_dtoa_r+0x8e4>
 80056c6:	9b07      	ldr	r3, [sp, #28]
 80056c8:	9704      	str	r7, [sp, #16]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	dc20      	bgt.n	8005710 <_dtoa_r+0x940>
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	dd1e      	ble.n	8005714 <_dtoa_r+0x944>
 80056d6:	9b00      	ldr	r3, [sp, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f47f aec0 	bne.w	800545e <_dtoa_r+0x68e>
 80056de:	4621      	mov	r1, r4
 80056e0:	2205      	movs	r2, #5
 80056e2:	4658      	mov	r0, fp
 80056e4:	f000 fa9a 	bl	8005c1c <__multadd>
 80056e8:	4601      	mov	r1, r0
 80056ea:	4604      	mov	r4, r0
 80056ec:	4648      	mov	r0, r9
 80056ee:	f000 fcf7 	bl	80060e0 <__mcmp>
 80056f2:	2800      	cmp	r0, #0
 80056f4:	f77f aeb3 	ble.w	800545e <_dtoa_r+0x68e>
 80056f8:	4656      	mov	r6, sl
 80056fa:	2331      	movs	r3, #49	@ 0x31
 80056fc:	f806 3b01 	strb.w	r3, [r6], #1
 8005700:	9b04      	ldr	r3, [sp, #16]
 8005702:	3301      	adds	r3, #1
 8005704:	9304      	str	r3, [sp, #16]
 8005706:	e6ae      	b.n	8005466 <_dtoa_r+0x696>
 8005708:	9c07      	ldr	r4, [sp, #28]
 800570a:	9704      	str	r7, [sp, #16]
 800570c:	4625      	mov	r5, r4
 800570e:	e7f3      	b.n	80056f8 <_dtoa_r+0x928>
 8005710:	9b07      	ldr	r3, [sp, #28]
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005716:	2b00      	cmp	r3, #0
 8005718:	f000 8104 	beq.w	8005924 <_dtoa_r+0xb54>
 800571c:	2e00      	cmp	r6, #0
 800571e:	dd05      	ble.n	800572c <_dtoa_r+0x95c>
 8005720:	4629      	mov	r1, r5
 8005722:	4632      	mov	r2, r6
 8005724:	4658      	mov	r0, fp
 8005726:	f000 fc6f 	bl	8006008 <__lshift>
 800572a:	4605      	mov	r5, r0
 800572c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800572e:	2b00      	cmp	r3, #0
 8005730:	d05a      	beq.n	80057e8 <_dtoa_r+0xa18>
 8005732:	6869      	ldr	r1, [r5, #4]
 8005734:	4658      	mov	r0, fp
 8005736:	f000 fa0f 	bl	8005b58 <_Balloc>
 800573a:	4606      	mov	r6, r0
 800573c:	b928      	cbnz	r0, 800574a <_dtoa_r+0x97a>
 800573e:	4b84      	ldr	r3, [pc, #528]	@ (8005950 <_dtoa_r+0xb80>)
 8005740:	4602      	mov	r2, r0
 8005742:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005746:	f7ff bb5a 	b.w	8004dfe <_dtoa_r+0x2e>
 800574a:	692a      	ldr	r2, [r5, #16]
 800574c:	3202      	adds	r2, #2
 800574e:	0092      	lsls	r2, r2, #2
 8005750:	f105 010c 	add.w	r1, r5, #12
 8005754:	300c      	adds	r0, #12
 8005756:	f7ff fa9c 	bl	8004c92 <memcpy>
 800575a:	2201      	movs	r2, #1
 800575c:	4631      	mov	r1, r6
 800575e:	4658      	mov	r0, fp
 8005760:	f000 fc52 	bl	8006008 <__lshift>
 8005764:	f10a 0301 	add.w	r3, sl, #1
 8005768:	9307      	str	r3, [sp, #28]
 800576a:	9b00      	ldr	r3, [sp, #0]
 800576c:	4453      	add	r3, sl
 800576e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005770:	9b02      	ldr	r3, [sp, #8]
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	462f      	mov	r7, r5
 8005778:	930a      	str	r3, [sp, #40]	@ 0x28
 800577a:	4605      	mov	r5, r0
 800577c:	9b07      	ldr	r3, [sp, #28]
 800577e:	4621      	mov	r1, r4
 8005780:	3b01      	subs	r3, #1
 8005782:	4648      	mov	r0, r9
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	f7ff fa99 	bl	8004cbc <quorem>
 800578a:	4639      	mov	r1, r7
 800578c:	9002      	str	r0, [sp, #8]
 800578e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005792:	4648      	mov	r0, r9
 8005794:	f000 fca4 	bl	80060e0 <__mcmp>
 8005798:	462a      	mov	r2, r5
 800579a:	9008      	str	r0, [sp, #32]
 800579c:	4621      	mov	r1, r4
 800579e:	4658      	mov	r0, fp
 80057a0:	f000 fcba 	bl	8006118 <__mdiff>
 80057a4:	68c2      	ldr	r2, [r0, #12]
 80057a6:	4606      	mov	r6, r0
 80057a8:	bb02      	cbnz	r2, 80057ec <_dtoa_r+0xa1c>
 80057aa:	4601      	mov	r1, r0
 80057ac:	4648      	mov	r0, r9
 80057ae:	f000 fc97 	bl	80060e0 <__mcmp>
 80057b2:	4602      	mov	r2, r0
 80057b4:	4631      	mov	r1, r6
 80057b6:	4658      	mov	r0, fp
 80057b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80057ba:	f000 fa0d 	bl	8005bd8 <_Bfree>
 80057be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80057c2:	9e07      	ldr	r6, [sp, #28]
 80057c4:	ea43 0102 	orr.w	r1, r3, r2
 80057c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057ca:	4319      	orrs	r1, r3
 80057cc:	d110      	bne.n	80057f0 <_dtoa_r+0xa20>
 80057ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80057d2:	d029      	beq.n	8005828 <_dtoa_r+0xa58>
 80057d4:	9b08      	ldr	r3, [sp, #32]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	dd02      	ble.n	80057e0 <_dtoa_r+0xa10>
 80057da:	9b02      	ldr	r3, [sp, #8]
 80057dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80057e0:	9b00      	ldr	r3, [sp, #0]
 80057e2:	f883 8000 	strb.w	r8, [r3]
 80057e6:	e63f      	b.n	8005468 <_dtoa_r+0x698>
 80057e8:	4628      	mov	r0, r5
 80057ea:	e7bb      	b.n	8005764 <_dtoa_r+0x994>
 80057ec:	2201      	movs	r2, #1
 80057ee:	e7e1      	b.n	80057b4 <_dtoa_r+0x9e4>
 80057f0:	9b08      	ldr	r3, [sp, #32]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	db04      	blt.n	8005800 <_dtoa_r+0xa30>
 80057f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80057f8:	430b      	orrs	r3, r1
 80057fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80057fc:	430b      	orrs	r3, r1
 80057fe:	d120      	bne.n	8005842 <_dtoa_r+0xa72>
 8005800:	2a00      	cmp	r2, #0
 8005802:	dded      	ble.n	80057e0 <_dtoa_r+0xa10>
 8005804:	4649      	mov	r1, r9
 8005806:	2201      	movs	r2, #1
 8005808:	4658      	mov	r0, fp
 800580a:	f000 fbfd 	bl	8006008 <__lshift>
 800580e:	4621      	mov	r1, r4
 8005810:	4681      	mov	r9, r0
 8005812:	f000 fc65 	bl	80060e0 <__mcmp>
 8005816:	2800      	cmp	r0, #0
 8005818:	dc03      	bgt.n	8005822 <_dtoa_r+0xa52>
 800581a:	d1e1      	bne.n	80057e0 <_dtoa_r+0xa10>
 800581c:	f018 0f01 	tst.w	r8, #1
 8005820:	d0de      	beq.n	80057e0 <_dtoa_r+0xa10>
 8005822:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005826:	d1d8      	bne.n	80057da <_dtoa_r+0xa0a>
 8005828:	9a00      	ldr	r2, [sp, #0]
 800582a:	2339      	movs	r3, #57	@ 0x39
 800582c:	7013      	strb	r3, [r2, #0]
 800582e:	4633      	mov	r3, r6
 8005830:	461e      	mov	r6, r3
 8005832:	3b01      	subs	r3, #1
 8005834:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005838:	2a39      	cmp	r2, #57	@ 0x39
 800583a:	d052      	beq.n	80058e2 <_dtoa_r+0xb12>
 800583c:	3201      	adds	r2, #1
 800583e:	701a      	strb	r2, [r3, #0]
 8005840:	e612      	b.n	8005468 <_dtoa_r+0x698>
 8005842:	2a00      	cmp	r2, #0
 8005844:	dd07      	ble.n	8005856 <_dtoa_r+0xa86>
 8005846:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800584a:	d0ed      	beq.n	8005828 <_dtoa_r+0xa58>
 800584c:	9a00      	ldr	r2, [sp, #0]
 800584e:	f108 0301 	add.w	r3, r8, #1
 8005852:	7013      	strb	r3, [r2, #0]
 8005854:	e608      	b.n	8005468 <_dtoa_r+0x698>
 8005856:	9b07      	ldr	r3, [sp, #28]
 8005858:	9a07      	ldr	r2, [sp, #28]
 800585a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800585e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005860:	4293      	cmp	r3, r2
 8005862:	d028      	beq.n	80058b6 <_dtoa_r+0xae6>
 8005864:	4649      	mov	r1, r9
 8005866:	2300      	movs	r3, #0
 8005868:	220a      	movs	r2, #10
 800586a:	4658      	mov	r0, fp
 800586c:	f000 f9d6 	bl	8005c1c <__multadd>
 8005870:	42af      	cmp	r7, r5
 8005872:	4681      	mov	r9, r0
 8005874:	f04f 0300 	mov.w	r3, #0
 8005878:	f04f 020a 	mov.w	r2, #10
 800587c:	4639      	mov	r1, r7
 800587e:	4658      	mov	r0, fp
 8005880:	d107      	bne.n	8005892 <_dtoa_r+0xac2>
 8005882:	f000 f9cb 	bl	8005c1c <__multadd>
 8005886:	4607      	mov	r7, r0
 8005888:	4605      	mov	r5, r0
 800588a:	9b07      	ldr	r3, [sp, #28]
 800588c:	3301      	adds	r3, #1
 800588e:	9307      	str	r3, [sp, #28]
 8005890:	e774      	b.n	800577c <_dtoa_r+0x9ac>
 8005892:	f000 f9c3 	bl	8005c1c <__multadd>
 8005896:	4629      	mov	r1, r5
 8005898:	4607      	mov	r7, r0
 800589a:	2300      	movs	r3, #0
 800589c:	220a      	movs	r2, #10
 800589e:	4658      	mov	r0, fp
 80058a0:	f000 f9bc 	bl	8005c1c <__multadd>
 80058a4:	4605      	mov	r5, r0
 80058a6:	e7f0      	b.n	800588a <_dtoa_r+0xaba>
 80058a8:	9b00      	ldr	r3, [sp, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	bfcc      	ite	gt
 80058ae:	461e      	movgt	r6, r3
 80058b0:	2601      	movle	r6, #1
 80058b2:	4456      	add	r6, sl
 80058b4:	2700      	movs	r7, #0
 80058b6:	4649      	mov	r1, r9
 80058b8:	2201      	movs	r2, #1
 80058ba:	4658      	mov	r0, fp
 80058bc:	f000 fba4 	bl	8006008 <__lshift>
 80058c0:	4621      	mov	r1, r4
 80058c2:	4681      	mov	r9, r0
 80058c4:	f000 fc0c 	bl	80060e0 <__mcmp>
 80058c8:	2800      	cmp	r0, #0
 80058ca:	dcb0      	bgt.n	800582e <_dtoa_r+0xa5e>
 80058cc:	d102      	bne.n	80058d4 <_dtoa_r+0xb04>
 80058ce:	f018 0f01 	tst.w	r8, #1
 80058d2:	d1ac      	bne.n	800582e <_dtoa_r+0xa5e>
 80058d4:	4633      	mov	r3, r6
 80058d6:	461e      	mov	r6, r3
 80058d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80058dc:	2a30      	cmp	r2, #48	@ 0x30
 80058de:	d0fa      	beq.n	80058d6 <_dtoa_r+0xb06>
 80058e0:	e5c2      	b.n	8005468 <_dtoa_r+0x698>
 80058e2:	459a      	cmp	sl, r3
 80058e4:	d1a4      	bne.n	8005830 <_dtoa_r+0xa60>
 80058e6:	9b04      	ldr	r3, [sp, #16]
 80058e8:	3301      	adds	r3, #1
 80058ea:	9304      	str	r3, [sp, #16]
 80058ec:	2331      	movs	r3, #49	@ 0x31
 80058ee:	f88a 3000 	strb.w	r3, [sl]
 80058f2:	e5b9      	b.n	8005468 <_dtoa_r+0x698>
 80058f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80058f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005954 <_dtoa_r+0xb84>
 80058fa:	b11b      	cbz	r3, 8005904 <_dtoa_r+0xb34>
 80058fc:	f10a 0308 	add.w	r3, sl, #8
 8005900:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005902:	6013      	str	r3, [r2, #0]
 8005904:	4650      	mov	r0, sl
 8005906:	b019      	add	sp, #100	@ 0x64
 8005908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800590c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800590e:	2b01      	cmp	r3, #1
 8005910:	f77f ae37 	ble.w	8005582 <_dtoa_r+0x7b2>
 8005914:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005916:	930a      	str	r3, [sp, #40]	@ 0x28
 8005918:	2001      	movs	r0, #1
 800591a:	e655      	b.n	80055c8 <_dtoa_r+0x7f8>
 800591c:	9b00      	ldr	r3, [sp, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	f77f aed6 	ble.w	80056d0 <_dtoa_r+0x900>
 8005924:	4656      	mov	r6, sl
 8005926:	4621      	mov	r1, r4
 8005928:	4648      	mov	r0, r9
 800592a:	f7ff f9c7 	bl	8004cbc <quorem>
 800592e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005932:	f806 8b01 	strb.w	r8, [r6], #1
 8005936:	9b00      	ldr	r3, [sp, #0]
 8005938:	eba6 020a 	sub.w	r2, r6, sl
 800593c:	4293      	cmp	r3, r2
 800593e:	ddb3      	ble.n	80058a8 <_dtoa_r+0xad8>
 8005940:	4649      	mov	r1, r9
 8005942:	2300      	movs	r3, #0
 8005944:	220a      	movs	r2, #10
 8005946:	4658      	mov	r0, fp
 8005948:	f000 f968 	bl	8005c1c <__multadd>
 800594c:	4681      	mov	r9, r0
 800594e:	e7ea      	b.n	8005926 <_dtoa_r+0xb56>
 8005950:	08008c59 	.word	0x08008c59
 8005954:	08008bdd 	.word	0x08008bdd

08005958 <_free_r>:
 8005958:	b538      	push	{r3, r4, r5, lr}
 800595a:	4605      	mov	r5, r0
 800595c:	2900      	cmp	r1, #0
 800595e:	d041      	beq.n	80059e4 <_free_r+0x8c>
 8005960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005964:	1f0c      	subs	r4, r1, #4
 8005966:	2b00      	cmp	r3, #0
 8005968:	bfb8      	it	lt
 800596a:	18e4      	addlt	r4, r4, r3
 800596c:	f000 f8e8 	bl	8005b40 <__malloc_lock>
 8005970:	4a1d      	ldr	r2, [pc, #116]	@ (80059e8 <_free_r+0x90>)
 8005972:	6813      	ldr	r3, [r2, #0]
 8005974:	b933      	cbnz	r3, 8005984 <_free_r+0x2c>
 8005976:	6063      	str	r3, [r4, #4]
 8005978:	6014      	str	r4, [r2, #0]
 800597a:	4628      	mov	r0, r5
 800597c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005980:	f000 b8e4 	b.w	8005b4c <__malloc_unlock>
 8005984:	42a3      	cmp	r3, r4
 8005986:	d908      	bls.n	800599a <_free_r+0x42>
 8005988:	6820      	ldr	r0, [r4, #0]
 800598a:	1821      	adds	r1, r4, r0
 800598c:	428b      	cmp	r3, r1
 800598e:	bf01      	itttt	eq
 8005990:	6819      	ldreq	r1, [r3, #0]
 8005992:	685b      	ldreq	r3, [r3, #4]
 8005994:	1809      	addeq	r1, r1, r0
 8005996:	6021      	streq	r1, [r4, #0]
 8005998:	e7ed      	b.n	8005976 <_free_r+0x1e>
 800599a:	461a      	mov	r2, r3
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	b10b      	cbz	r3, 80059a4 <_free_r+0x4c>
 80059a0:	42a3      	cmp	r3, r4
 80059a2:	d9fa      	bls.n	800599a <_free_r+0x42>
 80059a4:	6811      	ldr	r1, [r2, #0]
 80059a6:	1850      	adds	r0, r2, r1
 80059a8:	42a0      	cmp	r0, r4
 80059aa:	d10b      	bne.n	80059c4 <_free_r+0x6c>
 80059ac:	6820      	ldr	r0, [r4, #0]
 80059ae:	4401      	add	r1, r0
 80059b0:	1850      	adds	r0, r2, r1
 80059b2:	4283      	cmp	r3, r0
 80059b4:	6011      	str	r1, [r2, #0]
 80059b6:	d1e0      	bne.n	800597a <_free_r+0x22>
 80059b8:	6818      	ldr	r0, [r3, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	6053      	str	r3, [r2, #4]
 80059be:	4408      	add	r0, r1
 80059c0:	6010      	str	r0, [r2, #0]
 80059c2:	e7da      	b.n	800597a <_free_r+0x22>
 80059c4:	d902      	bls.n	80059cc <_free_r+0x74>
 80059c6:	230c      	movs	r3, #12
 80059c8:	602b      	str	r3, [r5, #0]
 80059ca:	e7d6      	b.n	800597a <_free_r+0x22>
 80059cc:	6820      	ldr	r0, [r4, #0]
 80059ce:	1821      	adds	r1, r4, r0
 80059d0:	428b      	cmp	r3, r1
 80059d2:	bf04      	itt	eq
 80059d4:	6819      	ldreq	r1, [r3, #0]
 80059d6:	685b      	ldreq	r3, [r3, #4]
 80059d8:	6063      	str	r3, [r4, #4]
 80059da:	bf04      	itt	eq
 80059dc:	1809      	addeq	r1, r1, r0
 80059de:	6021      	streq	r1, [r4, #0]
 80059e0:	6054      	str	r4, [r2, #4]
 80059e2:	e7ca      	b.n	800597a <_free_r+0x22>
 80059e4:	bd38      	pop	{r3, r4, r5, pc}
 80059e6:	bf00      	nop
 80059e8:	20004208 	.word	0x20004208

080059ec <malloc>:
 80059ec:	4b02      	ldr	r3, [pc, #8]	@ (80059f8 <malloc+0xc>)
 80059ee:	4601      	mov	r1, r0
 80059f0:	6818      	ldr	r0, [r3, #0]
 80059f2:	f000 b825 	b.w	8005a40 <_malloc_r>
 80059f6:	bf00      	nop
 80059f8:	2000009c 	.word	0x2000009c

080059fc <sbrk_aligned>:
 80059fc:	b570      	push	{r4, r5, r6, lr}
 80059fe:	4e0f      	ldr	r6, [pc, #60]	@ (8005a3c <sbrk_aligned+0x40>)
 8005a00:	460c      	mov	r4, r1
 8005a02:	6831      	ldr	r1, [r6, #0]
 8005a04:	4605      	mov	r5, r0
 8005a06:	b911      	cbnz	r1, 8005a0e <sbrk_aligned+0x12>
 8005a08:	f001 ffe2 	bl	80079d0 <_sbrk_r>
 8005a0c:	6030      	str	r0, [r6, #0]
 8005a0e:	4621      	mov	r1, r4
 8005a10:	4628      	mov	r0, r5
 8005a12:	f001 ffdd 	bl	80079d0 <_sbrk_r>
 8005a16:	1c43      	adds	r3, r0, #1
 8005a18:	d103      	bne.n	8005a22 <sbrk_aligned+0x26>
 8005a1a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005a1e:	4620      	mov	r0, r4
 8005a20:	bd70      	pop	{r4, r5, r6, pc}
 8005a22:	1cc4      	adds	r4, r0, #3
 8005a24:	f024 0403 	bic.w	r4, r4, #3
 8005a28:	42a0      	cmp	r0, r4
 8005a2a:	d0f8      	beq.n	8005a1e <sbrk_aligned+0x22>
 8005a2c:	1a21      	subs	r1, r4, r0
 8005a2e:	4628      	mov	r0, r5
 8005a30:	f001 ffce 	bl	80079d0 <_sbrk_r>
 8005a34:	3001      	adds	r0, #1
 8005a36:	d1f2      	bne.n	8005a1e <sbrk_aligned+0x22>
 8005a38:	e7ef      	b.n	8005a1a <sbrk_aligned+0x1e>
 8005a3a:	bf00      	nop
 8005a3c:	20004204 	.word	0x20004204

08005a40 <_malloc_r>:
 8005a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a44:	1ccd      	adds	r5, r1, #3
 8005a46:	f025 0503 	bic.w	r5, r5, #3
 8005a4a:	3508      	adds	r5, #8
 8005a4c:	2d0c      	cmp	r5, #12
 8005a4e:	bf38      	it	cc
 8005a50:	250c      	movcc	r5, #12
 8005a52:	2d00      	cmp	r5, #0
 8005a54:	4606      	mov	r6, r0
 8005a56:	db01      	blt.n	8005a5c <_malloc_r+0x1c>
 8005a58:	42a9      	cmp	r1, r5
 8005a5a:	d904      	bls.n	8005a66 <_malloc_r+0x26>
 8005a5c:	230c      	movs	r3, #12
 8005a5e:	6033      	str	r3, [r6, #0]
 8005a60:	2000      	movs	r0, #0
 8005a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b3c <_malloc_r+0xfc>
 8005a6a:	f000 f869 	bl	8005b40 <__malloc_lock>
 8005a6e:	f8d8 3000 	ldr.w	r3, [r8]
 8005a72:	461c      	mov	r4, r3
 8005a74:	bb44      	cbnz	r4, 8005ac8 <_malloc_r+0x88>
 8005a76:	4629      	mov	r1, r5
 8005a78:	4630      	mov	r0, r6
 8005a7a:	f7ff ffbf 	bl	80059fc <sbrk_aligned>
 8005a7e:	1c43      	adds	r3, r0, #1
 8005a80:	4604      	mov	r4, r0
 8005a82:	d158      	bne.n	8005b36 <_malloc_r+0xf6>
 8005a84:	f8d8 4000 	ldr.w	r4, [r8]
 8005a88:	4627      	mov	r7, r4
 8005a8a:	2f00      	cmp	r7, #0
 8005a8c:	d143      	bne.n	8005b16 <_malloc_r+0xd6>
 8005a8e:	2c00      	cmp	r4, #0
 8005a90:	d04b      	beq.n	8005b2a <_malloc_r+0xea>
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	4639      	mov	r1, r7
 8005a96:	4630      	mov	r0, r6
 8005a98:	eb04 0903 	add.w	r9, r4, r3
 8005a9c:	f001 ff98 	bl	80079d0 <_sbrk_r>
 8005aa0:	4581      	cmp	r9, r0
 8005aa2:	d142      	bne.n	8005b2a <_malloc_r+0xea>
 8005aa4:	6821      	ldr	r1, [r4, #0]
 8005aa6:	1a6d      	subs	r5, r5, r1
 8005aa8:	4629      	mov	r1, r5
 8005aaa:	4630      	mov	r0, r6
 8005aac:	f7ff ffa6 	bl	80059fc <sbrk_aligned>
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	d03a      	beq.n	8005b2a <_malloc_r+0xea>
 8005ab4:	6823      	ldr	r3, [r4, #0]
 8005ab6:	442b      	add	r3, r5
 8005ab8:	6023      	str	r3, [r4, #0]
 8005aba:	f8d8 3000 	ldr.w	r3, [r8]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	bb62      	cbnz	r2, 8005b1c <_malloc_r+0xdc>
 8005ac2:	f8c8 7000 	str.w	r7, [r8]
 8005ac6:	e00f      	b.n	8005ae8 <_malloc_r+0xa8>
 8005ac8:	6822      	ldr	r2, [r4, #0]
 8005aca:	1b52      	subs	r2, r2, r5
 8005acc:	d420      	bmi.n	8005b10 <_malloc_r+0xd0>
 8005ace:	2a0b      	cmp	r2, #11
 8005ad0:	d917      	bls.n	8005b02 <_malloc_r+0xc2>
 8005ad2:	1961      	adds	r1, r4, r5
 8005ad4:	42a3      	cmp	r3, r4
 8005ad6:	6025      	str	r5, [r4, #0]
 8005ad8:	bf18      	it	ne
 8005ada:	6059      	strne	r1, [r3, #4]
 8005adc:	6863      	ldr	r3, [r4, #4]
 8005ade:	bf08      	it	eq
 8005ae0:	f8c8 1000 	streq.w	r1, [r8]
 8005ae4:	5162      	str	r2, [r4, r5]
 8005ae6:	604b      	str	r3, [r1, #4]
 8005ae8:	4630      	mov	r0, r6
 8005aea:	f000 f82f 	bl	8005b4c <__malloc_unlock>
 8005aee:	f104 000b 	add.w	r0, r4, #11
 8005af2:	1d23      	adds	r3, r4, #4
 8005af4:	f020 0007 	bic.w	r0, r0, #7
 8005af8:	1ac2      	subs	r2, r0, r3
 8005afa:	bf1c      	itt	ne
 8005afc:	1a1b      	subne	r3, r3, r0
 8005afe:	50a3      	strne	r3, [r4, r2]
 8005b00:	e7af      	b.n	8005a62 <_malloc_r+0x22>
 8005b02:	6862      	ldr	r2, [r4, #4]
 8005b04:	42a3      	cmp	r3, r4
 8005b06:	bf0c      	ite	eq
 8005b08:	f8c8 2000 	streq.w	r2, [r8]
 8005b0c:	605a      	strne	r2, [r3, #4]
 8005b0e:	e7eb      	b.n	8005ae8 <_malloc_r+0xa8>
 8005b10:	4623      	mov	r3, r4
 8005b12:	6864      	ldr	r4, [r4, #4]
 8005b14:	e7ae      	b.n	8005a74 <_malloc_r+0x34>
 8005b16:	463c      	mov	r4, r7
 8005b18:	687f      	ldr	r7, [r7, #4]
 8005b1a:	e7b6      	b.n	8005a8a <_malloc_r+0x4a>
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	42a3      	cmp	r3, r4
 8005b22:	d1fb      	bne.n	8005b1c <_malloc_r+0xdc>
 8005b24:	2300      	movs	r3, #0
 8005b26:	6053      	str	r3, [r2, #4]
 8005b28:	e7de      	b.n	8005ae8 <_malloc_r+0xa8>
 8005b2a:	230c      	movs	r3, #12
 8005b2c:	6033      	str	r3, [r6, #0]
 8005b2e:	4630      	mov	r0, r6
 8005b30:	f000 f80c 	bl	8005b4c <__malloc_unlock>
 8005b34:	e794      	b.n	8005a60 <_malloc_r+0x20>
 8005b36:	6005      	str	r5, [r0, #0]
 8005b38:	e7d6      	b.n	8005ae8 <_malloc_r+0xa8>
 8005b3a:	bf00      	nop
 8005b3c:	20004208 	.word	0x20004208

08005b40 <__malloc_lock>:
 8005b40:	4801      	ldr	r0, [pc, #4]	@ (8005b48 <__malloc_lock+0x8>)
 8005b42:	f7ff b8a4 	b.w	8004c8e <__retarget_lock_acquire_recursive>
 8005b46:	bf00      	nop
 8005b48:	20004200 	.word	0x20004200

08005b4c <__malloc_unlock>:
 8005b4c:	4801      	ldr	r0, [pc, #4]	@ (8005b54 <__malloc_unlock+0x8>)
 8005b4e:	f7ff b89f 	b.w	8004c90 <__retarget_lock_release_recursive>
 8005b52:	bf00      	nop
 8005b54:	20004200 	.word	0x20004200

08005b58 <_Balloc>:
 8005b58:	b570      	push	{r4, r5, r6, lr}
 8005b5a:	69c6      	ldr	r6, [r0, #28]
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	460d      	mov	r5, r1
 8005b60:	b976      	cbnz	r6, 8005b80 <_Balloc+0x28>
 8005b62:	2010      	movs	r0, #16
 8005b64:	f7ff ff42 	bl	80059ec <malloc>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	61e0      	str	r0, [r4, #28]
 8005b6c:	b920      	cbnz	r0, 8005b78 <_Balloc+0x20>
 8005b6e:	4b18      	ldr	r3, [pc, #96]	@ (8005bd0 <_Balloc+0x78>)
 8005b70:	4818      	ldr	r0, [pc, #96]	@ (8005bd4 <_Balloc+0x7c>)
 8005b72:	216b      	movs	r1, #107	@ 0x6b
 8005b74:	f001 ff44 	bl	8007a00 <__assert_func>
 8005b78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b7c:	6006      	str	r6, [r0, #0]
 8005b7e:	60c6      	str	r6, [r0, #12]
 8005b80:	69e6      	ldr	r6, [r4, #28]
 8005b82:	68f3      	ldr	r3, [r6, #12]
 8005b84:	b183      	cbz	r3, 8005ba8 <_Balloc+0x50>
 8005b86:	69e3      	ldr	r3, [r4, #28]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005b8e:	b9b8      	cbnz	r0, 8005bc0 <_Balloc+0x68>
 8005b90:	2101      	movs	r1, #1
 8005b92:	fa01 f605 	lsl.w	r6, r1, r5
 8005b96:	1d72      	adds	r2, r6, #5
 8005b98:	0092      	lsls	r2, r2, #2
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	f001 ff4e 	bl	8007a3c <_calloc_r>
 8005ba0:	b160      	cbz	r0, 8005bbc <_Balloc+0x64>
 8005ba2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ba6:	e00e      	b.n	8005bc6 <_Balloc+0x6e>
 8005ba8:	2221      	movs	r2, #33	@ 0x21
 8005baa:	2104      	movs	r1, #4
 8005bac:	4620      	mov	r0, r4
 8005bae:	f001 ff45 	bl	8007a3c <_calloc_r>
 8005bb2:	69e3      	ldr	r3, [r4, #28]
 8005bb4:	60f0      	str	r0, [r6, #12]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1e4      	bne.n	8005b86 <_Balloc+0x2e>
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	bd70      	pop	{r4, r5, r6, pc}
 8005bc0:	6802      	ldr	r2, [r0, #0]
 8005bc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005bcc:	e7f7      	b.n	8005bbe <_Balloc+0x66>
 8005bce:	bf00      	nop
 8005bd0:	08008bea 	.word	0x08008bea
 8005bd4:	08008c6a 	.word	0x08008c6a

08005bd8 <_Bfree>:
 8005bd8:	b570      	push	{r4, r5, r6, lr}
 8005bda:	69c6      	ldr	r6, [r0, #28]
 8005bdc:	4605      	mov	r5, r0
 8005bde:	460c      	mov	r4, r1
 8005be0:	b976      	cbnz	r6, 8005c00 <_Bfree+0x28>
 8005be2:	2010      	movs	r0, #16
 8005be4:	f7ff ff02 	bl	80059ec <malloc>
 8005be8:	4602      	mov	r2, r0
 8005bea:	61e8      	str	r0, [r5, #28]
 8005bec:	b920      	cbnz	r0, 8005bf8 <_Bfree+0x20>
 8005bee:	4b09      	ldr	r3, [pc, #36]	@ (8005c14 <_Bfree+0x3c>)
 8005bf0:	4809      	ldr	r0, [pc, #36]	@ (8005c18 <_Bfree+0x40>)
 8005bf2:	218f      	movs	r1, #143	@ 0x8f
 8005bf4:	f001 ff04 	bl	8007a00 <__assert_func>
 8005bf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005bfc:	6006      	str	r6, [r0, #0]
 8005bfe:	60c6      	str	r6, [r0, #12]
 8005c00:	b13c      	cbz	r4, 8005c12 <_Bfree+0x3a>
 8005c02:	69eb      	ldr	r3, [r5, #28]
 8005c04:	6862      	ldr	r2, [r4, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c0c:	6021      	str	r1, [r4, #0]
 8005c0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005c12:	bd70      	pop	{r4, r5, r6, pc}
 8005c14:	08008bea 	.word	0x08008bea
 8005c18:	08008c6a 	.word	0x08008c6a

08005c1c <__multadd>:
 8005c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c20:	690d      	ldr	r5, [r1, #16]
 8005c22:	4607      	mov	r7, r0
 8005c24:	460c      	mov	r4, r1
 8005c26:	461e      	mov	r6, r3
 8005c28:	f101 0c14 	add.w	ip, r1, #20
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	f8dc 3000 	ldr.w	r3, [ip]
 8005c32:	b299      	uxth	r1, r3
 8005c34:	fb02 6101 	mla	r1, r2, r1, r6
 8005c38:	0c1e      	lsrs	r6, r3, #16
 8005c3a:	0c0b      	lsrs	r3, r1, #16
 8005c3c:	fb02 3306 	mla	r3, r2, r6, r3
 8005c40:	b289      	uxth	r1, r1
 8005c42:	3001      	adds	r0, #1
 8005c44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005c48:	4285      	cmp	r5, r0
 8005c4a:	f84c 1b04 	str.w	r1, [ip], #4
 8005c4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005c52:	dcec      	bgt.n	8005c2e <__multadd+0x12>
 8005c54:	b30e      	cbz	r6, 8005c9a <__multadd+0x7e>
 8005c56:	68a3      	ldr	r3, [r4, #8]
 8005c58:	42ab      	cmp	r3, r5
 8005c5a:	dc19      	bgt.n	8005c90 <__multadd+0x74>
 8005c5c:	6861      	ldr	r1, [r4, #4]
 8005c5e:	4638      	mov	r0, r7
 8005c60:	3101      	adds	r1, #1
 8005c62:	f7ff ff79 	bl	8005b58 <_Balloc>
 8005c66:	4680      	mov	r8, r0
 8005c68:	b928      	cbnz	r0, 8005c76 <__multadd+0x5a>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8005ca0 <__multadd+0x84>)
 8005c6e:	480d      	ldr	r0, [pc, #52]	@ (8005ca4 <__multadd+0x88>)
 8005c70:	21ba      	movs	r1, #186	@ 0xba
 8005c72:	f001 fec5 	bl	8007a00 <__assert_func>
 8005c76:	6922      	ldr	r2, [r4, #16]
 8005c78:	3202      	adds	r2, #2
 8005c7a:	f104 010c 	add.w	r1, r4, #12
 8005c7e:	0092      	lsls	r2, r2, #2
 8005c80:	300c      	adds	r0, #12
 8005c82:	f7ff f806 	bl	8004c92 <memcpy>
 8005c86:	4621      	mov	r1, r4
 8005c88:	4638      	mov	r0, r7
 8005c8a:	f7ff ffa5 	bl	8005bd8 <_Bfree>
 8005c8e:	4644      	mov	r4, r8
 8005c90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005c94:	3501      	adds	r5, #1
 8005c96:	615e      	str	r6, [r3, #20]
 8005c98:	6125      	str	r5, [r4, #16]
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ca0:	08008c59 	.word	0x08008c59
 8005ca4:	08008c6a 	.word	0x08008c6a

08005ca8 <__s2b>:
 8005ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cac:	460c      	mov	r4, r1
 8005cae:	4615      	mov	r5, r2
 8005cb0:	461f      	mov	r7, r3
 8005cb2:	2209      	movs	r2, #9
 8005cb4:	3308      	adds	r3, #8
 8005cb6:	4606      	mov	r6, r0
 8005cb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	db09      	blt.n	8005cd8 <__s2b+0x30>
 8005cc4:	4630      	mov	r0, r6
 8005cc6:	f7ff ff47 	bl	8005b58 <_Balloc>
 8005cca:	b940      	cbnz	r0, 8005cde <__s2b+0x36>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	4b19      	ldr	r3, [pc, #100]	@ (8005d34 <__s2b+0x8c>)
 8005cd0:	4819      	ldr	r0, [pc, #100]	@ (8005d38 <__s2b+0x90>)
 8005cd2:	21d3      	movs	r1, #211	@ 0xd3
 8005cd4:	f001 fe94 	bl	8007a00 <__assert_func>
 8005cd8:	0052      	lsls	r2, r2, #1
 8005cda:	3101      	adds	r1, #1
 8005cdc:	e7f0      	b.n	8005cc0 <__s2b+0x18>
 8005cde:	9b08      	ldr	r3, [sp, #32]
 8005ce0:	6143      	str	r3, [r0, #20]
 8005ce2:	2d09      	cmp	r5, #9
 8005ce4:	f04f 0301 	mov.w	r3, #1
 8005ce8:	6103      	str	r3, [r0, #16]
 8005cea:	dd16      	ble.n	8005d1a <__s2b+0x72>
 8005cec:	f104 0909 	add.w	r9, r4, #9
 8005cf0:	46c8      	mov	r8, r9
 8005cf2:	442c      	add	r4, r5
 8005cf4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005cf8:	4601      	mov	r1, r0
 8005cfa:	3b30      	subs	r3, #48	@ 0x30
 8005cfc:	220a      	movs	r2, #10
 8005cfe:	4630      	mov	r0, r6
 8005d00:	f7ff ff8c 	bl	8005c1c <__multadd>
 8005d04:	45a0      	cmp	r8, r4
 8005d06:	d1f5      	bne.n	8005cf4 <__s2b+0x4c>
 8005d08:	f1a5 0408 	sub.w	r4, r5, #8
 8005d0c:	444c      	add	r4, r9
 8005d0e:	1b2d      	subs	r5, r5, r4
 8005d10:	1963      	adds	r3, r4, r5
 8005d12:	42bb      	cmp	r3, r7
 8005d14:	db04      	blt.n	8005d20 <__s2b+0x78>
 8005d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d1a:	340a      	adds	r4, #10
 8005d1c:	2509      	movs	r5, #9
 8005d1e:	e7f6      	b.n	8005d0e <__s2b+0x66>
 8005d20:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005d24:	4601      	mov	r1, r0
 8005d26:	3b30      	subs	r3, #48	@ 0x30
 8005d28:	220a      	movs	r2, #10
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	f7ff ff76 	bl	8005c1c <__multadd>
 8005d30:	e7ee      	b.n	8005d10 <__s2b+0x68>
 8005d32:	bf00      	nop
 8005d34:	08008c59 	.word	0x08008c59
 8005d38:	08008c6a 	.word	0x08008c6a

08005d3c <__hi0bits>:
 8005d3c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005d40:	4603      	mov	r3, r0
 8005d42:	bf36      	itet	cc
 8005d44:	0403      	lslcc	r3, r0, #16
 8005d46:	2000      	movcs	r0, #0
 8005d48:	2010      	movcc	r0, #16
 8005d4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d4e:	bf3c      	itt	cc
 8005d50:	021b      	lslcc	r3, r3, #8
 8005d52:	3008      	addcc	r0, #8
 8005d54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d58:	bf3c      	itt	cc
 8005d5a:	011b      	lslcc	r3, r3, #4
 8005d5c:	3004      	addcc	r0, #4
 8005d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d62:	bf3c      	itt	cc
 8005d64:	009b      	lslcc	r3, r3, #2
 8005d66:	3002      	addcc	r0, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	db05      	blt.n	8005d78 <__hi0bits+0x3c>
 8005d6c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005d70:	f100 0001 	add.w	r0, r0, #1
 8005d74:	bf08      	it	eq
 8005d76:	2020      	moveq	r0, #32
 8005d78:	4770      	bx	lr

08005d7a <__lo0bits>:
 8005d7a:	6803      	ldr	r3, [r0, #0]
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	f013 0007 	ands.w	r0, r3, #7
 8005d82:	d00b      	beq.n	8005d9c <__lo0bits+0x22>
 8005d84:	07d9      	lsls	r1, r3, #31
 8005d86:	d421      	bmi.n	8005dcc <__lo0bits+0x52>
 8005d88:	0798      	lsls	r0, r3, #30
 8005d8a:	bf49      	itett	mi
 8005d8c:	085b      	lsrmi	r3, r3, #1
 8005d8e:	089b      	lsrpl	r3, r3, #2
 8005d90:	2001      	movmi	r0, #1
 8005d92:	6013      	strmi	r3, [r2, #0]
 8005d94:	bf5c      	itt	pl
 8005d96:	6013      	strpl	r3, [r2, #0]
 8005d98:	2002      	movpl	r0, #2
 8005d9a:	4770      	bx	lr
 8005d9c:	b299      	uxth	r1, r3
 8005d9e:	b909      	cbnz	r1, 8005da4 <__lo0bits+0x2a>
 8005da0:	0c1b      	lsrs	r3, r3, #16
 8005da2:	2010      	movs	r0, #16
 8005da4:	b2d9      	uxtb	r1, r3
 8005da6:	b909      	cbnz	r1, 8005dac <__lo0bits+0x32>
 8005da8:	3008      	adds	r0, #8
 8005daa:	0a1b      	lsrs	r3, r3, #8
 8005dac:	0719      	lsls	r1, r3, #28
 8005dae:	bf04      	itt	eq
 8005db0:	091b      	lsreq	r3, r3, #4
 8005db2:	3004      	addeq	r0, #4
 8005db4:	0799      	lsls	r1, r3, #30
 8005db6:	bf04      	itt	eq
 8005db8:	089b      	lsreq	r3, r3, #2
 8005dba:	3002      	addeq	r0, #2
 8005dbc:	07d9      	lsls	r1, r3, #31
 8005dbe:	d403      	bmi.n	8005dc8 <__lo0bits+0x4e>
 8005dc0:	085b      	lsrs	r3, r3, #1
 8005dc2:	f100 0001 	add.w	r0, r0, #1
 8005dc6:	d003      	beq.n	8005dd0 <__lo0bits+0x56>
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	4770      	bx	lr
 8005dcc:	2000      	movs	r0, #0
 8005dce:	4770      	bx	lr
 8005dd0:	2020      	movs	r0, #32
 8005dd2:	4770      	bx	lr

08005dd4 <__i2b>:
 8005dd4:	b510      	push	{r4, lr}
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	2101      	movs	r1, #1
 8005dda:	f7ff febd 	bl	8005b58 <_Balloc>
 8005dde:	4602      	mov	r2, r0
 8005de0:	b928      	cbnz	r0, 8005dee <__i2b+0x1a>
 8005de2:	4b05      	ldr	r3, [pc, #20]	@ (8005df8 <__i2b+0x24>)
 8005de4:	4805      	ldr	r0, [pc, #20]	@ (8005dfc <__i2b+0x28>)
 8005de6:	f240 1145 	movw	r1, #325	@ 0x145
 8005dea:	f001 fe09 	bl	8007a00 <__assert_func>
 8005dee:	2301      	movs	r3, #1
 8005df0:	6144      	str	r4, [r0, #20]
 8005df2:	6103      	str	r3, [r0, #16]
 8005df4:	bd10      	pop	{r4, pc}
 8005df6:	bf00      	nop
 8005df8:	08008c59 	.word	0x08008c59
 8005dfc:	08008c6a 	.word	0x08008c6a

08005e00 <__multiply>:
 8005e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e04:	4614      	mov	r4, r2
 8005e06:	690a      	ldr	r2, [r1, #16]
 8005e08:	6923      	ldr	r3, [r4, #16]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	bfa8      	it	ge
 8005e0e:	4623      	movge	r3, r4
 8005e10:	460f      	mov	r7, r1
 8005e12:	bfa4      	itt	ge
 8005e14:	460c      	movge	r4, r1
 8005e16:	461f      	movge	r7, r3
 8005e18:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005e1c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005e20:	68a3      	ldr	r3, [r4, #8]
 8005e22:	6861      	ldr	r1, [r4, #4]
 8005e24:	eb0a 0609 	add.w	r6, sl, r9
 8005e28:	42b3      	cmp	r3, r6
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	bfb8      	it	lt
 8005e2e:	3101      	addlt	r1, #1
 8005e30:	f7ff fe92 	bl	8005b58 <_Balloc>
 8005e34:	b930      	cbnz	r0, 8005e44 <__multiply+0x44>
 8005e36:	4602      	mov	r2, r0
 8005e38:	4b44      	ldr	r3, [pc, #272]	@ (8005f4c <__multiply+0x14c>)
 8005e3a:	4845      	ldr	r0, [pc, #276]	@ (8005f50 <__multiply+0x150>)
 8005e3c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005e40:	f001 fdde 	bl	8007a00 <__assert_func>
 8005e44:	f100 0514 	add.w	r5, r0, #20
 8005e48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005e4c:	462b      	mov	r3, r5
 8005e4e:	2200      	movs	r2, #0
 8005e50:	4543      	cmp	r3, r8
 8005e52:	d321      	bcc.n	8005e98 <__multiply+0x98>
 8005e54:	f107 0114 	add.w	r1, r7, #20
 8005e58:	f104 0214 	add.w	r2, r4, #20
 8005e5c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005e60:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005e64:	9302      	str	r3, [sp, #8]
 8005e66:	1b13      	subs	r3, r2, r4
 8005e68:	3b15      	subs	r3, #21
 8005e6a:	f023 0303 	bic.w	r3, r3, #3
 8005e6e:	3304      	adds	r3, #4
 8005e70:	f104 0715 	add.w	r7, r4, #21
 8005e74:	42ba      	cmp	r2, r7
 8005e76:	bf38      	it	cc
 8005e78:	2304      	movcc	r3, #4
 8005e7a:	9301      	str	r3, [sp, #4]
 8005e7c:	9b02      	ldr	r3, [sp, #8]
 8005e7e:	9103      	str	r1, [sp, #12]
 8005e80:	428b      	cmp	r3, r1
 8005e82:	d80c      	bhi.n	8005e9e <__multiply+0x9e>
 8005e84:	2e00      	cmp	r6, #0
 8005e86:	dd03      	ble.n	8005e90 <__multiply+0x90>
 8005e88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d05b      	beq.n	8005f48 <__multiply+0x148>
 8005e90:	6106      	str	r6, [r0, #16]
 8005e92:	b005      	add	sp, #20
 8005e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e98:	f843 2b04 	str.w	r2, [r3], #4
 8005e9c:	e7d8      	b.n	8005e50 <__multiply+0x50>
 8005e9e:	f8b1 a000 	ldrh.w	sl, [r1]
 8005ea2:	f1ba 0f00 	cmp.w	sl, #0
 8005ea6:	d024      	beq.n	8005ef2 <__multiply+0xf2>
 8005ea8:	f104 0e14 	add.w	lr, r4, #20
 8005eac:	46a9      	mov	r9, r5
 8005eae:	f04f 0c00 	mov.w	ip, #0
 8005eb2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005eb6:	f8d9 3000 	ldr.w	r3, [r9]
 8005eba:	fa1f fb87 	uxth.w	fp, r7
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	fb0a 330b 	mla	r3, sl, fp, r3
 8005ec4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005ec8:	f8d9 7000 	ldr.w	r7, [r9]
 8005ecc:	4463      	add	r3, ip
 8005ece:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005ed2:	fb0a c70b 	mla	r7, sl, fp, ip
 8005ed6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005ee0:	4572      	cmp	r2, lr
 8005ee2:	f849 3b04 	str.w	r3, [r9], #4
 8005ee6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005eea:	d8e2      	bhi.n	8005eb2 <__multiply+0xb2>
 8005eec:	9b01      	ldr	r3, [sp, #4]
 8005eee:	f845 c003 	str.w	ip, [r5, r3]
 8005ef2:	9b03      	ldr	r3, [sp, #12]
 8005ef4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005ef8:	3104      	adds	r1, #4
 8005efa:	f1b9 0f00 	cmp.w	r9, #0
 8005efe:	d021      	beq.n	8005f44 <__multiply+0x144>
 8005f00:	682b      	ldr	r3, [r5, #0]
 8005f02:	f104 0c14 	add.w	ip, r4, #20
 8005f06:	46ae      	mov	lr, r5
 8005f08:	f04f 0a00 	mov.w	sl, #0
 8005f0c:	f8bc b000 	ldrh.w	fp, [ip]
 8005f10:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005f14:	fb09 770b 	mla	r7, r9, fp, r7
 8005f18:	4457      	add	r7, sl
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005f20:	f84e 3b04 	str.w	r3, [lr], #4
 8005f24:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005f28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f2c:	f8be 3000 	ldrh.w	r3, [lr]
 8005f30:	fb09 330a 	mla	r3, r9, sl, r3
 8005f34:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005f38:	4562      	cmp	r2, ip
 8005f3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f3e:	d8e5      	bhi.n	8005f0c <__multiply+0x10c>
 8005f40:	9f01      	ldr	r7, [sp, #4]
 8005f42:	51eb      	str	r3, [r5, r7]
 8005f44:	3504      	adds	r5, #4
 8005f46:	e799      	b.n	8005e7c <__multiply+0x7c>
 8005f48:	3e01      	subs	r6, #1
 8005f4a:	e79b      	b.n	8005e84 <__multiply+0x84>
 8005f4c:	08008c59 	.word	0x08008c59
 8005f50:	08008c6a 	.word	0x08008c6a

08005f54 <__pow5mult>:
 8005f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f58:	4615      	mov	r5, r2
 8005f5a:	f012 0203 	ands.w	r2, r2, #3
 8005f5e:	4607      	mov	r7, r0
 8005f60:	460e      	mov	r6, r1
 8005f62:	d007      	beq.n	8005f74 <__pow5mult+0x20>
 8005f64:	4c25      	ldr	r4, [pc, #148]	@ (8005ffc <__pow5mult+0xa8>)
 8005f66:	3a01      	subs	r2, #1
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005f6e:	f7ff fe55 	bl	8005c1c <__multadd>
 8005f72:	4606      	mov	r6, r0
 8005f74:	10ad      	asrs	r5, r5, #2
 8005f76:	d03d      	beq.n	8005ff4 <__pow5mult+0xa0>
 8005f78:	69fc      	ldr	r4, [r7, #28]
 8005f7a:	b97c      	cbnz	r4, 8005f9c <__pow5mult+0x48>
 8005f7c:	2010      	movs	r0, #16
 8005f7e:	f7ff fd35 	bl	80059ec <malloc>
 8005f82:	4602      	mov	r2, r0
 8005f84:	61f8      	str	r0, [r7, #28]
 8005f86:	b928      	cbnz	r0, 8005f94 <__pow5mult+0x40>
 8005f88:	4b1d      	ldr	r3, [pc, #116]	@ (8006000 <__pow5mult+0xac>)
 8005f8a:	481e      	ldr	r0, [pc, #120]	@ (8006004 <__pow5mult+0xb0>)
 8005f8c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005f90:	f001 fd36 	bl	8007a00 <__assert_func>
 8005f94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f98:	6004      	str	r4, [r0, #0]
 8005f9a:	60c4      	str	r4, [r0, #12]
 8005f9c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005fa0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005fa4:	b94c      	cbnz	r4, 8005fba <__pow5mult+0x66>
 8005fa6:	f240 2171 	movw	r1, #625	@ 0x271
 8005faa:	4638      	mov	r0, r7
 8005fac:	f7ff ff12 	bl	8005dd4 <__i2b>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8005fb6:	4604      	mov	r4, r0
 8005fb8:	6003      	str	r3, [r0, #0]
 8005fba:	f04f 0900 	mov.w	r9, #0
 8005fbe:	07eb      	lsls	r3, r5, #31
 8005fc0:	d50a      	bpl.n	8005fd8 <__pow5mult+0x84>
 8005fc2:	4631      	mov	r1, r6
 8005fc4:	4622      	mov	r2, r4
 8005fc6:	4638      	mov	r0, r7
 8005fc8:	f7ff ff1a 	bl	8005e00 <__multiply>
 8005fcc:	4631      	mov	r1, r6
 8005fce:	4680      	mov	r8, r0
 8005fd0:	4638      	mov	r0, r7
 8005fd2:	f7ff fe01 	bl	8005bd8 <_Bfree>
 8005fd6:	4646      	mov	r6, r8
 8005fd8:	106d      	asrs	r5, r5, #1
 8005fda:	d00b      	beq.n	8005ff4 <__pow5mult+0xa0>
 8005fdc:	6820      	ldr	r0, [r4, #0]
 8005fde:	b938      	cbnz	r0, 8005ff0 <__pow5mult+0x9c>
 8005fe0:	4622      	mov	r2, r4
 8005fe2:	4621      	mov	r1, r4
 8005fe4:	4638      	mov	r0, r7
 8005fe6:	f7ff ff0b 	bl	8005e00 <__multiply>
 8005fea:	6020      	str	r0, [r4, #0]
 8005fec:	f8c0 9000 	str.w	r9, [r0]
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	e7e4      	b.n	8005fbe <__pow5mult+0x6a>
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ffa:	bf00      	nop
 8005ffc:	08008cc4 	.word	0x08008cc4
 8006000:	08008bea 	.word	0x08008bea
 8006004:	08008c6a 	.word	0x08008c6a

08006008 <__lshift>:
 8006008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800600c:	460c      	mov	r4, r1
 800600e:	6849      	ldr	r1, [r1, #4]
 8006010:	6923      	ldr	r3, [r4, #16]
 8006012:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006016:	68a3      	ldr	r3, [r4, #8]
 8006018:	4607      	mov	r7, r0
 800601a:	4691      	mov	r9, r2
 800601c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006020:	f108 0601 	add.w	r6, r8, #1
 8006024:	42b3      	cmp	r3, r6
 8006026:	db0b      	blt.n	8006040 <__lshift+0x38>
 8006028:	4638      	mov	r0, r7
 800602a:	f7ff fd95 	bl	8005b58 <_Balloc>
 800602e:	4605      	mov	r5, r0
 8006030:	b948      	cbnz	r0, 8006046 <__lshift+0x3e>
 8006032:	4602      	mov	r2, r0
 8006034:	4b28      	ldr	r3, [pc, #160]	@ (80060d8 <__lshift+0xd0>)
 8006036:	4829      	ldr	r0, [pc, #164]	@ (80060dc <__lshift+0xd4>)
 8006038:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800603c:	f001 fce0 	bl	8007a00 <__assert_func>
 8006040:	3101      	adds	r1, #1
 8006042:	005b      	lsls	r3, r3, #1
 8006044:	e7ee      	b.n	8006024 <__lshift+0x1c>
 8006046:	2300      	movs	r3, #0
 8006048:	f100 0114 	add.w	r1, r0, #20
 800604c:	f100 0210 	add.w	r2, r0, #16
 8006050:	4618      	mov	r0, r3
 8006052:	4553      	cmp	r3, sl
 8006054:	db33      	blt.n	80060be <__lshift+0xb6>
 8006056:	6920      	ldr	r0, [r4, #16]
 8006058:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800605c:	f104 0314 	add.w	r3, r4, #20
 8006060:	f019 091f 	ands.w	r9, r9, #31
 8006064:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006068:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800606c:	d02b      	beq.n	80060c6 <__lshift+0xbe>
 800606e:	f1c9 0e20 	rsb	lr, r9, #32
 8006072:	468a      	mov	sl, r1
 8006074:	2200      	movs	r2, #0
 8006076:	6818      	ldr	r0, [r3, #0]
 8006078:	fa00 f009 	lsl.w	r0, r0, r9
 800607c:	4310      	orrs	r0, r2
 800607e:	f84a 0b04 	str.w	r0, [sl], #4
 8006082:	f853 2b04 	ldr.w	r2, [r3], #4
 8006086:	459c      	cmp	ip, r3
 8006088:	fa22 f20e 	lsr.w	r2, r2, lr
 800608c:	d8f3      	bhi.n	8006076 <__lshift+0x6e>
 800608e:	ebac 0304 	sub.w	r3, ip, r4
 8006092:	3b15      	subs	r3, #21
 8006094:	f023 0303 	bic.w	r3, r3, #3
 8006098:	3304      	adds	r3, #4
 800609a:	f104 0015 	add.w	r0, r4, #21
 800609e:	4584      	cmp	ip, r0
 80060a0:	bf38      	it	cc
 80060a2:	2304      	movcc	r3, #4
 80060a4:	50ca      	str	r2, [r1, r3]
 80060a6:	b10a      	cbz	r2, 80060ac <__lshift+0xa4>
 80060a8:	f108 0602 	add.w	r6, r8, #2
 80060ac:	3e01      	subs	r6, #1
 80060ae:	4638      	mov	r0, r7
 80060b0:	612e      	str	r6, [r5, #16]
 80060b2:	4621      	mov	r1, r4
 80060b4:	f7ff fd90 	bl	8005bd8 <_Bfree>
 80060b8:	4628      	mov	r0, r5
 80060ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060be:	f842 0f04 	str.w	r0, [r2, #4]!
 80060c2:	3301      	adds	r3, #1
 80060c4:	e7c5      	b.n	8006052 <__lshift+0x4a>
 80060c6:	3904      	subs	r1, #4
 80060c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80060cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80060d0:	459c      	cmp	ip, r3
 80060d2:	d8f9      	bhi.n	80060c8 <__lshift+0xc0>
 80060d4:	e7ea      	b.n	80060ac <__lshift+0xa4>
 80060d6:	bf00      	nop
 80060d8:	08008c59 	.word	0x08008c59
 80060dc:	08008c6a 	.word	0x08008c6a

080060e0 <__mcmp>:
 80060e0:	690a      	ldr	r2, [r1, #16]
 80060e2:	4603      	mov	r3, r0
 80060e4:	6900      	ldr	r0, [r0, #16]
 80060e6:	1a80      	subs	r0, r0, r2
 80060e8:	b530      	push	{r4, r5, lr}
 80060ea:	d10e      	bne.n	800610a <__mcmp+0x2a>
 80060ec:	3314      	adds	r3, #20
 80060ee:	3114      	adds	r1, #20
 80060f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80060f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80060f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80060fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006100:	4295      	cmp	r5, r2
 8006102:	d003      	beq.n	800610c <__mcmp+0x2c>
 8006104:	d205      	bcs.n	8006112 <__mcmp+0x32>
 8006106:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800610a:	bd30      	pop	{r4, r5, pc}
 800610c:	42a3      	cmp	r3, r4
 800610e:	d3f3      	bcc.n	80060f8 <__mcmp+0x18>
 8006110:	e7fb      	b.n	800610a <__mcmp+0x2a>
 8006112:	2001      	movs	r0, #1
 8006114:	e7f9      	b.n	800610a <__mcmp+0x2a>
	...

08006118 <__mdiff>:
 8006118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611c:	4689      	mov	r9, r1
 800611e:	4606      	mov	r6, r0
 8006120:	4611      	mov	r1, r2
 8006122:	4648      	mov	r0, r9
 8006124:	4614      	mov	r4, r2
 8006126:	f7ff ffdb 	bl	80060e0 <__mcmp>
 800612a:	1e05      	subs	r5, r0, #0
 800612c:	d112      	bne.n	8006154 <__mdiff+0x3c>
 800612e:	4629      	mov	r1, r5
 8006130:	4630      	mov	r0, r6
 8006132:	f7ff fd11 	bl	8005b58 <_Balloc>
 8006136:	4602      	mov	r2, r0
 8006138:	b928      	cbnz	r0, 8006146 <__mdiff+0x2e>
 800613a:	4b3f      	ldr	r3, [pc, #252]	@ (8006238 <__mdiff+0x120>)
 800613c:	f240 2137 	movw	r1, #567	@ 0x237
 8006140:	483e      	ldr	r0, [pc, #248]	@ (800623c <__mdiff+0x124>)
 8006142:	f001 fc5d 	bl	8007a00 <__assert_func>
 8006146:	2301      	movs	r3, #1
 8006148:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800614c:	4610      	mov	r0, r2
 800614e:	b003      	add	sp, #12
 8006150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006154:	bfbc      	itt	lt
 8006156:	464b      	movlt	r3, r9
 8006158:	46a1      	movlt	r9, r4
 800615a:	4630      	mov	r0, r6
 800615c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006160:	bfba      	itte	lt
 8006162:	461c      	movlt	r4, r3
 8006164:	2501      	movlt	r5, #1
 8006166:	2500      	movge	r5, #0
 8006168:	f7ff fcf6 	bl	8005b58 <_Balloc>
 800616c:	4602      	mov	r2, r0
 800616e:	b918      	cbnz	r0, 8006178 <__mdiff+0x60>
 8006170:	4b31      	ldr	r3, [pc, #196]	@ (8006238 <__mdiff+0x120>)
 8006172:	f240 2145 	movw	r1, #581	@ 0x245
 8006176:	e7e3      	b.n	8006140 <__mdiff+0x28>
 8006178:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800617c:	6926      	ldr	r6, [r4, #16]
 800617e:	60c5      	str	r5, [r0, #12]
 8006180:	f109 0310 	add.w	r3, r9, #16
 8006184:	f109 0514 	add.w	r5, r9, #20
 8006188:	f104 0e14 	add.w	lr, r4, #20
 800618c:	f100 0b14 	add.w	fp, r0, #20
 8006190:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006194:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006198:	9301      	str	r3, [sp, #4]
 800619a:	46d9      	mov	r9, fp
 800619c:	f04f 0c00 	mov.w	ip, #0
 80061a0:	9b01      	ldr	r3, [sp, #4]
 80061a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80061a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80061aa:	9301      	str	r3, [sp, #4]
 80061ac:	fa1f f38a 	uxth.w	r3, sl
 80061b0:	4619      	mov	r1, r3
 80061b2:	b283      	uxth	r3, r0
 80061b4:	1acb      	subs	r3, r1, r3
 80061b6:	0c00      	lsrs	r0, r0, #16
 80061b8:	4463      	add	r3, ip
 80061ba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80061be:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80061c8:	4576      	cmp	r6, lr
 80061ca:	f849 3b04 	str.w	r3, [r9], #4
 80061ce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80061d2:	d8e5      	bhi.n	80061a0 <__mdiff+0x88>
 80061d4:	1b33      	subs	r3, r6, r4
 80061d6:	3b15      	subs	r3, #21
 80061d8:	f023 0303 	bic.w	r3, r3, #3
 80061dc:	3415      	adds	r4, #21
 80061de:	3304      	adds	r3, #4
 80061e0:	42a6      	cmp	r6, r4
 80061e2:	bf38      	it	cc
 80061e4:	2304      	movcc	r3, #4
 80061e6:	441d      	add	r5, r3
 80061e8:	445b      	add	r3, fp
 80061ea:	461e      	mov	r6, r3
 80061ec:	462c      	mov	r4, r5
 80061ee:	4544      	cmp	r4, r8
 80061f0:	d30e      	bcc.n	8006210 <__mdiff+0xf8>
 80061f2:	f108 0103 	add.w	r1, r8, #3
 80061f6:	1b49      	subs	r1, r1, r5
 80061f8:	f021 0103 	bic.w	r1, r1, #3
 80061fc:	3d03      	subs	r5, #3
 80061fe:	45a8      	cmp	r8, r5
 8006200:	bf38      	it	cc
 8006202:	2100      	movcc	r1, #0
 8006204:	440b      	add	r3, r1
 8006206:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800620a:	b191      	cbz	r1, 8006232 <__mdiff+0x11a>
 800620c:	6117      	str	r7, [r2, #16]
 800620e:	e79d      	b.n	800614c <__mdiff+0x34>
 8006210:	f854 1b04 	ldr.w	r1, [r4], #4
 8006214:	46e6      	mov	lr, ip
 8006216:	0c08      	lsrs	r0, r1, #16
 8006218:	fa1c fc81 	uxtah	ip, ip, r1
 800621c:	4471      	add	r1, lr
 800621e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006222:	b289      	uxth	r1, r1
 8006224:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006228:	f846 1b04 	str.w	r1, [r6], #4
 800622c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006230:	e7dd      	b.n	80061ee <__mdiff+0xd6>
 8006232:	3f01      	subs	r7, #1
 8006234:	e7e7      	b.n	8006206 <__mdiff+0xee>
 8006236:	bf00      	nop
 8006238:	08008c59 	.word	0x08008c59
 800623c:	08008c6a 	.word	0x08008c6a

08006240 <__ulp>:
 8006240:	b082      	sub	sp, #8
 8006242:	ed8d 0b00 	vstr	d0, [sp]
 8006246:	9a01      	ldr	r2, [sp, #4]
 8006248:	4b0f      	ldr	r3, [pc, #60]	@ (8006288 <__ulp+0x48>)
 800624a:	4013      	ands	r3, r2
 800624c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006250:	2b00      	cmp	r3, #0
 8006252:	dc08      	bgt.n	8006266 <__ulp+0x26>
 8006254:	425b      	negs	r3, r3
 8006256:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800625a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800625e:	da04      	bge.n	800626a <__ulp+0x2a>
 8006260:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006264:	4113      	asrs	r3, r2
 8006266:	2200      	movs	r2, #0
 8006268:	e008      	b.n	800627c <__ulp+0x3c>
 800626a:	f1a2 0314 	sub.w	r3, r2, #20
 800626e:	2b1e      	cmp	r3, #30
 8006270:	bfda      	itte	le
 8006272:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006276:	40da      	lsrle	r2, r3
 8006278:	2201      	movgt	r2, #1
 800627a:	2300      	movs	r3, #0
 800627c:	4619      	mov	r1, r3
 800627e:	4610      	mov	r0, r2
 8006280:	ec41 0b10 	vmov	d0, r0, r1
 8006284:	b002      	add	sp, #8
 8006286:	4770      	bx	lr
 8006288:	7ff00000 	.word	0x7ff00000

0800628c <__b2d>:
 800628c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006290:	6906      	ldr	r6, [r0, #16]
 8006292:	f100 0814 	add.w	r8, r0, #20
 8006296:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800629a:	1f37      	subs	r7, r6, #4
 800629c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80062a0:	4610      	mov	r0, r2
 80062a2:	f7ff fd4b 	bl	8005d3c <__hi0bits>
 80062a6:	f1c0 0320 	rsb	r3, r0, #32
 80062aa:	280a      	cmp	r0, #10
 80062ac:	600b      	str	r3, [r1, #0]
 80062ae:	491b      	ldr	r1, [pc, #108]	@ (800631c <__b2d+0x90>)
 80062b0:	dc15      	bgt.n	80062de <__b2d+0x52>
 80062b2:	f1c0 0c0b 	rsb	ip, r0, #11
 80062b6:	fa22 f30c 	lsr.w	r3, r2, ip
 80062ba:	45b8      	cmp	r8, r7
 80062bc:	ea43 0501 	orr.w	r5, r3, r1
 80062c0:	bf34      	ite	cc
 80062c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80062c6:	2300      	movcs	r3, #0
 80062c8:	3015      	adds	r0, #21
 80062ca:	fa02 f000 	lsl.w	r0, r2, r0
 80062ce:	fa23 f30c 	lsr.w	r3, r3, ip
 80062d2:	4303      	orrs	r3, r0
 80062d4:	461c      	mov	r4, r3
 80062d6:	ec45 4b10 	vmov	d0, r4, r5
 80062da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062de:	45b8      	cmp	r8, r7
 80062e0:	bf3a      	itte	cc
 80062e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80062e6:	f1a6 0708 	subcc.w	r7, r6, #8
 80062ea:	2300      	movcs	r3, #0
 80062ec:	380b      	subs	r0, #11
 80062ee:	d012      	beq.n	8006316 <__b2d+0x8a>
 80062f0:	f1c0 0120 	rsb	r1, r0, #32
 80062f4:	fa23 f401 	lsr.w	r4, r3, r1
 80062f8:	4082      	lsls	r2, r0
 80062fa:	4322      	orrs	r2, r4
 80062fc:	4547      	cmp	r7, r8
 80062fe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006302:	bf8c      	ite	hi
 8006304:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006308:	2200      	movls	r2, #0
 800630a:	4083      	lsls	r3, r0
 800630c:	40ca      	lsrs	r2, r1
 800630e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006312:	4313      	orrs	r3, r2
 8006314:	e7de      	b.n	80062d4 <__b2d+0x48>
 8006316:	ea42 0501 	orr.w	r5, r2, r1
 800631a:	e7db      	b.n	80062d4 <__b2d+0x48>
 800631c:	3ff00000 	.word	0x3ff00000

08006320 <__d2b>:
 8006320:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006324:	460f      	mov	r7, r1
 8006326:	2101      	movs	r1, #1
 8006328:	ec59 8b10 	vmov	r8, r9, d0
 800632c:	4616      	mov	r6, r2
 800632e:	f7ff fc13 	bl	8005b58 <_Balloc>
 8006332:	4604      	mov	r4, r0
 8006334:	b930      	cbnz	r0, 8006344 <__d2b+0x24>
 8006336:	4602      	mov	r2, r0
 8006338:	4b23      	ldr	r3, [pc, #140]	@ (80063c8 <__d2b+0xa8>)
 800633a:	4824      	ldr	r0, [pc, #144]	@ (80063cc <__d2b+0xac>)
 800633c:	f240 310f 	movw	r1, #783	@ 0x30f
 8006340:	f001 fb5e 	bl	8007a00 <__assert_func>
 8006344:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006348:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800634c:	b10d      	cbz	r5, 8006352 <__d2b+0x32>
 800634e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006352:	9301      	str	r3, [sp, #4]
 8006354:	f1b8 0300 	subs.w	r3, r8, #0
 8006358:	d023      	beq.n	80063a2 <__d2b+0x82>
 800635a:	4668      	mov	r0, sp
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	f7ff fd0c 	bl	8005d7a <__lo0bits>
 8006362:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006366:	b1d0      	cbz	r0, 800639e <__d2b+0x7e>
 8006368:	f1c0 0320 	rsb	r3, r0, #32
 800636c:	fa02 f303 	lsl.w	r3, r2, r3
 8006370:	430b      	orrs	r3, r1
 8006372:	40c2      	lsrs	r2, r0
 8006374:	6163      	str	r3, [r4, #20]
 8006376:	9201      	str	r2, [sp, #4]
 8006378:	9b01      	ldr	r3, [sp, #4]
 800637a:	61a3      	str	r3, [r4, #24]
 800637c:	2b00      	cmp	r3, #0
 800637e:	bf0c      	ite	eq
 8006380:	2201      	moveq	r2, #1
 8006382:	2202      	movne	r2, #2
 8006384:	6122      	str	r2, [r4, #16]
 8006386:	b1a5      	cbz	r5, 80063b2 <__d2b+0x92>
 8006388:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800638c:	4405      	add	r5, r0
 800638e:	603d      	str	r5, [r7, #0]
 8006390:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006394:	6030      	str	r0, [r6, #0]
 8006396:	4620      	mov	r0, r4
 8006398:	b003      	add	sp, #12
 800639a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800639e:	6161      	str	r1, [r4, #20]
 80063a0:	e7ea      	b.n	8006378 <__d2b+0x58>
 80063a2:	a801      	add	r0, sp, #4
 80063a4:	f7ff fce9 	bl	8005d7a <__lo0bits>
 80063a8:	9b01      	ldr	r3, [sp, #4]
 80063aa:	6163      	str	r3, [r4, #20]
 80063ac:	3020      	adds	r0, #32
 80063ae:	2201      	movs	r2, #1
 80063b0:	e7e8      	b.n	8006384 <__d2b+0x64>
 80063b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80063b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80063ba:	6038      	str	r0, [r7, #0]
 80063bc:	6918      	ldr	r0, [r3, #16]
 80063be:	f7ff fcbd 	bl	8005d3c <__hi0bits>
 80063c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80063c6:	e7e5      	b.n	8006394 <__d2b+0x74>
 80063c8:	08008c59 	.word	0x08008c59
 80063cc:	08008c6a 	.word	0x08008c6a

080063d0 <__ratio>:
 80063d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d4:	b085      	sub	sp, #20
 80063d6:	e9cd 1000 	strd	r1, r0, [sp]
 80063da:	a902      	add	r1, sp, #8
 80063dc:	f7ff ff56 	bl	800628c <__b2d>
 80063e0:	9800      	ldr	r0, [sp, #0]
 80063e2:	a903      	add	r1, sp, #12
 80063e4:	ec55 4b10 	vmov	r4, r5, d0
 80063e8:	f7ff ff50 	bl	800628c <__b2d>
 80063ec:	9b01      	ldr	r3, [sp, #4]
 80063ee:	6919      	ldr	r1, [r3, #16]
 80063f0:	9b00      	ldr	r3, [sp, #0]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	1ac9      	subs	r1, r1, r3
 80063f6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80063fa:	1a9b      	subs	r3, r3, r2
 80063fc:	ec5b ab10 	vmov	sl, fp, d0
 8006400:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006404:	2b00      	cmp	r3, #0
 8006406:	bfce      	itee	gt
 8006408:	462a      	movgt	r2, r5
 800640a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800640e:	465a      	movle	r2, fp
 8006410:	462f      	mov	r7, r5
 8006412:	46d9      	mov	r9, fp
 8006414:	bfcc      	ite	gt
 8006416:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800641a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800641e:	464b      	mov	r3, r9
 8006420:	4652      	mov	r2, sl
 8006422:	4620      	mov	r0, r4
 8006424:	4639      	mov	r1, r7
 8006426:	f7fa fa19 	bl	800085c <__aeabi_ddiv>
 800642a:	ec41 0b10 	vmov	d0, r0, r1
 800642e:	b005      	add	sp, #20
 8006430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006434 <__copybits>:
 8006434:	3901      	subs	r1, #1
 8006436:	b570      	push	{r4, r5, r6, lr}
 8006438:	1149      	asrs	r1, r1, #5
 800643a:	6914      	ldr	r4, [r2, #16]
 800643c:	3101      	adds	r1, #1
 800643e:	f102 0314 	add.w	r3, r2, #20
 8006442:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006446:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800644a:	1f05      	subs	r5, r0, #4
 800644c:	42a3      	cmp	r3, r4
 800644e:	d30c      	bcc.n	800646a <__copybits+0x36>
 8006450:	1aa3      	subs	r3, r4, r2
 8006452:	3b11      	subs	r3, #17
 8006454:	f023 0303 	bic.w	r3, r3, #3
 8006458:	3211      	adds	r2, #17
 800645a:	42a2      	cmp	r2, r4
 800645c:	bf88      	it	hi
 800645e:	2300      	movhi	r3, #0
 8006460:	4418      	add	r0, r3
 8006462:	2300      	movs	r3, #0
 8006464:	4288      	cmp	r0, r1
 8006466:	d305      	bcc.n	8006474 <__copybits+0x40>
 8006468:	bd70      	pop	{r4, r5, r6, pc}
 800646a:	f853 6b04 	ldr.w	r6, [r3], #4
 800646e:	f845 6f04 	str.w	r6, [r5, #4]!
 8006472:	e7eb      	b.n	800644c <__copybits+0x18>
 8006474:	f840 3b04 	str.w	r3, [r0], #4
 8006478:	e7f4      	b.n	8006464 <__copybits+0x30>

0800647a <__any_on>:
 800647a:	f100 0214 	add.w	r2, r0, #20
 800647e:	6900      	ldr	r0, [r0, #16]
 8006480:	114b      	asrs	r3, r1, #5
 8006482:	4298      	cmp	r0, r3
 8006484:	b510      	push	{r4, lr}
 8006486:	db11      	blt.n	80064ac <__any_on+0x32>
 8006488:	dd0a      	ble.n	80064a0 <__any_on+0x26>
 800648a:	f011 011f 	ands.w	r1, r1, #31
 800648e:	d007      	beq.n	80064a0 <__any_on+0x26>
 8006490:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006494:	fa24 f001 	lsr.w	r0, r4, r1
 8006498:	fa00 f101 	lsl.w	r1, r0, r1
 800649c:	428c      	cmp	r4, r1
 800649e:	d10b      	bne.n	80064b8 <__any_on+0x3e>
 80064a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d803      	bhi.n	80064b0 <__any_on+0x36>
 80064a8:	2000      	movs	r0, #0
 80064aa:	bd10      	pop	{r4, pc}
 80064ac:	4603      	mov	r3, r0
 80064ae:	e7f7      	b.n	80064a0 <__any_on+0x26>
 80064b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80064b4:	2900      	cmp	r1, #0
 80064b6:	d0f5      	beq.n	80064a4 <__any_on+0x2a>
 80064b8:	2001      	movs	r0, #1
 80064ba:	e7f6      	b.n	80064aa <__any_on+0x30>

080064bc <sulp>:
 80064bc:	b570      	push	{r4, r5, r6, lr}
 80064be:	4604      	mov	r4, r0
 80064c0:	460d      	mov	r5, r1
 80064c2:	ec45 4b10 	vmov	d0, r4, r5
 80064c6:	4616      	mov	r6, r2
 80064c8:	f7ff feba 	bl	8006240 <__ulp>
 80064cc:	ec51 0b10 	vmov	r0, r1, d0
 80064d0:	b17e      	cbz	r6, 80064f2 <sulp+0x36>
 80064d2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80064d6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80064da:	2b00      	cmp	r3, #0
 80064dc:	dd09      	ble.n	80064f2 <sulp+0x36>
 80064de:	051b      	lsls	r3, r3, #20
 80064e0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80064e4:	2400      	movs	r4, #0
 80064e6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80064ea:	4622      	mov	r2, r4
 80064ec:	462b      	mov	r3, r5
 80064ee:	f7fa f88b 	bl	8000608 <__aeabi_dmul>
 80064f2:	ec41 0b10 	vmov	d0, r0, r1
 80064f6:	bd70      	pop	{r4, r5, r6, pc}

080064f8 <_strtod_l>:
 80064f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064fc:	b09f      	sub	sp, #124	@ 0x7c
 80064fe:	460c      	mov	r4, r1
 8006500:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006502:	2200      	movs	r2, #0
 8006504:	921a      	str	r2, [sp, #104]	@ 0x68
 8006506:	9005      	str	r0, [sp, #20]
 8006508:	f04f 0a00 	mov.w	sl, #0
 800650c:	f04f 0b00 	mov.w	fp, #0
 8006510:	460a      	mov	r2, r1
 8006512:	9219      	str	r2, [sp, #100]	@ 0x64
 8006514:	7811      	ldrb	r1, [r2, #0]
 8006516:	292b      	cmp	r1, #43	@ 0x2b
 8006518:	d04a      	beq.n	80065b0 <_strtod_l+0xb8>
 800651a:	d838      	bhi.n	800658e <_strtod_l+0x96>
 800651c:	290d      	cmp	r1, #13
 800651e:	d832      	bhi.n	8006586 <_strtod_l+0x8e>
 8006520:	2908      	cmp	r1, #8
 8006522:	d832      	bhi.n	800658a <_strtod_l+0x92>
 8006524:	2900      	cmp	r1, #0
 8006526:	d03b      	beq.n	80065a0 <_strtod_l+0xa8>
 8006528:	2200      	movs	r2, #0
 800652a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800652c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800652e:	782a      	ldrb	r2, [r5, #0]
 8006530:	2a30      	cmp	r2, #48	@ 0x30
 8006532:	f040 80b3 	bne.w	800669c <_strtod_l+0x1a4>
 8006536:	786a      	ldrb	r2, [r5, #1]
 8006538:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800653c:	2a58      	cmp	r2, #88	@ 0x58
 800653e:	d16e      	bne.n	800661e <_strtod_l+0x126>
 8006540:	9302      	str	r3, [sp, #8]
 8006542:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006544:	9301      	str	r3, [sp, #4]
 8006546:	ab1a      	add	r3, sp, #104	@ 0x68
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	4a8e      	ldr	r2, [pc, #568]	@ (8006784 <_strtod_l+0x28c>)
 800654c:	9805      	ldr	r0, [sp, #20]
 800654e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006550:	a919      	add	r1, sp, #100	@ 0x64
 8006552:	f001 faef 	bl	8007b34 <__gethex>
 8006556:	f010 060f 	ands.w	r6, r0, #15
 800655a:	4604      	mov	r4, r0
 800655c:	d005      	beq.n	800656a <_strtod_l+0x72>
 800655e:	2e06      	cmp	r6, #6
 8006560:	d128      	bne.n	80065b4 <_strtod_l+0xbc>
 8006562:	3501      	adds	r5, #1
 8006564:	2300      	movs	r3, #0
 8006566:	9519      	str	r5, [sp, #100]	@ 0x64
 8006568:	930b      	str	r3, [sp, #44]	@ 0x2c
 800656a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800656c:	2b00      	cmp	r3, #0
 800656e:	f040 858e 	bne.w	800708e <_strtod_l+0xb96>
 8006572:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006574:	b1cb      	cbz	r3, 80065aa <_strtod_l+0xb2>
 8006576:	4652      	mov	r2, sl
 8006578:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800657c:	ec43 2b10 	vmov	d0, r2, r3
 8006580:	b01f      	add	sp, #124	@ 0x7c
 8006582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006586:	2920      	cmp	r1, #32
 8006588:	d1ce      	bne.n	8006528 <_strtod_l+0x30>
 800658a:	3201      	adds	r2, #1
 800658c:	e7c1      	b.n	8006512 <_strtod_l+0x1a>
 800658e:	292d      	cmp	r1, #45	@ 0x2d
 8006590:	d1ca      	bne.n	8006528 <_strtod_l+0x30>
 8006592:	2101      	movs	r1, #1
 8006594:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006596:	1c51      	adds	r1, r2, #1
 8006598:	9119      	str	r1, [sp, #100]	@ 0x64
 800659a:	7852      	ldrb	r2, [r2, #1]
 800659c:	2a00      	cmp	r2, #0
 800659e:	d1c5      	bne.n	800652c <_strtod_l+0x34>
 80065a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80065a2:	9419      	str	r4, [sp, #100]	@ 0x64
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f040 8570 	bne.w	800708a <_strtod_l+0xb92>
 80065aa:	4652      	mov	r2, sl
 80065ac:	465b      	mov	r3, fp
 80065ae:	e7e5      	b.n	800657c <_strtod_l+0x84>
 80065b0:	2100      	movs	r1, #0
 80065b2:	e7ef      	b.n	8006594 <_strtod_l+0x9c>
 80065b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80065b6:	b13a      	cbz	r2, 80065c8 <_strtod_l+0xd0>
 80065b8:	2135      	movs	r1, #53	@ 0x35
 80065ba:	a81c      	add	r0, sp, #112	@ 0x70
 80065bc:	f7ff ff3a 	bl	8006434 <__copybits>
 80065c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80065c2:	9805      	ldr	r0, [sp, #20]
 80065c4:	f7ff fb08 	bl	8005bd8 <_Bfree>
 80065c8:	3e01      	subs	r6, #1
 80065ca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80065cc:	2e04      	cmp	r6, #4
 80065ce:	d806      	bhi.n	80065de <_strtod_l+0xe6>
 80065d0:	e8df f006 	tbb	[pc, r6]
 80065d4:	201d0314 	.word	0x201d0314
 80065d8:	14          	.byte	0x14
 80065d9:	00          	.byte	0x00
 80065da:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80065de:	05e1      	lsls	r1, r4, #23
 80065e0:	bf48      	it	mi
 80065e2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80065e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80065ea:	0d1b      	lsrs	r3, r3, #20
 80065ec:	051b      	lsls	r3, r3, #20
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1bb      	bne.n	800656a <_strtod_l+0x72>
 80065f2:	f7fe fb21 	bl	8004c38 <__errno>
 80065f6:	2322      	movs	r3, #34	@ 0x22
 80065f8:	6003      	str	r3, [r0, #0]
 80065fa:	e7b6      	b.n	800656a <_strtod_l+0x72>
 80065fc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006600:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006604:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006608:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800660c:	e7e7      	b.n	80065de <_strtod_l+0xe6>
 800660e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800678c <_strtod_l+0x294>
 8006612:	e7e4      	b.n	80065de <_strtod_l+0xe6>
 8006614:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006618:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800661c:	e7df      	b.n	80065de <_strtod_l+0xe6>
 800661e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	9219      	str	r2, [sp, #100]	@ 0x64
 8006624:	785b      	ldrb	r3, [r3, #1]
 8006626:	2b30      	cmp	r3, #48	@ 0x30
 8006628:	d0f9      	beq.n	800661e <_strtod_l+0x126>
 800662a:	2b00      	cmp	r3, #0
 800662c:	d09d      	beq.n	800656a <_strtod_l+0x72>
 800662e:	2301      	movs	r3, #1
 8006630:	9309      	str	r3, [sp, #36]	@ 0x24
 8006632:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006634:	930c      	str	r3, [sp, #48]	@ 0x30
 8006636:	2300      	movs	r3, #0
 8006638:	9308      	str	r3, [sp, #32]
 800663a:	930a      	str	r3, [sp, #40]	@ 0x28
 800663c:	461f      	mov	r7, r3
 800663e:	220a      	movs	r2, #10
 8006640:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006642:	7805      	ldrb	r5, [r0, #0]
 8006644:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006648:	b2d9      	uxtb	r1, r3
 800664a:	2909      	cmp	r1, #9
 800664c:	d928      	bls.n	80066a0 <_strtod_l+0x1a8>
 800664e:	494e      	ldr	r1, [pc, #312]	@ (8006788 <_strtod_l+0x290>)
 8006650:	2201      	movs	r2, #1
 8006652:	f001 f9ab 	bl	80079ac <strncmp>
 8006656:	2800      	cmp	r0, #0
 8006658:	d032      	beq.n	80066c0 <_strtod_l+0x1c8>
 800665a:	2000      	movs	r0, #0
 800665c:	462a      	mov	r2, r5
 800665e:	4681      	mov	r9, r0
 8006660:	463d      	mov	r5, r7
 8006662:	4603      	mov	r3, r0
 8006664:	2a65      	cmp	r2, #101	@ 0x65
 8006666:	d001      	beq.n	800666c <_strtod_l+0x174>
 8006668:	2a45      	cmp	r2, #69	@ 0x45
 800666a:	d114      	bne.n	8006696 <_strtod_l+0x19e>
 800666c:	b91d      	cbnz	r5, 8006676 <_strtod_l+0x17e>
 800666e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006670:	4302      	orrs	r2, r0
 8006672:	d095      	beq.n	80065a0 <_strtod_l+0xa8>
 8006674:	2500      	movs	r5, #0
 8006676:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006678:	1c62      	adds	r2, r4, #1
 800667a:	9219      	str	r2, [sp, #100]	@ 0x64
 800667c:	7862      	ldrb	r2, [r4, #1]
 800667e:	2a2b      	cmp	r2, #43	@ 0x2b
 8006680:	d077      	beq.n	8006772 <_strtod_l+0x27a>
 8006682:	2a2d      	cmp	r2, #45	@ 0x2d
 8006684:	d07b      	beq.n	800677e <_strtod_l+0x286>
 8006686:	f04f 0c00 	mov.w	ip, #0
 800668a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800668e:	2909      	cmp	r1, #9
 8006690:	f240 8082 	bls.w	8006798 <_strtod_l+0x2a0>
 8006694:	9419      	str	r4, [sp, #100]	@ 0x64
 8006696:	f04f 0800 	mov.w	r8, #0
 800669a:	e0a2      	b.n	80067e2 <_strtod_l+0x2ea>
 800669c:	2300      	movs	r3, #0
 800669e:	e7c7      	b.n	8006630 <_strtod_l+0x138>
 80066a0:	2f08      	cmp	r7, #8
 80066a2:	bfd5      	itete	le
 80066a4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80066a6:	9908      	ldrgt	r1, [sp, #32]
 80066a8:	fb02 3301 	mlale	r3, r2, r1, r3
 80066ac:	fb02 3301 	mlagt	r3, r2, r1, r3
 80066b0:	f100 0001 	add.w	r0, r0, #1
 80066b4:	bfd4      	ite	le
 80066b6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80066b8:	9308      	strgt	r3, [sp, #32]
 80066ba:	3701      	adds	r7, #1
 80066bc:	9019      	str	r0, [sp, #100]	@ 0x64
 80066be:	e7bf      	b.n	8006640 <_strtod_l+0x148>
 80066c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	9219      	str	r2, [sp, #100]	@ 0x64
 80066c6:	785a      	ldrb	r2, [r3, #1]
 80066c8:	b37f      	cbz	r7, 800672a <_strtod_l+0x232>
 80066ca:	4681      	mov	r9, r0
 80066cc:	463d      	mov	r5, r7
 80066ce:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80066d2:	2b09      	cmp	r3, #9
 80066d4:	d912      	bls.n	80066fc <_strtod_l+0x204>
 80066d6:	2301      	movs	r3, #1
 80066d8:	e7c4      	b.n	8006664 <_strtod_l+0x16c>
 80066da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80066dc:	1c5a      	adds	r2, r3, #1
 80066de:	9219      	str	r2, [sp, #100]	@ 0x64
 80066e0:	785a      	ldrb	r2, [r3, #1]
 80066e2:	3001      	adds	r0, #1
 80066e4:	2a30      	cmp	r2, #48	@ 0x30
 80066e6:	d0f8      	beq.n	80066da <_strtod_l+0x1e2>
 80066e8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80066ec:	2b08      	cmp	r3, #8
 80066ee:	f200 84d3 	bhi.w	8007098 <_strtod_l+0xba0>
 80066f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80066f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80066f6:	4681      	mov	r9, r0
 80066f8:	2000      	movs	r0, #0
 80066fa:	4605      	mov	r5, r0
 80066fc:	3a30      	subs	r2, #48	@ 0x30
 80066fe:	f100 0301 	add.w	r3, r0, #1
 8006702:	d02a      	beq.n	800675a <_strtod_l+0x262>
 8006704:	4499      	add	r9, r3
 8006706:	eb00 0c05 	add.w	ip, r0, r5
 800670a:	462b      	mov	r3, r5
 800670c:	210a      	movs	r1, #10
 800670e:	4563      	cmp	r3, ip
 8006710:	d10d      	bne.n	800672e <_strtod_l+0x236>
 8006712:	1c69      	adds	r1, r5, #1
 8006714:	4401      	add	r1, r0
 8006716:	4428      	add	r0, r5
 8006718:	2808      	cmp	r0, #8
 800671a:	dc16      	bgt.n	800674a <_strtod_l+0x252>
 800671c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800671e:	230a      	movs	r3, #10
 8006720:	fb03 2300 	mla	r3, r3, r0, r2
 8006724:	930a      	str	r3, [sp, #40]	@ 0x28
 8006726:	2300      	movs	r3, #0
 8006728:	e018      	b.n	800675c <_strtod_l+0x264>
 800672a:	4638      	mov	r0, r7
 800672c:	e7da      	b.n	80066e4 <_strtod_l+0x1ec>
 800672e:	2b08      	cmp	r3, #8
 8006730:	f103 0301 	add.w	r3, r3, #1
 8006734:	dc03      	bgt.n	800673e <_strtod_l+0x246>
 8006736:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006738:	434e      	muls	r6, r1
 800673a:	960a      	str	r6, [sp, #40]	@ 0x28
 800673c:	e7e7      	b.n	800670e <_strtod_l+0x216>
 800673e:	2b10      	cmp	r3, #16
 8006740:	bfde      	ittt	le
 8006742:	9e08      	ldrle	r6, [sp, #32]
 8006744:	434e      	mulle	r6, r1
 8006746:	9608      	strle	r6, [sp, #32]
 8006748:	e7e1      	b.n	800670e <_strtod_l+0x216>
 800674a:	280f      	cmp	r0, #15
 800674c:	dceb      	bgt.n	8006726 <_strtod_l+0x22e>
 800674e:	9808      	ldr	r0, [sp, #32]
 8006750:	230a      	movs	r3, #10
 8006752:	fb03 2300 	mla	r3, r3, r0, r2
 8006756:	9308      	str	r3, [sp, #32]
 8006758:	e7e5      	b.n	8006726 <_strtod_l+0x22e>
 800675a:	4629      	mov	r1, r5
 800675c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800675e:	1c50      	adds	r0, r2, #1
 8006760:	9019      	str	r0, [sp, #100]	@ 0x64
 8006762:	7852      	ldrb	r2, [r2, #1]
 8006764:	4618      	mov	r0, r3
 8006766:	460d      	mov	r5, r1
 8006768:	e7b1      	b.n	80066ce <_strtod_l+0x1d6>
 800676a:	f04f 0900 	mov.w	r9, #0
 800676e:	2301      	movs	r3, #1
 8006770:	e77d      	b.n	800666e <_strtod_l+0x176>
 8006772:	f04f 0c00 	mov.w	ip, #0
 8006776:	1ca2      	adds	r2, r4, #2
 8006778:	9219      	str	r2, [sp, #100]	@ 0x64
 800677a:	78a2      	ldrb	r2, [r4, #2]
 800677c:	e785      	b.n	800668a <_strtod_l+0x192>
 800677e:	f04f 0c01 	mov.w	ip, #1
 8006782:	e7f8      	b.n	8006776 <_strtod_l+0x27e>
 8006784:	08008dd8 	.word	0x08008dd8
 8006788:	08008dc0 	.word	0x08008dc0
 800678c:	7ff00000 	.word	0x7ff00000
 8006790:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006792:	1c51      	adds	r1, r2, #1
 8006794:	9119      	str	r1, [sp, #100]	@ 0x64
 8006796:	7852      	ldrb	r2, [r2, #1]
 8006798:	2a30      	cmp	r2, #48	@ 0x30
 800679a:	d0f9      	beq.n	8006790 <_strtod_l+0x298>
 800679c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80067a0:	2908      	cmp	r1, #8
 80067a2:	f63f af78 	bhi.w	8006696 <_strtod_l+0x19e>
 80067a6:	3a30      	subs	r2, #48	@ 0x30
 80067a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80067aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80067ac:	920f      	str	r2, [sp, #60]	@ 0x3c
 80067ae:	f04f 080a 	mov.w	r8, #10
 80067b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80067b4:	1c56      	adds	r6, r2, #1
 80067b6:	9619      	str	r6, [sp, #100]	@ 0x64
 80067b8:	7852      	ldrb	r2, [r2, #1]
 80067ba:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80067be:	f1be 0f09 	cmp.w	lr, #9
 80067c2:	d939      	bls.n	8006838 <_strtod_l+0x340>
 80067c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80067c6:	1a76      	subs	r6, r6, r1
 80067c8:	2e08      	cmp	r6, #8
 80067ca:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80067ce:	dc03      	bgt.n	80067d8 <_strtod_l+0x2e0>
 80067d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80067d2:	4588      	cmp	r8, r1
 80067d4:	bfa8      	it	ge
 80067d6:	4688      	movge	r8, r1
 80067d8:	f1bc 0f00 	cmp.w	ip, #0
 80067dc:	d001      	beq.n	80067e2 <_strtod_l+0x2ea>
 80067de:	f1c8 0800 	rsb	r8, r8, #0
 80067e2:	2d00      	cmp	r5, #0
 80067e4:	d14e      	bne.n	8006884 <_strtod_l+0x38c>
 80067e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80067e8:	4308      	orrs	r0, r1
 80067ea:	f47f aebe 	bne.w	800656a <_strtod_l+0x72>
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f47f aed6 	bne.w	80065a0 <_strtod_l+0xa8>
 80067f4:	2a69      	cmp	r2, #105	@ 0x69
 80067f6:	d028      	beq.n	800684a <_strtod_l+0x352>
 80067f8:	dc25      	bgt.n	8006846 <_strtod_l+0x34e>
 80067fa:	2a49      	cmp	r2, #73	@ 0x49
 80067fc:	d025      	beq.n	800684a <_strtod_l+0x352>
 80067fe:	2a4e      	cmp	r2, #78	@ 0x4e
 8006800:	f47f aece 	bne.w	80065a0 <_strtod_l+0xa8>
 8006804:	499b      	ldr	r1, [pc, #620]	@ (8006a74 <_strtod_l+0x57c>)
 8006806:	a819      	add	r0, sp, #100	@ 0x64
 8006808:	f001 fbb6 	bl	8007f78 <__match>
 800680c:	2800      	cmp	r0, #0
 800680e:	f43f aec7 	beq.w	80065a0 <_strtod_l+0xa8>
 8006812:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	2b28      	cmp	r3, #40	@ 0x28
 8006818:	d12e      	bne.n	8006878 <_strtod_l+0x380>
 800681a:	4997      	ldr	r1, [pc, #604]	@ (8006a78 <_strtod_l+0x580>)
 800681c:	aa1c      	add	r2, sp, #112	@ 0x70
 800681e:	a819      	add	r0, sp, #100	@ 0x64
 8006820:	f001 fbbe 	bl	8007fa0 <__hexnan>
 8006824:	2805      	cmp	r0, #5
 8006826:	d127      	bne.n	8006878 <_strtod_l+0x380>
 8006828:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800682a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800682e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006832:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006836:	e698      	b.n	800656a <_strtod_l+0x72>
 8006838:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800683a:	fb08 2101 	mla	r1, r8, r1, r2
 800683e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006842:	920e      	str	r2, [sp, #56]	@ 0x38
 8006844:	e7b5      	b.n	80067b2 <_strtod_l+0x2ba>
 8006846:	2a6e      	cmp	r2, #110	@ 0x6e
 8006848:	e7da      	b.n	8006800 <_strtod_l+0x308>
 800684a:	498c      	ldr	r1, [pc, #560]	@ (8006a7c <_strtod_l+0x584>)
 800684c:	a819      	add	r0, sp, #100	@ 0x64
 800684e:	f001 fb93 	bl	8007f78 <__match>
 8006852:	2800      	cmp	r0, #0
 8006854:	f43f aea4 	beq.w	80065a0 <_strtod_l+0xa8>
 8006858:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800685a:	4989      	ldr	r1, [pc, #548]	@ (8006a80 <_strtod_l+0x588>)
 800685c:	3b01      	subs	r3, #1
 800685e:	a819      	add	r0, sp, #100	@ 0x64
 8006860:	9319      	str	r3, [sp, #100]	@ 0x64
 8006862:	f001 fb89 	bl	8007f78 <__match>
 8006866:	b910      	cbnz	r0, 800686e <_strtod_l+0x376>
 8006868:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800686a:	3301      	adds	r3, #1
 800686c:	9319      	str	r3, [sp, #100]	@ 0x64
 800686e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8006a90 <_strtod_l+0x598>
 8006872:	f04f 0a00 	mov.w	sl, #0
 8006876:	e678      	b.n	800656a <_strtod_l+0x72>
 8006878:	4882      	ldr	r0, [pc, #520]	@ (8006a84 <_strtod_l+0x58c>)
 800687a:	f001 f8b9 	bl	80079f0 <nan>
 800687e:	ec5b ab10 	vmov	sl, fp, d0
 8006882:	e672      	b.n	800656a <_strtod_l+0x72>
 8006884:	eba8 0309 	sub.w	r3, r8, r9
 8006888:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800688a:	9309      	str	r3, [sp, #36]	@ 0x24
 800688c:	2f00      	cmp	r7, #0
 800688e:	bf08      	it	eq
 8006890:	462f      	moveq	r7, r5
 8006892:	2d10      	cmp	r5, #16
 8006894:	462c      	mov	r4, r5
 8006896:	bfa8      	it	ge
 8006898:	2410      	movge	r4, #16
 800689a:	f7f9 fe3b 	bl	8000514 <__aeabi_ui2d>
 800689e:	2d09      	cmp	r5, #9
 80068a0:	4682      	mov	sl, r0
 80068a2:	468b      	mov	fp, r1
 80068a4:	dc13      	bgt.n	80068ce <_strtod_l+0x3d6>
 80068a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f43f ae5e 	beq.w	800656a <_strtod_l+0x72>
 80068ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068b0:	dd78      	ble.n	80069a4 <_strtod_l+0x4ac>
 80068b2:	2b16      	cmp	r3, #22
 80068b4:	dc5f      	bgt.n	8006976 <_strtod_l+0x47e>
 80068b6:	4974      	ldr	r1, [pc, #464]	@ (8006a88 <_strtod_l+0x590>)
 80068b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80068bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068c0:	4652      	mov	r2, sl
 80068c2:	465b      	mov	r3, fp
 80068c4:	f7f9 fea0 	bl	8000608 <__aeabi_dmul>
 80068c8:	4682      	mov	sl, r0
 80068ca:	468b      	mov	fp, r1
 80068cc:	e64d      	b.n	800656a <_strtod_l+0x72>
 80068ce:	4b6e      	ldr	r3, [pc, #440]	@ (8006a88 <_strtod_l+0x590>)
 80068d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80068d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80068d8:	f7f9 fe96 	bl	8000608 <__aeabi_dmul>
 80068dc:	4682      	mov	sl, r0
 80068de:	9808      	ldr	r0, [sp, #32]
 80068e0:	468b      	mov	fp, r1
 80068e2:	f7f9 fe17 	bl	8000514 <__aeabi_ui2d>
 80068e6:	4602      	mov	r2, r0
 80068e8:	460b      	mov	r3, r1
 80068ea:	4650      	mov	r0, sl
 80068ec:	4659      	mov	r1, fp
 80068ee:	f7f9 fcd5 	bl	800029c <__adddf3>
 80068f2:	2d0f      	cmp	r5, #15
 80068f4:	4682      	mov	sl, r0
 80068f6:	468b      	mov	fp, r1
 80068f8:	ddd5      	ble.n	80068a6 <_strtod_l+0x3ae>
 80068fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068fc:	1b2c      	subs	r4, r5, r4
 80068fe:	441c      	add	r4, r3
 8006900:	2c00      	cmp	r4, #0
 8006902:	f340 8096 	ble.w	8006a32 <_strtod_l+0x53a>
 8006906:	f014 030f 	ands.w	r3, r4, #15
 800690a:	d00a      	beq.n	8006922 <_strtod_l+0x42a>
 800690c:	495e      	ldr	r1, [pc, #376]	@ (8006a88 <_strtod_l+0x590>)
 800690e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006912:	4652      	mov	r2, sl
 8006914:	465b      	mov	r3, fp
 8006916:	e9d1 0100 	ldrd	r0, r1, [r1]
 800691a:	f7f9 fe75 	bl	8000608 <__aeabi_dmul>
 800691e:	4682      	mov	sl, r0
 8006920:	468b      	mov	fp, r1
 8006922:	f034 040f 	bics.w	r4, r4, #15
 8006926:	d073      	beq.n	8006a10 <_strtod_l+0x518>
 8006928:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800692c:	dd48      	ble.n	80069c0 <_strtod_l+0x4c8>
 800692e:	2400      	movs	r4, #0
 8006930:	46a0      	mov	r8, r4
 8006932:	940a      	str	r4, [sp, #40]	@ 0x28
 8006934:	46a1      	mov	r9, r4
 8006936:	9a05      	ldr	r2, [sp, #20]
 8006938:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8006a90 <_strtod_l+0x598>
 800693c:	2322      	movs	r3, #34	@ 0x22
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	f04f 0a00 	mov.w	sl, #0
 8006944:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006946:	2b00      	cmp	r3, #0
 8006948:	f43f ae0f 	beq.w	800656a <_strtod_l+0x72>
 800694c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800694e:	9805      	ldr	r0, [sp, #20]
 8006950:	f7ff f942 	bl	8005bd8 <_Bfree>
 8006954:	9805      	ldr	r0, [sp, #20]
 8006956:	4649      	mov	r1, r9
 8006958:	f7ff f93e 	bl	8005bd8 <_Bfree>
 800695c:	9805      	ldr	r0, [sp, #20]
 800695e:	4641      	mov	r1, r8
 8006960:	f7ff f93a 	bl	8005bd8 <_Bfree>
 8006964:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006966:	9805      	ldr	r0, [sp, #20]
 8006968:	f7ff f936 	bl	8005bd8 <_Bfree>
 800696c:	9805      	ldr	r0, [sp, #20]
 800696e:	4621      	mov	r1, r4
 8006970:	f7ff f932 	bl	8005bd8 <_Bfree>
 8006974:	e5f9      	b.n	800656a <_strtod_l+0x72>
 8006976:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006978:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800697c:	4293      	cmp	r3, r2
 800697e:	dbbc      	blt.n	80068fa <_strtod_l+0x402>
 8006980:	4c41      	ldr	r4, [pc, #260]	@ (8006a88 <_strtod_l+0x590>)
 8006982:	f1c5 050f 	rsb	r5, r5, #15
 8006986:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800698a:	4652      	mov	r2, sl
 800698c:	465b      	mov	r3, fp
 800698e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006992:	f7f9 fe39 	bl	8000608 <__aeabi_dmul>
 8006996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006998:	1b5d      	subs	r5, r3, r5
 800699a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800699e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80069a2:	e78f      	b.n	80068c4 <_strtod_l+0x3cc>
 80069a4:	3316      	adds	r3, #22
 80069a6:	dba8      	blt.n	80068fa <_strtod_l+0x402>
 80069a8:	4b37      	ldr	r3, [pc, #220]	@ (8006a88 <_strtod_l+0x590>)
 80069aa:	eba9 0808 	sub.w	r8, r9, r8
 80069ae:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80069b2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80069b6:	4650      	mov	r0, sl
 80069b8:	4659      	mov	r1, fp
 80069ba:	f7f9 ff4f 	bl	800085c <__aeabi_ddiv>
 80069be:	e783      	b.n	80068c8 <_strtod_l+0x3d0>
 80069c0:	4b32      	ldr	r3, [pc, #200]	@ (8006a8c <_strtod_l+0x594>)
 80069c2:	9308      	str	r3, [sp, #32]
 80069c4:	2300      	movs	r3, #0
 80069c6:	1124      	asrs	r4, r4, #4
 80069c8:	4650      	mov	r0, sl
 80069ca:	4659      	mov	r1, fp
 80069cc:	461e      	mov	r6, r3
 80069ce:	2c01      	cmp	r4, #1
 80069d0:	dc21      	bgt.n	8006a16 <_strtod_l+0x51e>
 80069d2:	b10b      	cbz	r3, 80069d8 <_strtod_l+0x4e0>
 80069d4:	4682      	mov	sl, r0
 80069d6:	468b      	mov	fp, r1
 80069d8:	492c      	ldr	r1, [pc, #176]	@ (8006a8c <_strtod_l+0x594>)
 80069da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80069de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80069e2:	4652      	mov	r2, sl
 80069e4:	465b      	mov	r3, fp
 80069e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069ea:	f7f9 fe0d 	bl	8000608 <__aeabi_dmul>
 80069ee:	4b28      	ldr	r3, [pc, #160]	@ (8006a90 <_strtod_l+0x598>)
 80069f0:	460a      	mov	r2, r1
 80069f2:	400b      	ands	r3, r1
 80069f4:	4927      	ldr	r1, [pc, #156]	@ (8006a94 <_strtod_l+0x59c>)
 80069f6:	428b      	cmp	r3, r1
 80069f8:	4682      	mov	sl, r0
 80069fa:	d898      	bhi.n	800692e <_strtod_l+0x436>
 80069fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006a00:	428b      	cmp	r3, r1
 8006a02:	bf86      	itte	hi
 8006a04:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8006a98 <_strtod_l+0x5a0>
 8006a08:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8006a0c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006a10:	2300      	movs	r3, #0
 8006a12:	9308      	str	r3, [sp, #32]
 8006a14:	e07a      	b.n	8006b0c <_strtod_l+0x614>
 8006a16:	07e2      	lsls	r2, r4, #31
 8006a18:	d505      	bpl.n	8006a26 <_strtod_l+0x52e>
 8006a1a:	9b08      	ldr	r3, [sp, #32]
 8006a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a20:	f7f9 fdf2 	bl	8000608 <__aeabi_dmul>
 8006a24:	2301      	movs	r3, #1
 8006a26:	9a08      	ldr	r2, [sp, #32]
 8006a28:	3208      	adds	r2, #8
 8006a2a:	3601      	adds	r6, #1
 8006a2c:	1064      	asrs	r4, r4, #1
 8006a2e:	9208      	str	r2, [sp, #32]
 8006a30:	e7cd      	b.n	80069ce <_strtod_l+0x4d6>
 8006a32:	d0ed      	beq.n	8006a10 <_strtod_l+0x518>
 8006a34:	4264      	negs	r4, r4
 8006a36:	f014 020f 	ands.w	r2, r4, #15
 8006a3a:	d00a      	beq.n	8006a52 <_strtod_l+0x55a>
 8006a3c:	4b12      	ldr	r3, [pc, #72]	@ (8006a88 <_strtod_l+0x590>)
 8006a3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a42:	4650      	mov	r0, sl
 8006a44:	4659      	mov	r1, fp
 8006a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4a:	f7f9 ff07 	bl	800085c <__aeabi_ddiv>
 8006a4e:	4682      	mov	sl, r0
 8006a50:	468b      	mov	fp, r1
 8006a52:	1124      	asrs	r4, r4, #4
 8006a54:	d0dc      	beq.n	8006a10 <_strtod_l+0x518>
 8006a56:	2c1f      	cmp	r4, #31
 8006a58:	dd20      	ble.n	8006a9c <_strtod_l+0x5a4>
 8006a5a:	2400      	movs	r4, #0
 8006a5c:	46a0      	mov	r8, r4
 8006a5e:	940a      	str	r4, [sp, #40]	@ 0x28
 8006a60:	46a1      	mov	r9, r4
 8006a62:	9a05      	ldr	r2, [sp, #20]
 8006a64:	2322      	movs	r3, #34	@ 0x22
 8006a66:	f04f 0a00 	mov.w	sl, #0
 8006a6a:	f04f 0b00 	mov.w	fp, #0
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	e768      	b.n	8006944 <_strtod_l+0x44c>
 8006a72:	bf00      	nop
 8006a74:	08008bb1 	.word	0x08008bb1
 8006a78:	08008dc4 	.word	0x08008dc4
 8006a7c:	08008ba9 	.word	0x08008ba9
 8006a80:	08008be0 	.word	0x08008be0
 8006a84:	08008f6d 	.word	0x08008f6d
 8006a88:	08008cf8 	.word	0x08008cf8
 8006a8c:	08008cd0 	.word	0x08008cd0
 8006a90:	7ff00000 	.word	0x7ff00000
 8006a94:	7ca00000 	.word	0x7ca00000
 8006a98:	7fefffff 	.word	0x7fefffff
 8006a9c:	f014 0310 	ands.w	r3, r4, #16
 8006aa0:	bf18      	it	ne
 8006aa2:	236a      	movne	r3, #106	@ 0x6a
 8006aa4:	4ea9      	ldr	r6, [pc, #676]	@ (8006d4c <_strtod_l+0x854>)
 8006aa6:	9308      	str	r3, [sp, #32]
 8006aa8:	4650      	mov	r0, sl
 8006aaa:	4659      	mov	r1, fp
 8006aac:	2300      	movs	r3, #0
 8006aae:	07e2      	lsls	r2, r4, #31
 8006ab0:	d504      	bpl.n	8006abc <_strtod_l+0x5c4>
 8006ab2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ab6:	f7f9 fda7 	bl	8000608 <__aeabi_dmul>
 8006aba:	2301      	movs	r3, #1
 8006abc:	1064      	asrs	r4, r4, #1
 8006abe:	f106 0608 	add.w	r6, r6, #8
 8006ac2:	d1f4      	bne.n	8006aae <_strtod_l+0x5b6>
 8006ac4:	b10b      	cbz	r3, 8006aca <_strtod_l+0x5d2>
 8006ac6:	4682      	mov	sl, r0
 8006ac8:	468b      	mov	fp, r1
 8006aca:	9b08      	ldr	r3, [sp, #32]
 8006acc:	b1b3      	cbz	r3, 8006afc <_strtod_l+0x604>
 8006ace:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006ad2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	4659      	mov	r1, fp
 8006ada:	dd0f      	ble.n	8006afc <_strtod_l+0x604>
 8006adc:	2b1f      	cmp	r3, #31
 8006ade:	dd55      	ble.n	8006b8c <_strtod_l+0x694>
 8006ae0:	2b34      	cmp	r3, #52	@ 0x34
 8006ae2:	bfde      	ittt	le
 8006ae4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8006ae8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006aec:	4093      	lslle	r3, r2
 8006aee:	f04f 0a00 	mov.w	sl, #0
 8006af2:	bfcc      	ite	gt
 8006af4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006af8:	ea03 0b01 	andle.w	fp, r3, r1
 8006afc:	2200      	movs	r2, #0
 8006afe:	2300      	movs	r3, #0
 8006b00:	4650      	mov	r0, sl
 8006b02:	4659      	mov	r1, fp
 8006b04:	f7f9 ffe8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	d1a6      	bne.n	8006a5a <_strtod_l+0x562>
 8006b0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006b12:	9805      	ldr	r0, [sp, #20]
 8006b14:	462b      	mov	r3, r5
 8006b16:	463a      	mov	r2, r7
 8006b18:	f7ff f8c6 	bl	8005ca8 <__s2b>
 8006b1c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	f43f af05 	beq.w	800692e <_strtod_l+0x436>
 8006b24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b26:	2a00      	cmp	r2, #0
 8006b28:	eba9 0308 	sub.w	r3, r9, r8
 8006b2c:	bfa8      	it	ge
 8006b2e:	2300      	movge	r3, #0
 8006b30:	9312      	str	r3, [sp, #72]	@ 0x48
 8006b32:	2400      	movs	r4, #0
 8006b34:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006b38:	9316      	str	r3, [sp, #88]	@ 0x58
 8006b3a:	46a0      	mov	r8, r4
 8006b3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b3e:	9805      	ldr	r0, [sp, #20]
 8006b40:	6859      	ldr	r1, [r3, #4]
 8006b42:	f7ff f809 	bl	8005b58 <_Balloc>
 8006b46:	4681      	mov	r9, r0
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	f43f aef4 	beq.w	8006936 <_strtod_l+0x43e>
 8006b4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b50:	691a      	ldr	r2, [r3, #16]
 8006b52:	3202      	adds	r2, #2
 8006b54:	f103 010c 	add.w	r1, r3, #12
 8006b58:	0092      	lsls	r2, r2, #2
 8006b5a:	300c      	adds	r0, #12
 8006b5c:	f7fe f899 	bl	8004c92 <memcpy>
 8006b60:	ec4b ab10 	vmov	d0, sl, fp
 8006b64:	9805      	ldr	r0, [sp, #20]
 8006b66:	aa1c      	add	r2, sp, #112	@ 0x70
 8006b68:	a91b      	add	r1, sp, #108	@ 0x6c
 8006b6a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006b6e:	f7ff fbd7 	bl	8006320 <__d2b>
 8006b72:	901a      	str	r0, [sp, #104]	@ 0x68
 8006b74:	2800      	cmp	r0, #0
 8006b76:	f43f aede 	beq.w	8006936 <_strtod_l+0x43e>
 8006b7a:	9805      	ldr	r0, [sp, #20]
 8006b7c:	2101      	movs	r1, #1
 8006b7e:	f7ff f929 	bl	8005dd4 <__i2b>
 8006b82:	4680      	mov	r8, r0
 8006b84:	b948      	cbnz	r0, 8006b9a <_strtod_l+0x6a2>
 8006b86:	f04f 0800 	mov.w	r8, #0
 8006b8a:	e6d4      	b.n	8006936 <_strtod_l+0x43e>
 8006b8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b90:	fa02 f303 	lsl.w	r3, r2, r3
 8006b94:	ea03 0a0a 	and.w	sl, r3, sl
 8006b98:	e7b0      	b.n	8006afc <_strtod_l+0x604>
 8006b9a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006b9c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006b9e:	2d00      	cmp	r5, #0
 8006ba0:	bfab      	itete	ge
 8006ba2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006ba4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006ba6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006ba8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006baa:	bfac      	ite	ge
 8006bac:	18ef      	addge	r7, r5, r3
 8006bae:	1b5e      	sublt	r6, r3, r5
 8006bb0:	9b08      	ldr	r3, [sp, #32]
 8006bb2:	1aed      	subs	r5, r5, r3
 8006bb4:	4415      	add	r5, r2
 8006bb6:	4b66      	ldr	r3, [pc, #408]	@ (8006d50 <_strtod_l+0x858>)
 8006bb8:	3d01      	subs	r5, #1
 8006bba:	429d      	cmp	r5, r3
 8006bbc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006bc0:	da50      	bge.n	8006c64 <_strtod_l+0x76c>
 8006bc2:	1b5b      	subs	r3, r3, r5
 8006bc4:	2b1f      	cmp	r3, #31
 8006bc6:	eba2 0203 	sub.w	r2, r2, r3
 8006bca:	f04f 0101 	mov.w	r1, #1
 8006bce:	dc3d      	bgt.n	8006c4c <_strtod_l+0x754>
 8006bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	9310      	str	r3, [sp, #64]	@ 0x40
 8006bda:	18bd      	adds	r5, r7, r2
 8006bdc:	9b08      	ldr	r3, [sp, #32]
 8006bde:	42af      	cmp	r7, r5
 8006be0:	4416      	add	r6, r2
 8006be2:	441e      	add	r6, r3
 8006be4:	463b      	mov	r3, r7
 8006be6:	bfa8      	it	ge
 8006be8:	462b      	movge	r3, r5
 8006bea:	42b3      	cmp	r3, r6
 8006bec:	bfa8      	it	ge
 8006bee:	4633      	movge	r3, r6
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	bfc2      	ittt	gt
 8006bf4:	1aed      	subgt	r5, r5, r3
 8006bf6:	1af6      	subgt	r6, r6, r3
 8006bf8:	1aff      	subgt	r7, r7, r3
 8006bfa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	dd16      	ble.n	8006c2e <_strtod_l+0x736>
 8006c00:	4641      	mov	r1, r8
 8006c02:	9805      	ldr	r0, [sp, #20]
 8006c04:	461a      	mov	r2, r3
 8006c06:	f7ff f9a5 	bl	8005f54 <__pow5mult>
 8006c0a:	4680      	mov	r8, r0
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	d0ba      	beq.n	8006b86 <_strtod_l+0x68e>
 8006c10:	4601      	mov	r1, r0
 8006c12:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006c14:	9805      	ldr	r0, [sp, #20]
 8006c16:	f7ff f8f3 	bl	8005e00 <__multiply>
 8006c1a:	900e      	str	r0, [sp, #56]	@ 0x38
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	f43f ae8a 	beq.w	8006936 <_strtod_l+0x43e>
 8006c22:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c24:	9805      	ldr	r0, [sp, #20]
 8006c26:	f7fe ffd7 	bl	8005bd8 <_Bfree>
 8006c2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c2e:	2d00      	cmp	r5, #0
 8006c30:	dc1d      	bgt.n	8006c6e <_strtod_l+0x776>
 8006c32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	dd23      	ble.n	8006c80 <_strtod_l+0x788>
 8006c38:	4649      	mov	r1, r9
 8006c3a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006c3c:	9805      	ldr	r0, [sp, #20]
 8006c3e:	f7ff f989 	bl	8005f54 <__pow5mult>
 8006c42:	4681      	mov	r9, r0
 8006c44:	b9e0      	cbnz	r0, 8006c80 <_strtod_l+0x788>
 8006c46:	f04f 0900 	mov.w	r9, #0
 8006c4a:	e674      	b.n	8006936 <_strtod_l+0x43e>
 8006c4c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006c50:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006c54:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006c58:	35e2      	adds	r5, #226	@ 0xe2
 8006c5a:	fa01 f305 	lsl.w	r3, r1, r5
 8006c5e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c60:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006c62:	e7ba      	b.n	8006bda <_strtod_l+0x6e2>
 8006c64:	2300      	movs	r3, #0
 8006c66:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c68:	2301      	movs	r3, #1
 8006c6a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006c6c:	e7b5      	b.n	8006bda <_strtod_l+0x6e2>
 8006c6e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c70:	9805      	ldr	r0, [sp, #20]
 8006c72:	462a      	mov	r2, r5
 8006c74:	f7ff f9c8 	bl	8006008 <__lshift>
 8006c78:	901a      	str	r0, [sp, #104]	@ 0x68
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	d1d9      	bne.n	8006c32 <_strtod_l+0x73a>
 8006c7e:	e65a      	b.n	8006936 <_strtod_l+0x43e>
 8006c80:	2e00      	cmp	r6, #0
 8006c82:	dd07      	ble.n	8006c94 <_strtod_l+0x79c>
 8006c84:	4649      	mov	r1, r9
 8006c86:	9805      	ldr	r0, [sp, #20]
 8006c88:	4632      	mov	r2, r6
 8006c8a:	f7ff f9bd 	bl	8006008 <__lshift>
 8006c8e:	4681      	mov	r9, r0
 8006c90:	2800      	cmp	r0, #0
 8006c92:	d0d8      	beq.n	8006c46 <_strtod_l+0x74e>
 8006c94:	2f00      	cmp	r7, #0
 8006c96:	dd08      	ble.n	8006caa <_strtod_l+0x7b2>
 8006c98:	4641      	mov	r1, r8
 8006c9a:	9805      	ldr	r0, [sp, #20]
 8006c9c:	463a      	mov	r2, r7
 8006c9e:	f7ff f9b3 	bl	8006008 <__lshift>
 8006ca2:	4680      	mov	r8, r0
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	f43f ae46 	beq.w	8006936 <_strtod_l+0x43e>
 8006caa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006cac:	9805      	ldr	r0, [sp, #20]
 8006cae:	464a      	mov	r2, r9
 8006cb0:	f7ff fa32 	bl	8006118 <__mdiff>
 8006cb4:	4604      	mov	r4, r0
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	f43f ae3d 	beq.w	8006936 <_strtod_l+0x43e>
 8006cbc:	68c3      	ldr	r3, [r0, #12]
 8006cbe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	60c3      	str	r3, [r0, #12]
 8006cc4:	4641      	mov	r1, r8
 8006cc6:	f7ff fa0b 	bl	80060e0 <__mcmp>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	da46      	bge.n	8006d5c <_strtod_l+0x864>
 8006cce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cd0:	ea53 030a 	orrs.w	r3, r3, sl
 8006cd4:	d16c      	bne.n	8006db0 <_strtod_l+0x8b8>
 8006cd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d168      	bne.n	8006db0 <_strtod_l+0x8b8>
 8006cde:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006ce2:	0d1b      	lsrs	r3, r3, #20
 8006ce4:	051b      	lsls	r3, r3, #20
 8006ce6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006cea:	d961      	bls.n	8006db0 <_strtod_l+0x8b8>
 8006cec:	6963      	ldr	r3, [r4, #20]
 8006cee:	b913      	cbnz	r3, 8006cf6 <_strtod_l+0x7fe>
 8006cf0:	6923      	ldr	r3, [r4, #16]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	dd5c      	ble.n	8006db0 <_strtod_l+0x8b8>
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	9805      	ldr	r0, [sp, #20]
 8006cfc:	f7ff f984 	bl	8006008 <__lshift>
 8006d00:	4641      	mov	r1, r8
 8006d02:	4604      	mov	r4, r0
 8006d04:	f7ff f9ec 	bl	80060e0 <__mcmp>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	dd51      	ble.n	8006db0 <_strtod_l+0x8b8>
 8006d0c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006d10:	9a08      	ldr	r2, [sp, #32]
 8006d12:	0d1b      	lsrs	r3, r3, #20
 8006d14:	051b      	lsls	r3, r3, #20
 8006d16:	2a00      	cmp	r2, #0
 8006d18:	d06b      	beq.n	8006df2 <_strtod_l+0x8fa>
 8006d1a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006d1e:	d868      	bhi.n	8006df2 <_strtod_l+0x8fa>
 8006d20:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006d24:	f67f ae9d 	bls.w	8006a62 <_strtod_l+0x56a>
 8006d28:	4b0a      	ldr	r3, [pc, #40]	@ (8006d54 <_strtod_l+0x85c>)
 8006d2a:	4650      	mov	r0, sl
 8006d2c:	4659      	mov	r1, fp
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f7f9 fc6a 	bl	8000608 <__aeabi_dmul>
 8006d34:	4b08      	ldr	r3, [pc, #32]	@ (8006d58 <_strtod_l+0x860>)
 8006d36:	400b      	ands	r3, r1
 8006d38:	4682      	mov	sl, r0
 8006d3a:	468b      	mov	fp, r1
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f47f ae05 	bne.w	800694c <_strtod_l+0x454>
 8006d42:	9a05      	ldr	r2, [sp, #20]
 8006d44:	2322      	movs	r3, #34	@ 0x22
 8006d46:	6013      	str	r3, [r2, #0]
 8006d48:	e600      	b.n	800694c <_strtod_l+0x454>
 8006d4a:	bf00      	nop
 8006d4c:	08008df0 	.word	0x08008df0
 8006d50:	fffffc02 	.word	0xfffffc02
 8006d54:	39500000 	.word	0x39500000
 8006d58:	7ff00000 	.word	0x7ff00000
 8006d5c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006d60:	d165      	bne.n	8006e2e <_strtod_l+0x936>
 8006d62:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006d64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d68:	b35a      	cbz	r2, 8006dc2 <_strtod_l+0x8ca>
 8006d6a:	4a9f      	ldr	r2, [pc, #636]	@ (8006fe8 <_strtod_l+0xaf0>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d12b      	bne.n	8006dc8 <_strtod_l+0x8d0>
 8006d70:	9b08      	ldr	r3, [sp, #32]
 8006d72:	4651      	mov	r1, sl
 8006d74:	b303      	cbz	r3, 8006db8 <_strtod_l+0x8c0>
 8006d76:	4b9d      	ldr	r3, [pc, #628]	@ (8006fec <_strtod_l+0xaf4>)
 8006d78:	465a      	mov	r2, fp
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006d80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d84:	d81b      	bhi.n	8006dbe <_strtod_l+0x8c6>
 8006d86:	0d1b      	lsrs	r3, r3, #20
 8006d88:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d90:	4299      	cmp	r1, r3
 8006d92:	d119      	bne.n	8006dc8 <_strtod_l+0x8d0>
 8006d94:	4b96      	ldr	r3, [pc, #600]	@ (8006ff0 <_strtod_l+0xaf8>)
 8006d96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d102      	bne.n	8006da2 <_strtod_l+0x8aa>
 8006d9c:	3101      	adds	r1, #1
 8006d9e:	f43f adca 	beq.w	8006936 <_strtod_l+0x43e>
 8006da2:	4b92      	ldr	r3, [pc, #584]	@ (8006fec <_strtod_l+0xaf4>)
 8006da4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006da6:	401a      	ands	r2, r3
 8006da8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006dac:	f04f 0a00 	mov.w	sl, #0
 8006db0:	9b08      	ldr	r3, [sp, #32]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1b8      	bne.n	8006d28 <_strtod_l+0x830>
 8006db6:	e5c9      	b.n	800694c <_strtod_l+0x454>
 8006db8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006dbc:	e7e8      	b.n	8006d90 <_strtod_l+0x898>
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	e7e6      	b.n	8006d90 <_strtod_l+0x898>
 8006dc2:	ea53 030a 	orrs.w	r3, r3, sl
 8006dc6:	d0a1      	beq.n	8006d0c <_strtod_l+0x814>
 8006dc8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006dca:	b1db      	cbz	r3, 8006e04 <_strtod_l+0x90c>
 8006dcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006dce:	4213      	tst	r3, r2
 8006dd0:	d0ee      	beq.n	8006db0 <_strtod_l+0x8b8>
 8006dd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006dd4:	9a08      	ldr	r2, [sp, #32]
 8006dd6:	4650      	mov	r0, sl
 8006dd8:	4659      	mov	r1, fp
 8006dda:	b1bb      	cbz	r3, 8006e0c <_strtod_l+0x914>
 8006ddc:	f7ff fb6e 	bl	80064bc <sulp>
 8006de0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006de4:	ec53 2b10 	vmov	r2, r3, d0
 8006de8:	f7f9 fa58 	bl	800029c <__adddf3>
 8006dec:	4682      	mov	sl, r0
 8006dee:	468b      	mov	fp, r1
 8006df0:	e7de      	b.n	8006db0 <_strtod_l+0x8b8>
 8006df2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006df6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006dfa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006dfe:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006e02:	e7d5      	b.n	8006db0 <_strtod_l+0x8b8>
 8006e04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006e06:	ea13 0f0a 	tst.w	r3, sl
 8006e0a:	e7e1      	b.n	8006dd0 <_strtod_l+0x8d8>
 8006e0c:	f7ff fb56 	bl	80064bc <sulp>
 8006e10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e14:	ec53 2b10 	vmov	r2, r3, d0
 8006e18:	f7f9 fa3e 	bl	8000298 <__aeabi_dsub>
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	2300      	movs	r3, #0
 8006e20:	4682      	mov	sl, r0
 8006e22:	468b      	mov	fp, r1
 8006e24:	f7f9 fe58 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e28:	2800      	cmp	r0, #0
 8006e2a:	d0c1      	beq.n	8006db0 <_strtod_l+0x8b8>
 8006e2c:	e619      	b.n	8006a62 <_strtod_l+0x56a>
 8006e2e:	4641      	mov	r1, r8
 8006e30:	4620      	mov	r0, r4
 8006e32:	f7ff facd 	bl	80063d0 <__ratio>
 8006e36:	ec57 6b10 	vmov	r6, r7, d0
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006e40:	4630      	mov	r0, r6
 8006e42:	4639      	mov	r1, r7
 8006e44:	f7f9 fe5c 	bl	8000b00 <__aeabi_dcmple>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	d06f      	beq.n	8006f2c <_strtod_l+0xa34>
 8006e4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d17a      	bne.n	8006f48 <_strtod_l+0xa50>
 8006e52:	f1ba 0f00 	cmp.w	sl, #0
 8006e56:	d158      	bne.n	8006f0a <_strtod_l+0xa12>
 8006e58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d15a      	bne.n	8006f18 <_strtod_l+0xa20>
 8006e62:	4b64      	ldr	r3, [pc, #400]	@ (8006ff4 <_strtod_l+0xafc>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	4630      	mov	r0, r6
 8006e68:	4639      	mov	r1, r7
 8006e6a:	f7f9 fe3f 	bl	8000aec <__aeabi_dcmplt>
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	d159      	bne.n	8006f26 <_strtod_l+0xa2e>
 8006e72:	4630      	mov	r0, r6
 8006e74:	4639      	mov	r1, r7
 8006e76:	4b60      	ldr	r3, [pc, #384]	@ (8006ff8 <_strtod_l+0xb00>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f7f9 fbc5 	bl	8000608 <__aeabi_dmul>
 8006e7e:	4606      	mov	r6, r0
 8006e80:	460f      	mov	r7, r1
 8006e82:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006e86:	9606      	str	r6, [sp, #24]
 8006e88:	9307      	str	r3, [sp, #28]
 8006e8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e8e:	4d57      	ldr	r5, [pc, #348]	@ (8006fec <_strtod_l+0xaf4>)
 8006e90:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006e94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e96:	401d      	ands	r5, r3
 8006e98:	4b58      	ldr	r3, [pc, #352]	@ (8006ffc <_strtod_l+0xb04>)
 8006e9a:	429d      	cmp	r5, r3
 8006e9c:	f040 80b2 	bne.w	8007004 <_strtod_l+0xb0c>
 8006ea0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ea2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006ea6:	ec4b ab10 	vmov	d0, sl, fp
 8006eaa:	f7ff f9c9 	bl	8006240 <__ulp>
 8006eae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006eb2:	ec51 0b10 	vmov	r0, r1, d0
 8006eb6:	f7f9 fba7 	bl	8000608 <__aeabi_dmul>
 8006eba:	4652      	mov	r2, sl
 8006ebc:	465b      	mov	r3, fp
 8006ebe:	f7f9 f9ed 	bl	800029c <__adddf3>
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4949      	ldr	r1, [pc, #292]	@ (8006fec <_strtod_l+0xaf4>)
 8006ec6:	4a4e      	ldr	r2, [pc, #312]	@ (8007000 <_strtod_l+0xb08>)
 8006ec8:	4019      	ands	r1, r3
 8006eca:	4291      	cmp	r1, r2
 8006ecc:	4682      	mov	sl, r0
 8006ece:	d942      	bls.n	8006f56 <_strtod_l+0xa5e>
 8006ed0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006ed2:	4b47      	ldr	r3, [pc, #284]	@ (8006ff0 <_strtod_l+0xaf8>)
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d103      	bne.n	8006ee0 <_strtod_l+0x9e8>
 8006ed8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006eda:	3301      	adds	r3, #1
 8006edc:	f43f ad2b 	beq.w	8006936 <_strtod_l+0x43e>
 8006ee0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8006ff0 <_strtod_l+0xaf8>
 8006ee4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006ee8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006eea:	9805      	ldr	r0, [sp, #20]
 8006eec:	f7fe fe74 	bl	8005bd8 <_Bfree>
 8006ef0:	9805      	ldr	r0, [sp, #20]
 8006ef2:	4649      	mov	r1, r9
 8006ef4:	f7fe fe70 	bl	8005bd8 <_Bfree>
 8006ef8:	9805      	ldr	r0, [sp, #20]
 8006efa:	4641      	mov	r1, r8
 8006efc:	f7fe fe6c 	bl	8005bd8 <_Bfree>
 8006f00:	9805      	ldr	r0, [sp, #20]
 8006f02:	4621      	mov	r1, r4
 8006f04:	f7fe fe68 	bl	8005bd8 <_Bfree>
 8006f08:	e618      	b.n	8006b3c <_strtod_l+0x644>
 8006f0a:	f1ba 0f01 	cmp.w	sl, #1
 8006f0e:	d103      	bne.n	8006f18 <_strtod_l+0xa20>
 8006f10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f43f ada5 	beq.w	8006a62 <_strtod_l+0x56a>
 8006f18:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006fc8 <_strtod_l+0xad0>
 8006f1c:	4f35      	ldr	r7, [pc, #212]	@ (8006ff4 <_strtod_l+0xafc>)
 8006f1e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006f22:	2600      	movs	r6, #0
 8006f24:	e7b1      	b.n	8006e8a <_strtod_l+0x992>
 8006f26:	4f34      	ldr	r7, [pc, #208]	@ (8006ff8 <_strtod_l+0xb00>)
 8006f28:	2600      	movs	r6, #0
 8006f2a:	e7aa      	b.n	8006e82 <_strtod_l+0x98a>
 8006f2c:	4b32      	ldr	r3, [pc, #200]	@ (8006ff8 <_strtod_l+0xb00>)
 8006f2e:	4630      	mov	r0, r6
 8006f30:	4639      	mov	r1, r7
 8006f32:	2200      	movs	r2, #0
 8006f34:	f7f9 fb68 	bl	8000608 <__aeabi_dmul>
 8006f38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	460f      	mov	r7, r1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d09f      	beq.n	8006e82 <_strtod_l+0x98a>
 8006f42:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006f46:	e7a0      	b.n	8006e8a <_strtod_l+0x992>
 8006f48:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006fd0 <_strtod_l+0xad8>
 8006f4c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006f50:	ec57 6b17 	vmov	r6, r7, d7
 8006f54:	e799      	b.n	8006e8a <_strtod_l+0x992>
 8006f56:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006f5a:	9b08      	ldr	r3, [sp, #32]
 8006f5c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1c1      	bne.n	8006ee8 <_strtod_l+0x9f0>
 8006f64:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006f68:	0d1b      	lsrs	r3, r3, #20
 8006f6a:	051b      	lsls	r3, r3, #20
 8006f6c:	429d      	cmp	r5, r3
 8006f6e:	d1bb      	bne.n	8006ee8 <_strtod_l+0x9f0>
 8006f70:	4630      	mov	r0, r6
 8006f72:	4639      	mov	r1, r7
 8006f74:	f7f9 fe90 	bl	8000c98 <__aeabi_d2lz>
 8006f78:	f7f9 fb18 	bl	80005ac <__aeabi_l2d>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	460b      	mov	r3, r1
 8006f80:	4630      	mov	r0, r6
 8006f82:	4639      	mov	r1, r7
 8006f84:	f7f9 f988 	bl	8000298 <__aeabi_dsub>
 8006f88:	460b      	mov	r3, r1
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006f90:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006f94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f96:	ea46 060a 	orr.w	r6, r6, sl
 8006f9a:	431e      	orrs	r6, r3
 8006f9c:	d06f      	beq.n	800707e <_strtod_l+0xb86>
 8006f9e:	a30e      	add	r3, pc, #56	@ (adr r3, 8006fd8 <_strtod_l+0xae0>)
 8006fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa4:	f7f9 fda2 	bl	8000aec <__aeabi_dcmplt>
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	f47f accf 	bne.w	800694c <_strtod_l+0x454>
 8006fae:	a30c      	add	r3, pc, #48	@ (adr r3, 8006fe0 <_strtod_l+0xae8>)
 8006fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fb8:	f7f9 fdb6 	bl	8000b28 <__aeabi_dcmpgt>
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	d093      	beq.n	8006ee8 <_strtod_l+0x9f0>
 8006fc0:	e4c4      	b.n	800694c <_strtod_l+0x454>
 8006fc2:	bf00      	nop
 8006fc4:	f3af 8000 	nop.w
 8006fc8:	00000000 	.word	0x00000000
 8006fcc:	bff00000 	.word	0xbff00000
 8006fd0:	00000000 	.word	0x00000000
 8006fd4:	3ff00000 	.word	0x3ff00000
 8006fd8:	94a03595 	.word	0x94a03595
 8006fdc:	3fdfffff 	.word	0x3fdfffff
 8006fe0:	35afe535 	.word	0x35afe535
 8006fe4:	3fe00000 	.word	0x3fe00000
 8006fe8:	000fffff 	.word	0x000fffff
 8006fec:	7ff00000 	.word	0x7ff00000
 8006ff0:	7fefffff 	.word	0x7fefffff
 8006ff4:	3ff00000 	.word	0x3ff00000
 8006ff8:	3fe00000 	.word	0x3fe00000
 8006ffc:	7fe00000 	.word	0x7fe00000
 8007000:	7c9fffff 	.word	0x7c9fffff
 8007004:	9b08      	ldr	r3, [sp, #32]
 8007006:	b323      	cbz	r3, 8007052 <_strtod_l+0xb5a>
 8007008:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800700c:	d821      	bhi.n	8007052 <_strtod_l+0xb5a>
 800700e:	a328      	add	r3, pc, #160	@ (adr r3, 80070b0 <_strtod_l+0xbb8>)
 8007010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007014:	4630      	mov	r0, r6
 8007016:	4639      	mov	r1, r7
 8007018:	f7f9 fd72 	bl	8000b00 <__aeabi_dcmple>
 800701c:	b1a0      	cbz	r0, 8007048 <_strtod_l+0xb50>
 800701e:	4639      	mov	r1, r7
 8007020:	4630      	mov	r0, r6
 8007022:	f7f9 fdc9 	bl	8000bb8 <__aeabi_d2uiz>
 8007026:	2801      	cmp	r0, #1
 8007028:	bf38      	it	cc
 800702a:	2001      	movcc	r0, #1
 800702c:	f7f9 fa72 	bl	8000514 <__aeabi_ui2d>
 8007030:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007032:	4606      	mov	r6, r0
 8007034:	460f      	mov	r7, r1
 8007036:	b9fb      	cbnz	r3, 8007078 <_strtod_l+0xb80>
 8007038:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800703c:	9014      	str	r0, [sp, #80]	@ 0x50
 800703e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007040:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007044:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007048:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800704a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800704e:	1b5b      	subs	r3, r3, r5
 8007050:	9311      	str	r3, [sp, #68]	@ 0x44
 8007052:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007056:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800705a:	f7ff f8f1 	bl	8006240 <__ulp>
 800705e:	4650      	mov	r0, sl
 8007060:	ec53 2b10 	vmov	r2, r3, d0
 8007064:	4659      	mov	r1, fp
 8007066:	f7f9 facf 	bl	8000608 <__aeabi_dmul>
 800706a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800706e:	f7f9 f915 	bl	800029c <__adddf3>
 8007072:	4682      	mov	sl, r0
 8007074:	468b      	mov	fp, r1
 8007076:	e770      	b.n	8006f5a <_strtod_l+0xa62>
 8007078:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800707c:	e7e0      	b.n	8007040 <_strtod_l+0xb48>
 800707e:	a30e      	add	r3, pc, #56	@ (adr r3, 80070b8 <_strtod_l+0xbc0>)
 8007080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007084:	f7f9 fd32 	bl	8000aec <__aeabi_dcmplt>
 8007088:	e798      	b.n	8006fbc <_strtod_l+0xac4>
 800708a:	2300      	movs	r3, #0
 800708c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800708e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007090:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007092:	6013      	str	r3, [r2, #0]
 8007094:	f7ff ba6d 	b.w	8006572 <_strtod_l+0x7a>
 8007098:	2a65      	cmp	r2, #101	@ 0x65
 800709a:	f43f ab66 	beq.w	800676a <_strtod_l+0x272>
 800709e:	2a45      	cmp	r2, #69	@ 0x45
 80070a0:	f43f ab63 	beq.w	800676a <_strtod_l+0x272>
 80070a4:	2301      	movs	r3, #1
 80070a6:	f7ff bb9e 	b.w	80067e6 <_strtod_l+0x2ee>
 80070aa:	bf00      	nop
 80070ac:	f3af 8000 	nop.w
 80070b0:	ffc00000 	.word	0xffc00000
 80070b4:	41dfffff 	.word	0x41dfffff
 80070b8:	94a03595 	.word	0x94a03595
 80070bc:	3fcfffff 	.word	0x3fcfffff

080070c0 <_strtod_r>:
 80070c0:	4b01      	ldr	r3, [pc, #4]	@ (80070c8 <_strtod_r+0x8>)
 80070c2:	f7ff ba19 	b.w	80064f8 <_strtod_l>
 80070c6:	bf00      	nop
 80070c8:	200000ec 	.word	0x200000ec

080070cc <_strtol_l.constprop.0>:
 80070cc:	2b24      	cmp	r3, #36	@ 0x24
 80070ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070d2:	4686      	mov	lr, r0
 80070d4:	4690      	mov	r8, r2
 80070d6:	d801      	bhi.n	80070dc <_strtol_l.constprop.0+0x10>
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d106      	bne.n	80070ea <_strtol_l.constprop.0+0x1e>
 80070dc:	f7fd fdac 	bl	8004c38 <__errno>
 80070e0:	2316      	movs	r3, #22
 80070e2:	6003      	str	r3, [r0, #0]
 80070e4:	2000      	movs	r0, #0
 80070e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ea:	4834      	ldr	r0, [pc, #208]	@ (80071bc <_strtol_l.constprop.0+0xf0>)
 80070ec:	460d      	mov	r5, r1
 80070ee:	462a      	mov	r2, r5
 80070f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070f4:	5d06      	ldrb	r6, [r0, r4]
 80070f6:	f016 0608 	ands.w	r6, r6, #8
 80070fa:	d1f8      	bne.n	80070ee <_strtol_l.constprop.0+0x22>
 80070fc:	2c2d      	cmp	r4, #45	@ 0x2d
 80070fe:	d12d      	bne.n	800715c <_strtol_l.constprop.0+0x90>
 8007100:	782c      	ldrb	r4, [r5, #0]
 8007102:	2601      	movs	r6, #1
 8007104:	1c95      	adds	r5, r2, #2
 8007106:	f033 0210 	bics.w	r2, r3, #16
 800710a:	d109      	bne.n	8007120 <_strtol_l.constprop.0+0x54>
 800710c:	2c30      	cmp	r4, #48	@ 0x30
 800710e:	d12a      	bne.n	8007166 <_strtol_l.constprop.0+0x9a>
 8007110:	782a      	ldrb	r2, [r5, #0]
 8007112:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007116:	2a58      	cmp	r2, #88	@ 0x58
 8007118:	d125      	bne.n	8007166 <_strtol_l.constprop.0+0x9a>
 800711a:	786c      	ldrb	r4, [r5, #1]
 800711c:	2310      	movs	r3, #16
 800711e:	3502      	adds	r5, #2
 8007120:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007124:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007128:	2200      	movs	r2, #0
 800712a:	fbbc f9f3 	udiv	r9, ip, r3
 800712e:	4610      	mov	r0, r2
 8007130:	fb03 ca19 	mls	sl, r3, r9, ip
 8007134:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007138:	2f09      	cmp	r7, #9
 800713a:	d81b      	bhi.n	8007174 <_strtol_l.constprop.0+0xa8>
 800713c:	463c      	mov	r4, r7
 800713e:	42a3      	cmp	r3, r4
 8007140:	dd27      	ble.n	8007192 <_strtol_l.constprop.0+0xc6>
 8007142:	1c57      	adds	r7, r2, #1
 8007144:	d007      	beq.n	8007156 <_strtol_l.constprop.0+0x8a>
 8007146:	4581      	cmp	r9, r0
 8007148:	d320      	bcc.n	800718c <_strtol_l.constprop.0+0xc0>
 800714a:	d101      	bne.n	8007150 <_strtol_l.constprop.0+0x84>
 800714c:	45a2      	cmp	sl, r4
 800714e:	db1d      	blt.n	800718c <_strtol_l.constprop.0+0xc0>
 8007150:	fb00 4003 	mla	r0, r0, r3, r4
 8007154:	2201      	movs	r2, #1
 8007156:	f815 4b01 	ldrb.w	r4, [r5], #1
 800715a:	e7eb      	b.n	8007134 <_strtol_l.constprop.0+0x68>
 800715c:	2c2b      	cmp	r4, #43	@ 0x2b
 800715e:	bf04      	itt	eq
 8007160:	782c      	ldrbeq	r4, [r5, #0]
 8007162:	1c95      	addeq	r5, r2, #2
 8007164:	e7cf      	b.n	8007106 <_strtol_l.constprop.0+0x3a>
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1da      	bne.n	8007120 <_strtol_l.constprop.0+0x54>
 800716a:	2c30      	cmp	r4, #48	@ 0x30
 800716c:	bf0c      	ite	eq
 800716e:	2308      	moveq	r3, #8
 8007170:	230a      	movne	r3, #10
 8007172:	e7d5      	b.n	8007120 <_strtol_l.constprop.0+0x54>
 8007174:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007178:	2f19      	cmp	r7, #25
 800717a:	d801      	bhi.n	8007180 <_strtol_l.constprop.0+0xb4>
 800717c:	3c37      	subs	r4, #55	@ 0x37
 800717e:	e7de      	b.n	800713e <_strtol_l.constprop.0+0x72>
 8007180:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007184:	2f19      	cmp	r7, #25
 8007186:	d804      	bhi.n	8007192 <_strtol_l.constprop.0+0xc6>
 8007188:	3c57      	subs	r4, #87	@ 0x57
 800718a:	e7d8      	b.n	800713e <_strtol_l.constprop.0+0x72>
 800718c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007190:	e7e1      	b.n	8007156 <_strtol_l.constprop.0+0x8a>
 8007192:	1c53      	adds	r3, r2, #1
 8007194:	d108      	bne.n	80071a8 <_strtol_l.constprop.0+0xdc>
 8007196:	2322      	movs	r3, #34	@ 0x22
 8007198:	f8ce 3000 	str.w	r3, [lr]
 800719c:	4660      	mov	r0, ip
 800719e:	f1b8 0f00 	cmp.w	r8, #0
 80071a2:	d0a0      	beq.n	80070e6 <_strtol_l.constprop.0+0x1a>
 80071a4:	1e69      	subs	r1, r5, #1
 80071a6:	e006      	b.n	80071b6 <_strtol_l.constprop.0+0xea>
 80071a8:	b106      	cbz	r6, 80071ac <_strtol_l.constprop.0+0xe0>
 80071aa:	4240      	negs	r0, r0
 80071ac:	f1b8 0f00 	cmp.w	r8, #0
 80071b0:	d099      	beq.n	80070e6 <_strtol_l.constprop.0+0x1a>
 80071b2:	2a00      	cmp	r2, #0
 80071b4:	d1f6      	bne.n	80071a4 <_strtol_l.constprop.0+0xd8>
 80071b6:	f8c8 1000 	str.w	r1, [r8]
 80071ba:	e794      	b.n	80070e6 <_strtol_l.constprop.0+0x1a>
 80071bc:	08008e19 	.word	0x08008e19

080071c0 <_strtol_r>:
 80071c0:	f7ff bf84 	b.w	80070cc <_strtol_l.constprop.0>

080071c4 <__ssputs_r>:
 80071c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071c8:	688e      	ldr	r6, [r1, #8]
 80071ca:	461f      	mov	r7, r3
 80071cc:	42be      	cmp	r6, r7
 80071ce:	680b      	ldr	r3, [r1, #0]
 80071d0:	4682      	mov	sl, r0
 80071d2:	460c      	mov	r4, r1
 80071d4:	4690      	mov	r8, r2
 80071d6:	d82d      	bhi.n	8007234 <__ssputs_r+0x70>
 80071d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80071dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80071e0:	d026      	beq.n	8007230 <__ssputs_r+0x6c>
 80071e2:	6965      	ldr	r5, [r4, #20]
 80071e4:	6909      	ldr	r1, [r1, #16]
 80071e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071ea:	eba3 0901 	sub.w	r9, r3, r1
 80071ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071f2:	1c7b      	adds	r3, r7, #1
 80071f4:	444b      	add	r3, r9
 80071f6:	106d      	asrs	r5, r5, #1
 80071f8:	429d      	cmp	r5, r3
 80071fa:	bf38      	it	cc
 80071fc:	461d      	movcc	r5, r3
 80071fe:	0553      	lsls	r3, r2, #21
 8007200:	d527      	bpl.n	8007252 <__ssputs_r+0x8e>
 8007202:	4629      	mov	r1, r5
 8007204:	f7fe fc1c 	bl	8005a40 <_malloc_r>
 8007208:	4606      	mov	r6, r0
 800720a:	b360      	cbz	r0, 8007266 <__ssputs_r+0xa2>
 800720c:	6921      	ldr	r1, [r4, #16]
 800720e:	464a      	mov	r2, r9
 8007210:	f7fd fd3f 	bl	8004c92 <memcpy>
 8007214:	89a3      	ldrh	r3, [r4, #12]
 8007216:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800721a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800721e:	81a3      	strh	r3, [r4, #12]
 8007220:	6126      	str	r6, [r4, #16]
 8007222:	6165      	str	r5, [r4, #20]
 8007224:	444e      	add	r6, r9
 8007226:	eba5 0509 	sub.w	r5, r5, r9
 800722a:	6026      	str	r6, [r4, #0]
 800722c:	60a5      	str	r5, [r4, #8]
 800722e:	463e      	mov	r6, r7
 8007230:	42be      	cmp	r6, r7
 8007232:	d900      	bls.n	8007236 <__ssputs_r+0x72>
 8007234:	463e      	mov	r6, r7
 8007236:	6820      	ldr	r0, [r4, #0]
 8007238:	4632      	mov	r2, r6
 800723a:	4641      	mov	r1, r8
 800723c:	f000 fb9c 	bl	8007978 <memmove>
 8007240:	68a3      	ldr	r3, [r4, #8]
 8007242:	1b9b      	subs	r3, r3, r6
 8007244:	60a3      	str	r3, [r4, #8]
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	4433      	add	r3, r6
 800724a:	6023      	str	r3, [r4, #0]
 800724c:	2000      	movs	r0, #0
 800724e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007252:	462a      	mov	r2, r5
 8007254:	f000 ff51 	bl	80080fa <_realloc_r>
 8007258:	4606      	mov	r6, r0
 800725a:	2800      	cmp	r0, #0
 800725c:	d1e0      	bne.n	8007220 <__ssputs_r+0x5c>
 800725e:	6921      	ldr	r1, [r4, #16]
 8007260:	4650      	mov	r0, sl
 8007262:	f7fe fb79 	bl	8005958 <_free_r>
 8007266:	230c      	movs	r3, #12
 8007268:	f8ca 3000 	str.w	r3, [sl]
 800726c:	89a3      	ldrh	r3, [r4, #12]
 800726e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007272:	81a3      	strh	r3, [r4, #12]
 8007274:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007278:	e7e9      	b.n	800724e <__ssputs_r+0x8a>
	...

0800727c <_svfiprintf_r>:
 800727c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007280:	4698      	mov	r8, r3
 8007282:	898b      	ldrh	r3, [r1, #12]
 8007284:	061b      	lsls	r3, r3, #24
 8007286:	b09d      	sub	sp, #116	@ 0x74
 8007288:	4607      	mov	r7, r0
 800728a:	460d      	mov	r5, r1
 800728c:	4614      	mov	r4, r2
 800728e:	d510      	bpl.n	80072b2 <_svfiprintf_r+0x36>
 8007290:	690b      	ldr	r3, [r1, #16]
 8007292:	b973      	cbnz	r3, 80072b2 <_svfiprintf_r+0x36>
 8007294:	2140      	movs	r1, #64	@ 0x40
 8007296:	f7fe fbd3 	bl	8005a40 <_malloc_r>
 800729a:	6028      	str	r0, [r5, #0]
 800729c:	6128      	str	r0, [r5, #16]
 800729e:	b930      	cbnz	r0, 80072ae <_svfiprintf_r+0x32>
 80072a0:	230c      	movs	r3, #12
 80072a2:	603b      	str	r3, [r7, #0]
 80072a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072a8:	b01d      	add	sp, #116	@ 0x74
 80072aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ae:	2340      	movs	r3, #64	@ 0x40
 80072b0:	616b      	str	r3, [r5, #20]
 80072b2:	2300      	movs	r3, #0
 80072b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80072b6:	2320      	movs	r3, #32
 80072b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80072c0:	2330      	movs	r3, #48	@ 0x30
 80072c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007460 <_svfiprintf_r+0x1e4>
 80072c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072ca:	f04f 0901 	mov.w	r9, #1
 80072ce:	4623      	mov	r3, r4
 80072d0:	469a      	mov	sl, r3
 80072d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072d6:	b10a      	cbz	r2, 80072dc <_svfiprintf_r+0x60>
 80072d8:	2a25      	cmp	r2, #37	@ 0x25
 80072da:	d1f9      	bne.n	80072d0 <_svfiprintf_r+0x54>
 80072dc:	ebba 0b04 	subs.w	fp, sl, r4
 80072e0:	d00b      	beq.n	80072fa <_svfiprintf_r+0x7e>
 80072e2:	465b      	mov	r3, fp
 80072e4:	4622      	mov	r2, r4
 80072e6:	4629      	mov	r1, r5
 80072e8:	4638      	mov	r0, r7
 80072ea:	f7ff ff6b 	bl	80071c4 <__ssputs_r>
 80072ee:	3001      	adds	r0, #1
 80072f0:	f000 80a7 	beq.w	8007442 <_svfiprintf_r+0x1c6>
 80072f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072f6:	445a      	add	r2, fp
 80072f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80072fa:	f89a 3000 	ldrb.w	r3, [sl]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f000 809f 	beq.w	8007442 <_svfiprintf_r+0x1c6>
 8007304:	2300      	movs	r3, #0
 8007306:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800730a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800730e:	f10a 0a01 	add.w	sl, sl, #1
 8007312:	9304      	str	r3, [sp, #16]
 8007314:	9307      	str	r3, [sp, #28]
 8007316:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800731a:	931a      	str	r3, [sp, #104]	@ 0x68
 800731c:	4654      	mov	r4, sl
 800731e:	2205      	movs	r2, #5
 8007320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007324:	484e      	ldr	r0, [pc, #312]	@ (8007460 <_svfiprintf_r+0x1e4>)
 8007326:	f7f8 ff5b 	bl	80001e0 <memchr>
 800732a:	9a04      	ldr	r2, [sp, #16]
 800732c:	b9d8      	cbnz	r0, 8007366 <_svfiprintf_r+0xea>
 800732e:	06d0      	lsls	r0, r2, #27
 8007330:	bf44      	itt	mi
 8007332:	2320      	movmi	r3, #32
 8007334:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007338:	0711      	lsls	r1, r2, #28
 800733a:	bf44      	itt	mi
 800733c:	232b      	movmi	r3, #43	@ 0x2b
 800733e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007342:	f89a 3000 	ldrb.w	r3, [sl]
 8007346:	2b2a      	cmp	r3, #42	@ 0x2a
 8007348:	d015      	beq.n	8007376 <_svfiprintf_r+0xfa>
 800734a:	9a07      	ldr	r2, [sp, #28]
 800734c:	4654      	mov	r4, sl
 800734e:	2000      	movs	r0, #0
 8007350:	f04f 0c0a 	mov.w	ip, #10
 8007354:	4621      	mov	r1, r4
 8007356:	f811 3b01 	ldrb.w	r3, [r1], #1
 800735a:	3b30      	subs	r3, #48	@ 0x30
 800735c:	2b09      	cmp	r3, #9
 800735e:	d94b      	bls.n	80073f8 <_svfiprintf_r+0x17c>
 8007360:	b1b0      	cbz	r0, 8007390 <_svfiprintf_r+0x114>
 8007362:	9207      	str	r2, [sp, #28]
 8007364:	e014      	b.n	8007390 <_svfiprintf_r+0x114>
 8007366:	eba0 0308 	sub.w	r3, r0, r8
 800736a:	fa09 f303 	lsl.w	r3, r9, r3
 800736e:	4313      	orrs	r3, r2
 8007370:	9304      	str	r3, [sp, #16]
 8007372:	46a2      	mov	sl, r4
 8007374:	e7d2      	b.n	800731c <_svfiprintf_r+0xa0>
 8007376:	9b03      	ldr	r3, [sp, #12]
 8007378:	1d19      	adds	r1, r3, #4
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	9103      	str	r1, [sp, #12]
 800737e:	2b00      	cmp	r3, #0
 8007380:	bfbb      	ittet	lt
 8007382:	425b      	neglt	r3, r3
 8007384:	f042 0202 	orrlt.w	r2, r2, #2
 8007388:	9307      	strge	r3, [sp, #28]
 800738a:	9307      	strlt	r3, [sp, #28]
 800738c:	bfb8      	it	lt
 800738e:	9204      	strlt	r2, [sp, #16]
 8007390:	7823      	ldrb	r3, [r4, #0]
 8007392:	2b2e      	cmp	r3, #46	@ 0x2e
 8007394:	d10a      	bne.n	80073ac <_svfiprintf_r+0x130>
 8007396:	7863      	ldrb	r3, [r4, #1]
 8007398:	2b2a      	cmp	r3, #42	@ 0x2a
 800739a:	d132      	bne.n	8007402 <_svfiprintf_r+0x186>
 800739c:	9b03      	ldr	r3, [sp, #12]
 800739e:	1d1a      	adds	r2, r3, #4
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	9203      	str	r2, [sp, #12]
 80073a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80073a8:	3402      	adds	r4, #2
 80073aa:	9305      	str	r3, [sp, #20]
 80073ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007470 <_svfiprintf_r+0x1f4>
 80073b0:	7821      	ldrb	r1, [r4, #0]
 80073b2:	2203      	movs	r2, #3
 80073b4:	4650      	mov	r0, sl
 80073b6:	f7f8 ff13 	bl	80001e0 <memchr>
 80073ba:	b138      	cbz	r0, 80073cc <_svfiprintf_r+0x150>
 80073bc:	9b04      	ldr	r3, [sp, #16]
 80073be:	eba0 000a 	sub.w	r0, r0, sl
 80073c2:	2240      	movs	r2, #64	@ 0x40
 80073c4:	4082      	lsls	r2, r0
 80073c6:	4313      	orrs	r3, r2
 80073c8:	3401      	adds	r4, #1
 80073ca:	9304      	str	r3, [sp, #16]
 80073cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073d0:	4824      	ldr	r0, [pc, #144]	@ (8007464 <_svfiprintf_r+0x1e8>)
 80073d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073d6:	2206      	movs	r2, #6
 80073d8:	f7f8 ff02 	bl	80001e0 <memchr>
 80073dc:	2800      	cmp	r0, #0
 80073de:	d036      	beq.n	800744e <_svfiprintf_r+0x1d2>
 80073e0:	4b21      	ldr	r3, [pc, #132]	@ (8007468 <_svfiprintf_r+0x1ec>)
 80073e2:	bb1b      	cbnz	r3, 800742c <_svfiprintf_r+0x1b0>
 80073e4:	9b03      	ldr	r3, [sp, #12]
 80073e6:	3307      	adds	r3, #7
 80073e8:	f023 0307 	bic.w	r3, r3, #7
 80073ec:	3308      	adds	r3, #8
 80073ee:	9303      	str	r3, [sp, #12]
 80073f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073f2:	4433      	add	r3, r6
 80073f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073f6:	e76a      	b.n	80072ce <_svfiprintf_r+0x52>
 80073f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80073fc:	460c      	mov	r4, r1
 80073fe:	2001      	movs	r0, #1
 8007400:	e7a8      	b.n	8007354 <_svfiprintf_r+0xd8>
 8007402:	2300      	movs	r3, #0
 8007404:	3401      	adds	r4, #1
 8007406:	9305      	str	r3, [sp, #20]
 8007408:	4619      	mov	r1, r3
 800740a:	f04f 0c0a 	mov.w	ip, #10
 800740e:	4620      	mov	r0, r4
 8007410:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007414:	3a30      	subs	r2, #48	@ 0x30
 8007416:	2a09      	cmp	r2, #9
 8007418:	d903      	bls.n	8007422 <_svfiprintf_r+0x1a6>
 800741a:	2b00      	cmp	r3, #0
 800741c:	d0c6      	beq.n	80073ac <_svfiprintf_r+0x130>
 800741e:	9105      	str	r1, [sp, #20]
 8007420:	e7c4      	b.n	80073ac <_svfiprintf_r+0x130>
 8007422:	fb0c 2101 	mla	r1, ip, r1, r2
 8007426:	4604      	mov	r4, r0
 8007428:	2301      	movs	r3, #1
 800742a:	e7f0      	b.n	800740e <_svfiprintf_r+0x192>
 800742c:	ab03      	add	r3, sp, #12
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	462a      	mov	r2, r5
 8007432:	4b0e      	ldr	r3, [pc, #56]	@ (800746c <_svfiprintf_r+0x1f0>)
 8007434:	a904      	add	r1, sp, #16
 8007436:	4638      	mov	r0, r7
 8007438:	f7fc fca8 	bl	8003d8c <_printf_float>
 800743c:	1c42      	adds	r2, r0, #1
 800743e:	4606      	mov	r6, r0
 8007440:	d1d6      	bne.n	80073f0 <_svfiprintf_r+0x174>
 8007442:	89ab      	ldrh	r3, [r5, #12]
 8007444:	065b      	lsls	r3, r3, #25
 8007446:	f53f af2d 	bmi.w	80072a4 <_svfiprintf_r+0x28>
 800744a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800744c:	e72c      	b.n	80072a8 <_svfiprintf_r+0x2c>
 800744e:	ab03      	add	r3, sp, #12
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	462a      	mov	r2, r5
 8007454:	4b05      	ldr	r3, [pc, #20]	@ (800746c <_svfiprintf_r+0x1f0>)
 8007456:	a904      	add	r1, sp, #16
 8007458:	4638      	mov	r0, r7
 800745a:	f7fc ff2f 	bl	80042bc <_printf_i>
 800745e:	e7ed      	b.n	800743c <_svfiprintf_r+0x1c0>
 8007460:	08008f19 	.word	0x08008f19
 8007464:	08008f23 	.word	0x08008f23
 8007468:	08003d8d 	.word	0x08003d8d
 800746c:	080071c5 	.word	0x080071c5
 8007470:	08008f1f 	.word	0x08008f1f

08007474 <__sfputc_r>:
 8007474:	6893      	ldr	r3, [r2, #8]
 8007476:	3b01      	subs	r3, #1
 8007478:	2b00      	cmp	r3, #0
 800747a:	b410      	push	{r4}
 800747c:	6093      	str	r3, [r2, #8]
 800747e:	da08      	bge.n	8007492 <__sfputc_r+0x1e>
 8007480:	6994      	ldr	r4, [r2, #24]
 8007482:	42a3      	cmp	r3, r4
 8007484:	db01      	blt.n	800748a <__sfputc_r+0x16>
 8007486:	290a      	cmp	r1, #10
 8007488:	d103      	bne.n	8007492 <__sfputc_r+0x1e>
 800748a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800748e:	f000 b9df 	b.w	8007850 <__swbuf_r>
 8007492:	6813      	ldr	r3, [r2, #0]
 8007494:	1c58      	adds	r0, r3, #1
 8007496:	6010      	str	r0, [r2, #0]
 8007498:	7019      	strb	r1, [r3, #0]
 800749a:	4608      	mov	r0, r1
 800749c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074a0:	4770      	bx	lr

080074a2 <__sfputs_r>:
 80074a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a4:	4606      	mov	r6, r0
 80074a6:	460f      	mov	r7, r1
 80074a8:	4614      	mov	r4, r2
 80074aa:	18d5      	adds	r5, r2, r3
 80074ac:	42ac      	cmp	r4, r5
 80074ae:	d101      	bne.n	80074b4 <__sfputs_r+0x12>
 80074b0:	2000      	movs	r0, #0
 80074b2:	e007      	b.n	80074c4 <__sfputs_r+0x22>
 80074b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074b8:	463a      	mov	r2, r7
 80074ba:	4630      	mov	r0, r6
 80074bc:	f7ff ffda 	bl	8007474 <__sfputc_r>
 80074c0:	1c43      	adds	r3, r0, #1
 80074c2:	d1f3      	bne.n	80074ac <__sfputs_r+0xa>
 80074c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074c8 <_vfiprintf_r>:
 80074c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074cc:	460d      	mov	r5, r1
 80074ce:	b09d      	sub	sp, #116	@ 0x74
 80074d0:	4614      	mov	r4, r2
 80074d2:	4698      	mov	r8, r3
 80074d4:	4606      	mov	r6, r0
 80074d6:	b118      	cbz	r0, 80074e0 <_vfiprintf_r+0x18>
 80074d8:	6a03      	ldr	r3, [r0, #32]
 80074da:	b90b      	cbnz	r3, 80074e0 <_vfiprintf_r+0x18>
 80074dc:	f7fd faae 	bl	8004a3c <__sinit>
 80074e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074e2:	07d9      	lsls	r1, r3, #31
 80074e4:	d405      	bmi.n	80074f2 <_vfiprintf_r+0x2a>
 80074e6:	89ab      	ldrh	r3, [r5, #12]
 80074e8:	059a      	lsls	r2, r3, #22
 80074ea:	d402      	bmi.n	80074f2 <_vfiprintf_r+0x2a>
 80074ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074ee:	f7fd fbce 	bl	8004c8e <__retarget_lock_acquire_recursive>
 80074f2:	89ab      	ldrh	r3, [r5, #12]
 80074f4:	071b      	lsls	r3, r3, #28
 80074f6:	d501      	bpl.n	80074fc <_vfiprintf_r+0x34>
 80074f8:	692b      	ldr	r3, [r5, #16]
 80074fa:	b99b      	cbnz	r3, 8007524 <_vfiprintf_r+0x5c>
 80074fc:	4629      	mov	r1, r5
 80074fe:	4630      	mov	r0, r6
 8007500:	f000 f9e4 	bl	80078cc <__swsetup_r>
 8007504:	b170      	cbz	r0, 8007524 <_vfiprintf_r+0x5c>
 8007506:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007508:	07dc      	lsls	r4, r3, #31
 800750a:	d504      	bpl.n	8007516 <_vfiprintf_r+0x4e>
 800750c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007510:	b01d      	add	sp, #116	@ 0x74
 8007512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007516:	89ab      	ldrh	r3, [r5, #12]
 8007518:	0598      	lsls	r0, r3, #22
 800751a:	d4f7      	bmi.n	800750c <_vfiprintf_r+0x44>
 800751c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800751e:	f7fd fbb7 	bl	8004c90 <__retarget_lock_release_recursive>
 8007522:	e7f3      	b.n	800750c <_vfiprintf_r+0x44>
 8007524:	2300      	movs	r3, #0
 8007526:	9309      	str	r3, [sp, #36]	@ 0x24
 8007528:	2320      	movs	r3, #32
 800752a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800752e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007532:	2330      	movs	r3, #48	@ 0x30
 8007534:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80076e4 <_vfiprintf_r+0x21c>
 8007538:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800753c:	f04f 0901 	mov.w	r9, #1
 8007540:	4623      	mov	r3, r4
 8007542:	469a      	mov	sl, r3
 8007544:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007548:	b10a      	cbz	r2, 800754e <_vfiprintf_r+0x86>
 800754a:	2a25      	cmp	r2, #37	@ 0x25
 800754c:	d1f9      	bne.n	8007542 <_vfiprintf_r+0x7a>
 800754e:	ebba 0b04 	subs.w	fp, sl, r4
 8007552:	d00b      	beq.n	800756c <_vfiprintf_r+0xa4>
 8007554:	465b      	mov	r3, fp
 8007556:	4622      	mov	r2, r4
 8007558:	4629      	mov	r1, r5
 800755a:	4630      	mov	r0, r6
 800755c:	f7ff ffa1 	bl	80074a2 <__sfputs_r>
 8007560:	3001      	adds	r0, #1
 8007562:	f000 80a7 	beq.w	80076b4 <_vfiprintf_r+0x1ec>
 8007566:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007568:	445a      	add	r2, fp
 800756a:	9209      	str	r2, [sp, #36]	@ 0x24
 800756c:	f89a 3000 	ldrb.w	r3, [sl]
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 809f 	beq.w	80076b4 <_vfiprintf_r+0x1ec>
 8007576:	2300      	movs	r3, #0
 8007578:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800757c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007580:	f10a 0a01 	add.w	sl, sl, #1
 8007584:	9304      	str	r3, [sp, #16]
 8007586:	9307      	str	r3, [sp, #28]
 8007588:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800758c:	931a      	str	r3, [sp, #104]	@ 0x68
 800758e:	4654      	mov	r4, sl
 8007590:	2205      	movs	r2, #5
 8007592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007596:	4853      	ldr	r0, [pc, #332]	@ (80076e4 <_vfiprintf_r+0x21c>)
 8007598:	f7f8 fe22 	bl	80001e0 <memchr>
 800759c:	9a04      	ldr	r2, [sp, #16]
 800759e:	b9d8      	cbnz	r0, 80075d8 <_vfiprintf_r+0x110>
 80075a0:	06d1      	lsls	r1, r2, #27
 80075a2:	bf44      	itt	mi
 80075a4:	2320      	movmi	r3, #32
 80075a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075aa:	0713      	lsls	r3, r2, #28
 80075ac:	bf44      	itt	mi
 80075ae:	232b      	movmi	r3, #43	@ 0x2b
 80075b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075b4:	f89a 3000 	ldrb.w	r3, [sl]
 80075b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80075ba:	d015      	beq.n	80075e8 <_vfiprintf_r+0x120>
 80075bc:	9a07      	ldr	r2, [sp, #28]
 80075be:	4654      	mov	r4, sl
 80075c0:	2000      	movs	r0, #0
 80075c2:	f04f 0c0a 	mov.w	ip, #10
 80075c6:	4621      	mov	r1, r4
 80075c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075cc:	3b30      	subs	r3, #48	@ 0x30
 80075ce:	2b09      	cmp	r3, #9
 80075d0:	d94b      	bls.n	800766a <_vfiprintf_r+0x1a2>
 80075d2:	b1b0      	cbz	r0, 8007602 <_vfiprintf_r+0x13a>
 80075d4:	9207      	str	r2, [sp, #28]
 80075d6:	e014      	b.n	8007602 <_vfiprintf_r+0x13a>
 80075d8:	eba0 0308 	sub.w	r3, r0, r8
 80075dc:	fa09 f303 	lsl.w	r3, r9, r3
 80075e0:	4313      	orrs	r3, r2
 80075e2:	9304      	str	r3, [sp, #16]
 80075e4:	46a2      	mov	sl, r4
 80075e6:	e7d2      	b.n	800758e <_vfiprintf_r+0xc6>
 80075e8:	9b03      	ldr	r3, [sp, #12]
 80075ea:	1d19      	adds	r1, r3, #4
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	9103      	str	r1, [sp, #12]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	bfbb      	ittet	lt
 80075f4:	425b      	neglt	r3, r3
 80075f6:	f042 0202 	orrlt.w	r2, r2, #2
 80075fa:	9307      	strge	r3, [sp, #28]
 80075fc:	9307      	strlt	r3, [sp, #28]
 80075fe:	bfb8      	it	lt
 8007600:	9204      	strlt	r2, [sp, #16]
 8007602:	7823      	ldrb	r3, [r4, #0]
 8007604:	2b2e      	cmp	r3, #46	@ 0x2e
 8007606:	d10a      	bne.n	800761e <_vfiprintf_r+0x156>
 8007608:	7863      	ldrb	r3, [r4, #1]
 800760a:	2b2a      	cmp	r3, #42	@ 0x2a
 800760c:	d132      	bne.n	8007674 <_vfiprintf_r+0x1ac>
 800760e:	9b03      	ldr	r3, [sp, #12]
 8007610:	1d1a      	adds	r2, r3, #4
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	9203      	str	r2, [sp, #12]
 8007616:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800761a:	3402      	adds	r4, #2
 800761c:	9305      	str	r3, [sp, #20]
 800761e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80076f4 <_vfiprintf_r+0x22c>
 8007622:	7821      	ldrb	r1, [r4, #0]
 8007624:	2203      	movs	r2, #3
 8007626:	4650      	mov	r0, sl
 8007628:	f7f8 fdda 	bl	80001e0 <memchr>
 800762c:	b138      	cbz	r0, 800763e <_vfiprintf_r+0x176>
 800762e:	9b04      	ldr	r3, [sp, #16]
 8007630:	eba0 000a 	sub.w	r0, r0, sl
 8007634:	2240      	movs	r2, #64	@ 0x40
 8007636:	4082      	lsls	r2, r0
 8007638:	4313      	orrs	r3, r2
 800763a:	3401      	adds	r4, #1
 800763c:	9304      	str	r3, [sp, #16]
 800763e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007642:	4829      	ldr	r0, [pc, #164]	@ (80076e8 <_vfiprintf_r+0x220>)
 8007644:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007648:	2206      	movs	r2, #6
 800764a:	f7f8 fdc9 	bl	80001e0 <memchr>
 800764e:	2800      	cmp	r0, #0
 8007650:	d03f      	beq.n	80076d2 <_vfiprintf_r+0x20a>
 8007652:	4b26      	ldr	r3, [pc, #152]	@ (80076ec <_vfiprintf_r+0x224>)
 8007654:	bb1b      	cbnz	r3, 800769e <_vfiprintf_r+0x1d6>
 8007656:	9b03      	ldr	r3, [sp, #12]
 8007658:	3307      	adds	r3, #7
 800765a:	f023 0307 	bic.w	r3, r3, #7
 800765e:	3308      	adds	r3, #8
 8007660:	9303      	str	r3, [sp, #12]
 8007662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007664:	443b      	add	r3, r7
 8007666:	9309      	str	r3, [sp, #36]	@ 0x24
 8007668:	e76a      	b.n	8007540 <_vfiprintf_r+0x78>
 800766a:	fb0c 3202 	mla	r2, ip, r2, r3
 800766e:	460c      	mov	r4, r1
 8007670:	2001      	movs	r0, #1
 8007672:	e7a8      	b.n	80075c6 <_vfiprintf_r+0xfe>
 8007674:	2300      	movs	r3, #0
 8007676:	3401      	adds	r4, #1
 8007678:	9305      	str	r3, [sp, #20]
 800767a:	4619      	mov	r1, r3
 800767c:	f04f 0c0a 	mov.w	ip, #10
 8007680:	4620      	mov	r0, r4
 8007682:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007686:	3a30      	subs	r2, #48	@ 0x30
 8007688:	2a09      	cmp	r2, #9
 800768a:	d903      	bls.n	8007694 <_vfiprintf_r+0x1cc>
 800768c:	2b00      	cmp	r3, #0
 800768e:	d0c6      	beq.n	800761e <_vfiprintf_r+0x156>
 8007690:	9105      	str	r1, [sp, #20]
 8007692:	e7c4      	b.n	800761e <_vfiprintf_r+0x156>
 8007694:	fb0c 2101 	mla	r1, ip, r1, r2
 8007698:	4604      	mov	r4, r0
 800769a:	2301      	movs	r3, #1
 800769c:	e7f0      	b.n	8007680 <_vfiprintf_r+0x1b8>
 800769e:	ab03      	add	r3, sp, #12
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	462a      	mov	r2, r5
 80076a4:	4b12      	ldr	r3, [pc, #72]	@ (80076f0 <_vfiprintf_r+0x228>)
 80076a6:	a904      	add	r1, sp, #16
 80076a8:	4630      	mov	r0, r6
 80076aa:	f7fc fb6f 	bl	8003d8c <_printf_float>
 80076ae:	4607      	mov	r7, r0
 80076b0:	1c78      	adds	r0, r7, #1
 80076b2:	d1d6      	bne.n	8007662 <_vfiprintf_r+0x19a>
 80076b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076b6:	07d9      	lsls	r1, r3, #31
 80076b8:	d405      	bmi.n	80076c6 <_vfiprintf_r+0x1fe>
 80076ba:	89ab      	ldrh	r3, [r5, #12]
 80076bc:	059a      	lsls	r2, r3, #22
 80076be:	d402      	bmi.n	80076c6 <_vfiprintf_r+0x1fe>
 80076c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076c2:	f7fd fae5 	bl	8004c90 <__retarget_lock_release_recursive>
 80076c6:	89ab      	ldrh	r3, [r5, #12]
 80076c8:	065b      	lsls	r3, r3, #25
 80076ca:	f53f af1f 	bmi.w	800750c <_vfiprintf_r+0x44>
 80076ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076d0:	e71e      	b.n	8007510 <_vfiprintf_r+0x48>
 80076d2:	ab03      	add	r3, sp, #12
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	462a      	mov	r2, r5
 80076d8:	4b05      	ldr	r3, [pc, #20]	@ (80076f0 <_vfiprintf_r+0x228>)
 80076da:	a904      	add	r1, sp, #16
 80076dc:	4630      	mov	r0, r6
 80076de:	f7fc fded 	bl	80042bc <_printf_i>
 80076e2:	e7e4      	b.n	80076ae <_vfiprintf_r+0x1e6>
 80076e4:	08008f19 	.word	0x08008f19
 80076e8:	08008f23 	.word	0x08008f23
 80076ec:	08003d8d 	.word	0x08003d8d
 80076f0:	080074a3 	.word	0x080074a3
 80076f4:	08008f1f 	.word	0x08008f1f

080076f8 <__sflush_r>:
 80076f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80076fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007700:	0716      	lsls	r6, r2, #28
 8007702:	4605      	mov	r5, r0
 8007704:	460c      	mov	r4, r1
 8007706:	d454      	bmi.n	80077b2 <__sflush_r+0xba>
 8007708:	684b      	ldr	r3, [r1, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	dc02      	bgt.n	8007714 <__sflush_r+0x1c>
 800770e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007710:	2b00      	cmp	r3, #0
 8007712:	dd48      	ble.n	80077a6 <__sflush_r+0xae>
 8007714:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007716:	2e00      	cmp	r6, #0
 8007718:	d045      	beq.n	80077a6 <__sflush_r+0xae>
 800771a:	2300      	movs	r3, #0
 800771c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007720:	682f      	ldr	r7, [r5, #0]
 8007722:	6a21      	ldr	r1, [r4, #32]
 8007724:	602b      	str	r3, [r5, #0]
 8007726:	d030      	beq.n	800778a <__sflush_r+0x92>
 8007728:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800772a:	89a3      	ldrh	r3, [r4, #12]
 800772c:	0759      	lsls	r1, r3, #29
 800772e:	d505      	bpl.n	800773c <__sflush_r+0x44>
 8007730:	6863      	ldr	r3, [r4, #4]
 8007732:	1ad2      	subs	r2, r2, r3
 8007734:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007736:	b10b      	cbz	r3, 800773c <__sflush_r+0x44>
 8007738:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800773a:	1ad2      	subs	r2, r2, r3
 800773c:	2300      	movs	r3, #0
 800773e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007740:	6a21      	ldr	r1, [r4, #32]
 8007742:	4628      	mov	r0, r5
 8007744:	47b0      	blx	r6
 8007746:	1c43      	adds	r3, r0, #1
 8007748:	89a3      	ldrh	r3, [r4, #12]
 800774a:	d106      	bne.n	800775a <__sflush_r+0x62>
 800774c:	6829      	ldr	r1, [r5, #0]
 800774e:	291d      	cmp	r1, #29
 8007750:	d82b      	bhi.n	80077aa <__sflush_r+0xb2>
 8007752:	4a2a      	ldr	r2, [pc, #168]	@ (80077fc <__sflush_r+0x104>)
 8007754:	410a      	asrs	r2, r1
 8007756:	07d6      	lsls	r6, r2, #31
 8007758:	d427      	bmi.n	80077aa <__sflush_r+0xb2>
 800775a:	2200      	movs	r2, #0
 800775c:	6062      	str	r2, [r4, #4]
 800775e:	04d9      	lsls	r1, r3, #19
 8007760:	6922      	ldr	r2, [r4, #16]
 8007762:	6022      	str	r2, [r4, #0]
 8007764:	d504      	bpl.n	8007770 <__sflush_r+0x78>
 8007766:	1c42      	adds	r2, r0, #1
 8007768:	d101      	bne.n	800776e <__sflush_r+0x76>
 800776a:	682b      	ldr	r3, [r5, #0]
 800776c:	b903      	cbnz	r3, 8007770 <__sflush_r+0x78>
 800776e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007770:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007772:	602f      	str	r7, [r5, #0]
 8007774:	b1b9      	cbz	r1, 80077a6 <__sflush_r+0xae>
 8007776:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800777a:	4299      	cmp	r1, r3
 800777c:	d002      	beq.n	8007784 <__sflush_r+0x8c>
 800777e:	4628      	mov	r0, r5
 8007780:	f7fe f8ea 	bl	8005958 <_free_r>
 8007784:	2300      	movs	r3, #0
 8007786:	6363      	str	r3, [r4, #52]	@ 0x34
 8007788:	e00d      	b.n	80077a6 <__sflush_r+0xae>
 800778a:	2301      	movs	r3, #1
 800778c:	4628      	mov	r0, r5
 800778e:	47b0      	blx	r6
 8007790:	4602      	mov	r2, r0
 8007792:	1c50      	adds	r0, r2, #1
 8007794:	d1c9      	bne.n	800772a <__sflush_r+0x32>
 8007796:	682b      	ldr	r3, [r5, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d0c6      	beq.n	800772a <__sflush_r+0x32>
 800779c:	2b1d      	cmp	r3, #29
 800779e:	d001      	beq.n	80077a4 <__sflush_r+0xac>
 80077a0:	2b16      	cmp	r3, #22
 80077a2:	d11e      	bne.n	80077e2 <__sflush_r+0xea>
 80077a4:	602f      	str	r7, [r5, #0]
 80077a6:	2000      	movs	r0, #0
 80077a8:	e022      	b.n	80077f0 <__sflush_r+0xf8>
 80077aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077ae:	b21b      	sxth	r3, r3
 80077b0:	e01b      	b.n	80077ea <__sflush_r+0xf2>
 80077b2:	690f      	ldr	r7, [r1, #16]
 80077b4:	2f00      	cmp	r7, #0
 80077b6:	d0f6      	beq.n	80077a6 <__sflush_r+0xae>
 80077b8:	0793      	lsls	r3, r2, #30
 80077ba:	680e      	ldr	r6, [r1, #0]
 80077bc:	bf08      	it	eq
 80077be:	694b      	ldreq	r3, [r1, #20]
 80077c0:	600f      	str	r7, [r1, #0]
 80077c2:	bf18      	it	ne
 80077c4:	2300      	movne	r3, #0
 80077c6:	eba6 0807 	sub.w	r8, r6, r7
 80077ca:	608b      	str	r3, [r1, #8]
 80077cc:	f1b8 0f00 	cmp.w	r8, #0
 80077d0:	dde9      	ble.n	80077a6 <__sflush_r+0xae>
 80077d2:	6a21      	ldr	r1, [r4, #32]
 80077d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80077d6:	4643      	mov	r3, r8
 80077d8:	463a      	mov	r2, r7
 80077da:	4628      	mov	r0, r5
 80077dc:	47b0      	blx	r6
 80077de:	2800      	cmp	r0, #0
 80077e0:	dc08      	bgt.n	80077f4 <__sflush_r+0xfc>
 80077e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077ea:	81a3      	strh	r3, [r4, #12]
 80077ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077f4:	4407      	add	r7, r0
 80077f6:	eba8 0800 	sub.w	r8, r8, r0
 80077fa:	e7e7      	b.n	80077cc <__sflush_r+0xd4>
 80077fc:	dfbffffe 	.word	0xdfbffffe

08007800 <_fflush_r>:
 8007800:	b538      	push	{r3, r4, r5, lr}
 8007802:	690b      	ldr	r3, [r1, #16]
 8007804:	4605      	mov	r5, r0
 8007806:	460c      	mov	r4, r1
 8007808:	b913      	cbnz	r3, 8007810 <_fflush_r+0x10>
 800780a:	2500      	movs	r5, #0
 800780c:	4628      	mov	r0, r5
 800780e:	bd38      	pop	{r3, r4, r5, pc}
 8007810:	b118      	cbz	r0, 800781a <_fflush_r+0x1a>
 8007812:	6a03      	ldr	r3, [r0, #32]
 8007814:	b90b      	cbnz	r3, 800781a <_fflush_r+0x1a>
 8007816:	f7fd f911 	bl	8004a3c <__sinit>
 800781a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d0f3      	beq.n	800780a <_fflush_r+0xa>
 8007822:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007824:	07d0      	lsls	r0, r2, #31
 8007826:	d404      	bmi.n	8007832 <_fflush_r+0x32>
 8007828:	0599      	lsls	r1, r3, #22
 800782a:	d402      	bmi.n	8007832 <_fflush_r+0x32>
 800782c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800782e:	f7fd fa2e 	bl	8004c8e <__retarget_lock_acquire_recursive>
 8007832:	4628      	mov	r0, r5
 8007834:	4621      	mov	r1, r4
 8007836:	f7ff ff5f 	bl	80076f8 <__sflush_r>
 800783a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800783c:	07da      	lsls	r2, r3, #31
 800783e:	4605      	mov	r5, r0
 8007840:	d4e4      	bmi.n	800780c <_fflush_r+0xc>
 8007842:	89a3      	ldrh	r3, [r4, #12]
 8007844:	059b      	lsls	r3, r3, #22
 8007846:	d4e1      	bmi.n	800780c <_fflush_r+0xc>
 8007848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800784a:	f7fd fa21 	bl	8004c90 <__retarget_lock_release_recursive>
 800784e:	e7dd      	b.n	800780c <_fflush_r+0xc>

08007850 <__swbuf_r>:
 8007850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007852:	460e      	mov	r6, r1
 8007854:	4614      	mov	r4, r2
 8007856:	4605      	mov	r5, r0
 8007858:	b118      	cbz	r0, 8007862 <__swbuf_r+0x12>
 800785a:	6a03      	ldr	r3, [r0, #32]
 800785c:	b90b      	cbnz	r3, 8007862 <__swbuf_r+0x12>
 800785e:	f7fd f8ed 	bl	8004a3c <__sinit>
 8007862:	69a3      	ldr	r3, [r4, #24]
 8007864:	60a3      	str	r3, [r4, #8]
 8007866:	89a3      	ldrh	r3, [r4, #12]
 8007868:	071a      	lsls	r2, r3, #28
 800786a:	d501      	bpl.n	8007870 <__swbuf_r+0x20>
 800786c:	6923      	ldr	r3, [r4, #16]
 800786e:	b943      	cbnz	r3, 8007882 <__swbuf_r+0x32>
 8007870:	4621      	mov	r1, r4
 8007872:	4628      	mov	r0, r5
 8007874:	f000 f82a 	bl	80078cc <__swsetup_r>
 8007878:	b118      	cbz	r0, 8007882 <__swbuf_r+0x32>
 800787a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800787e:	4638      	mov	r0, r7
 8007880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	6922      	ldr	r2, [r4, #16]
 8007886:	1a98      	subs	r0, r3, r2
 8007888:	6963      	ldr	r3, [r4, #20]
 800788a:	b2f6      	uxtb	r6, r6
 800788c:	4283      	cmp	r3, r0
 800788e:	4637      	mov	r7, r6
 8007890:	dc05      	bgt.n	800789e <__swbuf_r+0x4e>
 8007892:	4621      	mov	r1, r4
 8007894:	4628      	mov	r0, r5
 8007896:	f7ff ffb3 	bl	8007800 <_fflush_r>
 800789a:	2800      	cmp	r0, #0
 800789c:	d1ed      	bne.n	800787a <__swbuf_r+0x2a>
 800789e:	68a3      	ldr	r3, [r4, #8]
 80078a0:	3b01      	subs	r3, #1
 80078a2:	60a3      	str	r3, [r4, #8]
 80078a4:	6823      	ldr	r3, [r4, #0]
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	6022      	str	r2, [r4, #0]
 80078aa:	701e      	strb	r6, [r3, #0]
 80078ac:	6962      	ldr	r2, [r4, #20]
 80078ae:	1c43      	adds	r3, r0, #1
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d004      	beq.n	80078be <__swbuf_r+0x6e>
 80078b4:	89a3      	ldrh	r3, [r4, #12]
 80078b6:	07db      	lsls	r3, r3, #31
 80078b8:	d5e1      	bpl.n	800787e <__swbuf_r+0x2e>
 80078ba:	2e0a      	cmp	r6, #10
 80078bc:	d1df      	bne.n	800787e <__swbuf_r+0x2e>
 80078be:	4621      	mov	r1, r4
 80078c0:	4628      	mov	r0, r5
 80078c2:	f7ff ff9d 	bl	8007800 <_fflush_r>
 80078c6:	2800      	cmp	r0, #0
 80078c8:	d0d9      	beq.n	800787e <__swbuf_r+0x2e>
 80078ca:	e7d6      	b.n	800787a <__swbuf_r+0x2a>

080078cc <__swsetup_r>:
 80078cc:	b538      	push	{r3, r4, r5, lr}
 80078ce:	4b29      	ldr	r3, [pc, #164]	@ (8007974 <__swsetup_r+0xa8>)
 80078d0:	4605      	mov	r5, r0
 80078d2:	6818      	ldr	r0, [r3, #0]
 80078d4:	460c      	mov	r4, r1
 80078d6:	b118      	cbz	r0, 80078e0 <__swsetup_r+0x14>
 80078d8:	6a03      	ldr	r3, [r0, #32]
 80078da:	b90b      	cbnz	r3, 80078e0 <__swsetup_r+0x14>
 80078dc:	f7fd f8ae 	bl	8004a3c <__sinit>
 80078e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078e4:	0719      	lsls	r1, r3, #28
 80078e6:	d422      	bmi.n	800792e <__swsetup_r+0x62>
 80078e8:	06da      	lsls	r2, r3, #27
 80078ea:	d407      	bmi.n	80078fc <__swsetup_r+0x30>
 80078ec:	2209      	movs	r2, #9
 80078ee:	602a      	str	r2, [r5, #0]
 80078f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078f4:	81a3      	strh	r3, [r4, #12]
 80078f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078fa:	e033      	b.n	8007964 <__swsetup_r+0x98>
 80078fc:	0758      	lsls	r0, r3, #29
 80078fe:	d512      	bpl.n	8007926 <__swsetup_r+0x5a>
 8007900:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007902:	b141      	cbz	r1, 8007916 <__swsetup_r+0x4a>
 8007904:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007908:	4299      	cmp	r1, r3
 800790a:	d002      	beq.n	8007912 <__swsetup_r+0x46>
 800790c:	4628      	mov	r0, r5
 800790e:	f7fe f823 	bl	8005958 <_free_r>
 8007912:	2300      	movs	r3, #0
 8007914:	6363      	str	r3, [r4, #52]	@ 0x34
 8007916:	89a3      	ldrh	r3, [r4, #12]
 8007918:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800791c:	81a3      	strh	r3, [r4, #12]
 800791e:	2300      	movs	r3, #0
 8007920:	6063      	str	r3, [r4, #4]
 8007922:	6923      	ldr	r3, [r4, #16]
 8007924:	6023      	str	r3, [r4, #0]
 8007926:	89a3      	ldrh	r3, [r4, #12]
 8007928:	f043 0308 	orr.w	r3, r3, #8
 800792c:	81a3      	strh	r3, [r4, #12]
 800792e:	6923      	ldr	r3, [r4, #16]
 8007930:	b94b      	cbnz	r3, 8007946 <__swsetup_r+0x7a>
 8007932:	89a3      	ldrh	r3, [r4, #12]
 8007934:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800793c:	d003      	beq.n	8007946 <__swsetup_r+0x7a>
 800793e:	4621      	mov	r1, r4
 8007940:	4628      	mov	r0, r5
 8007942:	f000 fc4d 	bl	80081e0 <__smakebuf_r>
 8007946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800794a:	f013 0201 	ands.w	r2, r3, #1
 800794e:	d00a      	beq.n	8007966 <__swsetup_r+0x9a>
 8007950:	2200      	movs	r2, #0
 8007952:	60a2      	str	r2, [r4, #8]
 8007954:	6962      	ldr	r2, [r4, #20]
 8007956:	4252      	negs	r2, r2
 8007958:	61a2      	str	r2, [r4, #24]
 800795a:	6922      	ldr	r2, [r4, #16]
 800795c:	b942      	cbnz	r2, 8007970 <__swsetup_r+0xa4>
 800795e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007962:	d1c5      	bne.n	80078f0 <__swsetup_r+0x24>
 8007964:	bd38      	pop	{r3, r4, r5, pc}
 8007966:	0799      	lsls	r1, r3, #30
 8007968:	bf58      	it	pl
 800796a:	6962      	ldrpl	r2, [r4, #20]
 800796c:	60a2      	str	r2, [r4, #8]
 800796e:	e7f4      	b.n	800795a <__swsetup_r+0x8e>
 8007970:	2000      	movs	r0, #0
 8007972:	e7f7      	b.n	8007964 <__swsetup_r+0x98>
 8007974:	2000009c 	.word	0x2000009c

08007978 <memmove>:
 8007978:	4288      	cmp	r0, r1
 800797a:	b510      	push	{r4, lr}
 800797c:	eb01 0402 	add.w	r4, r1, r2
 8007980:	d902      	bls.n	8007988 <memmove+0x10>
 8007982:	4284      	cmp	r4, r0
 8007984:	4623      	mov	r3, r4
 8007986:	d807      	bhi.n	8007998 <memmove+0x20>
 8007988:	1e43      	subs	r3, r0, #1
 800798a:	42a1      	cmp	r1, r4
 800798c:	d008      	beq.n	80079a0 <memmove+0x28>
 800798e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007992:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007996:	e7f8      	b.n	800798a <memmove+0x12>
 8007998:	4402      	add	r2, r0
 800799a:	4601      	mov	r1, r0
 800799c:	428a      	cmp	r2, r1
 800799e:	d100      	bne.n	80079a2 <memmove+0x2a>
 80079a0:	bd10      	pop	{r4, pc}
 80079a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079aa:	e7f7      	b.n	800799c <memmove+0x24>

080079ac <strncmp>:
 80079ac:	b510      	push	{r4, lr}
 80079ae:	b16a      	cbz	r2, 80079cc <strncmp+0x20>
 80079b0:	3901      	subs	r1, #1
 80079b2:	1884      	adds	r4, r0, r2
 80079b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80079bc:	429a      	cmp	r2, r3
 80079be:	d103      	bne.n	80079c8 <strncmp+0x1c>
 80079c0:	42a0      	cmp	r0, r4
 80079c2:	d001      	beq.n	80079c8 <strncmp+0x1c>
 80079c4:	2a00      	cmp	r2, #0
 80079c6:	d1f5      	bne.n	80079b4 <strncmp+0x8>
 80079c8:	1ad0      	subs	r0, r2, r3
 80079ca:	bd10      	pop	{r4, pc}
 80079cc:	4610      	mov	r0, r2
 80079ce:	e7fc      	b.n	80079ca <strncmp+0x1e>

080079d0 <_sbrk_r>:
 80079d0:	b538      	push	{r3, r4, r5, lr}
 80079d2:	4d06      	ldr	r5, [pc, #24]	@ (80079ec <_sbrk_r+0x1c>)
 80079d4:	2300      	movs	r3, #0
 80079d6:	4604      	mov	r4, r0
 80079d8:	4608      	mov	r0, r1
 80079da:	602b      	str	r3, [r5, #0]
 80079dc:	f7fb fcc8 	bl	8003370 <_sbrk>
 80079e0:	1c43      	adds	r3, r0, #1
 80079e2:	d102      	bne.n	80079ea <_sbrk_r+0x1a>
 80079e4:	682b      	ldr	r3, [r5, #0]
 80079e6:	b103      	cbz	r3, 80079ea <_sbrk_r+0x1a>
 80079e8:	6023      	str	r3, [r4, #0]
 80079ea:	bd38      	pop	{r3, r4, r5, pc}
 80079ec:	200041fc 	.word	0x200041fc

080079f0 <nan>:
 80079f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80079f8 <nan+0x8>
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	00000000 	.word	0x00000000
 80079fc:	7ff80000 	.word	0x7ff80000

08007a00 <__assert_func>:
 8007a00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a02:	4614      	mov	r4, r2
 8007a04:	461a      	mov	r2, r3
 8007a06:	4b09      	ldr	r3, [pc, #36]	@ (8007a2c <__assert_func+0x2c>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4605      	mov	r5, r0
 8007a0c:	68d8      	ldr	r0, [r3, #12]
 8007a0e:	b954      	cbnz	r4, 8007a26 <__assert_func+0x26>
 8007a10:	4b07      	ldr	r3, [pc, #28]	@ (8007a30 <__assert_func+0x30>)
 8007a12:	461c      	mov	r4, r3
 8007a14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a18:	9100      	str	r1, [sp, #0]
 8007a1a:	462b      	mov	r3, r5
 8007a1c:	4905      	ldr	r1, [pc, #20]	@ (8007a34 <__assert_func+0x34>)
 8007a1e:	f000 fba7 	bl	8008170 <fiprintf>
 8007a22:	f000 fc3b 	bl	800829c <abort>
 8007a26:	4b04      	ldr	r3, [pc, #16]	@ (8007a38 <__assert_func+0x38>)
 8007a28:	e7f4      	b.n	8007a14 <__assert_func+0x14>
 8007a2a:	bf00      	nop
 8007a2c:	2000009c 	.word	0x2000009c
 8007a30:	08008f6d 	.word	0x08008f6d
 8007a34:	08008f3f 	.word	0x08008f3f
 8007a38:	08008f32 	.word	0x08008f32

08007a3c <_calloc_r>:
 8007a3c:	b570      	push	{r4, r5, r6, lr}
 8007a3e:	fba1 5402 	umull	r5, r4, r1, r2
 8007a42:	b93c      	cbnz	r4, 8007a54 <_calloc_r+0x18>
 8007a44:	4629      	mov	r1, r5
 8007a46:	f7fd fffb 	bl	8005a40 <_malloc_r>
 8007a4a:	4606      	mov	r6, r0
 8007a4c:	b928      	cbnz	r0, 8007a5a <_calloc_r+0x1e>
 8007a4e:	2600      	movs	r6, #0
 8007a50:	4630      	mov	r0, r6
 8007a52:	bd70      	pop	{r4, r5, r6, pc}
 8007a54:	220c      	movs	r2, #12
 8007a56:	6002      	str	r2, [r0, #0]
 8007a58:	e7f9      	b.n	8007a4e <_calloc_r+0x12>
 8007a5a:	462a      	mov	r2, r5
 8007a5c:	4621      	mov	r1, r4
 8007a5e:	f7fd f898 	bl	8004b92 <memset>
 8007a62:	e7f5      	b.n	8007a50 <_calloc_r+0x14>

08007a64 <rshift>:
 8007a64:	6903      	ldr	r3, [r0, #16]
 8007a66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007a6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007a72:	f100 0414 	add.w	r4, r0, #20
 8007a76:	dd45      	ble.n	8007b04 <rshift+0xa0>
 8007a78:	f011 011f 	ands.w	r1, r1, #31
 8007a7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007a80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007a84:	d10c      	bne.n	8007aa0 <rshift+0x3c>
 8007a86:	f100 0710 	add.w	r7, r0, #16
 8007a8a:	4629      	mov	r1, r5
 8007a8c:	42b1      	cmp	r1, r6
 8007a8e:	d334      	bcc.n	8007afa <rshift+0x96>
 8007a90:	1a9b      	subs	r3, r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	1eea      	subs	r2, r5, #3
 8007a96:	4296      	cmp	r6, r2
 8007a98:	bf38      	it	cc
 8007a9a:	2300      	movcc	r3, #0
 8007a9c:	4423      	add	r3, r4
 8007a9e:	e015      	b.n	8007acc <rshift+0x68>
 8007aa0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007aa4:	f1c1 0820 	rsb	r8, r1, #32
 8007aa8:	40cf      	lsrs	r7, r1
 8007aaa:	f105 0e04 	add.w	lr, r5, #4
 8007aae:	46a1      	mov	r9, r4
 8007ab0:	4576      	cmp	r6, lr
 8007ab2:	46f4      	mov	ip, lr
 8007ab4:	d815      	bhi.n	8007ae2 <rshift+0x7e>
 8007ab6:	1a9a      	subs	r2, r3, r2
 8007ab8:	0092      	lsls	r2, r2, #2
 8007aba:	3a04      	subs	r2, #4
 8007abc:	3501      	adds	r5, #1
 8007abe:	42ae      	cmp	r6, r5
 8007ac0:	bf38      	it	cc
 8007ac2:	2200      	movcc	r2, #0
 8007ac4:	18a3      	adds	r3, r4, r2
 8007ac6:	50a7      	str	r7, [r4, r2]
 8007ac8:	b107      	cbz	r7, 8007acc <rshift+0x68>
 8007aca:	3304      	adds	r3, #4
 8007acc:	1b1a      	subs	r2, r3, r4
 8007ace:	42a3      	cmp	r3, r4
 8007ad0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007ad4:	bf08      	it	eq
 8007ad6:	2300      	moveq	r3, #0
 8007ad8:	6102      	str	r2, [r0, #16]
 8007ada:	bf08      	it	eq
 8007adc:	6143      	streq	r3, [r0, #20]
 8007ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ae2:	f8dc c000 	ldr.w	ip, [ip]
 8007ae6:	fa0c fc08 	lsl.w	ip, ip, r8
 8007aea:	ea4c 0707 	orr.w	r7, ip, r7
 8007aee:	f849 7b04 	str.w	r7, [r9], #4
 8007af2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007af6:	40cf      	lsrs	r7, r1
 8007af8:	e7da      	b.n	8007ab0 <rshift+0x4c>
 8007afa:	f851 cb04 	ldr.w	ip, [r1], #4
 8007afe:	f847 cf04 	str.w	ip, [r7, #4]!
 8007b02:	e7c3      	b.n	8007a8c <rshift+0x28>
 8007b04:	4623      	mov	r3, r4
 8007b06:	e7e1      	b.n	8007acc <rshift+0x68>

08007b08 <__hexdig_fun>:
 8007b08:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007b0c:	2b09      	cmp	r3, #9
 8007b0e:	d802      	bhi.n	8007b16 <__hexdig_fun+0xe>
 8007b10:	3820      	subs	r0, #32
 8007b12:	b2c0      	uxtb	r0, r0
 8007b14:	4770      	bx	lr
 8007b16:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007b1a:	2b05      	cmp	r3, #5
 8007b1c:	d801      	bhi.n	8007b22 <__hexdig_fun+0x1a>
 8007b1e:	3847      	subs	r0, #71	@ 0x47
 8007b20:	e7f7      	b.n	8007b12 <__hexdig_fun+0xa>
 8007b22:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007b26:	2b05      	cmp	r3, #5
 8007b28:	d801      	bhi.n	8007b2e <__hexdig_fun+0x26>
 8007b2a:	3827      	subs	r0, #39	@ 0x27
 8007b2c:	e7f1      	b.n	8007b12 <__hexdig_fun+0xa>
 8007b2e:	2000      	movs	r0, #0
 8007b30:	4770      	bx	lr
	...

08007b34 <__gethex>:
 8007b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b38:	b085      	sub	sp, #20
 8007b3a:	468a      	mov	sl, r1
 8007b3c:	9302      	str	r3, [sp, #8]
 8007b3e:	680b      	ldr	r3, [r1, #0]
 8007b40:	9001      	str	r0, [sp, #4]
 8007b42:	4690      	mov	r8, r2
 8007b44:	1c9c      	adds	r4, r3, #2
 8007b46:	46a1      	mov	r9, r4
 8007b48:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007b4c:	2830      	cmp	r0, #48	@ 0x30
 8007b4e:	d0fa      	beq.n	8007b46 <__gethex+0x12>
 8007b50:	eba9 0303 	sub.w	r3, r9, r3
 8007b54:	f1a3 0b02 	sub.w	fp, r3, #2
 8007b58:	f7ff ffd6 	bl	8007b08 <__hexdig_fun>
 8007b5c:	4605      	mov	r5, r0
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	d168      	bne.n	8007c34 <__gethex+0x100>
 8007b62:	49a0      	ldr	r1, [pc, #640]	@ (8007de4 <__gethex+0x2b0>)
 8007b64:	2201      	movs	r2, #1
 8007b66:	4648      	mov	r0, r9
 8007b68:	f7ff ff20 	bl	80079ac <strncmp>
 8007b6c:	4607      	mov	r7, r0
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	d167      	bne.n	8007c42 <__gethex+0x10e>
 8007b72:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007b76:	4626      	mov	r6, r4
 8007b78:	f7ff ffc6 	bl	8007b08 <__hexdig_fun>
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	d062      	beq.n	8007c46 <__gethex+0x112>
 8007b80:	4623      	mov	r3, r4
 8007b82:	7818      	ldrb	r0, [r3, #0]
 8007b84:	2830      	cmp	r0, #48	@ 0x30
 8007b86:	4699      	mov	r9, r3
 8007b88:	f103 0301 	add.w	r3, r3, #1
 8007b8c:	d0f9      	beq.n	8007b82 <__gethex+0x4e>
 8007b8e:	f7ff ffbb 	bl	8007b08 <__hexdig_fun>
 8007b92:	fab0 f580 	clz	r5, r0
 8007b96:	096d      	lsrs	r5, r5, #5
 8007b98:	f04f 0b01 	mov.w	fp, #1
 8007b9c:	464a      	mov	r2, r9
 8007b9e:	4616      	mov	r6, r2
 8007ba0:	3201      	adds	r2, #1
 8007ba2:	7830      	ldrb	r0, [r6, #0]
 8007ba4:	f7ff ffb0 	bl	8007b08 <__hexdig_fun>
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	d1f8      	bne.n	8007b9e <__gethex+0x6a>
 8007bac:	498d      	ldr	r1, [pc, #564]	@ (8007de4 <__gethex+0x2b0>)
 8007bae:	2201      	movs	r2, #1
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	f7ff fefb 	bl	80079ac <strncmp>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	d13f      	bne.n	8007c3a <__gethex+0x106>
 8007bba:	b944      	cbnz	r4, 8007bce <__gethex+0x9a>
 8007bbc:	1c74      	adds	r4, r6, #1
 8007bbe:	4622      	mov	r2, r4
 8007bc0:	4616      	mov	r6, r2
 8007bc2:	3201      	adds	r2, #1
 8007bc4:	7830      	ldrb	r0, [r6, #0]
 8007bc6:	f7ff ff9f 	bl	8007b08 <__hexdig_fun>
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	d1f8      	bne.n	8007bc0 <__gethex+0x8c>
 8007bce:	1ba4      	subs	r4, r4, r6
 8007bd0:	00a7      	lsls	r7, r4, #2
 8007bd2:	7833      	ldrb	r3, [r6, #0]
 8007bd4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007bd8:	2b50      	cmp	r3, #80	@ 0x50
 8007bda:	d13e      	bne.n	8007c5a <__gethex+0x126>
 8007bdc:	7873      	ldrb	r3, [r6, #1]
 8007bde:	2b2b      	cmp	r3, #43	@ 0x2b
 8007be0:	d033      	beq.n	8007c4a <__gethex+0x116>
 8007be2:	2b2d      	cmp	r3, #45	@ 0x2d
 8007be4:	d034      	beq.n	8007c50 <__gethex+0x11c>
 8007be6:	1c71      	adds	r1, r6, #1
 8007be8:	2400      	movs	r4, #0
 8007bea:	7808      	ldrb	r0, [r1, #0]
 8007bec:	f7ff ff8c 	bl	8007b08 <__hexdig_fun>
 8007bf0:	1e43      	subs	r3, r0, #1
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b18      	cmp	r3, #24
 8007bf6:	d830      	bhi.n	8007c5a <__gethex+0x126>
 8007bf8:	f1a0 0210 	sub.w	r2, r0, #16
 8007bfc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007c00:	f7ff ff82 	bl	8007b08 <__hexdig_fun>
 8007c04:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8007c08:	fa5f fc8c 	uxtb.w	ip, ip
 8007c0c:	f1bc 0f18 	cmp.w	ip, #24
 8007c10:	f04f 030a 	mov.w	r3, #10
 8007c14:	d91e      	bls.n	8007c54 <__gethex+0x120>
 8007c16:	b104      	cbz	r4, 8007c1a <__gethex+0xe6>
 8007c18:	4252      	negs	r2, r2
 8007c1a:	4417      	add	r7, r2
 8007c1c:	f8ca 1000 	str.w	r1, [sl]
 8007c20:	b1ed      	cbz	r5, 8007c5e <__gethex+0x12a>
 8007c22:	f1bb 0f00 	cmp.w	fp, #0
 8007c26:	bf0c      	ite	eq
 8007c28:	2506      	moveq	r5, #6
 8007c2a:	2500      	movne	r5, #0
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	b005      	add	sp, #20
 8007c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c34:	2500      	movs	r5, #0
 8007c36:	462c      	mov	r4, r5
 8007c38:	e7b0      	b.n	8007b9c <__gethex+0x68>
 8007c3a:	2c00      	cmp	r4, #0
 8007c3c:	d1c7      	bne.n	8007bce <__gethex+0x9a>
 8007c3e:	4627      	mov	r7, r4
 8007c40:	e7c7      	b.n	8007bd2 <__gethex+0x9e>
 8007c42:	464e      	mov	r6, r9
 8007c44:	462f      	mov	r7, r5
 8007c46:	2501      	movs	r5, #1
 8007c48:	e7c3      	b.n	8007bd2 <__gethex+0x9e>
 8007c4a:	2400      	movs	r4, #0
 8007c4c:	1cb1      	adds	r1, r6, #2
 8007c4e:	e7cc      	b.n	8007bea <__gethex+0xb6>
 8007c50:	2401      	movs	r4, #1
 8007c52:	e7fb      	b.n	8007c4c <__gethex+0x118>
 8007c54:	fb03 0002 	mla	r0, r3, r2, r0
 8007c58:	e7ce      	b.n	8007bf8 <__gethex+0xc4>
 8007c5a:	4631      	mov	r1, r6
 8007c5c:	e7de      	b.n	8007c1c <__gethex+0xe8>
 8007c5e:	eba6 0309 	sub.w	r3, r6, r9
 8007c62:	3b01      	subs	r3, #1
 8007c64:	4629      	mov	r1, r5
 8007c66:	2b07      	cmp	r3, #7
 8007c68:	dc0a      	bgt.n	8007c80 <__gethex+0x14c>
 8007c6a:	9801      	ldr	r0, [sp, #4]
 8007c6c:	f7fd ff74 	bl	8005b58 <_Balloc>
 8007c70:	4604      	mov	r4, r0
 8007c72:	b940      	cbnz	r0, 8007c86 <__gethex+0x152>
 8007c74:	4b5c      	ldr	r3, [pc, #368]	@ (8007de8 <__gethex+0x2b4>)
 8007c76:	4602      	mov	r2, r0
 8007c78:	21e4      	movs	r1, #228	@ 0xe4
 8007c7a:	485c      	ldr	r0, [pc, #368]	@ (8007dec <__gethex+0x2b8>)
 8007c7c:	f7ff fec0 	bl	8007a00 <__assert_func>
 8007c80:	3101      	adds	r1, #1
 8007c82:	105b      	asrs	r3, r3, #1
 8007c84:	e7ef      	b.n	8007c66 <__gethex+0x132>
 8007c86:	f100 0a14 	add.w	sl, r0, #20
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	4655      	mov	r5, sl
 8007c8e:	469b      	mov	fp, r3
 8007c90:	45b1      	cmp	r9, r6
 8007c92:	d337      	bcc.n	8007d04 <__gethex+0x1d0>
 8007c94:	f845 bb04 	str.w	fp, [r5], #4
 8007c98:	eba5 050a 	sub.w	r5, r5, sl
 8007c9c:	10ad      	asrs	r5, r5, #2
 8007c9e:	6125      	str	r5, [r4, #16]
 8007ca0:	4658      	mov	r0, fp
 8007ca2:	f7fe f84b 	bl	8005d3c <__hi0bits>
 8007ca6:	016d      	lsls	r5, r5, #5
 8007ca8:	f8d8 6000 	ldr.w	r6, [r8]
 8007cac:	1a2d      	subs	r5, r5, r0
 8007cae:	42b5      	cmp	r5, r6
 8007cb0:	dd54      	ble.n	8007d5c <__gethex+0x228>
 8007cb2:	1bad      	subs	r5, r5, r6
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f7fe fbdf 	bl	800647a <__any_on>
 8007cbc:	4681      	mov	r9, r0
 8007cbe:	b178      	cbz	r0, 8007ce0 <__gethex+0x1ac>
 8007cc0:	1e6b      	subs	r3, r5, #1
 8007cc2:	1159      	asrs	r1, r3, #5
 8007cc4:	f003 021f 	and.w	r2, r3, #31
 8007cc8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007ccc:	f04f 0901 	mov.w	r9, #1
 8007cd0:	fa09 f202 	lsl.w	r2, r9, r2
 8007cd4:	420a      	tst	r2, r1
 8007cd6:	d003      	beq.n	8007ce0 <__gethex+0x1ac>
 8007cd8:	454b      	cmp	r3, r9
 8007cda:	dc36      	bgt.n	8007d4a <__gethex+0x216>
 8007cdc:	f04f 0902 	mov.w	r9, #2
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	f7ff febe 	bl	8007a64 <rshift>
 8007ce8:	442f      	add	r7, r5
 8007cea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007cee:	42bb      	cmp	r3, r7
 8007cf0:	da42      	bge.n	8007d78 <__gethex+0x244>
 8007cf2:	9801      	ldr	r0, [sp, #4]
 8007cf4:	4621      	mov	r1, r4
 8007cf6:	f7fd ff6f 	bl	8005bd8 <_Bfree>
 8007cfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	6013      	str	r3, [r2, #0]
 8007d00:	25a3      	movs	r5, #163	@ 0xa3
 8007d02:	e793      	b.n	8007c2c <__gethex+0xf8>
 8007d04:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007d08:	2a2e      	cmp	r2, #46	@ 0x2e
 8007d0a:	d012      	beq.n	8007d32 <__gethex+0x1fe>
 8007d0c:	2b20      	cmp	r3, #32
 8007d0e:	d104      	bne.n	8007d1a <__gethex+0x1e6>
 8007d10:	f845 bb04 	str.w	fp, [r5], #4
 8007d14:	f04f 0b00 	mov.w	fp, #0
 8007d18:	465b      	mov	r3, fp
 8007d1a:	7830      	ldrb	r0, [r6, #0]
 8007d1c:	9303      	str	r3, [sp, #12]
 8007d1e:	f7ff fef3 	bl	8007b08 <__hexdig_fun>
 8007d22:	9b03      	ldr	r3, [sp, #12]
 8007d24:	f000 000f 	and.w	r0, r0, #15
 8007d28:	4098      	lsls	r0, r3
 8007d2a:	ea4b 0b00 	orr.w	fp, fp, r0
 8007d2e:	3304      	adds	r3, #4
 8007d30:	e7ae      	b.n	8007c90 <__gethex+0x15c>
 8007d32:	45b1      	cmp	r9, r6
 8007d34:	d8ea      	bhi.n	8007d0c <__gethex+0x1d8>
 8007d36:	492b      	ldr	r1, [pc, #172]	@ (8007de4 <__gethex+0x2b0>)
 8007d38:	9303      	str	r3, [sp, #12]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	f7ff fe35 	bl	80079ac <strncmp>
 8007d42:	9b03      	ldr	r3, [sp, #12]
 8007d44:	2800      	cmp	r0, #0
 8007d46:	d1e1      	bne.n	8007d0c <__gethex+0x1d8>
 8007d48:	e7a2      	b.n	8007c90 <__gethex+0x15c>
 8007d4a:	1ea9      	subs	r1, r5, #2
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	f7fe fb94 	bl	800647a <__any_on>
 8007d52:	2800      	cmp	r0, #0
 8007d54:	d0c2      	beq.n	8007cdc <__gethex+0x1a8>
 8007d56:	f04f 0903 	mov.w	r9, #3
 8007d5a:	e7c1      	b.n	8007ce0 <__gethex+0x1ac>
 8007d5c:	da09      	bge.n	8007d72 <__gethex+0x23e>
 8007d5e:	1b75      	subs	r5, r6, r5
 8007d60:	4621      	mov	r1, r4
 8007d62:	9801      	ldr	r0, [sp, #4]
 8007d64:	462a      	mov	r2, r5
 8007d66:	f7fe f94f 	bl	8006008 <__lshift>
 8007d6a:	1b7f      	subs	r7, r7, r5
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	f100 0a14 	add.w	sl, r0, #20
 8007d72:	f04f 0900 	mov.w	r9, #0
 8007d76:	e7b8      	b.n	8007cea <__gethex+0x1b6>
 8007d78:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007d7c:	42bd      	cmp	r5, r7
 8007d7e:	dd6f      	ble.n	8007e60 <__gethex+0x32c>
 8007d80:	1bed      	subs	r5, r5, r7
 8007d82:	42ae      	cmp	r6, r5
 8007d84:	dc34      	bgt.n	8007df0 <__gethex+0x2bc>
 8007d86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d022      	beq.n	8007dd4 <__gethex+0x2a0>
 8007d8e:	2b03      	cmp	r3, #3
 8007d90:	d024      	beq.n	8007ddc <__gethex+0x2a8>
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d115      	bne.n	8007dc2 <__gethex+0x28e>
 8007d96:	42ae      	cmp	r6, r5
 8007d98:	d113      	bne.n	8007dc2 <__gethex+0x28e>
 8007d9a:	2e01      	cmp	r6, #1
 8007d9c:	d10b      	bne.n	8007db6 <__gethex+0x282>
 8007d9e:	9a02      	ldr	r2, [sp, #8]
 8007da0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007da4:	6013      	str	r3, [r2, #0]
 8007da6:	2301      	movs	r3, #1
 8007da8:	6123      	str	r3, [r4, #16]
 8007daa:	f8ca 3000 	str.w	r3, [sl]
 8007dae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007db0:	2562      	movs	r5, #98	@ 0x62
 8007db2:	601c      	str	r4, [r3, #0]
 8007db4:	e73a      	b.n	8007c2c <__gethex+0xf8>
 8007db6:	1e71      	subs	r1, r6, #1
 8007db8:	4620      	mov	r0, r4
 8007dba:	f7fe fb5e 	bl	800647a <__any_on>
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	d1ed      	bne.n	8007d9e <__gethex+0x26a>
 8007dc2:	9801      	ldr	r0, [sp, #4]
 8007dc4:	4621      	mov	r1, r4
 8007dc6:	f7fd ff07 	bl	8005bd8 <_Bfree>
 8007dca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007dcc:	2300      	movs	r3, #0
 8007dce:	6013      	str	r3, [r2, #0]
 8007dd0:	2550      	movs	r5, #80	@ 0x50
 8007dd2:	e72b      	b.n	8007c2c <__gethex+0xf8>
 8007dd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1f3      	bne.n	8007dc2 <__gethex+0x28e>
 8007dda:	e7e0      	b.n	8007d9e <__gethex+0x26a>
 8007ddc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1dd      	bne.n	8007d9e <__gethex+0x26a>
 8007de2:	e7ee      	b.n	8007dc2 <__gethex+0x28e>
 8007de4:	08008dc0 	.word	0x08008dc0
 8007de8:	08008c59 	.word	0x08008c59
 8007dec:	08008f6e 	.word	0x08008f6e
 8007df0:	1e6f      	subs	r7, r5, #1
 8007df2:	f1b9 0f00 	cmp.w	r9, #0
 8007df6:	d130      	bne.n	8007e5a <__gethex+0x326>
 8007df8:	b127      	cbz	r7, 8007e04 <__gethex+0x2d0>
 8007dfa:	4639      	mov	r1, r7
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	f7fe fb3c 	bl	800647a <__any_on>
 8007e02:	4681      	mov	r9, r0
 8007e04:	117a      	asrs	r2, r7, #5
 8007e06:	2301      	movs	r3, #1
 8007e08:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007e0c:	f007 071f 	and.w	r7, r7, #31
 8007e10:	40bb      	lsls	r3, r7
 8007e12:	4213      	tst	r3, r2
 8007e14:	4629      	mov	r1, r5
 8007e16:	4620      	mov	r0, r4
 8007e18:	bf18      	it	ne
 8007e1a:	f049 0902 	orrne.w	r9, r9, #2
 8007e1e:	f7ff fe21 	bl	8007a64 <rshift>
 8007e22:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007e26:	1b76      	subs	r6, r6, r5
 8007e28:	2502      	movs	r5, #2
 8007e2a:	f1b9 0f00 	cmp.w	r9, #0
 8007e2e:	d047      	beq.n	8007ec0 <__gethex+0x38c>
 8007e30:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d015      	beq.n	8007e64 <__gethex+0x330>
 8007e38:	2b03      	cmp	r3, #3
 8007e3a:	d017      	beq.n	8007e6c <__gethex+0x338>
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d109      	bne.n	8007e54 <__gethex+0x320>
 8007e40:	f019 0f02 	tst.w	r9, #2
 8007e44:	d006      	beq.n	8007e54 <__gethex+0x320>
 8007e46:	f8da 3000 	ldr.w	r3, [sl]
 8007e4a:	ea49 0903 	orr.w	r9, r9, r3
 8007e4e:	f019 0f01 	tst.w	r9, #1
 8007e52:	d10e      	bne.n	8007e72 <__gethex+0x33e>
 8007e54:	f045 0510 	orr.w	r5, r5, #16
 8007e58:	e032      	b.n	8007ec0 <__gethex+0x38c>
 8007e5a:	f04f 0901 	mov.w	r9, #1
 8007e5e:	e7d1      	b.n	8007e04 <__gethex+0x2d0>
 8007e60:	2501      	movs	r5, #1
 8007e62:	e7e2      	b.n	8007e2a <__gethex+0x2f6>
 8007e64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e66:	f1c3 0301 	rsb	r3, r3, #1
 8007e6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d0f0      	beq.n	8007e54 <__gethex+0x320>
 8007e72:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007e76:	f104 0314 	add.w	r3, r4, #20
 8007e7a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007e7e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007e82:	f04f 0c00 	mov.w	ip, #0
 8007e86:	4618      	mov	r0, r3
 8007e88:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e8c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8007e90:	d01b      	beq.n	8007eca <__gethex+0x396>
 8007e92:	3201      	adds	r2, #1
 8007e94:	6002      	str	r2, [r0, #0]
 8007e96:	2d02      	cmp	r5, #2
 8007e98:	f104 0314 	add.w	r3, r4, #20
 8007e9c:	d13c      	bne.n	8007f18 <__gethex+0x3e4>
 8007e9e:	f8d8 2000 	ldr.w	r2, [r8]
 8007ea2:	3a01      	subs	r2, #1
 8007ea4:	42b2      	cmp	r2, r6
 8007ea6:	d109      	bne.n	8007ebc <__gethex+0x388>
 8007ea8:	1171      	asrs	r1, r6, #5
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007eb0:	f006 061f 	and.w	r6, r6, #31
 8007eb4:	fa02 f606 	lsl.w	r6, r2, r6
 8007eb8:	421e      	tst	r6, r3
 8007eba:	d13a      	bne.n	8007f32 <__gethex+0x3fe>
 8007ebc:	f045 0520 	orr.w	r5, r5, #32
 8007ec0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ec2:	601c      	str	r4, [r3, #0]
 8007ec4:	9b02      	ldr	r3, [sp, #8]
 8007ec6:	601f      	str	r7, [r3, #0]
 8007ec8:	e6b0      	b.n	8007c2c <__gethex+0xf8>
 8007eca:	4299      	cmp	r1, r3
 8007ecc:	f843 cc04 	str.w	ip, [r3, #-4]
 8007ed0:	d8d9      	bhi.n	8007e86 <__gethex+0x352>
 8007ed2:	68a3      	ldr	r3, [r4, #8]
 8007ed4:	459b      	cmp	fp, r3
 8007ed6:	db17      	blt.n	8007f08 <__gethex+0x3d4>
 8007ed8:	6861      	ldr	r1, [r4, #4]
 8007eda:	9801      	ldr	r0, [sp, #4]
 8007edc:	3101      	adds	r1, #1
 8007ede:	f7fd fe3b 	bl	8005b58 <_Balloc>
 8007ee2:	4681      	mov	r9, r0
 8007ee4:	b918      	cbnz	r0, 8007eee <__gethex+0x3ba>
 8007ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8007f50 <__gethex+0x41c>)
 8007ee8:	4602      	mov	r2, r0
 8007eea:	2184      	movs	r1, #132	@ 0x84
 8007eec:	e6c5      	b.n	8007c7a <__gethex+0x146>
 8007eee:	6922      	ldr	r2, [r4, #16]
 8007ef0:	3202      	adds	r2, #2
 8007ef2:	f104 010c 	add.w	r1, r4, #12
 8007ef6:	0092      	lsls	r2, r2, #2
 8007ef8:	300c      	adds	r0, #12
 8007efa:	f7fc feca 	bl	8004c92 <memcpy>
 8007efe:	4621      	mov	r1, r4
 8007f00:	9801      	ldr	r0, [sp, #4]
 8007f02:	f7fd fe69 	bl	8005bd8 <_Bfree>
 8007f06:	464c      	mov	r4, r9
 8007f08:	6923      	ldr	r3, [r4, #16]
 8007f0a:	1c5a      	adds	r2, r3, #1
 8007f0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f10:	6122      	str	r2, [r4, #16]
 8007f12:	2201      	movs	r2, #1
 8007f14:	615a      	str	r2, [r3, #20]
 8007f16:	e7be      	b.n	8007e96 <__gethex+0x362>
 8007f18:	6922      	ldr	r2, [r4, #16]
 8007f1a:	455a      	cmp	r2, fp
 8007f1c:	dd0b      	ble.n	8007f36 <__gethex+0x402>
 8007f1e:	2101      	movs	r1, #1
 8007f20:	4620      	mov	r0, r4
 8007f22:	f7ff fd9f 	bl	8007a64 <rshift>
 8007f26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f2a:	3701      	adds	r7, #1
 8007f2c:	42bb      	cmp	r3, r7
 8007f2e:	f6ff aee0 	blt.w	8007cf2 <__gethex+0x1be>
 8007f32:	2501      	movs	r5, #1
 8007f34:	e7c2      	b.n	8007ebc <__gethex+0x388>
 8007f36:	f016 061f 	ands.w	r6, r6, #31
 8007f3a:	d0fa      	beq.n	8007f32 <__gethex+0x3fe>
 8007f3c:	4453      	add	r3, sl
 8007f3e:	f1c6 0620 	rsb	r6, r6, #32
 8007f42:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007f46:	f7fd fef9 	bl	8005d3c <__hi0bits>
 8007f4a:	42b0      	cmp	r0, r6
 8007f4c:	dbe7      	blt.n	8007f1e <__gethex+0x3ea>
 8007f4e:	e7f0      	b.n	8007f32 <__gethex+0x3fe>
 8007f50:	08008c59 	.word	0x08008c59

08007f54 <L_shift>:
 8007f54:	f1c2 0208 	rsb	r2, r2, #8
 8007f58:	0092      	lsls	r2, r2, #2
 8007f5a:	b570      	push	{r4, r5, r6, lr}
 8007f5c:	f1c2 0620 	rsb	r6, r2, #32
 8007f60:	6843      	ldr	r3, [r0, #4]
 8007f62:	6804      	ldr	r4, [r0, #0]
 8007f64:	fa03 f506 	lsl.w	r5, r3, r6
 8007f68:	432c      	orrs	r4, r5
 8007f6a:	40d3      	lsrs	r3, r2
 8007f6c:	6004      	str	r4, [r0, #0]
 8007f6e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007f72:	4288      	cmp	r0, r1
 8007f74:	d3f4      	bcc.n	8007f60 <L_shift+0xc>
 8007f76:	bd70      	pop	{r4, r5, r6, pc}

08007f78 <__match>:
 8007f78:	b530      	push	{r4, r5, lr}
 8007f7a:	6803      	ldr	r3, [r0, #0]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f82:	b914      	cbnz	r4, 8007f8a <__match+0x12>
 8007f84:	6003      	str	r3, [r0, #0]
 8007f86:	2001      	movs	r0, #1
 8007f88:	bd30      	pop	{r4, r5, pc}
 8007f8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f8e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007f92:	2d19      	cmp	r5, #25
 8007f94:	bf98      	it	ls
 8007f96:	3220      	addls	r2, #32
 8007f98:	42a2      	cmp	r2, r4
 8007f9a:	d0f0      	beq.n	8007f7e <__match+0x6>
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	e7f3      	b.n	8007f88 <__match+0x10>

08007fa0 <__hexnan>:
 8007fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa4:	680b      	ldr	r3, [r1, #0]
 8007fa6:	6801      	ldr	r1, [r0, #0]
 8007fa8:	115e      	asrs	r6, r3, #5
 8007faa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007fae:	f013 031f 	ands.w	r3, r3, #31
 8007fb2:	b087      	sub	sp, #28
 8007fb4:	bf18      	it	ne
 8007fb6:	3604      	addne	r6, #4
 8007fb8:	2500      	movs	r5, #0
 8007fba:	1f37      	subs	r7, r6, #4
 8007fbc:	4682      	mov	sl, r0
 8007fbe:	4690      	mov	r8, r2
 8007fc0:	9301      	str	r3, [sp, #4]
 8007fc2:	f846 5c04 	str.w	r5, [r6, #-4]
 8007fc6:	46b9      	mov	r9, r7
 8007fc8:	463c      	mov	r4, r7
 8007fca:	9502      	str	r5, [sp, #8]
 8007fcc:	46ab      	mov	fp, r5
 8007fce:	784a      	ldrb	r2, [r1, #1]
 8007fd0:	1c4b      	adds	r3, r1, #1
 8007fd2:	9303      	str	r3, [sp, #12]
 8007fd4:	b342      	cbz	r2, 8008028 <__hexnan+0x88>
 8007fd6:	4610      	mov	r0, r2
 8007fd8:	9105      	str	r1, [sp, #20]
 8007fda:	9204      	str	r2, [sp, #16]
 8007fdc:	f7ff fd94 	bl	8007b08 <__hexdig_fun>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	d151      	bne.n	8008088 <__hexnan+0xe8>
 8007fe4:	9a04      	ldr	r2, [sp, #16]
 8007fe6:	9905      	ldr	r1, [sp, #20]
 8007fe8:	2a20      	cmp	r2, #32
 8007fea:	d818      	bhi.n	800801e <__hexnan+0x7e>
 8007fec:	9b02      	ldr	r3, [sp, #8]
 8007fee:	459b      	cmp	fp, r3
 8007ff0:	dd13      	ble.n	800801a <__hexnan+0x7a>
 8007ff2:	454c      	cmp	r4, r9
 8007ff4:	d206      	bcs.n	8008004 <__hexnan+0x64>
 8007ff6:	2d07      	cmp	r5, #7
 8007ff8:	dc04      	bgt.n	8008004 <__hexnan+0x64>
 8007ffa:	462a      	mov	r2, r5
 8007ffc:	4649      	mov	r1, r9
 8007ffe:	4620      	mov	r0, r4
 8008000:	f7ff ffa8 	bl	8007f54 <L_shift>
 8008004:	4544      	cmp	r4, r8
 8008006:	d952      	bls.n	80080ae <__hexnan+0x10e>
 8008008:	2300      	movs	r3, #0
 800800a:	f1a4 0904 	sub.w	r9, r4, #4
 800800e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008012:	f8cd b008 	str.w	fp, [sp, #8]
 8008016:	464c      	mov	r4, r9
 8008018:	461d      	mov	r5, r3
 800801a:	9903      	ldr	r1, [sp, #12]
 800801c:	e7d7      	b.n	8007fce <__hexnan+0x2e>
 800801e:	2a29      	cmp	r2, #41	@ 0x29
 8008020:	d157      	bne.n	80080d2 <__hexnan+0x132>
 8008022:	3102      	adds	r1, #2
 8008024:	f8ca 1000 	str.w	r1, [sl]
 8008028:	f1bb 0f00 	cmp.w	fp, #0
 800802c:	d051      	beq.n	80080d2 <__hexnan+0x132>
 800802e:	454c      	cmp	r4, r9
 8008030:	d206      	bcs.n	8008040 <__hexnan+0xa0>
 8008032:	2d07      	cmp	r5, #7
 8008034:	dc04      	bgt.n	8008040 <__hexnan+0xa0>
 8008036:	462a      	mov	r2, r5
 8008038:	4649      	mov	r1, r9
 800803a:	4620      	mov	r0, r4
 800803c:	f7ff ff8a 	bl	8007f54 <L_shift>
 8008040:	4544      	cmp	r4, r8
 8008042:	d936      	bls.n	80080b2 <__hexnan+0x112>
 8008044:	f1a8 0204 	sub.w	r2, r8, #4
 8008048:	4623      	mov	r3, r4
 800804a:	f853 1b04 	ldr.w	r1, [r3], #4
 800804e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008052:	429f      	cmp	r7, r3
 8008054:	d2f9      	bcs.n	800804a <__hexnan+0xaa>
 8008056:	1b3b      	subs	r3, r7, r4
 8008058:	f023 0303 	bic.w	r3, r3, #3
 800805c:	3304      	adds	r3, #4
 800805e:	3401      	adds	r4, #1
 8008060:	3e03      	subs	r6, #3
 8008062:	42b4      	cmp	r4, r6
 8008064:	bf88      	it	hi
 8008066:	2304      	movhi	r3, #4
 8008068:	4443      	add	r3, r8
 800806a:	2200      	movs	r2, #0
 800806c:	f843 2b04 	str.w	r2, [r3], #4
 8008070:	429f      	cmp	r7, r3
 8008072:	d2fb      	bcs.n	800806c <__hexnan+0xcc>
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	b91b      	cbnz	r3, 8008080 <__hexnan+0xe0>
 8008078:	4547      	cmp	r7, r8
 800807a:	d128      	bne.n	80080ce <__hexnan+0x12e>
 800807c:	2301      	movs	r3, #1
 800807e:	603b      	str	r3, [r7, #0]
 8008080:	2005      	movs	r0, #5
 8008082:	b007      	add	sp, #28
 8008084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008088:	3501      	adds	r5, #1
 800808a:	2d08      	cmp	r5, #8
 800808c:	f10b 0b01 	add.w	fp, fp, #1
 8008090:	dd06      	ble.n	80080a0 <__hexnan+0x100>
 8008092:	4544      	cmp	r4, r8
 8008094:	d9c1      	bls.n	800801a <__hexnan+0x7a>
 8008096:	2300      	movs	r3, #0
 8008098:	f844 3c04 	str.w	r3, [r4, #-4]
 800809c:	2501      	movs	r5, #1
 800809e:	3c04      	subs	r4, #4
 80080a0:	6822      	ldr	r2, [r4, #0]
 80080a2:	f000 000f 	and.w	r0, r0, #15
 80080a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80080aa:	6020      	str	r0, [r4, #0]
 80080ac:	e7b5      	b.n	800801a <__hexnan+0x7a>
 80080ae:	2508      	movs	r5, #8
 80080b0:	e7b3      	b.n	800801a <__hexnan+0x7a>
 80080b2:	9b01      	ldr	r3, [sp, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d0dd      	beq.n	8008074 <__hexnan+0xd4>
 80080b8:	f1c3 0320 	rsb	r3, r3, #32
 80080bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80080c0:	40da      	lsrs	r2, r3
 80080c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80080c6:	4013      	ands	r3, r2
 80080c8:	f846 3c04 	str.w	r3, [r6, #-4]
 80080cc:	e7d2      	b.n	8008074 <__hexnan+0xd4>
 80080ce:	3f04      	subs	r7, #4
 80080d0:	e7d0      	b.n	8008074 <__hexnan+0xd4>
 80080d2:	2004      	movs	r0, #4
 80080d4:	e7d5      	b.n	8008082 <__hexnan+0xe2>

080080d6 <__ascii_mbtowc>:
 80080d6:	b082      	sub	sp, #8
 80080d8:	b901      	cbnz	r1, 80080dc <__ascii_mbtowc+0x6>
 80080da:	a901      	add	r1, sp, #4
 80080dc:	b142      	cbz	r2, 80080f0 <__ascii_mbtowc+0x1a>
 80080de:	b14b      	cbz	r3, 80080f4 <__ascii_mbtowc+0x1e>
 80080e0:	7813      	ldrb	r3, [r2, #0]
 80080e2:	600b      	str	r3, [r1, #0]
 80080e4:	7812      	ldrb	r2, [r2, #0]
 80080e6:	1e10      	subs	r0, r2, #0
 80080e8:	bf18      	it	ne
 80080ea:	2001      	movne	r0, #1
 80080ec:	b002      	add	sp, #8
 80080ee:	4770      	bx	lr
 80080f0:	4610      	mov	r0, r2
 80080f2:	e7fb      	b.n	80080ec <__ascii_mbtowc+0x16>
 80080f4:	f06f 0001 	mvn.w	r0, #1
 80080f8:	e7f8      	b.n	80080ec <__ascii_mbtowc+0x16>

080080fa <_realloc_r>:
 80080fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080fe:	4680      	mov	r8, r0
 8008100:	4615      	mov	r5, r2
 8008102:	460c      	mov	r4, r1
 8008104:	b921      	cbnz	r1, 8008110 <_realloc_r+0x16>
 8008106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800810a:	4611      	mov	r1, r2
 800810c:	f7fd bc98 	b.w	8005a40 <_malloc_r>
 8008110:	b92a      	cbnz	r2, 800811e <_realloc_r+0x24>
 8008112:	f7fd fc21 	bl	8005958 <_free_r>
 8008116:	2400      	movs	r4, #0
 8008118:	4620      	mov	r0, r4
 800811a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800811e:	f000 f8c4 	bl	80082aa <_malloc_usable_size_r>
 8008122:	4285      	cmp	r5, r0
 8008124:	4606      	mov	r6, r0
 8008126:	d802      	bhi.n	800812e <_realloc_r+0x34>
 8008128:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800812c:	d8f4      	bhi.n	8008118 <_realloc_r+0x1e>
 800812e:	4629      	mov	r1, r5
 8008130:	4640      	mov	r0, r8
 8008132:	f7fd fc85 	bl	8005a40 <_malloc_r>
 8008136:	4607      	mov	r7, r0
 8008138:	2800      	cmp	r0, #0
 800813a:	d0ec      	beq.n	8008116 <_realloc_r+0x1c>
 800813c:	42b5      	cmp	r5, r6
 800813e:	462a      	mov	r2, r5
 8008140:	4621      	mov	r1, r4
 8008142:	bf28      	it	cs
 8008144:	4632      	movcs	r2, r6
 8008146:	f7fc fda4 	bl	8004c92 <memcpy>
 800814a:	4621      	mov	r1, r4
 800814c:	4640      	mov	r0, r8
 800814e:	f7fd fc03 	bl	8005958 <_free_r>
 8008152:	463c      	mov	r4, r7
 8008154:	e7e0      	b.n	8008118 <_realloc_r+0x1e>

08008156 <__ascii_wctomb>:
 8008156:	4603      	mov	r3, r0
 8008158:	4608      	mov	r0, r1
 800815a:	b141      	cbz	r1, 800816e <__ascii_wctomb+0x18>
 800815c:	2aff      	cmp	r2, #255	@ 0xff
 800815e:	d904      	bls.n	800816a <__ascii_wctomb+0x14>
 8008160:	228a      	movs	r2, #138	@ 0x8a
 8008162:	601a      	str	r2, [r3, #0]
 8008164:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008168:	4770      	bx	lr
 800816a:	700a      	strb	r2, [r1, #0]
 800816c:	2001      	movs	r0, #1
 800816e:	4770      	bx	lr

08008170 <fiprintf>:
 8008170:	b40e      	push	{r1, r2, r3}
 8008172:	b503      	push	{r0, r1, lr}
 8008174:	4601      	mov	r1, r0
 8008176:	ab03      	add	r3, sp, #12
 8008178:	4805      	ldr	r0, [pc, #20]	@ (8008190 <fiprintf+0x20>)
 800817a:	f853 2b04 	ldr.w	r2, [r3], #4
 800817e:	6800      	ldr	r0, [r0, #0]
 8008180:	9301      	str	r3, [sp, #4]
 8008182:	f7ff f9a1 	bl	80074c8 <_vfiprintf_r>
 8008186:	b002      	add	sp, #8
 8008188:	f85d eb04 	ldr.w	lr, [sp], #4
 800818c:	b003      	add	sp, #12
 800818e:	4770      	bx	lr
 8008190:	2000009c 	.word	0x2000009c

08008194 <__swhatbuf_r>:
 8008194:	b570      	push	{r4, r5, r6, lr}
 8008196:	460c      	mov	r4, r1
 8008198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800819c:	2900      	cmp	r1, #0
 800819e:	b096      	sub	sp, #88	@ 0x58
 80081a0:	4615      	mov	r5, r2
 80081a2:	461e      	mov	r6, r3
 80081a4:	da0d      	bge.n	80081c2 <__swhatbuf_r+0x2e>
 80081a6:	89a3      	ldrh	r3, [r4, #12]
 80081a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80081ac:	f04f 0100 	mov.w	r1, #0
 80081b0:	bf14      	ite	ne
 80081b2:	2340      	movne	r3, #64	@ 0x40
 80081b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80081b8:	2000      	movs	r0, #0
 80081ba:	6031      	str	r1, [r6, #0]
 80081bc:	602b      	str	r3, [r5, #0]
 80081be:	b016      	add	sp, #88	@ 0x58
 80081c0:	bd70      	pop	{r4, r5, r6, pc}
 80081c2:	466a      	mov	r2, sp
 80081c4:	f000 f848 	bl	8008258 <_fstat_r>
 80081c8:	2800      	cmp	r0, #0
 80081ca:	dbec      	blt.n	80081a6 <__swhatbuf_r+0x12>
 80081cc:	9901      	ldr	r1, [sp, #4]
 80081ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80081d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80081d6:	4259      	negs	r1, r3
 80081d8:	4159      	adcs	r1, r3
 80081da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80081de:	e7eb      	b.n	80081b8 <__swhatbuf_r+0x24>

080081e0 <__smakebuf_r>:
 80081e0:	898b      	ldrh	r3, [r1, #12]
 80081e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081e4:	079d      	lsls	r5, r3, #30
 80081e6:	4606      	mov	r6, r0
 80081e8:	460c      	mov	r4, r1
 80081ea:	d507      	bpl.n	80081fc <__smakebuf_r+0x1c>
 80081ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80081f0:	6023      	str	r3, [r4, #0]
 80081f2:	6123      	str	r3, [r4, #16]
 80081f4:	2301      	movs	r3, #1
 80081f6:	6163      	str	r3, [r4, #20]
 80081f8:	b003      	add	sp, #12
 80081fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081fc:	ab01      	add	r3, sp, #4
 80081fe:	466a      	mov	r2, sp
 8008200:	f7ff ffc8 	bl	8008194 <__swhatbuf_r>
 8008204:	9f00      	ldr	r7, [sp, #0]
 8008206:	4605      	mov	r5, r0
 8008208:	4639      	mov	r1, r7
 800820a:	4630      	mov	r0, r6
 800820c:	f7fd fc18 	bl	8005a40 <_malloc_r>
 8008210:	b948      	cbnz	r0, 8008226 <__smakebuf_r+0x46>
 8008212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008216:	059a      	lsls	r2, r3, #22
 8008218:	d4ee      	bmi.n	80081f8 <__smakebuf_r+0x18>
 800821a:	f023 0303 	bic.w	r3, r3, #3
 800821e:	f043 0302 	orr.w	r3, r3, #2
 8008222:	81a3      	strh	r3, [r4, #12]
 8008224:	e7e2      	b.n	80081ec <__smakebuf_r+0xc>
 8008226:	89a3      	ldrh	r3, [r4, #12]
 8008228:	6020      	str	r0, [r4, #0]
 800822a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800822e:	81a3      	strh	r3, [r4, #12]
 8008230:	9b01      	ldr	r3, [sp, #4]
 8008232:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008236:	b15b      	cbz	r3, 8008250 <__smakebuf_r+0x70>
 8008238:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800823c:	4630      	mov	r0, r6
 800823e:	f000 f81d 	bl	800827c <_isatty_r>
 8008242:	b128      	cbz	r0, 8008250 <__smakebuf_r+0x70>
 8008244:	89a3      	ldrh	r3, [r4, #12]
 8008246:	f023 0303 	bic.w	r3, r3, #3
 800824a:	f043 0301 	orr.w	r3, r3, #1
 800824e:	81a3      	strh	r3, [r4, #12]
 8008250:	89a3      	ldrh	r3, [r4, #12]
 8008252:	431d      	orrs	r5, r3
 8008254:	81a5      	strh	r5, [r4, #12]
 8008256:	e7cf      	b.n	80081f8 <__smakebuf_r+0x18>

08008258 <_fstat_r>:
 8008258:	b538      	push	{r3, r4, r5, lr}
 800825a:	4d07      	ldr	r5, [pc, #28]	@ (8008278 <_fstat_r+0x20>)
 800825c:	2300      	movs	r3, #0
 800825e:	4604      	mov	r4, r0
 8008260:	4608      	mov	r0, r1
 8008262:	4611      	mov	r1, r2
 8008264:	602b      	str	r3, [r5, #0]
 8008266:	f7fb f85b 	bl	8003320 <_fstat>
 800826a:	1c43      	adds	r3, r0, #1
 800826c:	d102      	bne.n	8008274 <_fstat_r+0x1c>
 800826e:	682b      	ldr	r3, [r5, #0]
 8008270:	b103      	cbz	r3, 8008274 <_fstat_r+0x1c>
 8008272:	6023      	str	r3, [r4, #0]
 8008274:	bd38      	pop	{r3, r4, r5, pc}
 8008276:	bf00      	nop
 8008278:	200041fc 	.word	0x200041fc

0800827c <_isatty_r>:
 800827c:	b538      	push	{r3, r4, r5, lr}
 800827e:	4d06      	ldr	r5, [pc, #24]	@ (8008298 <_isatty_r+0x1c>)
 8008280:	2300      	movs	r3, #0
 8008282:	4604      	mov	r4, r0
 8008284:	4608      	mov	r0, r1
 8008286:	602b      	str	r3, [r5, #0]
 8008288:	f7fb f85a 	bl	8003340 <_isatty>
 800828c:	1c43      	adds	r3, r0, #1
 800828e:	d102      	bne.n	8008296 <_isatty_r+0x1a>
 8008290:	682b      	ldr	r3, [r5, #0]
 8008292:	b103      	cbz	r3, 8008296 <_isatty_r+0x1a>
 8008294:	6023      	str	r3, [r4, #0]
 8008296:	bd38      	pop	{r3, r4, r5, pc}
 8008298:	200041fc 	.word	0x200041fc

0800829c <abort>:
 800829c:	b508      	push	{r3, lr}
 800829e:	2006      	movs	r0, #6
 80082a0:	f000 f834 	bl	800830c <raise>
 80082a4:	2001      	movs	r0, #1
 80082a6:	f7fa ffeb 	bl	8003280 <_exit>

080082aa <_malloc_usable_size_r>:
 80082aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082ae:	1f18      	subs	r0, r3, #4
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	bfbc      	itt	lt
 80082b4:	580b      	ldrlt	r3, [r1, r0]
 80082b6:	18c0      	addlt	r0, r0, r3
 80082b8:	4770      	bx	lr

080082ba <_raise_r>:
 80082ba:	291f      	cmp	r1, #31
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	4605      	mov	r5, r0
 80082c0:	460c      	mov	r4, r1
 80082c2:	d904      	bls.n	80082ce <_raise_r+0x14>
 80082c4:	2316      	movs	r3, #22
 80082c6:	6003      	str	r3, [r0, #0]
 80082c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80082cc:	bd38      	pop	{r3, r4, r5, pc}
 80082ce:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80082d0:	b112      	cbz	r2, 80082d8 <_raise_r+0x1e>
 80082d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082d6:	b94b      	cbnz	r3, 80082ec <_raise_r+0x32>
 80082d8:	4628      	mov	r0, r5
 80082da:	f000 f831 	bl	8008340 <_getpid_r>
 80082de:	4622      	mov	r2, r4
 80082e0:	4601      	mov	r1, r0
 80082e2:	4628      	mov	r0, r5
 80082e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082e8:	f000 b818 	b.w	800831c <_kill_r>
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d00a      	beq.n	8008306 <_raise_r+0x4c>
 80082f0:	1c59      	adds	r1, r3, #1
 80082f2:	d103      	bne.n	80082fc <_raise_r+0x42>
 80082f4:	2316      	movs	r3, #22
 80082f6:	6003      	str	r3, [r0, #0]
 80082f8:	2001      	movs	r0, #1
 80082fa:	e7e7      	b.n	80082cc <_raise_r+0x12>
 80082fc:	2100      	movs	r1, #0
 80082fe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008302:	4620      	mov	r0, r4
 8008304:	4798      	blx	r3
 8008306:	2000      	movs	r0, #0
 8008308:	e7e0      	b.n	80082cc <_raise_r+0x12>
	...

0800830c <raise>:
 800830c:	4b02      	ldr	r3, [pc, #8]	@ (8008318 <raise+0xc>)
 800830e:	4601      	mov	r1, r0
 8008310:	6818      	ldr	r0, [r3, #0]
 8008312:	f7ff bfd2 	b.w	80082ba <_raise_r>
 8008316:	bf00      	nop
 8008318:	2000009c 	.word	0x2000009c

0800831c <_kill_r>:
 800831c:	b538      	push	{r3, r4, r5, lr}
 800831e:	4d07      	ldr	r5, [pc, #28]	@ (800833c <_kill_r+0x20>)
 8008320:	2300      	movs	r3, #0
 8008322:	4604      	mov	r4, r0
 8008324:	4608      	mov	r0, r1
 8008326:	4611      	mov	r1, r2
 8008328:	602b      	str	r3, [r5, #0]
 800832a:	f7fa ff99 	bl	8003260 <_kill>
 800832e:	1c43      	adds	r3, r0, #1
 8008330:	d102      	bne.n	8008338 <_kill_r+0x1c>
 8008332:	682b      	ldr	r3, [r5, #0]
 8008334:	b103      	cbz	r3, 8008338 <_kill_r+0x1c>
 8008336:	6023      	str	r3, [r4, #0]
 8008338:	bd38      	pop	{r3, r4, r5, pc}
 800833a:	bf00      	nop
 800833c:	200041fc 	.word	0x200041fc

08008340 <_getpid_r>:
 8008340:	f7fa bf86 	b.w	8003250 <_getpid>

08008344 <_init>:
 8008344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008346:	bf00      	nop
 8008348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800834a:	bc08      	pop	{r3}
 800834c:	469e      	mov	lr, r3
 800834e:	4770      	bx	lr

08008350 <_fini>:
 8008350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008352:	bf00      	nop
 8008354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008356:	bc08      	pop	{r3}
 8008358:	469e      	mov	lr, r3
 800835a:	4770      	bx	lr
